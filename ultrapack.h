#pragma once
#include <cstdint>

struct UltrapackGrouping
{
    int elements_per_group;
    int bits_per_group;
};

UltrapackGrouping UltrapackGroupings[] =
{
    {  0,  0 }, {  1,  1 }, {  5,  8 }, {  1,  2 }, {  3,  7 }, {  5, 13 }, {  6, 17 }, {  1,  3 },
    { 11, 35 }, {  3, 10 }, {  2,  7 }, {  5, 18 }, {  4, 15 }, {  6, 23 }, { 11, 43 }, {  1,  4 },
    {  9, 37 }, { 11, 46 }, {  4, 17 }, {  3, 13 }, {  5, 22 }, {  2,  9 }, { 11, 50 }, {  5, 23 },
    {  3, 14 }, {  4, 19 }, {  5, 24 }, {  6, 29 }, {  8, 39 }, { 11, 54 }, {  1,  5 }, {  1,  5 },
    {  9, 46 }, {  9, 46 }, {  6, 31 }, {  4, 21 }, {  4, 21 }, {  4, 21 }, {  3, 16 }, {  3, 16 },
    {  5, 27 }, {  5, 27 }, {  7, 38 }, {  2, 11 }, {  2, 11 }, {  5, 28 }, {  5, 28 }, {  5, 28 },
    {  3, 17 }, {  3, 17 }, {  4, 23 }, {  4, 23 }, {  4, 23 }, {  5, 29 }, {  5, 29 }, {  6, 35 },
    {  6, 35 }, {  8, 47 }, {  9, 53 }, {  1,  6 }, {  1,  6 }, {  1,  6 }, {  1,  6 }, {  1,  6 },
    {  9, 55 }, {  9, 55 }, {  9, 55 }, {  9, 55 }, {  9, 55 }, {  6, 37 }, {  6, 37 }, {  4, 25 },
    {  4, 25 }, {  4, 25 }, {  4, 25 }, {  4, 25 }, {  3, 19 }, {  3, 19 }, {  3, 19 }, {  3, 19 },
    {  5, 32 }, {  5, 32 }, {  5, 32 }, {  5, 32 }, {  7, 45 }, {  7, 45 }, {  2, 13 }, {  2, 13 },
    {  2, 13 }, {  2, 13 }, {  5, 33 }, {  5, 33 }, {  5, 33 }, {  5, 33 }, {  5, 33 }, {  5, 33 },
    {  5, 33 }, {  3, 20 }, {  3, 20 }, {  3, 20 }, {  3, 20 }, {  4, 27 }, {  4, 27 }, {  4, 27 },
    {  4, 27 }, {  4, 27 }, {  4, 27 }, {  5, 34 }, {  5, 34 }, {  5, 34 }, {  5, 34 }, {  6, 41 },
    {  6, 41 }, {  6, 41 }, {  7, 48 }, {  8, 55 }, {  8, 55 }, {  1,  7 }, {  1,  7 }, {  1,  7 },
    {  1,  7 }, {  1,  7 }, {  1,  7 }, {  1,  7 }, {  1,  7 }, {  1,  7 }, {  1,  7 }, {  1,  7 },
    {  6, 43 }, {  6, 43 }, {  6, 43 }, {  6, 43 }, {  6, 43 }, {  6, 43 }, {  6, 43 }, {  6, 43 },
    {  6, 43 }, {  6, 43 }, {  6, 43 }, {  6, 43 }, {  6, 43 }, {  6, 43 }, {  6, 43 }, {  4, 29 },
    {  4, 29 }, {  4, 29 }, {  4, 29 }, {  4, 29 }, {  4, 29 }, {  4, 29 }, {  4, 29 }, {  4, 29 },
    {  3, 22 }, {  3, 22 }, {  3, 22 }, {  3, 22 }, {  3, 22 }, {  3, 22 }, {  3, 22 }, {  3, 22 },
    {  3, 22 }, {  5, 37 }, {  5, 37 }, {  5, 37 }, {  5, 37 }, {  5, 37 }, {  5, 37 }, {  5, 37 },
    {  7, 52 }, {  7, 52 }, {  7, 52 }, {  7, 52 }, {  2, 15 }, {  2, 15 }, {  2, 15 }, {  2, 15 },
    {  2, 15 }, {  2, 15 }, {  2, 15 }, {  2, 15 }, {  2, 15 }, {  5, 38 }, {  5, 38 }, {  5, 38 },
    {  5, 38 }, {  5, 38 }, {  5, 38 }, {  5, 38 }, {  5, 38 }, {  5, 38 }, {  5, 38 }, {  5, 38 },
    {  5, 38 }, {  5, 38 }, {  3, 23 }, {  3, 23 }, {  3, 23 }, {  3, 23 }, {  3, 23 }, {  3, 23 },
    {  3, 23 }, {  3, 23 }, {  3, 23 }, {  4, 31 }, {  4, 31 }, {  4, 31 }, {  4, 31 }, {  4, 31 },
    {  4, 31 }, {  4, 31 }, {  4, 31 }, {  4, 31 }, {  4, 31 }, {  4, 31 }, {  4, 31 }, {  5, 39 },
    {  5, 39 }, {  5, 39 }, {  5, 39 }, {  5, 39 }, {  5, 39 }, {  5, 39 }, {  6, 47 }, {  6, 47 },
    {  6, 47 }, {  6, 47 }, {  6, 47 }, {  6, 47 }, {  7, 55 }, {  7, 55 }, {  7, 55 }, {  1,  8 },
    {  1,  8 }, {  1,  8 }, {  1,  8 }, {  1,  8 }, {  1,  8 }, {  1,  8 }, {  1,  8 }, {  1,  8 },
    {  1,  8 }, {  1,  8 }, {  1,  8 }, {  1,  8 }, {  1,  8 }, {  1,  8 }, {  1,  8 }, {  1,  8 },
    {  1,  8 }, {  1,  8 }, {  1,  8 }, {  1,  8 }, {  1,  8 }, {  1,  8 }, {  1,  8 }, {  1,  8 },
};

int ElementsPerGroup(int num_distinct_values)
{
    return UltrapackGroupings[num_distinct_values - 1].elements_per_group;
}

int BitsPerGroup(int num_distinct_values)
{
    return UltrapackGroupings[num_distinct_values - 1].bits_per_group;
}

double BitsPerValue(int num_distinct_values)
{
    return static_cast<double>(BitsPerGroup(num_distinct_values)) / static_cast<double>(ElementsPerGroup(num_distinct_values));
}

// Pack 8 groups using 1 bytes (8 values total)
void Ultrapack_Compress2(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 2;
    group0 += (*input)[0];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 1;
    uint64_t group1 = 0;
    group1 *= 2;
    group1 += (*input)[0];

    *((uint64_t *)((*output) + 0)) |= (group1 << 1);
    *input += 1;
    uint64_t group2 = 0;
    group2 *= 2;
    group2 += (*input)[0];

    *((uint64_t *)((*output) + 0)) |= (group2 << 2);
    *input += 1;
    uint64_t group3 = 0;
    group3 *= 2;
    group3 += (*input)[0];

    *((uint64_t *)((*output) + 0)) |= (group3 << 3);
    *input += 1;
    uint64_t group4 = 0;
    group4 *= 2;
    group4 += (*input)[0];

    *((uint64_t *)((*output) + 0)) |= (group4 << 4);
    *input += 1;
    uint64_t group5 = 0;
    group5 *= 2;
    group5 += (*input)[0];

    *((uint64_t *)((*output) + 0)) |= (group5 << 5);
    *input += 1;
    uint64_t group6 = 0;
    group6 *= 2;
    group6 += (*input)[0];

    *((uint64_t *)((*output) + 0)) |= (group6 << 6);
    *input += 1;
    uint64_t group7 = 0;
    group7 *= 2;
    group7 += (*input)[0];

    *((uint64_t *)((*output) + 0)) |= (group7 << 7);
    *input += 1;
    *output += 1;
}

// Pack 1 groups using 1 bytes (5 values total)
void Ultrapack_Compress3(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 3;
    group0 += (*input)[0];

    group0 *= 3;
    group0 += (*input)[1];

    group0 *= 3;
    group0 += (*input)[2];

    group0 *= 3;
    group0 += (*input)[3];

    group0 *= 3;
    group0 += (*input)[4];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 5;
    *output += 1;
}

// Pack 4 groups using 1 bytes (4 values total)
void Ultrapack_Compress4(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 4;
    group0 += (*input)[0];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 1;
    uint64_t group1 = 0;
    group1 *= 4;
    group1 += (*input)[0];

    *((uint64_t *)((*output) + 0)) |= (group1 << 2);
    *input += 1;
    uint64_t group2 = 0;
    group2 *= 4;
    group2 += (*input)[0];

    *((uint64_t *)((*output) + 0)) |= (group2 << 4);
    *input += 1;
    uint64_t group3 = 0;
    group3 *= 4;
    group3 += (*input)[0];

    *((uint64_t *)((*output) + 0)) |= (group3 << 6);
    *input += 1;
    *output += 1;
}

// Pack 8 groups using 7 bytes (24 values total)
void Ultrapack_Compress5(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 5;
    group0 += (*input)[0];

    group0 *= 5;
    group0 += (*input)[1];

    group0 *= 5;
    group0 += (*input)[2];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 3;
    uint64_t group1 = 0;
    group1 *= 5;
    group1 += (*input)[0];

    group1 *= 5;
    group1 += (*input)[1];

    group1 *= 5;
    group1 += (*input)[2];

    *((uint64_t *)((*output) + 0)) |= (group1 << 7);
    *input += 3;
    uint64_t group2 = 0;
    group2 *= 5;
    group2 += (*input)[0];

    group2 *= 5;
    group2 += (*input)[1];

    group2 *= 5;
    group2 += (*input)[2];

    *((uint64_t *)((*output) + 1)) |= (group2 << 6);
    *input += 3;
    uint64_t group3 = 0;
    group3 *= 5;
    group3 += (*input)[0];

    group3 *= 5;
    group3 += (*input)[1];

    group3 *= 5;
    group3 += (*input)[2];

    *((uint64_t *)((*output) + 2)) |= (group3 << 5);
    *input += 3;
    uint64_t group4 = 0;
    group4 *= 5;
    group4 += (*input)[0];

    group4 *= 5;
    group4 += (*input)[1];

    group4 *= 5;
    group4 += (*input)[2];

    *((uint64_t *)((*output) + 3)) |= (group4 << 4);
    *input += 3;
    uint64_t group5 = 0;
    group5 *= 5;
    group5 += (*input)[0];

    group5 *= 5;
    group5 += (*input)[1];

    group5 *= 5;
    group5 += (*input)[2];

    *((uint64_t *)((*output) + 4)) |= (group5 << 3);
    *input += 3;
    uint64_t group6 = 0;
    group6 *= 5;
    group6 += (*input)[0];

    group6 *= 5;
    group6 += (*input)[1];

    group6 *= 5;
    group6 += (*input)[2];

    *((uint64_t *)((*output) + 5)) |= (group6 << 2);
    *input += 3;
    uint64_t group7 = 0;
    group7 *= 5;
    group7 += (*input)[0];

    group7 *= 5;
    group7 += (*input)[1];

    group7 *= 5;
    group7 += (*input)[2];

    *((uint64_t *)((*output) + 6)) |= (group7 << 1);
    *input += 3;
    *output += 7;
}

// Pack 8 groups using 13 bytes (40 values total)
void Ultrapack_Compress6(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 6;
    group0 += (*input)[0];

    group0 *= 6;
    group0 += (*input)[1];

    group0 *= 6;
    group0 += (*input)[2];

    group0 *= 6;
    group0 += (*input)[3];

    group0 *= 6;
    group0 += (*input)[4];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 5;
    uint64_t group1 = 0;
    group1 *= 6;
    group1 += (*input)[0];

    group1 *= 6;
    group1 += (*input)[1];

    group1 *= 6;
    group1 += (*input)[2];

    group1 *= 6;
    group1 += (*input)[3];

    group1 *= 6;
    group1 += (*input)[4];

    *((uint64_t *)((*output) + 1)) |= (group1 << 5);
    *input += 5;
    uint64_t group2 = 0;
    group2 *= 6;
    group2 += (*input)[0];

    group2 *= 6;
    group2 += (*input)[1];

    group2 *= 6;
    group2 += (*input)[2];

    group2 *= 6;
    group2 += (*input)[3];

    group2 *= 6;
    group2 += (*input)[4];

    *((uint64_t *)((*output) + 3)) |= (group2 << 2);
    *input += 5;
    uint64_t group3 = 0;
    group3 *= 6;
    group3 += (*input)[0];

    group3 *= 6;
    group3 += (*input)[1];

    group3 *= 6;
    group3 += (*input)[2];

    group3 *= 6;
    group3 += (*input)[3];

    group3 *= 6;
    group3 += (*input)[4];

    *((uint64_t *)((*output) + 4)) |= (group3 << 7);
    *input += 5;
    uint64_t group4 = 0;
    group4 *= 6;
    group4 += (*input)[0];

    group4 *= 6;
    group4 += (*input)[1];

    group4 *= 6;
    group4 += (*input)[2];

    group4 *= 6;
    group4 += (*input)[3];

    group4 *= 6;
    group4 += (*input)[4];

    *((uint64_t *)((*output) + 6)) |= (group4 << 4);
    *input += 5;
    uint64_t group5 = 0;
    group5 *= 6;
    group5 += (*input)[0];

    group5 *= 6;
    group5 += (*input)[1];

    group5 *= 6;
    group5 += (*input)[2];

    group5 *= 6;
    group5 += (*input)[3];

    group5 *= 6;
    group5 += (*input)[4];

    *((uint64_t *)((*output) + 8)) |= (group5 << 1);
    *input += 5;
    uint64_t group6 = 0;
    group6 *= 6;
    group6 += (*input)[0];

    group6 *= 6;
    group6 += (*input)[1];

    group6 *= 6;
    group6 += (*input)[2];

    group6 *= 6;
    group6 += (*input)[3];

    group6 *= 6;
    group6 += (*input)[4];

    *((uint64_t *)((*output) + 9)) |= (group6 << 6);
    *input += 5;
    uint64_t group7 = 0;
    group7 *= 6;
    group7 += (*input)[0];

    group7 *= 6;
    group7 += (*input)[1];

    group7 *= 6;
    group7 += (*input)[2];

    group7 *= 6;
    group7 += (*input)[3];

    group7 *= 6;
    group7 += (*input)[4];

    *((uint64_t *)((*output) + 11)) |= (group7 << 3);
    *input += 5;
    *output += 13;
}

// Pack 8 groups using 17 bytes (48 values total)
void Ultrapack_Compress7(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 7;
    group0 += (*input)[0];

    group0 *= 7;
    group0 += (*input)[1];

    group0 *= 7;
    group0 += (*input)[2];

    group0 *= 7;
    group0 += (*input)[3];

    group0 *= 7;
    group0 += (*input)[4];

    group0 *= 7;
    group0 += (*input)[5];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 6;
    uint64_t group1 = 0;
    group1 *= 7;
    group1 += (*input)[0];

    group1 *= 7;
    group1 += (*input)[1];

    group1 *= 7;
    group1 += (*input)[2];

    group1 *= 7;
    group1 += (*input)[3];

    group1 *= 7;
    group1 += (*input)[4];

    group1 *= 7;
    group1 += (*input)[5];

    *((uint64_t *)((*output) + 2)) |= (group1 << 1);
    *input += 6;
    uint64_t group2 = 0;
    group2 *= 7;
    group2 += (*input)[0];

    group2 *= 7;
    group2 += (*input)[1];

    group2 *= 7;
    group2 += (*input)[2];

    group2 *= 7;
    group2 += (*input)[3];

    group2 *= 7;
    group2 += (*input)[4];

    group2 *= 7;
    group2 += (*input)[5];

    *((uint64_t *)((*output) + 4)) |= (group2 << 2);
    *input += 6;
    uint64_t group3 = 0;
    group3 *= 7;
    group3 += (*input)[0];

    group3 *= 7;
    group3 += (*input)[1];

    group3 *= 7;
    group3 += (*input)[2];

    group3 *= 7;
    group3 += (*input)[3];

    group3 *= 7;
    group3 += (*input)[4];

    group3 *= 7;
    group3 += (*input)[5];

    *((uint64_t *)((*output) + 6)) |= (group3 << 3);
    *input += 6;
    uint64_t group4 = 0;
    group4 *= 7;
    group4 += (*input)[0];

    group4 *= 7;
    group4 += (*input)[1];

    group4 *= 7;
    group4 += (*input)[2];

    group4 *= 7;
    group4 += (*input)[3];

    group4 *= 7;
    group4 += (*input)[4];

    group4 *= 7;
    group4 += (*input)[5];

    *((uint64_t *)((*output) + 8)) |= (group4 << 4);
    *input += 6;
    uint64_t group5 = 0;
    group5 *= 7;
    group5 += (*input)[0];

    group5 *= 7;
    group5 += (*input)[1];

    group5 *= 7;
    group5 += (*input)[2];

    group5 *= 7;
    group5 += (*input)[3];

    group5 *= 7;
    group5 += (*input)[4];

    group5 *= 7;
    group5 += (*input)[5];

    *((uint64_t *)((*output) + 10)) |= (group5 << 5);
    *input += 6;
    uint64_t group6 = 0;
    group6 *= 7;
    group6 += (*input)[0];

    group6 *= 7;
    group6 += (*input)[1];

    group6 *= 7;
    group6 += (*input)[2];

    group6 *= 7;
    group6 += (*input)[3];

    group6 *= 7;
    group6 += (*input)[4];

    group6 *= 7;
    group6 += (*input)[5];

    *((uint64_t *)((*output) + 12)) |= (group6 << 6);
    *input += 6;
    uint64_t group7 = 0;
    group7 *= 7;
    group7 += (*input)[0];

    group7 *= 7;
    group7 += (*input)[1];

    group7 *= 7;
    group7 += (*input)[2];

    group7 *= 7;
    group7 += (*input)[3];

    group7 *= 7;
    group7 += (*input)[4];

    group7 *= 7;
    group7 += (*input)[5];

    *((uint64_t *)((*output) + 14)) |= (group7 << 7);
    *input += 6;
    *output += 17;
}

// Pack 8 groups using 3 bytes (8 values total)
void Ultrapack_Compress8(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 8;
    group0 += (*input)[0];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 1;
    uint64_t group1 = 0;
    group1 *= 8;
    group1 += (*input)[0];

    *((uint64_t *)((*output) + 0)) |= (group1 << 3);
    *input += 1;
    uint64_t group2 = 0;
    group2 *= 8;
    group2 += (*input)[0];

    *((uint64_t *)((*output) + 0)) |= (group2 << 6);
    *input += 1;
    uint64_t group3 = 0;
    group3 *= 8;
    group3 += (*input)[0];

    *((uint64_t *)((*output) + 1)) |= (group3 << 1);
    *input += 1;
    uint64_t group4 = 0;
    group4 *= 8;
    group4 += (*input)[0];

    *((uint64_t *)((*output) + 1)) |= (group4 << 4);
    *input += 1;
    uint64_t group5 = 0;
    group5 *= 8;
    group5 += (*input)[0];

    *((uint64_t *)((*output) + 1)) |= (group5 << 7);
    *input += 1;
    uint64_t group6 = 0;
    group6 *= 8;
    group6 += (*input)[0];

    *((uint64_t *)((*output) + 2)) |= (group6 << 2);
    *input += 1;
    uint64_t group7 = 0;
    group7 *= 8;
    group7 += (*input)[0];

    *((uint64_t *)((*output) + 2)) |= (group7 << 5);
    *input += 1;
    *output += 3;
}

// Pack 8 groups using 35 bytes (88 values total)
void Ultrapack_Compress9(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 9;
    group0 += (*input)[0];

    group0 *= 9;
    group0 += (*input)[1];

    group0 *= 9;
    group0 += (*input)[2];

    group0 *= 9;
    group0 += (*input)[3];

    group0 *= 9;
    group0 += (*input)[4];

    group0 *= 9;
    group0 += (*input)[5];

    group0 *= 9;
    group0 += (*input)[6];

    group0 *= 9;
    group0 += (*input)[7];

    group0 *= 9;
    group0 += (*input)[8];

    group0 *= 9;
    group0 += (*input)[9];

    group0 *= 9;
    group0 += (*input)[10];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 11;
    uint64_t group1 = 0;
    group1 *= 9;
    group1 += (*input)[0];

    group1 *= 9;
    group1 += (*input)[1];

    group1 *= 9;
    group1 += (*input)[2];

    group1 *= 9;
    group1 += (*input)[3];

    group1 *= 9;
    group1 += (*input)[4];

    group1 *= 9;
    group1 += (*input)[5];

    group1 *= 9;
    group1 += (*input)[6];

    group1 *= 9;
    group1 += (*input)[7];

    group1 *= 9;
    group1 += (*input)[8];

    group1 *= 9;
    group1 += (*input)[9];

    group1 *= 9;
    group1 += (*input)[10];

    *((uint64_t *)((*output) + 4)) |= (group1 << 3);
    *input += 11;
    uint64_t group2 = 0;
    group2 *= 9;
    group2 += (*input)[0];

    group2 *= 9;
    group2 += (*input)[1];

    group2 *= 9;
    group2 += (*input)[2];

    group2 *= 9;
    group2 += (*input)[3];

    group2 *= 9;
    group2 += (*input)[4];

    group2 *= 9;
    group2 += (*input)[5];

    group2 *= 9;
    group2 += (*input)[6];

    group2 *= 9;
    group2 += (*input)[7];

    group2 *= 9;
    group2 += (*input)[8];

    group2 *= 9;
    group2 += (*input)[9];

    group2 *= 9;
    group2 += (*input)[10];

    *((uint64_t *)((*output) + 8)) |= (group2 << 6);
    *input += 11;
    uint64_t group3 = 0;
    group3 *= 9;
    group3 += (*input)[0];

    group3 *= 9;
    group3 += (*input)[1];

    group3 *= 9;
    group3 += (*input)[2];

    group3 *= 9;
    group3 += (*input)[3];

    group3 *= 9;
    group3 += (*input)[4];

    group3 *= 9;
    group3 += (*input)[5];

    group3 *= 9;
    group3 += (*input)[6];

    group3 *= 9;
    group3 += (*input)[7];

    group3 *= 9;
    group3 += (*input)[8];

    group3 *= 9;
    group3 += (*input)[9];

    group3 *= 9;
    group3 += (*input)[10];

    *((uint64_t *)((*output) + 13)) |= (group3 << 1);
    *input += 11;
    uint64_t group4 = 0;
    group4 *= 9;
    group4 += (*input)[0];

    group4 *= 9;
    group4 += (*input)[1];

    group4 *= 9;
    group4 += (*input)[2];

    group4 *= 9;
    group4 += (*input)[3];

    group4 *= 9;
    group4 += (*input)[4];

    group4 *= 9;
    group4 += (*input)[5];

    group4 *= 9;
    group4 += (*input)[6];

    group4 *= 9;
    group4 += (*input)[7];

    group4 *= 9;
    group4 += (*input)[8];

    group4 *= 9;
    group4 += (*input)[9];

    group4 *= 9;
    group4 += (*input)[10];

    *((uint64_t *)((*output) + 17)) |= (group4 << 4);
    *input += 11;
    uint64_t group5 = 0;
    group5 *= 9;
    group5 += (*input)[0];

    group5 *= 9;
    group5 += (*input)[1];

    group5 *= 9;
    group5 += (*input)[2];

    group5 *= 9;
    group5 += (*input)[3];

    group5 *= 9;
    group5 += (*input)[4];

    group5 *= 9;
    group5 += (*input)[5];

    group5 *= 9;
    group5 += (*input)[6];

    group5 *= 9;
    group5 += (*input)[7];

    group5 *= 9;
    group5 += (*input)[8];

    group5 *= 9;
    group5 += (*input)[9];

    group5 *= 9;
    group5 += (*input)[10];

    *((uint64_t *)((*output) + 21)) |= (group5 << 7);
    *input += 11;
    uint64_t group6 = 0;
    group6 *= 9;
    group6 += (*input)[0];

    group6 *= 9;
    group6 += (*input)[1];

    group6 *= 9;
    group6 += (*input)[2];

    group6 *= 9;
    group6 += (*input)[3];

    group6 *= 9;
    group6 += (*input)[4];

    group6 *= 9;
    group6 += (*input)[5];

    group6 *= 9;
    group6 += (*input)[6];

    group6 *= 9;
    group6 += (*input)[7];

    group6 *= 9;
    group6 += (*input)[8];

    group6 *= 9;
    group6 += (*input)[9];

    group6 *= 9;
    group6 += (*input)[10];

    *((uint64_t *)((*output) + 26)) |= (group6 << 2);
    *input += 11;
    uint64_t group7 = 0;
    group7 *= 9;
    group7 += (*input)[0];

    group7 *= 9;
    group7 += (*input)[1];

    group7 *= 9;
    group7 += (*input)[2];

    group7 *= 9;
    group7 += (*input)[3];

    group7 *= 9;
    group7 += (*input)[4];

    group7 *= 9;
    group7 += (*input)[5];

    group7 *= 9;
    group7 += (*input)[6];

    group7 *= 9;
    group7 += (*input)[7];

    group7 *= 9;
    group7 += (*input)[8];

    group7 *= 9;
    group7 += (*input)[9];

    group7 *= 9;
    group7 += (*input)[10];

    *((uint64_t *)((*output) + 30)) |= (group7 << 5);
    *input += 11;
    *output += 35;
}

// Pack 4 groups using 5 bytes (12 values total)
void Ultrapack_Compress10(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 10;
    group0 += (*input)[0];

    group0 *= 10;
    group0 += (*input)[1];

    group0 *= 10;
    group0 += (*input)[2];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 3;
    uint64_t group1 = 0;
    group1 *= 10;
    group1 += (*input)[0];

    group1 *= 10;
    group1 += (*input)[1];

    group1 *= 10;
    group1 += (*input)[2];

    *((uint64_t *)((*output) + 1)) |= (group1 << 2);
    *input += 3;
    uint64_t group2 = 0;
    group2 *= 10;
    group2 += (*input)[0];

    group2 *= 10;
    group2 += (*input)[1];

    group2 *= 10;
    group2 += (*input)[2];

    *((uint64_t *)((*output) + 2)) |= (group2 << 4);
    *input += 3;
    uint64_t group3 = 0;
    group3 *= 10;
    group3 += (*input)[0];

    group3 *= 10;
    group3 += (*input)[1];

    group3 *= 10;
    group3 += (*input)[2];

    *((uint64_t *)((*output) + 3)) |= (group3 << 6);
    *input += 3;
    *output += 5;
}

// Pack 8 groups using 7 bytes (16 values total)
void Ultrapack_Compress11(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 11;
    group0 += (*input)[0];

    group0 *= 11;
    group0 += (*input)[1];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 2;
    uint64_t group1 = 0;
    group1 *= 11;
    group1 += (*input)[0];

    group1 *= 11;
    group1 += (*input)[1];

    *((uint64_t *)((*output) + 0)) |= (group1 << 7);
    *input += 2;
    uint64_t group2 = 0;
    group2 *= 11;
    group2 += (*input)[0];

    group2 *= 11;
    group2 += (*input)[1];

    *((uint64_t *)((*output) + 1)) |= (group2 << 6);
    *input += 2;
    uint64_t group3 = 0;
    group3 *= 11;
    group3 += (*input)[0];

    group3 *= 11;
    group3 += (*input)[1];

    *((uint64_t *)((*output) + 2)) |= (group3 << 5);
    *input += 2;
    uint64_t group4 = 0;
    group4 *= 11;
    group4 += (*input)[0];

    group4 *= 11;
    group4 += (*input)[1];

    *((uint64_t *)((*output) + 3)) |= (group4 << 4);
    *input += 2;
    uint64_t group5 = 0;
    group5 *= 11;
    group5 += (*input)[0];

    group5 *= 11;
    group5 += (*input)[1];

    *((uint64_t *)((*output) + 4)) |= (group5 << 3);
    *input += 2;
    uint64_t group6 = 0;
    group6 *= 11;
    group6 += (*input)[0];

    group6 *= 11;
    group6 += (*input)[1];

    *((uint64_t *)((*output) + 5)) |= (group6 << 2);
    *input += 2;
    uint64_t group7 = 0;
    group7 *= 11;
    group7 += (*input)[0];

    group7 *= 11;
    group7 += (*input)[1];

    *((uint64_t *)((*output) + 6)) |= (group7 << 1);
    *input += 2;
    *output += 7;
}

// Pack 4 groups using 9 bytes (20 values total)
void Ultrapack_Compress12(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 12;
    group0 += (*input)[0];

    group0 *= 12;
    group0 += (*input)[1];

    group0 *= 12;
    group0 += (*input)[2];

    group0 *= 12;
    group0 += (*input)[3];

    group0 *= 12;
    group0 += (*input)[4];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 5;
    uint64_t group1 = 0;
    group1 *= 12;
    group1 += (*input)[0];

    group1 *= 12;
    group1 += (*input)[1];

    group1 *= 12;
    group1 += (*input)[2];

    group1 *= 12;
    group1 += (*input)[3];

    group1 *= 12;
    group1 += (*input)[4];

    *((uint64_t *)((*output) + 2)) |= (group1 << 2);
    *input += 5;
    uint64_t group2 = 0;
    group2 *= 12;
    group2 += (*input)[0];

    group2 *= 12;
    group2 += (*input)[1];

    group2 *= 12;
    group2 += (*input)[2];

    group2 *= 12;
    group2 += (*input)[3];

    group2 *= 12;
    group2 += (*input)[4];

    *((uint64_t *)((*output) + 4)) |= (group2 << 4);
    *input += 5;
    uint64_t group3 = 0;
    group3 *= 12;
    group3 += (*input)[0];

    group3 *= 12;
    group3 += (*input)[1];

    group3 *= 12;
    group3 += (*input)[2];

    group3 *= 12;
    group3 += (*input)[3];

    group3 *= 12;
    group3 += (*input)[4];

    *((uint64_t *)((*output) + 6)) |= (group3 << 6);
    *input += 5;
    *output += 9;
}

// Pack 8 groups using 15 bytes (32 values total)
void Ultrapack_Compress13(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 13;
    group0 += (*input)[0];

    group0 *= 13;
    group0 += (*input)[1];

    group0 *= 13;
    group0 += (*input)[2];

    group0 *= 13;
    group0 += (*input)[3];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 4;
    uint64_t group1 = 0;
    group1 *= 13;
    group1 += (*input)[0];

    group1 *= 13;
    group1 += (*input)[1];

    group1 *= 13;
    group1 += (*input)[2];

    group1 *= 13;
    group1 += (*input)[3];

    *((uint64_t *)((*output) + 1)) |= (group1 << 7);
    *input += 4;
    uint64_t group2 = 0;
    group2 *= 13;
    group2 += (*input)[0];

    group2 *= 13;
    group2 += (*input)[1];

    group2 *= 13;
    group2 += (*input)[2];

    group2 *= 13;
    group2 += (*input)[3];

    *((uint64_t *)((*output) + 3)) |= (group2 << 6);
    *input += 4;
    uint64_t group3 = 0;
    group3 *= 13;
    group3 += (*input)[0];

    group3 *= 13;
    group3 += (*input)[1];

    group3 *= 13;
    group3 += (*input)[2];

    group3 *= 13;
    group3 += (*input)[3];

    *((uint64_t *)((*output) + 5)) |= (group3 << 5);
    *input += 4;
    uint64_t group4 = 0;
    group4 *= 13;
    group4 += (*input)[0];

    group4 *= 13;
    group4 += (*input)[1];

    group4 *= 13;
    group4 += (*input)[2];

    group4 *= 13;
    group4 += (*input)[3];

    *((uint64_t *)((*output) + 7)) |= (group4 << 4);
    *input += 4;
    uint64_t group5 = 0;
    group5 *= 13;
    group5 += (*input)[0];

    group5 *= 13;
    group5 += (*input)[1];

    group5 *= 13;
    group5 += (*input)[2];

    group5 *= 13;
    group5 += (*input)[3];

    *((uint64_t *)((*output) + 9)) |= (group5 << 3);
    *input += 4;
    uint64_t group6 = 0;
    group6 *= 13;
    group6 += (*input)[0];

    group6 *= 13;
    group6 += (*input)[1];

    group6 *= 13;
    group6 += (*input)[2];

    group6 *= 13;
    group6 += (*input)[3];

    *((uint64_t *)((*output) + 11)) |= (group6 << 2);
    *input += 4;
    uint64_t group7 = 0;
    group7 *= 13;
    group7 += (*input)[0];

    group7 *= 13;
    group7 += (*input)[1];

    group7 *= 13;
    group7 += (*input)[2];

    group7 *= 13;
    group7 += (*input)[3];

    *((uint64_t *)((*output) + 13)) |= (group7 << 1);
    *input += 4;
    *output += 15;
}

// Pack 8 groups using 23 bytes (48 values total)
void Ultrapack_Compress14(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 14;
    group0 += (*input)[0];

    group0 *= 14;
    group0 += (*input)[1];

    group0 *= 14;
    group0 += (*input)[2];

    group0 *= 14;
    group0 += (*input)[3];

    group0 *= 14;
    group0 += (*input)[4];

    group0 *= 14;
    group0 += (*input)[5];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 6;
    uint64_t group1 = 0;
    group1 *= 14;
    group1 += (*input)[0];

    group1 *= 14;
    group1 += (*input)[1];

    group1 *= 14;
    group1 += (*input)[2];

    group1 *= 14;
    group1 += (*input)[3];

    group1 *= 14;
    group1 += (*input)[4];

    group1 *= 14;
    group1 += (*input)[5];

    *((uint64_t *)((*output) + 2)) |= (group1 << 7);
    *input += 6;
    uint64_t group2 = 0;
    group2 *= 14;
    group2 += (*input)[0];

    group2 *= 14;
    group2 += (*input)[1];

    group2 *= 14;
    group2 += (*input)[2];

    group2 *= 14;
    group2 += (*input)[3];

    group2 *= 14;
    group2 += (*input)[4];

    group2 *= 14;
    group2 += (*input)[5];

    *((uint64_t *)((*output) + 5)) |= (group2 << 6);
    *input += 6;
    uint64_t group3 = 0;
    group3 *= 14;
    group3 += (*input)[0];

    group3 *= 14;
    group3 += (*input)[1];

    group3 *= 14;
    group3 += (*input)[2];

    group3 *= 14;
    group3 += (*input)[3];

    group3 *= 14;
    group3 += (*input)[4];

    group3 *= 14;
    group3 += (*input)[5];

    *((uint64_t *)((*output) + 8)) |= (group3 << 5);
    *input += 6;
    uint64_t group4 = 0;
    group4 *= 14;
    group4 += (*input)[0];

    group4 *= 14;
    group4 += (*input)[1];

    group4 *= 14;
    group4 += (*input)[2];

    group4 *= 14;
    group4 += (*input)[3];

    group4 *= 14;
    group4 += (*input)[4];

    group4 *= 14;
    group4 += (*input)[5];

    *((uint64_t *)((*output) + 11)) |= (group4 << 4);
    *input += 6;
    uint64_t group5 = 0;
    group5 *= 14;
    group5 += (*input)[0];

    group5 *= 14;
    group5 += (*input)[1];

    group5 *= 14;
    group5 += (*input)[2];

    group5 *= 14;
    group5 += (*input)[3];

    group5 *= 14;
    group5 += (*input)[4];

    group5 *= 14;
    group5 += (*input)[5];

    *((uint64_t *)((*output) + 14)) |= (group5 << 3);
    *input += 6;
    uint64_t group6 = 0;
    group6 *= 14;
    group6 += (*input)[0];

    group6 *= 14;
    group6 += (*input)[1];

    group6 *= 14;
    group6 += (*input)[2];

    group6 *= 14;
    group6 += (*input)[3];

    group6 *= 14;
    group6 += (*input)[4];

    group6 *= 14;
    group6 += (*input)[5];

    *((uint64_t *)((*output) + 17)) |= (group6 << 2);
    *input += 6;
    uint64_t group7 = 0;
    group7 *= 14;
    group7 += (*input)[0];

    group7 *= 14;
    group7 += (*input)[1];

    group7 *= 14;
    group7 += (*input)[2];

    group7 *= 14;
    group7 += (*input)[3];

    group7 *= 14;
    group7 += (*input)[4];

    group7 *= 14;
    group7 += (*input)[5];

    *((uint64_t *)((*output) + 20)) |= (group7 << 1);
    *input += 6;
    *output += 23;
}

// Pack 8 groups using 43 bytes (88 values total)
void Ultrapack_Compress15(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 15;
    group0 += (*input)[0];

    group0 *= 15;
    group0 += (*input)[1];

    group0 *= 15;
    group0 += (*input)[2];

    group0 *= 15;
    group0 += (*input)[3];

    group0 *= 15;
    group0 += (*input)[4];

    group0 *= 15;
    group0 += (*input)[5];

    group0 *= 15;
    group0 += (*input)[6];

    group0 *= 15;
    group0 += (*input)[7];

    group0 *= 15;
    group0 += (*input)[8];

    group0 *= 15;
    group0 += (*input)[9];

    group0 *= 15;
    group0 += (*input)[10];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 11;
    uint64_t group1 = 0;
    group1 *= 15;
    group1 += (*input)[0];

    group1 *= 15;
    group1 += (*input)[1];

    group1 *= 15;
    group1 += (*input)[2];

    group1 *= 15;
    group1 += (*input)[3];

    group1 *= 15;
    group1 += (*input)[4];

    group1 *= 15;
    group1 += (*input)[5];

    group1 *= 15;
    group1 += (*input)[6];

    group1 *= 15;
    group1 += (*input)[7];

    group1 *= 15;
    group1 += (*input)[8];

    group1 *= 15;
    group1 += (*input)[9];

    group1 *= 15;
    group1 += (*input)[10];

    *((uint64_t *)((*output) + 5)) |= (group1 << 3);
    *input += 11;
    uint64_t group2 = 0;
    group2 *= 15;
    group2 += (*input)[0];

    group2 *= 15;
    group2 += (*input)[1];

    group2 *= 15;
    group2 += (*input)[2];

    group2 *= 15;
    group2 += (*input)[3];

    group2 *= 15;
    group2 += (*input)[4];

    group2 *= 15;
    group2 += (*input)[5];

    group2 *= 15;
    group2 += (*input)[6];

    group2 *= 15;
    group2 += (*input)[7];

    group2 *= 15;
    group2 += (*input)[8];

    group2 *= 15;
    group2 += (*input)[9];

    group2 *= 15;
    group2 += (*input)[10];

    *((uint64_t *)((*output) + 10)) |= (group2 << 6);
    *input += 11;
    uint64_t group3 = 0;
    group3 *= 15;
    group3 += (*input)[0];

    group3 *= 15;
    group3 += (*input)[1];

    group3 *= 15;
    group3 += (*input)[2];

    group3 *= 15;
    group3 += (*input)[3];

    group3 *= 15;
    group3 += (*input)[4];

    group3 *= 15;
    group3 += (*input)[5];

    group3 *= 15;
    group3 += (*input)[6];

    group3 *= 15;
    group3 += (*input)[7];

    group3 *= 15;
    group3 += (*input)[8];

    group3 *= 15;
    group3 += (*input)[9];

    group3 *= 15;
    group3 += (*input)[10];

    *((uint64_t *)((*output) + 16)) |= (group3 << 1);
    *input += 11;
    uint64_t group4 = 0;
    group4 *= 15;
    group4 += (*input)[0];

    group4 *= 15;
    group4 += (*input)[1];

    group4 *= 15;
    group4 += (*input)[2];

    group4 *= 15;
    group4 += (*input)[3];

    group4 *= 15;
    group4 += (*input)[4];

    group4 *= 15;
    group4 += (*input)[5];

    group4 *= 15;
    group4 += (*input)[6];

    group4 *= 15;
    group4 += (*input)[7];

    group4 *= 15;
    group4 += (*input)[8];

    group4 *= 15;
    group4 += (*input)[9];

    group4 *= 15;
    group4 += (*input)[10];

    *((uint64_t *)((*output) + 21)) |= (group4 << 4);
    *input += 11;
    uint64_t group5 = 0;
    group5 *= 15;
    group5 += (*input)[0];

    group5 *= 15;
    group5 += (*input)[1];

    group5 *= 15;
    group5 += (*input)[2];

    group5 *= 15;
    group5 += (*input)[3];

    group5 *= 15;
    group5 += (*input)[4];

    group5 *= 15;
    group5 += (*input)[5];

    group5 *= 15;
    group5 += (*input)[6];

    group5 *= 15;
    group5 += (*input)[7];

    group5 *= 15;
    group5 += (*input)[8];

    group5 *= 15;
    group5 += (*input)[9];

    group5 *= 15;
    group5 += (*input)[10];

    *((uint64_t *)((*output) + 26)) |= (group5 << 7);
    *input += 11;
    uint64_t group6 = 0;
    group6 *= 15;
    group6 += (*input)[0];

    group6 *= 15;
    group6 += (*input)[1];

    group6 *= 15;
    group6 += (*input)[2];

    group6 *= 15;
    group6 += (*input)[3];

    group6 *= 15;
    group6 += (*input)[4];

    group6 *= 15;
    group6 += (*input)[5];

    group6 *= 15;
    group6 += (*input)[6];

    group6 *= 15;
    group6 += (*input)[7];

    group6 *= 15;
    group6 += (*input)[8];

    group6 *= 15;
    group6 += (*input)[9];

    group6 *= 15;
    group6 += (*input)[10];

    *((uint64_t *)((*output) + 32)) |= (group6 << 2);
    *input += 11;
    uint64_t group7 = 0;
    group7 *= 15;
    group7 += (*input)[0];

    group7 *= 15;
    group7 += (*input)[1];

    group7 *= 15;
    group7 += (*input)[2];

    group7 *= 15;
    group7 += (*input)[3];

    group7 *= 15;
    group7 += (*input)[4];

    group7 *= 15;
    group7 += (*input)[5];

    group7 *= 15;
    group7 += (*input)[6];

    group7 *= 15;
    group7 += (*input)[7];

    group7 *= 15;
    group7 += (*input)[8];

    group7 *= 15;
    group7 += (*input)[9];

    group7 *= 15;
    group7 += (*input)[10];

    *((uint64_t *)((*output) + 37)) |= (group7 << 5);
    *input += 11;
    *output += 43;
}

// Pack 2 groups using 1 bytes (2 values total)
void Ultrapack_Compress16(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 16;
    group0 += (*input)[0];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 1;
    uint64_t group1 = 0;
    group1 *= 16;
    group1 += (*input)[0];

    *((uint64_t *)((*output) + 0)) |= (group1 << 4);
    *input += 1;
    *output += 1;
}

// Pack 8 groups using 37 bytes (72 values total)
void Ultrapack_Compress17(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 17;
    group0 += (*input)[0];

    group0 *= 17;
    group0 += (*input)[1];

    group0 *= 17;
    group0 += (*input)[2];

    group0 *= 17;
    group0 += (*input)[3];

    group0 *= 17;
    group0 += (*input)[4];

    group0 *= 17;
    group0 += (*input)[5];

    group0 *= 17;
    group0 += (*input)[6];

    group0 *= 17;
    group0 += (*input)[7];

    group0 *= 17;
    group0 += (*input)[8];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 9;
    uint64_t group1 = 0;
    group1 *= 17;
    group1 += (*input)[0];

    group1 *= 17;
    group1 += (*input)[1];

    group1 *= 17;
    group1 += (*input)[2];

    group1 *= 17;
    group1 += (*input)[3];

    group1 *= 17;
    group1 += (*input)[4];

    group1 *= 17;
    group1 += (*input)[5];

    group1 *= 17;
    group1 += (*input)[6];

    group1 *= 17;
    group1 += (*input)[7];

    group1 *= 17;
    group1 += (*input)[8];

    *((uint64_t *)((*output) + 4)) |= (group1 << 5);
    *input += 9;
    uint64_t group2 = 0;
    group2 *= 17;
    group2 += (*input)[0];

    group2 *= 17;
    group2 += (*input)[1];

    group2 *= 17;
    group2 += (*input)[2];

    group2 *= 17;
    group2 += (*input)[3];

    group2 *= 17;
    group2 += (*input)[4];

    group2 *= 17;
    group2 += (*input)[5];

    group2 *= 17;
    group2 += (*input)[6];

    group2 *= 17;
    group2 += (*input)[7];

    group2 *= 17;
    group2 += (*input)[8];

    *((uint64_t *)((*output) + 9)) |= (group2 << 2);
    *input += 9;
    uint64_t group3 = 0;
    group3 *= 17;
    group3 += (*input)[0];

    group3 *= 17;
    group3 += (*input)[1];

    group3 *= 17;
    group3 += (*input)[2];

    group3 *= 17;
    group3 += (*input)[3];

    group3 *= 17;
    group3 += (*input)[4];

    group3 *= 17;
    group3 += (*input)[5];

    group3 *= 17;
    group3 += (*input)[6];

    group3 *= 17;
    group3 += (*input)[7];

    group3 *= 17;
    group3 += (*input)[8];

    *((uint64_t *)((*output) + 13)) |= (group3 << 7);
    *input += 9;
    uint64_t group4 = 0;
    group4 *= 17;
    group4 += (*input)[0];

    group4 *= 17;
    group4 += (*input)[1];

    group4 *= 17;
    group4 += (*input)[2];

    group4 *= 17;
    group4 += (*input)[3];

    group4 *= 17;
    group4 += (*input)[4];

    group4 *= 17;
    group4 += (*input)[5];

    group4 *= 17;
    group4 += (*input)[6];

    group4 *= 17;
    group4 += (*input)[7];

    group4 *= 17;
    group4 += (*input)[8];

    *((uint64_t *)((*output) + 18)) |= (group4 << 4);
    *input += 9;
    uint64_t group5 = 0;
    group5 *= 17;
    group5 += (*input)[0];

    group5 *= 17;
    group5 += (*input)[1];

    group5 *= 17;
    group5 += (*input)[2];

    group5 *= 17;
    group5 += (*input)[3];

    group5 *= 17;
    group5 += (*input)[4];

    group5 *= 17;
    group5 += (*input)[5];

    group5 *= 17;
    group5 += (*input)[6];

    group5 *= 17;
    group5 += (*input)[7];

    group5 *= 17;
    group5 += (*input)[8];

    *((uint64_t *)((*output) + 23)) |= (group5 << 1);
    *input += 9;
    uint64_t group6 = 0;
    group6 *= 17;
    group6 += (*input)[0];

    group6 *= 17;
    group6 += (*input)[1];

    group6 *= 17;
    group6 += (*input)[2];

    group6 *= 17;
    group6 += (*input)[3];

    group6 *= 17;
    group6 += (*input)[4];

    group6 *= 17;
    group6 += (*input)[5];

    group6 *= 17;
    group6 += (*input)[6];

    group6 *= 17;
    group6 += (*input)[7];

    group6 *= 17;
    group6 += (*input)[8];

    *((uint64_t *)((*output) + 27)) |= (group6 << 6);
    *input += 9;
    uint64_t group7 = 0;
    group7 *= 17;
    group7 += (*input)[0];

    group7 *= 17;
    group7 += (*input)[1];

    group7 *= 17;
    group7 += (*input)[2];

    group7 *= 17;
    group7 += (*input)[3];

    group7 *= 17;
    group7 += (*input)[4];

    group7 *= 17;
    group7 += (*input)[5];

    group7 *= 17;
    group7 += (*input)[6];

    group7 *= 17;
    group7 += (*input)[7];

    group7 *= 17;
    group7 += (*input)[8];

    *((uint64_t *)((*output) + 32)) |= (group7 << 3);
    *input += 9;
    *output += 37;
}

// Pack 4 groups using 23 bytes (44 values total)
void Ultrapack_Compress18(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 18;
    group0 += (*input)[0];

    group0 *= 18;
    group0 += (*input)[1];

    group0 *= 18;
    group0 += (*input)[2];

    group0 *= 18;
    group0 += (*input)[3];

    group0 *= 18;
    group0 += (*input)[4];

    group0 *= 18;
    group0 += (*input)[5];

    group0 *= 18;
    group0 += (*input)[6];

    group0 *= 18;
    group0 += (*input)[7];

    group0 *= 18;
    group0 += (*input)[8];

    group0 *= 18;
    group0 += (*input)[9];

    group0 *= 18;
    group0 += (*input)[10];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 11;
    uint64_t group1 = 0;
    group1 *= 18;
    group1 += (*input)[0];

    group1 *= 18;
    group1 += (*input)[1];

    group1 *= 18;
    group1 += (*input)[2];

    group1 *= 18;
    group1 += (*input)[3];

    group1 *= 18;
    group1 += (*input)[4];

    group1 *= 18;
    group1 += (*input)[5];

    group1 *= 18;
    group1 += (*input)[6];

    group1 *= 18;
    group1 += (*input)[7];

    group1 *= 18;
    group1 += (*input)[8];

    group1 *= 18;
    group1 += (*input)[9];

    group1 *= 18;
    group1 += (*input)[10];

    *((uint64_t *)((*output) + 5)) |= (group1 << 6);
    *input += 11;
    uint64_t group2 = 0;
    group2 *= 18;
    group2 += (*input)[0];

    group2 *= 18;
    group2 += (*input)[1];

    group2 *= 18;
    group2 += (*input)[2];

    group2 *= 18;
    group2 += (*input)[3];

    group2 *= 18;
    group2 += (*input)[4];

    group2 *= 18;
    group2 += (*input)[5];

    group2 *= 18;
    group2 += (*input)[6];

    group2 *= 18;
    group2 += (*input)[7];

    group2 *= 18;
    group2 += (*input)[8];

    group2 *= 18;
    group2 += (*input)[9];

    group2 *= 18;
    group2 += (*input)[10];

    *((uint64_t *)((*output) + 11)) |= (group2 << 4);
    *input += 11;
    uint64_t group3 = 0;
    group3 *= 18;
    group3 += (*input)[0];

    group3 *= 18;
    group3 += (*input)[1];

    group3 *= 18;
    group3 += (*input)[2];

    group3 *= 18;
    group3 += (*input)[3];

    group3 *= 18;
    group3 += (*input)[4];

    group3 *= 18;
    group3 += (*input)[5];

    group3 *= 18;
    group3 += (*input)[6];

    group3 *= 18;
    group3 += (*input)[7];

    group3 *= 18;
    group3 += (*input)[8];

    group3 *= 18;
    group3 += (*input)[9];

    group3 *= 18;
    group3 += (*input)[10];

    *((uint64_t *)((*output) + 17)) |= (group3 << 2);
    *input += 11;
    *output += 23;
}

// Pack 8 groups using 17 bytes (32 values total)
void Ultrapack_Compress19(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 19;
    group0 += (*input)[0];

    group0 *= 19;
    group0 += (*input)[1];

    group0 *= 19;
    group0 += (*input)[2];

    group0 *= 19;
    group0 += (*input)[3];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 4;
    uint64_t group1 = 0;
    group1 *= 19;
    group1 += (*input)[0];

    group1 *= 19;
    group1 += (*input)[1];

    group1 *= 19;
    group1 += (*input)[2];

    group1 *= 19;
    group1 += (*input)[3];

    *((uint64_t *)((*output) + 2)) |= (group1 << 1);
    *input += 4;
    uint64_t group2 = 0;
    group2 *= 19;
    group2 += (*input)[0];

    group2 *= 19;
    group2 += (*input)[1];

    group2 *= 19;
    group2 += (*input)[2];

    group2 *= 19;
    group2 += (*input)[3];

    *((uint64_t *)((*output) + 4)) |= (group2 << 2);
    *input += 4;
    uint64_t group3 = 0;
    group3 *= 19;
    group3 += (*input)[0];

    group3 *= 19;
    group3 += (*input)[1];

    group3 *= 19;
    group3 += (*input)[2];

    group3 *= 19;
    group3 += (*input)[3];

    *((uint64_t *)((*output) + 6)) |= (group3 << 3);
    *input += 4;
    uint64_t group4 = 0;
    group4 *= 19;
    group4 += (*input)[0];

    group4 *= 19;
    group4 += (*input)[1];

    group4 *= 19;
    group4 += (*input)[2];

    group4 *= 19;
    group4 += (*input)[3];

    *((uint64_t *)((*output) + 8)) |= (group4 << 4);
    *input += 4;
    uint64_t group5 = 0;
    group5 *= 19;
    group5 += (*input)[0];

    group5 *= 19;
    group5 += (*input)[1];

    group5 *= 19;
    group5 += (*input)[2];

    group5 *= 19;
    group5 += (*input)[3];

    *((uint64_t *)((*output) + 10)) |= (group5 << 5);
    *input += 4;
    uint64_t group6 = 0;
    group6 *= 19;
    group6 += (*input)[0];

    group6 *= 19;
    group6 += (*input)[1];

    group6 *= 19;
    group6 += (*input)[2];

    group6 *= 19;
    group6 += (*input)[3];

    *((uint64_t *)((*output) + 12)) |= (group6 << 6);
    *input += 4;
    uint64_t group7 = 0;
    group7 *= 19;
    group7 += (*input)[0];

    group7 *= 19;
    group7 += (*input)[1];

    group7 *= 19;
    group7 += (*input)[2];

    group7 *= 19;
    group7 += (*input)[3];

    *((uint64_t *)((*output) + 14)) |= (group7 << 7);
    *input += 4;
    *output += 17;
}

// Pack 8 groups using 13 bytes (24 values total)
void Ultrapack_Compress20(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 20;
    group0 += (*input)[0];

    group0 *= 20;
    group0 += (*input)[1];

    group0 *= 20;
    group0 += (*input)[2];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 3;
    uint64_t group1 = 0;
    group1 *= 20;
    group1 += (*input)[0];

    group1 *= 20;
    group1 += (*input)[1];

    group1 *= 20;
    group1 += (*input)[2];

    *((uint64_t *)((*output) + 1)) |= (group1 << 5);
    *input += 3;
    uint64_t group2 = 0;
    group2 *= 20;
    group2 += (*input)[0];

    group2 *= 20;
    group2 += (*input)[1];

    group2 *= 20;
    group2 += (*input)[2];

    *((uint64_t *)((*output) + 3)) |= (group2 << 2);
    *input += 3;
    uint64_t group3 = 0;
    group3 *= 20;
    group3 += (*input)[0];

    group3 *= 20;
    group3 += (*input)[1];

    group3 *= 20;
    group3 += (*input)[2];

    *((uint64_t *)((*output) + 4)) |= (group3 << 7);
    *input += 3;
    uint64_t group4 = 0;
    group4 *= 20;
    group4 += (*input)[0];

    group4 *= 20;
    group4 += (*input)[1];

    group4 *= 20;
    group4 += (*input)[2];

    *((uint64_t *)((*output) + 6)) |= (group4 << 4);
    *input += 3;
    uint64_t group5 = 0;
    group5 *= 20;
    group5 += (*input)[0];

    group5 *= 20;
    group5 += (*input)[1];

    group5 *= 20;
    group5 += (*input)[2];

    *((uint64_t *)((*output) + 8)) |= (group5 << 1);
    *input += 3;
    uint64_t group6 = 0;
    group6 *= 20;
    group6 += (*input)[0];

    group6 *= 20;
    group6 += (*input)[1];

    group6 *= 20;
    group6 += (*input)[2];

    *((uint64_t *)((*output) + 9)) |= (group6 << 6);
    *input += 3;
    uint64_t group7 = 0;
    group7 *= 20;
    group7 += (*input)[0];

    group7 *= 20;
    group7 += (*input)[1];

    group7 *= 20;
    group7 += (*input)[2];

    *((uint64_t *)((*output) + 11)) |= (group7 << 3);
    *input += 3;
    *output += 13;
}

// Pack 4 groups using 11 bytes (20 values total)
void Ultrapack_Compress21(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 21;
    group0 += (*input)[0];

    group0 *= 21;
    group0 += (*input)[1];

    group0 *= 21;
    group0 += (*input)[2];

    group0 *= 21;
    group0 += (*input)[3];

    group0 *= 21;
    group0 += (*input)[4];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 5;
    uint64_t group1 = 0;
    group1 *= 21;
    group1 += (*input)[0];

    group1 *= 21;
    group1 += (*input)[1];

    group1 *= 21;
    group1 += (*input)[2];

    group1 *= 21;
    group1 += (*input)[3];

    group1 *= 21;
    group1 += (*input)[4];

    *((uint64_t *)((*output) + 2)) |= (group1 << 6);
    *input += 5;
    uint64_t group2 = 0;
    group2 *= 21;
    group2 += (*input)[0];

    group2 *= 21;
    group2 += (*input)[1];

    group2 *= 21;
    group2 += (*input)[2];

    group2 *= 21;
    group2 += (*input)[3];

    group2 *= 21;
    group2 += (*input)[4];

    *((uint64_t *)((*output) + 5)) |= (group2 << 4);
    *input += 5;
    uint64_t group3 = 0;
    group3 *= 21;
    group3 += (*input)[0];

    group3 *= 21;
    group3 += (*input)[1];

    group3 *= 21;
    group3 += (*input)[2];

    group3 *= 21;
    group3 += (*input)[3];

    group3 *= 21;
    group3 += (*input)[4];

    *((uint64_t *)((*output) + 8)) |= (group3 << 2);
    *input += 5;
    *output += 11;
}

// Pack 8 groups using 9 bytes (16 values total)
void Ultrapack_Compress22(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 22;
    group0 += (*input)[0];

    group0 *= 22;
    group0 += (*input)[1];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 2;
    uint64_t group1 = 0;
    group1 *= 22;
    group1 += (*input)[0];

    group1 *= 22;
    group1 += (*input)[1];

    *((uint64_t *)((*output) + 1)) |= (group1 << 1);
    *input += 2;
    uint64_t group2 = 0;
    group2 *= 22;
    group2 += (*input)[0];

    group2 *= 22;
    group2 += (*input)[1];

    *((uint64_t *)((*output) + 2)) |= (group2 << 2);
    *input += 2;
    uint64_t group3 = 0;
    group3 *= 22;
    group3 += (*input)[0];

    group3 *= 22;
    group3 += (*input)[1];

    *((uint64_t *)((*output) + 3)) |= (group3 << 3);
    *input += 2;
    uint64_t group4 = 0;
    group4 *= 22;
    group4 += (*input)[0];

    group4 *= 22;
    group4 += (*input)[1];

    *((uint64_t *)((*output) + 4)) |= (group4 << 4);
    *input += 2;
    uint64_t group5 = 0;
    group5 *= 22;
    group5 += (*input)[0];

    group5 *= 22;
    group5 += (*input)[1];

    *((uint64_t *)((*output) + 5)) |= (group5 << 5);
    *input += 2;
    uint64_t group6 = 0;
    group6 *= 22;
    group6 += (*input)[0];

    group6 *= 22;
    group6 += (*input)[1];

    *((uint64_t *)((*output) + 6)) |= (group6 << 6);
    *input += 2;
    uint64_t group7 = 0;
    group7 *= 22;
    group7 += (*input)[0];

    group7 *= 22;
    group7 += (*input)[1];

    *((uint64_t *)((*output) + 7)) |= (group7 << 7);
    *input += 2;
    *output += 9;
}

// Pack 4 groups using 25 bytes (44 values total)
void Ultrapack_Compress23(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 23;
    group0 += (*input)[0];

    group0 *= 23;
    group0 += (*input)[1];

    group0 *= 23;
    group0 += (*input)[2];

    group0 *= 23;
    group0 += (*input)[3];

    group0 *= 23;
    group0 += (*input)[4];

    group0 *= 23;
    group0 += (*input)[5];

    group0 *= 23;
    group0 += (*input)[6];

    group0 *= 23;
    group0 += (*input)[7];

    group0 *= 23;
    group0 += (*input)[8];

    group0 *= 23;
    group0 += (*input)[9];

    group0 *= 23;
    group0 += (*input)[10];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 11;
    uint64_t group1 = 0;
    group1 *= 23;
    group1 += (*input)[0];

    group1 *= 23;
    group1 += (*input)[1];

    group1 *= 23;
    group1 += (*input)[2];

    group1 *= 23;
    group1 += (*input)[3];

    group1 *= 23;
    group1 += (*input)[4];

    group1 *= 23;
    group1 += (*input)[5];

    group1 *= 23;
    group1 += (*input)[6];

    group1 *= 23;
    group1 += (*input)[7];

    group1 *= 23;
    group1 += (*input)[8];

    group1 *= 23;
    group1 += (*input)[9];

    group1 *= 23;
    group1 += (*input)[10];

    *((uint64_t *)((*output) + 6)) |= (group1 << 2);
    *input += 11;
    uint64_t group2 = 0;
    group2 *= 23;
    group2 += (*input)[0];

    group2 *= 23;
    group2 += (*input)[1];

    group2 *= 23;
    group2 += (*input)[2];

    group2 *= 23;
    group2 += (*input)[3];

    group2 *= 23;
    group2 += (*input)[4];

    group2 *= 23;
    group2 += (*input)[5];

    group2 *= 23;
    group2 += (*input)[6];

    group2 *= 23;
    group2 += (*input)[7];

    group2 *= 23;
    group2 += (*input)[8];

    group2 *= 23;
    group2 += (*input)[9];

    group2 *= 23;
    group2 += (*input)[10];

    *((uint64_t *)((*output) + 12)) |= (group2 << 4);
    *input += 11;
    uint64_t group3 = 0;
    group3 *= 23;
    group3 += (*input)[0];

    group3 *= 23;
    group3 += (*input)[1];

    group3 *= 23;
    group3 += (*input)[2];

    group3 *= 23;
    group3 += (*input)[3];

    group3 *= 23;
    group3 += (*input)[4];

    group3 *= 23;
    group3 += (*input)[5];

    group3 *= 23;
    group3 += (*input)[6];

    group3 *= 23;
    group3 += (*input)[7];

    group3 *= 23;
    group3 += (*input)[8];

    group3 *= 23;
    group3 += (*input)[9];

    group3 *= 23;
    group3 += (*input)[10];

    *((uint64_t *)((*output) + 18)) |= (group3 << 6);
    *input += 11;
    *output += 25;
}

// Pack 8 groups using 23 bytes (40 values total)
void Ultrapack_Compress24(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 24;
    group0 += (*input)[0];

    group0 *= 24;
    group0 += (*input)[1];

    group0 *= 24;
    group0 += (*input)[2];

    group0 *= 24;
    group0 += (*input)[3];

    group0 *= 24;
    group0 += (*input)[4];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 5;
    uint64_t group1 = 0;
    group1 *= 24;
    group1 += (*input)[0];

    group1 *= 24;
    group1 += (*input)[1];

    group1 *= 24;
    group1 += (*input)[2];

    group1 *= 24;
    group1 += (*input)[3];

    group1 *= 24;
    group1 += (*input)[4];

    *((uint64_t *)((*output) + 2)) |= (group1 << 7);
    *input += 5;
    uint64_t group2 = 0;
    group2 *= 24;
    group2 += (*input)[0];

    group2 *= 24;
    group2 += (*input)[1];

    group2 *= 24;
    group2 += (*input)[2];

    group2 *= 24;
    group2 += (*input)[3];

    group2 *= 24;
    group2 += (*input)[4];

    *((uint64_t *)((*output) + 5)) |= (group2 << 6);
    *input += 5;
    uint64_t group3 = 0;
    group3 *= 24;
    group3 += (*input)[0];

    group3 *= 24;
    group3 += (*input)[1];

    group3 *= 24;
    group3 += (*input)[2];

    group3 *= 24;
    group3 += (*input)[3];

    group3 *= 24;
    group3 += (*input)[4];

    *((uint64_t *)((*output) + 8)) |= (group3 << 5);
    *input += 5;
    uint64_t group4 = 0;
    group4 *= 24;
    group4 += (*input)[0];

    group4 *= 24;
    group4 += (*input)[1];

    group4 *= 24;
    group4 += (*input)[2];

    group4 *= 24;
    group4 += (*input)[3];

    group4 *= 24;
    group4 += (*input)[4];

    *((uint64_t *)((*output) + 11)) |= (group4 << 4);
    *input += 5;
    uint64_t group5 = 0;
    group5 *= 24;
    group5 += (*input)[0];

    group5 *= 24;
    group5 += (*input)[1];

    group5 *= 24;
    group5 += (*input)[2];

    group5 *= 24;
    group5 += (*input)[3];

    group5 *= 24;
    group5 += (*input)[4];

    *((uint64_t *)((*output) + 14)) |= (group5 << 3);
    *input += 5;
    uint64_t group6 = 0;
    group6 *= 24;
    group6 += (*input)[0];

    group6 *= 24;
    group6 += (*input)[1];

    group6 *= 24;
    group6 += (*input)[2];

    group6 *= 24;
    group6 += (*input)[3];

    group6 *= 24;
    group6 += (*input)[4];

    *((uint64_t *)((*output) + 17)) |= (group6 << 2);
    *input += 5;
    uint64_t group7 = 0;
    group7 *= 24;
    group7 += (*input)[0];

    group7 *= 24;
    group7 += (*input)[1];

    group7 *= 24;
    group7 += (*input)[2];

    group7 *= 24;
    group7 += (*input)[3];

    group7 *= 24;
    group7 += (*input)[4];

    *((uint64_t *)((*output) + 20)) |= (group7 << 1);
    *input += 5;
    *output += 23;
}

// Pack 4 groups using 7 bytes (12 values total)
void Ultrapack_Compress25(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 25;
    group0 += (*input)[0];

    group0 *= 25;
    group0 += (*input)[1];

    group0 *= 25;
    group0 += (*input)[2];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 3;
    uint64_t group1 = 0;
    group1 *= 25;
    group1 += (*input)[0];

    group1 *= 25;
    group1 += (*input)[1];

    group1 *= 25;
    group1 += (*input)[2];

    *((uint64_t *)((*output) + 1)) |= (group1 << 6);
    *input += 3;
    uint64_t group2 = 0;
    group2 *= 25;
    group2 += (*input)[0];

    group2 *= 25;
    group2 += (*input)[1];

    group2 *= 25;
    group2 += (*input)[2];

    *((uint64_t *)((*output) + 3)) |= (group2 << 4);
    *input += 3;
    uint64_t group3 = 0;
    group3 *= 25;
    group3 += (*input)[0];

    group3 *= 25;
    group3 += (*input)[1];

    group3 *= 25;
    group3 += (*input)[2];

    *((uint64_t *)((*output) + 5)) |= (group3 << 2);
    *input += 3;
    *output += 7;
}

// Pack 8 groups using 19 bytes (32 values total)
void Ultrapack_Compress26(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 26;
    group0 += (*input)[0];

    group0 *= 26;
    group0 += (*input)[1];

    group0 *= 26;
    group0 += (*input)[2];

    group0 *= 26;
    group0 += (*input)[3];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 4;
    uint64_t group1 = 0;
    group1 *= 26;
    group1 += (*input)[0];

    group1 *= 26;
    group1 += (*input)[1];

    group1 *= 26;
    group1 += (*input)[2];

    group1 *= 26;
    group1 += (*input)[3];

    *((uint64_t *)((*output) + 2)) |= (group1 << 3);
    *input += 4;
    uint64_t group2 = 0;
    group2 *= 26;
    group2 += (*input)[0];

    group2 *= 26;
    group2 += (*input)[1];

    group2 *= 26;
    group2 += (*input)[2];

    group2 *= 26;
    group2 += (*input)[3];

    *((uint64_t *)((*output) + 4)) |= (group2 << 6);
    *input += 4;
    uint64_t group3 = 0;
    group3 *= 26;
    group3 += (*input)[0];

    group3 *= 26;
    group3 += (*input)[1];

    group3 *= 26;
    group3 += (*input)[2];

    group3 *= 26;
    group3 += (*input)[3];

    *((uint64_t *)((*output) + 7)) |= (group3 << 1);
    *input += 4;
    uint64_t group4 = 0;
    group4 *= 26;
    group4 += (*input)[0];

    group4 *= 26;
    group4 += (*input)[1];

    group4 *= 26;
    group4 += (*input)[2];

    group4 *= 26;
    group4 += (*input)[3];

    *((uint64_t *)((*output) + 9)) |= (group4 << 4);
    *input += 4;
    uint64_t group5 = 0;
    group5 *= 26;
    group5 += (*input)[0];

    group5 *= 26;
    group5 += (*input)[1];

    group5 *= 26;
    group5 += (*input)[2];

    group5 *= 26;
    group5 += (*input)[3];

    *((uint64_t *)((*output) + 11)) |= (group5 << 7);
    *input += 4;
    uint64_t group6 = 0;
    group6 *= 26;
    group6 += (*input)[0];

    group6 *= 26;
    group6 += (*input)[1];

    group6 *= 26;
    group6 += (*input)[2];

    group6 *= 26;
    group6 += (*input)[3];

    *((uint64_t *)((*output) + 14)) |= (group6 << 2);
    *input += 4;
    uint64_t group7 = 0;
    group7 *= 26;
    group7 += (*input)[0];

    group7 *= 26;
    group7 += (*input)[1];

    group7 *= 26;
    group7 += (*input)[2];

    group7 *= 26;
    group7 += (*input)[3];

    *((uint64_t *)((*output) + 16)) |= (group7 << 5);
    *input += 4;
    *output += 19;
}

// Pack 1 groups using 3 bytes (5 values total)
void Ultrapack_Compress27(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 27;
    group0 += (*input)[0];

    group0 *= 27;
    group0 += (*input)[1];

    group0 *= 27;
    group0 += (*input)[2];

    group0 *= 27;
    group0 += (*input)[3];

    group0 *= 27;
    group0 += (*input)[4];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 5;
    *output += 3;
}

// Pack 8 groups using 29 bytes (48 values total)
void Ultrapack_Compress28(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 28;
    group0 += (*input)[0];

    group0 *= 28;
    group0 += (*input)[1];

    group0 *= 28;
    group0 += (*input)[2];

    group0 *= 28;
    group0 += (*input)[3];

    group0 *= 28;
    group0 += (*input)[4];

    group0 *= 28;
    group0 += (*input)[5];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 6;
    uint64_t group1 = 0;
    group1 *= 28;
    group1 += (*input)[0];

    group1 *= 28;
    group1 += (*input)[1];

    group1 *= 28;
    group1 += (*input)[2];

    group1 *= 28;
    group1 += (*input)[3];

    group1 *= 28;
    group1 += (*input)[4];

    group1 *= 28;
    group1 += (*input)[5];

    *((uint64_t *)((*output) + 3)) |= (group1 << 5);
    *input += 6;
    uint64_t group2 = 0;
    group2 *= 28;
    group2 += (*input)[0];

    group2 *= 28;
    group2 += (*input)[1];

    group2 *= 28;
    group2 += (*input)[2];

    group2 *= 28;
    group2 += (*input)[3];

    group2 *= 28;
    group2 += (*input)[4];

    group2 *= 28;
    group2 += (*input)[5];

    *((uint64_t *)((*output) + 7)) |= (group2 << 2);
    *input += 6;
    uint64_t group3 = 0;
    group3 *= 28;
    group3 += (*input)[0];

    group3 *= 28;
    group3 += (*input)[1];

    group3 *= 28;
    group3 += (*input)[2];

    group3 *= 28;
    group3 += (*input)[3];

    group3 *= 28;
    group3 += (*input)[4];

    group3 *= 28;
    group3 += (*input)[5];

    *((uint64_t *)((*output) + 10)) |= (group3 << 7);
    *input += 6;
    uint64_t group4 = 0;
    group4 *= 28;
    group4 += (*input)[0];

    group4 *= 28;
    group4 += (*input)[1];

    group4 *= 28;
    group4 += (*input)[2];

    group4 *= 28;
    group4 += (*input)[3];

    group4 *= 28;
    group4 += (*input)[4];

    group4 *= 28;
    group4 += (*input)[5];

    *((uint64_t *)((*output) + 14)) |= (group4 << 4);
    *input += 6;
    uint64_t group5 = 0;
    group5 *= 28;
    group5 += (*input)[0];

    group5 *= 28;
    group5 += (*input)[1];

    group5 *= 28;
    group5 += (*input)[2];

    group5 *= 28;
    group5 += (*input)[3];

    group5 *= 28;
    group5 += (*input)[4];

    group5 *= 28;
    group5 += (*input)[5];

    *((uint64_t *)((*output) + 18)) |= (group5 << 1);
    *input += 6;
    uint64_t group6 = 0;
    group6 *= 28;
    group6 += (*input)[0];

    group6 *= 28;
    group6 += (*input)[1];

    group6 *= 28;
    group6 += (*input)[2];

    group6 *= 28;
    group6 += (*input)[3];

    group6 *= 28;
    group6 += (*input)[4];

    group6 *= 28;
    group6 += (*input)[5];

    *((uint64_t *)((*output) + 21)) |= (group6 << 6);
    *input += 6;
    uint64_t group7 = 0;
    group7 *= 28;
    group7 += (*input)[0];

    group7 *= 28;
    group7 += (*input)[1];

    group7 *= 28;
    group7 += (*input)[2];

    group7 *= 28;
    group7 += (*input)[3];

    group7 *= 28;
    group7 += (*input)[4];

    group7 *= 28;
    group7 += (*input)[5];

    *((uint64_t *)((*output) + 25)) |= (group7 << 3);
    *input += 6;
    *output += 29;
}

// Pack 8 groups using 39 bytes (64 values total)
void Ultrapack_Compress29(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 29;
    group0 += (*input)[0];

    group0 *= 29;
    group0 += (*input)[1];

    group0 *= 29;
    group0 += (*input)[2];

    group0 *= 29;
    group0 += (*input)[3];

    group0 *= 29;
    group0 += (*input)[4];

    group0 *= 29;
    group0 += (*input)[5];

    group0 *= 29;
    group0 += (*input)[6];

    group0 *= 29;
    group0 += (*input)[7];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 8;
    uint64_t group1 = 0;
    group1 *= 29;
    group1 += (*input)[0];

    group1 *= 29;
    group1 += (*input)[1];

    group1 *= 29;
    group1 += (*input)[2];

    group1 *= 29;
    group1 += (*input)[3];

    group1 *= 29;
    group1 += (*input)[4];

    group1 *= 29;
    group1 += (*input)[5];

    group1 *= 29;
    group1 += (*input)[6];

    group1 *= 29;
    group1 += (*input)[7];

    *((uint64_t *)((*output) + 4)) |= (group1 << 7);
    *input += 8;
    uint64_t group2 = 0;
    group2 *= 29;
    group2 += (*input)[0];

    group2 *= 29;
    group2 += (*input)[1];

    group2 *= 29;
    group2 += (*input)[2];

    group2 *= 29;
    group2 += (*input)[3];

    group2 *= 29;
    group2 += (*input)[4];

    group2 *= 29;
    group2 += (*input)[5];

    group2 *= 29;
    group2 += (*input)[6];

    group2 *= 29;
    group2 += (*input)[7];

    *((uint64_t *)((*output) + 9)) |= (group2 << 6);
    *input += 8;
    uint64_t group3 = 0;
    group3 *= 29;
    group3 += (*input)[0];

    group3 *= 29;
    group3 += (*input)[1];

    group3 *= 29;
    group3 += (*input)[2];

    group3 *= 29;
    group3 += (*input)[3];

    group3 *= 29;
    group3 += (*input)[4];

    group3 *= 29;
    group3 += (*input)[5];

    group3 *= 29;
    group3 += (*input)[6];

    group3 *= 29;
    group3 += (*input)[7];

    *((uint64_t *)((*output) + 14)) |= (group3 << 5);
    *input += 8;
    uint64_t group4 = 0;
    group4 *= 29;
    group4 += (*input)[0];

    group4 *= 29;
    group4 += (*input)[1];

    group4 *= 29;
    group4 += (*input)[2];

    group4 *= 29;
    group4 += (*input)[3];

    group4 *= 29;
    group4 += (*input)[4];

    group4 *= 29;
    group4 += (*input)[5];

    group4 *= 29;
    group4 += (*input)[6];

    group4 *= 29;
    group4 += (*input)[7];

    *((uint64_t *)((*output) + 19)) |= (group4 << 4);
    *input += 8;
    uint64_t group5 = 0;
    group5 *= 29;
    group5 += (*input)[0];

    group5 *= 29;
    group5 += (*input)[1];

    group5 *= 29;
    group5 += (*input)[2];

    group5 *= 29;
    group5 += (*input)[3];

    group5 *= 29;
    group5 += (*input)[4];

    group5 *= 29;
    group5 += (*input)[5];

    group5 *= 29;
    group5 += (*input)[6];

    group5 *= 29;
    group5 += (*input)[7];

    *((uint64_t *)((*output) + 24)) |= (group5 << 3);
    *input += 8;
    uint64_t group6 = 0;
    group6 *= 29;
    group6 += (*input)[0];

    group6 *= 29;
    group6 += (*input)[1];

    group6 *= 29;
    group6 += (*input)[2];

    group6 *= 29;
    group6 += (*input)[3];

    group6 *= 29;
    group6 += (*input)[4];

    group6 *= 29;
    group6 += (*input)[5];

    group6 *= 29;
    group6 += (*input)[6];

    group6 *= 29;
    group6 += (*input)[7];

    *((uint64_t *)((*output) + 29)) |= (group6 << 2);
    *input += 8;
    uint64_t group7 = 0;
    group7 *= 29;
    group7 += (*input)[0];

    group7 *= 29;
    group7 += (*input)[1];

    group7 *= 29;
    group7 += (*input)[2];

    group7 *= 29;
    group7 += (*input)[3];

    group7 *= 29;
    group7 += (*input)[4];

    group7 *= 29;
    group7 += (*input)[5];

    group7 *= 29;
    group7 += (*input)[6];

    group7 *= 29;
    group7 += (*input)[7];

    *((uint64_t *)((*output) + 34)) |= (group7 << 1);
    *input += 8;
    *output += 39;
}

// Pack 4 groups using 27 bytes (44 values total)
void Ultrapack_Compress30(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 30;
    group0 += (*input)[0];

    group0 *= 30;
    group0 += (*input)[1];

    group0 *= 30;
    group0 += (*input)[2];

    group0 *= 30;
    group0 += (*input)[3];

    group0 *= 30;
    group0 += (*input)[4];

    group0 *= 30;
    group0 += (*input)[5];

    group0 *= 30;
    group0 += (*input)[6];

    group0 *= 30;
    group0 += (*input)[7];

    group0 *= 30;
    group0 += (*input)[8];

    group0 *= 30;
    group0 += (*input)[9];

    group0 *= 30;
    group0 += (*input)[10];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 11;
    uint64_t group1 = 0;
    group1 *= 30;
    group1 += (*input)[0];

    group1 *= 30;
    group1 += (*input)[1];

    group1 *= 30;
    group1 += (*input)[2];

    group1 *= 30;
    group1 += (*input)[3];

    group1 *= 30;
    group1 += (*input)[4];

    group1 *= 30;
    group1 += (*input)[5];

    group1 *= 30;
    group1 += (*input)[6];

    group1 *= 30;
    group1 += (*input)[7];

    group1 *= 30;
    group1 += (*input)[8];

    group1 *= 30;
    group1 += (*input)[9];

    group1 *= 30;
    group1 += (*input)[10];

    *((uint64_t *)((*output) + 6)) |= (group1 << 6);
    *input += 11;
    uint64_t group2 = 0;
    group2 *= 30;
    group2 += (*input)[0];

    group2 *= 30;
    group2 += (*input)[1];

    group2 *= 30;
    group2 += (*input)[2];

    group2 *= 30;
    group2 += (*input)[3];

    group2 *= 30;
    group2 += (*input)[4];

    group2 *= 30;
    group2 += (*input)[5];

    group2 *= 30;
    group2 += (*input)[6];

    group2 *= 30;
    group2 += (*input)[7];

    group2 *= 30;
    group2 += (*input)[8];

    group2 *= 30;
    group2 += (*input)[9];

    group2 *= 30;
    group2 += (*input)[10];

    *((uint64_t *)((*output) + 13)) |= (group2 << 4);
    *input += 11;
    uint64_t group3 = 0;
    group3 *= 30;
    group3 += (*input)[0];

    group3 *= 30;
    group3 += (*input)[1];

    group3 *= 30;
    group3 += (*input)[2];

    group3 *= 30;
    group3 += (*input)[3];

    group3 *= 30;
    group3 += (*input)[4];

    group3 *= 30;
    group3 += (*input)[5];

    group3 *= 30;
    group3 += (*input)[6];

    group3 *= 30;
    group3 += (*input)[7];

    group3 *= 30;
    group3 += (*input)[8];

    group3 *= 30;
    group3 += (*input)[9];

    group3 *= 30;
    group3 += (*input)[10];

    *((uint64_t *)((*output) + 20)) |= (group3 << 2);
    *input += 11;
    *output += 27;
}

// Pack 8 groups using 5 bytes (8 values total)
void Ultrapack_Compress31(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 31;
    group0 += (*input)[0];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 1;
    uint64_t group1 = 0;
    group1 *= 31;
    group1 += (*input)[0];

    *((uint64_t *)((*output) + 0)) |= (group1 << 5);
    *input += 1;
    uint64_t group2 = 0;
    group2 *= 31;
    group2 += (*input)[0];

    *((uint64_t *)((*output) + 1)) |= (group2 << 2);
    *input += 1;
    uint64_t group3 = 0;
    group3 *= 31;
    group3 += (*input)[0];

    *((uint64_t *)((*output) + 1)) |= (group3 << 7);
    *input += 1;
    uint64_t group4 = 0;
    group4 *= 31;
    group4 += (*input)[0];

    *((uint64_t *)((*output) + 2)) |= (group4 << 4);
    *input += 1;
    uint64_t group5 = 0;
    group5 *= 31;
    group5 += (*input)[0];

    *((uint64_t *)((*output) + 3)) |= (group5 << 1);
    *input += 1;
    uint64_t group6 = 0;
    group6 *= 31;
    group6 += (*input)[0];

    *((uint64_t *)((*output) + 3)) |= (group6 << 6);
    *input += 1;
    uint64_t group7 = 0;
    group7 *= 31;
    group7 += (*input)[0];

    *((uint64_t *)((*output) + 4)) |= (group7 << 3);
    *input += 1;
    *output += 5;
}

// Pack 8 groups using 5 bytes (8 values total)
void Ultrapack_Compress32(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 32;
    group0 += (*input)[0];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 1;
    uint64_t group1 = 0;
    group1 *= 32;
    group1 += (*input)[0];

    *((uint64_t *)((*output) + 0)) |= (group1 << 5);
    *input += 1;
    uint64_t group2 = 0;
    group2 *= 32;
    group2 += (*input)[0];

    *((uint64_t *)((*output) + 1)) |= (group2 << 2);
    *input += 1;
    uint64_t group3 = 0;
    group3 *= 32;
    group3 += (*input)[0];

    *((uint64_t *)((*output) + 1)) |= (group3 << 7);
    *input += 1;
    uint64_t group4 = 0;
    group4 *= 32;
    group4 += (*input)[0];

    *((uint64_t *)((*output) + 2)) |= (group4 << 4);
    *input += 1;
    uint64_t group5 = 0;
    group5 *= 32;
    group5 += (*input)[0];

    *((uint64_t *)((*output) + 3)) |= (group5 << 1);
    *input += 1;
    uint64_t group6 = 0;
    group6 *= 32;
    group6 += (*input)[0];

    *((uint64_t *)((*output) + 3)) |= (group6 << 6);
    *input += 1;
    uint64_t group7 = 0;
    group7 *= 32;
    group7 += (*input)[0];

    *((uint64_t *)((*output) + 4)) |= (group7 << 3);
    *input += 1;
    *output += 5;
}

// Pack 4 groups using 23 bytes (36 values total)
void Ultrapack_Compress33(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 33;
    group0 += (*input)[0];

    group0 *= 33;
    group0 += (*input)[1];

    group0 *= 33;
    group0 += (*input)[2];

    group0 *= 33;
    group0 += (*input)[3];

    group0 *= 33;
    group0 += (*input)[4];

    group0 *= 33;
    group0 += (*input)[5];

    group0 *= 33;
    group0 += (*input)[6];

    group0 *= 33;
    group0 += (*input)[7];

    group0 *= 33;
    group0 += (*input)[8];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 9;
    uint64_t group1 = 0;
    group1 *= 33;
    group1 += (*input)[0];

    group1 *= 33;
    group1 += (*input)[1];

    group1 *= 33;
    group1 += (*input)[2];

    group1 *= 33;
    group1 += (*input)[3];

    group1 *= 33;
    group1 += (*input)[4];

    group1 *= 33;
    group1 += (*input)[5];

    group1 *= 33;
    group1 += (*input)[6];

    group1 *= 33;
    group1 += (*input)[7];

    group1 *= 33;
    group1 += (*input)[8];

    *((uint64_t *)((*output) + 5)) |= (group1 << 6);
    *input += 9;
    uint64_t group2 = 0;
    group2 *= 33;
    group2 += (*input)[0];

    group2 *= 33;
    group2 += (*input)[1];

    group2 *= 33;
    group2 += (*input)[2];

    group2 *= 33;
    group2 += (*input)[3];

    group2 *= 33;
    group2 += (*input)[4];

    group2 *= 33;
    group2 += (*input)[5];

    group2 *= 33;
    group2 += (*input)[6];

    group2 *= 33;
    group2 += (*input)[7];

    group2 *= 33;
    group2 += (*input)[8];

    *((uint64_t *)((*output) + 11)) |= (group2 << 4);
    *input += 9;
    uint64_t group3 = 0;
    group3 *= 33;
    group3 += (*input)[0];

    group3 *= 33;
    group3 += (*input)[1];

    group3 *= 33;
    group3 += (*input)[2];

    group3 *= 33;
    group3 += (*input)[3];

    group3 *= 33;
    group3 += (*input)[4];

    group3 *= 33;
    group3 += (*input)[5];

    group3 *= 33;
    group3 += (*input)[6];

    group3 *= 33;
    group3 += (*input)[7];

    group3 *= 33;
    group3 += (*input)[8];

    *((uint64_t *)((*output) + 17)) |= (group3 << 2);
    *input += 9;
    *output += 23;
}

// Pack 4 groups using 23 bytes (36 values total)
void Ultrapack_Compress34(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 34;
    group0 += (*input)[0];

    group0 *= 34;
    group0 += (*input)[1];

    group0 *= 34;
    group0 += (*input)[2];

    group0 *= 34;
    group0 += (*input)[3];

    group0 *= 34;
    group0 += (*input)[4];

    group0 *= 34;
    group0 += (*input)[5];

    group0 *= 34;
    group0 += (*input)[6];

    group0 *= 34;
    group0 += (*input)[7];

    group0 *= 34;
    group0 += (*input)[8];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 9;
    uint64_t group1 = 0;
    group1 *= 34;
    group1 += (*input)[0];

    group1 *= 34;
    group1 += (*input)[1];

    group1 *= 34;
    group1 += (*input)[2];

    group1 *= 34;
    group1 += (*input)[3];

    group1 *= 34;
    group1 += (*input)[4];

    group1 *= 34;
    group1 += (*input)[5];

    group1 *= 34;
    group1 += (*input)[6];

    group1 *= 34;
    group1 += (*input)[7];

    group1 *= 34;
    group1 += (*input)[8];

    *((uint64_t *)((*output) + 5)) |= (group1 << 6);
    *input += 9;
    uint64_t group2 = 0;
    group2 *= 34;
    group2 += (*input)[0];

    group2 *= 34;
    group2 += (*input)[1];

    group2 *= 34;
    group2 += (*input)[2];

    group2 *= 34;
    group2 += (*input)[3];

    group2 *= 34;
    group2 += (*input)[4];

    group2 *= 34;
    group2 += (*input)[5];

    group2 *= 34;
    group2 += (*input)[6];

    group2 *= 34;
    group2 += (*input)[7];

    group2 *= 34;
    group2 += (*input)[8];

    *((uint64_t *)((*output) + 11)) |= (group2 << 4);
    *input += 9;
    uint64_t group3 = 0;
    group3 *= 34;
    group3 += (*input)[0];

    group3 *= 34;
    group3 += (*input)[1];

    group3 *= 34;
    group3 += (*input)[2];

    group3 *= 34;
    group3 += (*input)[3];

    group3 *= 34;
    group3 += (*input)[4];

    group3 *= 34;
    group3 += (*input)[5];

    group3 *= 34;
    group3 += (*input)[6];

    group3 *= 34;
    group3 += (*input)[7];

    group3 *= 34;
    group3 += (*input)[8];

    *((uint64_t *)((*output) + 17)) |= (group3 << 2);
    *input += 9;
    *output += 23;
}

// Pack 8 groups using 31 bytes (48 values total)
void Ultrapack_Compress35(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 35;
    group0 += (*input)[0];

    group0 *= 35;
    group0 += (*input)[1];

    group0 *= 35;
    group0 += (*input)[2];

    group0 *= 35;
    group0 += (*input)[3];

    group0 *= 35;
    group0 += (*input)[4];

    group0 *= 35;
    group0 += (*input)[5];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 6;
    uint64_t group1 = 0;
    group1 *= 35;
    group1 += (*input)[0];

    group1 *= 35;
    group1 += (*input)[1];

    group1 *= 35;
    group1 += (*input)[2];

    group1 *= 35;
    group1 += (*input)[3];

    group1 *= 35;
    group1 += (*input)[4];

    group1 *= 35;
    group1 += (*input)[5];

    *((uint64_t *)((*output) + 3)) |= (group1 << 7);
    *input += 6;
    uint64_t group2 = 0;
    group2 *= 35;
    group2 += (*input)[0];

    group2 *= 35;
    group2 += (*input)[1];

    group2 *= 35;
    group2 += (*input)[2];

    group2 *= 35;
    group2 += (*input)[3];

    group2 *= 35;
    group2 += (*input)[4];

    group2 *= 35;
    group2 += (*input)[5];

    *((uint64_t *)((*output) + 7)) |= (group2 << 6);
    *input += 6;
    uint64_t group3 = 0;
    group3 *= 35;
    group3 += (*input)[0];

    group3 *= 35;
    group3 += (*input)[1];

    group3 *= 35;
    group3 += (*input)[2];

    group3 *= 35;
    group3 += (*input)[3];

    group3 *= 35;
    group3 += (*input)[4];

    group3 *= 35;
    group3 += (*input)[5];

    *((uint64_t *)((*output) + 11)) |= (group3 << 5);
    *input += 6;
    uint64_t group4 = 0;
    group4 *= 35;
    group4 += (*input)[0];

    group4 *= 35;
    group4 += (*input)[1];

    group4 *= 35;
    group4 += (*input)[2];

    group4 *= 35;
    group4 += (*input)[3];

    group4 *= 35;
    group4 += (*input)[4];

    group4 *= 35;
    group4 += (*input)[5];

    *((uint64_t *)((*output) + 15)) |= (group4 << 4);
    *input += 6;
    uint64_t group5 = 0;
    group5 *= 35;
    group5 += (*input)[0];

    group5 *= 35;
    group5 += (*input)[1];

    group5 *= 35;
    group5 += (*input)[2];

    group5 *= 35;
    group5 += (*input)[3];

    group5 *= 35;
    group5 += (*input)[4];

    group5 *= 35;
    group5 += (*input)[5];

    *((uint64_t *)((*output) + 19)) |= (group5 << 3);
    *input += 6;
    uint64_t group6 = 0;
    group6 *= 35;
    group6 += (*input)[0];

    group6 *= 35;
    group6 += (*input)[1];

    group6 *= 35;
    group6 += (*input)[2];

    group6 *= 35;
    group6 += (*input)[3];

    group6 *= 35;
    group6 += (*input)[4];

    group6 *= 35;
    group6 += (*input)[5];

    *((uint64_t *)((*output) + 23)) |= (group6 << 2);
    *input += 6;
    uint64_t group7 = 0;
    group7 *= 35;
    group7 += (*input)[0];

    group7 *= 35;
    group7 += (*input)[1];

    group7 *= 35;
    group7 += (*input)[2];

    group7 *= 35;
    group7 += (*input)[3];

    group7 *= 35;
    group7 += (*input)[4];

    group7 *= 35;
    group7 += (*input)[5];

    *((uint64_t *)((*output) + 27)) |= (group7 << 1);
    *input += 6;
    *output += 31;
}

// Pack 8 groups using 21 bytes (32 values total)
void Ultrapack_Compress36(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 36;
    group0 += (*input)[0];

    group0 *= 36;
    group0 += (*input)[1];

    group0 *= 36;
    group0 += (*input)[2];

    group0 *= 36;
    group0 += (*input)[3];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 4;
    uint64_t group1 = 0;
    group1 *= 36;
    group1 += (*input)[0];

    group1 *= 36;
    group1 += (*input)[1];

    group1 *= 36;
    group1 += (*input)[2];

    group1 *= 36;
    group1 += (*input)[3];

    *((uint64_t *)((*output) + 2)) |= (group1 << 5);
    *input += 4;
    uint64_t group2 = 0;
    group2 *= 36;
    group2 += (*input)[0];

    group2 *= 36;
    group2 += (*input)[1];

    group2 *= 36;
    group2 += (*input)[2];

    group2 *= 36;
    group2 += (*input)[3];

    *((uint64_t *)((*output) + 5)) |= (group2 << 2);
    *input += 4;
    uint64_t group3 = 0;
    group3 *= 36;
    group3 += (*input)[0];

    group3 *= 36;
    group3 += (*input)[1];

    group3 *= 36;
    group3 += (*input)[2];

    group3 *= 36;
    group3 += (*input)[3];

    *((uint64_t *)((*output) + 7)) |= (group3 << 7);
    *input += 4;
    uint64_t group4 = 0;
    group4 *= 36;
    group4 += (*input)[0];

    group4 *= 36;
    group4 += (*input)[1];

    group4 *= 36;
    group4 += (*input)[2];

    group4 *= 36;
    group4 += (*input)[3];

    *((uint64_t *)((*output) + 10)) |= (group4 << 4);
    *input += 4;
    uint64_t group5 = 0;
    group5 *= 36;
    group5 += (*input)[0];

    group5 *= 36;
    group5 += (*input)[1];

    group5 *= 36;
    group5 += (*input)[2];

    group5 *= 36;
    group5 += (*input)[3];

    *((uint64_t *)((*output) + 13)) |= (group5 << 1);
    *input += 4;
    uint64_t group6 = 0;
    group6 *= 36;
    group6 += (*input)[0];

    group6 *= 36;
    group6 += (*input)[1];

    group6 *= 36;
    group6 += (*input)[2];

    group6 *= 36;
    group6 += (*input)[3];

    *((uint64_t *)((*output) + 15)) |= (group6 << 6);
    *input += 4;
    uint64_t group7 = 0;
    group7 *= 36;
    group7 += (*input)[0];

    group7 *= 36;
    group7 += (*input)[1];

    group7 *= 36;
    group7 += (*input)[2];

    group7 *= 36;
    group7 += (*input)[3];

    *((uint64_t *)((*output) + 18)) |= (group7 << 3);
    *input += 4;
    *output += 21;
}

// Pack 8 groups using 21 bytes (32 values total)
void Ultrapack_Compress37(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 37;
    group0 += (*input)[0];

    group0 *= 37;
    group0 += (*input)[1];

    group0 *= 37;
    group0 += (*input)[2];

    group0 *= 37;
    group0 += (*input)[3];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 4;
    uint64_t group1 = 0;
    group1 *= 37;
    group1 += (*input)[0];

    group1 *= 37;
    group1 += (*input)[1];

    group1 *= 37;
    group1 += (*input)[2];

    group1 *= 37;
    group1 += (*input)[3];

    *((uint64_t *)((*output) + 2)) |= (group1 << 5);
    *input += 4;
    uint64_t group2 = 0;
    group2 *= 37;
    group2 += (*input)[0];

    group2 *= 37;
    group2 += (*input)[1];

    group2 *= 37;
    group2 += (*input)[2];

    group2 *= 37;
    group2 += (*input)[3];

    *((uint64_t *)((*output) + 5)) |= (group2 << 2);
    *input += 4;
    uint64_t group3 = 0;
    group3 *= 37;
    group3 += (*input)[0];

    group3 *= 37;
    group3 += (*input)[1];

    group3 *= 37;
    group3 += (*input)[2];

    group3 *= 37;
    group3 += (*input)[3];

    *((uint64_t *)((*output) + 7)) |= (group3 << 7);
    *input += 4;
    uint64_t group4 = 0;
    group4 *= 37;
    group4 += (*input)[0];

    group4 *= 37;
    group4 += (*input)[1];

    group4 *= 37;
    group4 += (*input)[2];

    group4 *= 37;
    group4 += (*input)[3];

    *((uint64_t *)((*output) + 10)) |= (group4 << 4);
    *input += 4;
    uint64_t group5 = 0;
    group5 *= 37;
    group5 += (*input)[0];

    group5 *= 37;
    group5 += (*input)[1];

    group5 *= 37;
    group5 += (*input)[2];

    group5 *= 37;
    group5 += (*input)[3];

    *((uint64_t *)((*output) + 13)) |= (group5 << 1);
    *input += 4;
    uint64_t group6 = 0;
    group6 *= 37;
    group6 += (*input)[0];

    group6 *= 37;
    group6 += (*input)[1];

    group6 *= 37;
    group6 += (*input)[2];

    group6 *= 37;
    group6 += (*input)[3];

    *((uint64_t *)((*output) + 15)) |= (group6 << 6);
    *input += 4;
    uint64_t group7 = 0;
    group7 *= 37;
    group7 += (*input)[0];

    group7 *= 37;
    group7 += (*input)[1];

    group7 *= 37;
    group7 += (*input)[2];

    group7 *= 37;
    group7 += (*input)[3];

    *((uint64_t *)((*output) + 18)) |= (group7 << 3);
    *input += 4;
    *output += 21;
}

// Pack 8 groups using 21 bytes (32 values total)
void Ultrapack_Compress38(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 38;
    group0 += (*input)[0];

    group0 *= 38;
    group0 += (*input)[1];

    group0 *= 38;
    group0 += (*input)[2];

    group0 *= 38;
    group0 += (*input)[3];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 4;
    uint64_t group1 = 0;
    group1 *= 38;
    group1 += (*input)[0];

    group1 *= 38;
    group1 += (*input)[1];

    group1 *= 38;
    group1 += (*input)[2];

    group1 *= 38;
    group1 += (*input)[3];

    *((uint64_t *)((*output) + 2)) |= (group1 << 5);
    *input += 4;
    uint64_t group2 = 0;
    group2 *= 38;
    group2 += (*input)[0];

    group2 *= 38;
    group2 += (*input)[1];

    group2 *= 38;
    group2 += (*input)[2];

    group2 *= 38;
    group2 += (*input)[3];

    *((uint64_t *)((*output) + 5)) |= (group2 << 2);
    *input += 4;
    uint64_t group3 = 0;
    group3 *= 38;
    group3 += (*input)[0];

    group3 *= 38;
    group3 += (*input)[1];

    group3 *= 38;
    group3 += (*input)[2];

    group3 *= 38;
    group3 += (*input)[3];

    *((uint64_t *)((*output) + 7)) |= (group3 << 7);
    *input += 4;
    uint64_t group4 = 0;
    group4 *= 38;
    group4 += (*input)[0];

    group4 *= 38;
    group4 += (*input)[1];

    group4 *= 38;
    group4 += (*input)[2];

    group4 *= 38;
    group4 += (*input)[3];

    *((uint64_t *)((*output) + 10)) |= (group4 << 4);
    *input += 4;
    uint64_t group5 = 0;
    group5 *= 38;
    group5 += (*input)[0];

    group5 *= 38;
    group5 += (*input)[1];

    group5 *= 38;
    group5 += (*input)[2];

    group5 *= 38;
    group5 += (*input)[3];

    *((uint64_t *)((*output) + 13)) |= (group5 << 1);
    *input += 4;
    uint64_t group6 = 0;
    group6 *= 38;
    group6 += (*input)[0];

    group6 *= 38;
    group6 += (*input)[1];

    group6 *= 38;
    group6 += (*input)[2];

    group6 *= 38;
    group6 += (*input)[3];

    *((uint64_t *)((*output) + 15)) |= (group6 << 6);
    *input += 4;
    uint64_t group7 = 0;
    group7 *= 38;
    group7 += (*input)[0];

    group7 *= 38;
    group7 += (*input)[1];

    group7 *= 38;
    group7 += (*input)[2];

    group7 *= 38;
    group7 += (*input)[3];

    *((uint64_t *)((*output) + 18)) |= (group7 << 3);
    *input += 4;
    *output += 21;
}

// Pack 1 groups using 2 bytes (3 values total)
void Ultrapack_Compress39(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 39;
    group0 += (*input)[0];

    group0 *= 39;
    group0 += (*input)[1];

    group0 *= 39;
    group0 += (*input)[2];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 3;
    *output += 2;
}

// Pack 1 groups using 2 bytes (3 values total)
void Ultrapack_Compress40(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 40;
    group0 += (*input)[0];

    group0 *= 40;
    group0 += (*input)[1];

    group0 *= 40;
    group0 += (*input)[2];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 3;
    *output += 2;
}

// Pack 8 groups using 27 bytes (40 values total)
void Ultrapack_Compress41(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 41;
    group0 += (*input)[0];

    group0 *= 41;
    group0 += (*input)[1];

    group0 *= 41;
    group0 += (*input)[2];

    group0 *= 41;
    group0 += (*input)[3];

    group0 *= 41;
    group0 += (*input)[4];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 5;
    uint64_t group1 = 0;
    group1 *= 41;
    group1 += (*input)[0];

    group1 *= 41;
    group1 += (*input)[1];

    group1 *= 41;
    group1 += (*input)[2];

    group1 *= 41;
    group1 += (*input)[3];

    group1 *= 41;
    group1 += (*input)[4];

    *((uint64_t *)((*output) + 3)) |= (group1 << 3);
    *input += 5;
    uint64_t group2 = 0;
    group2 *= 41;
    group2 += (*input)[0];

    group2 *= 41;
    group2 += (*input)[1];

    group2 *= 41;
    group2 += (*input)[2];

    group2 *= 41;
    group2 += (*input)[3];

    group2 *= 41;
    group2 += (*input)[4];

    *((uint64_t *)((*output) + 6)) |= (group2 << 6);
    *input += 5;
    uint64_t group3 = 0;
    group3 *= 41;
    group3 += (*input)[0];

    group3 *= 41;
    group3 += (*input)[1];

    group3 *= 41;
    group3 += (*input)[2];

    group3 *= 41;
    group3 += (*input)[3];

    group3 *= 41;
    group3 += (*input)[4];

    *((uint64_t *)((*output) + 10)) |= (group3 << 1);
    *input += 5;
    uint64_t group4 = 0;
    group4 *= 41;
    group4 += (*input)[0];

    group4 *= 41;
    group4 += (*input)[1];

    group4 *= 41;
    group4 += (*input)[2];

    group4 *= 41;
    group4 += (*input)[3];

    group4 *= 41;
    group4 += (*input)[4];

    *((uint64_t *)((*output) + 13)) |= (group4 << 4);
    *input += 5;
    uint64_t group5 = 0;
    group5 *= 41;
    group5 += (*input)[0];

    group5 *= 41;
    group5 += (*input)[1];

    group5 *= 41;
    group5 += (*input)[2];

    group5 *= 41;
    group5 += (*input)[3];

    group5 *= 41;
    group5 += (*input)[4];

    *((uint64_t *)((*output) + 16)) |= (group5 << 7);
    *input += 5;
    uint64_t group6 = 0;
    group6 *= 41;
    group6 += (*input)[0];

    group6 *= 41;
    group6 += (*input)[1];

    group6 *= 41;
    group6 += (*input)[2];

    group6 *= 41;
    group6 += (*input)[3];

    group6 *= 41;
    group6 += (*input)[4];

    *((uint64_t *)((*output) + 20)) |= (group6 << 2);
    *input += 5;
    uint64_t group7 = 0;
    group7 *= 41;
    group7 += (*input)[0];

    group7 *= 41;
    group7 += (*input)[1];

    group7 *= 41;
    group7 += (*input)[2];

    group7 *= 41;
    group7 += (*input)[3];

    group7 *= 41;
    group7 += (*input)[4];

    *((uint64_t *)((*output) + 23)) |= (group7 << 5);
    *input += 5;
    *output += 27;
}

// Pack 8 groups using 27 bytes (40 values total)
void Ultrapack_Compress42(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 42;
    group0 += (*input)[0];

    group0 *= 42;
    group0 += (*input)[1];

    group0 *= 42;
    group0 += (*input)[2];

    group0 *= 42;
    group0 += (*input)[3];

    group0 *= 42;
    group0 += (*input)[4];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 5;
    uint64_t group1 = 0;
    group1 *= 42;
    group1 += (*input)[0];

    group1 *= 42;
    group1 += (*input)[1];

    group1 *= 42;
    group1 += (*input)[2];

    group1 *= 42;
    group1 += (*input)[3];

    group1 *= 42;
    group1 += (*input)[4];

    *((uint64_t *)((*output) + 3)) |= (group1 << 3);
    *input += 5;
    uint64_t group2 = 0;
    group2 *= 42;
    group2 += (*input)[0];

    group2 *= 42;
    group2 += (*input)[1];

    group2 *= 42;
    group2 += (*input)[2];

    group2 *= 42;
    group2 += (*input)[3];

    group2 *= 42;
    group2 += (*input)[4];

    *((uint64_t *)((*output) + 6)) |= (group2 << 6);
    *input += 5;
    uint64_t group3 = 0;
    group3 *= 42;
    group3 += (*input)[0];

    group3 *= 42;
    group3 += (*input)[1];

    group3 *= 42;
    group3 += (*input)[2];

    group3 *= 42;
    group3 += (*input)[3];

    group3 *= 42;
    group3 += (*input)[4];

    *((uint64_t *)((*output) + 10)) |= (group3 << 1);
    *input += 5;
    uint64_t group4 = 0;
    group4 *= 42;
    group4 += (*input)[0];

    group4 *= 42;
    group4 += (*input)[1];

    group4 *= 42;
    group4 += (*input)[2];

    group4 *= 42;
    group4 += (*input)[3];

    group4 *= 42;
    group4 += (*input)[4];

    *((uint64_t *)((*output) + 13)) |= (group4 << 4);
    *input += 5;
    uint64_t group5 = 0;
    group5 *= 42;
    group5 += (*input)[0];

    group5 *= 42;
    group5 += (*input)[1];

    group5 *= 42;
    group5 += (*input)[2];

    group5 *= 42;
    group5 += (*input)[3];

    group5 *= 42;
    group5 += (*input)[4];

    *((uint64_t *)((*output) + 16)) |= (group5 << 7);
    *input += 5;
    uint64_t group6 = 0;
    group6 *= 42;
    group6 += (*input)[0];

    group6 *= 42;
    group6 += (*input)[1];

    group6 *= 42;
    group6 += (*input)[2];

    group6 *= 42;
    group6 += (*input)[3];

    group6 *= 42;
    group6 += (*input)[4];

    *((uint64_t *)((*output) + 20)) |= (group6 << 2);
    *input += 5;
    uint64_t group7 = 0;
    group7 *= 42;
    group7 += (*input)[0];

    group7 *= 42;
    group7 += (*input)[1];

    group7 *= 42;
    group7 += (*input)[2];

    group7 *= 42;
    group7 += (*input)[3];

    group7 *= 42;
    group7 += (*input)[4];

    *((uint64_t *)((*output) + 23)) |= (group7 << 5);
    *input += 5;
    *output += 27;
}

// Pack 4 groups using 19 bytes (28 values total)
void Ultrapack_Compress43(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 43;
    group0 += (*input)[0];

    group0 *= 43;
    group0 += (*input)[1];

    group0 *= 43;
    group0 += (*input)[2];

    group0 *= 43;
    group0 += (*input)[3];

    group0 *= 43;
    group0 += (*input)[4];

    group0 *= 43;
    group0 += (*input)[5];

    group0 *= 43;
    group0 += (*input)[6];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 7;
    uint64_t group1 = 0;
    group1 *= 43;
    group1 += (*input)[0];

    group1 *= 43;
    group1 += (*input)[1];

    group1 *= 43;
    group1 += (*input)[2];

    group1 *= 43;
    group1 += (*input)[3];

    group1 *= 43;
    group1 += (*input)[4];

    group1 *= 43;
    group1 += (*input)[5];

    group1 *= 43;
    group1 += (*input)[6];

    *((uint64_t *)((*output) + 4)) |= (group1 << 6);
    *input += 7;
    uint64_t group2 = 0;
    group2 *= 43;
    group2 += (*input)[0];

    group2 *= 43;
    group2 += (*input)[1];

    group2 *= 43;
    group2 += (*input)[2];

    group2 *= 43;
    group2 += (*input)[3];

    group2 *= 43;
    group2 += (*input)[4];

    group2 *= 43;
    group2 += (*input)[5];

    group2 *= 43;
    group2 += (*input)[6];

    *((uint64_t *)((*output) + 9)) |= (group2 << 4);
    *input += 7;
    uint64_t group3 = 0;
    group3 *= 43;
    group3 += (*input)[0];

    group3 *= 43;
    group3 += (*input)[1];

    group3 *= 43;
    group3 += (*input)[2];

    group3 *= 43;
    group3 += (*input)[3];

    group3 *= 43;
    group3 += (*input)[4];

    group3 *= 43;
    group3 += (*input)[5];

    group3 *= 43;
    group3 += (*input)[6];

    *((uint64_t *)((*output) + 14)) |= (group3 << 2);
    *input += 7;
    *output += 19;
}

// Pack 8 groups using 11 bytes (16 values total)
void Ultrapack_Compress44(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 44;
    group0 += (*input)[0];

    group0 *= 44;
    group0 += (*input)[1];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 2;
    uint64_t group1 = 0;
    group1 *= 44;
    group1 += (*input)[0];

    group1 *= 44;
    group1 += (*input)[1];

    *((uint64_t *)((*output) + 1)) |= (group1 << 3);
    *input += 2;
    uint64_t group2 = 0;
    group2 *= 44;
    group2 += (*input)[0];

    group2 *= 44;
    group2 += (*input)[1];

    *((uint64_t *)((*output) + 2)) |= (group2 << 6);
    *input += 2;
    uint64_t group3 = 0;
    group3 *= 44;
    group3 += (*input)[0];

    group3 *= 44;
    group3 += (*input)[1];

    *((uint64_t *)((*output) + 4)) |= (group3 << 1);
    *input += 2;
    uint64_t group4 = 0;
    group4 *= 44;
    group4 += (*input)[0];

    group4 *= 44;
    group4 += (*input)[1];

    *((uint64_t *)((*output) + 5)) |= (group4 << 4);
    *input += 2;
    uint64_t group5 = 0;
    group5 *= 44;
    group5 += (*input)[0];

    group5 *= 44;
    group5 += (*input)[1];

    *((uint64_t *)((*output) + 6)) |= (group5 << 7);
    *input += 2;
    uint64_t group6 = 0;
    group6 *= 44;
    group6 += (*input)[0];

    group6 *= 44;
    group6 += (*input)[1];

    *((uint64_t *)((*output) + 8)) |= (group6 << 2);
    *input += 2;
    uint64_t group7 = 0;
    group7 *= 44;
    group7 += (*input)[0];

    group7 *= 44;
    group7 += (*input)[1];

    *((uint64_t *)((*output) + 9)) |= (group7 << 5);
    *input += 2;
    *output += 11;
}

// Pack 8 groups using 11 bytes (16 values total)
void Ultrapack_Compress45(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 45;
    group0 += (*input)[0];

    group0 *= 45;
    group0 += (*input)[1];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 2;
    uint64_t group1 = 0;
    group1 *= 45;
    group1 += (*input)[0];

    group1 *= 45;
    group1 += (*input)[1];

    *((uint64_t *)((*output) + 1)) |= (group1 << 3);
    *input += 2;
    uint64_t group2 = 0;
    group2 *= 45;
    group2 += (*input)[0];

    group2 *= 45;
    group2 += (*input)[1];

    *((uint64_t *)((*output) + 2)) |= (group2 << 6);
    *input += 2;
    uint64_t group3 = 0;
    group3 *= 45;
    group3 += (*input)[0];

    group3 *= 45;
    group3 += (*input)[1];

    *((uint64_t *)((*output) + 4)) |= (group3 << 1);
    *input += 2;
    uint64_t group4 = 0;
    group4 *= 45;
    group4 += (*input)[0];

    group4 *= 45;
    group4 += (*input)[1];

    *((uint64_t *)((*output) + 5)) |= (group4 << 4);
    *input += 2;
    uint64_t group5 = 0;
    group5 *= 45;
    group5 += (*input)[0];

    group5 *= 45;
    group5 += (*input)[1];

    *((uint64_t *)((*output) + 6)) |= (group5 << 7);
    *input += 2;
    uint64_t group6 = 0;
    group6 *= 45;
    group6 += (*input)[0];

    group6 *= 45;
    group6 += (*input)[1];

    *((uint64_t *)((*output) + 8)) |= (group6 << 2);
    *input += 2;
    uint64_t group7 = 0;
    group7 *= 45;
    group7 += (*input)[0];

    group7 *= 45;
    group7 += (*input)[1];

    *((uint64_t *)((*output) + 9)) |= (group7 << 5);
    *input += 2;
    *output += 11;
}

// Pack 2 groups using 7 bytes (10 values total)
void Ultrapack_Compress46(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 46;
    group0 += (*input)[0];

    group0 *= 46;
    group0 += (*input)[1];

    group0 *= 46;
    group0 += (*input)[2];

    group0 *= 46;
    group0 += (*input)[3];

    group0 *= 46;
    group0 += (*input)[4];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 5;
    uint64_t group1 = 0;
    group1 *= 46;
    group1 += (*input)[0];

    group1 *= 46;
    group1 += (*input)[1];

    group1 *= 46;
    group1 += (*input)[2];

    group1 *= 46;
    group1 += (*input)[3];

    group1 *= 46;
    group1 += (*input)[4];

    *((uint64_t *)((*output) + 3)) |= (group1 << 4);
    *input += 5;
    *output += 7;
}

// Pack 2 groups using 7 bytes (10 values total)
void Ultrapack_Compress47(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 47;
    group0 += (*input)[0];

    group0 *= 47;
    group0 += (*input)[1];

    group0 *= 47;
    group0 += (*input)[2];

    group0 *= 47;
    group0 += (*input)[3];

    group0 *= 47;
    group0 += (*input)[4];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 5;
    uint64_t group1 = 0;
    group1 *= 47;
    group1 += (*input)[0];

    group1 *= 47;
    group1 += (*input)[1];

    group1 *= 47;
    group1 += (*input)[2];

    group1 *= 47;
    group1 += (*input)[3];

    group1 *= 47;
    group1 += (*input)[4];

    *((uint64_t *)((*output) + 3)) |= (group1 << 4);
    *input += 5;
    *output += 7;
}

// Pack 2 groups using 7 bytes (10 values total)
void Ultrapack_Compress48(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 48;
    group0 += (*input)[0];

    group0 *= 48;
    group0 += (*input)[1];

    group0 *= 48;
    group0 += (*input)[2];

    group0 *= 48;
    group0 += (*input)[3];

    group0 *= 48;
    group0 += (*input)[4];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 5;
    uint64_t group1 = 0;
    group1 *= 48;
    group1 += (*input)[0];

    group1 *= 48;
    group1 += (*input)[1];

    group1 *= 48;
    group1 += (*input)[2];

    group1 *= 48;
    group1 += (*input)[3];

    group1 *= 48;
    group1 += (*input)[4];

    *((uint64_t *)((*output) + 3)) |= (group1 << 4);
    *input += 5;
    *output += 7;
}

// Pack 8 groups using 17 bytes (24 values total)
void Ultrapack_Compress49(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 49;
    group0 += (*input)[0];

    group0 *= 49;
    group0 += (*input)[1];

    group0 *= 49;
    group0 += (*input)[2];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 3;
    uint64_t group1 = 0;
    group1 *= 49;
    group1 += (*input)[0];

    group1 *= 49;
    group1 += (*input)[1];

    group1 *= 49;
    group1 += (*input)[2];

    *((uint64_t *)((*output) + 2)) |= (group1 << 1);
    *input += 3;
    uint64_t group2 = 0;
    group2 *= 49;
    group2 += (*input)[0];

    group2 *= 49;
    group2 += (*input)[1];

    group2 *= 49;
    group2 += (*input)[2];

    *((uint64_t *)((*output) + 4)) |= (group2 << 2);
    *input += 3;
    uint64_t group3 = 0;
    group3 *= 49;
    group3 += (*input)[0];

    group3 *= 49;
    group3 += (*input)[1];

    group3 *= 49;
    group3 += (*input)[2];

    *((uint64_t *)((*output) + 6)) |= (group3 << 3);
    *input += 3;
    uint64_t group4 = 0;
    group4 *= 49;
    group4 += (*input)[0];

    group4 *= 49;
    group4 += (*input)[1];

    group4 *= 49;
    group4 += (*input)[2];

    *((uint64_t *)((*output) + 8)) |= (group4 << 4);
    *input += 3;
    uint64_t group5 = 0;
    group5 *= 49;
    group5 += (*input)[0];

    group5 *= 49;
    group5 += (*input)[1];

    group5 *= 49;
    group5 += (*input)[2];

    *((uint64_t *)((*output) + 10)) |= (group5 << 5);
    *input += 3;
    uint64_t group6 = 0;
    group6 *= 49;
    group6 += (*input)[0];

    group6 *= 49;
    group6 += (*input)[1];

    group6 *= 49;
    group6 += (*input)[2];

    *((uint64_t *)((*output) + 12)) |= (group6 << 6);
    *input += 3;
    uint64_t group7 = 0;
    group7 *= 49;
    group7 += (*input)[0];

    group7 *= 49;
    group7 += (*input)[1];

    group7 *= 49;
    group7 += (*input)[2];

    *((uint64_t *)((*output) + 14)) |= (group7 << 7);
    *input += 3;
    *output += 17;
}

// Pack 8 groups using 17 bytes (24 values total)
void Ultrapack_Compress50(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 50;
    group0 += (*input)[0];

    group0 *= 50;
    group0 += (*input)[1];

    group0 *= 50;
    group0 += (*input)[2];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 3;
    uint64_t group1 = 0;
    group1 *= 50;
    group1 += (*input)[0];

    group1 *= 50;
    group1 += (*input)[1];

    group1 *= 50;
    group1 += (*input)[2];

    *((uint64_t *)((*output) + 2)) |= (group1 << 1);
    *input += 3;
    uint64_t group2 = 0;
    group2 *= 50;
    group2 += (*input)[0];

    group2 *= 50;
    group2 += (*input)[1];

    group2 *= 50;
    group2 += (*input)[2];

    *((uint64_t *)((*output) + 4)) |= (group2 << 2);
    *input += 3;
    uint64_t group3 = 0;
    group3 *= 50;
    group3 += (*input)[0];

    group3 *= 50;
    group3 += (*input)[1];

    group3 *= 50;
    group3 += (*input)[2];

    *((uint64_t *)((*output) + 6)) |= (group3 << 3);
    *input += 3;
    uint64_t group4 = 0;
    group4 *= 50;
    group4 += (*input)[0];

    group4 *= 50;
    group4 += (*input)[1];

    group4 *= 50;
    group4 += (*input)[2];

    *((uint64_t *)((*output) + 8)) |= (group4 << 4);
    *input += 3;
    uint64_t group5 = 0;
    group5 *= 50;
    group5 += (*input)[0];

    group5 *= 50;
    group5 += (*input)[1];

    group5 *= 50;
    group5 += (*input)[2];

    *((uint64_t *)((*output) + 10)) |= (group5 << 5);
    *input += 3;
    uint64_t group6 = 0;
    group6 *= 50;
    group6 += (*input)[0];

    group6 *= 50;
    group6 += (*input)[1];

    group6 *= 50;
    group6 += (*input)[2];

    *((uint64_t *)((*output) + 12)) |= (group6 << 6);
    *input += 3;
    uint64_t group7 = 0;
    group7 *= 50;
    group7 += (*input)[0];

    group7 *= 50;
    group7 += (*input)[1];

    group7 *= 50;
    group7 += (*input)[2];

    *((uint64_t *)((*output) + 14)) |= (group7 << 7);
    *input += 3;
    *output += 17;
}

// Pack 8 groups using 23 bytes (32 values total)
void Ultrapack_Compress51(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 51;
    group0 += (*input)[0];

    group0 *= 51;
    group0 += (*input)[1];

    group0 *= 51;
    group0 += (*input)[2];

    group0 *= 51;
    group0 += (*input)[3];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 4;
    uint64_t group1 = 0;
    group1 *= 51;
    group1 += (*input)[0];

    group1 *= 51;
    group1 += (*input)[1];

    group1 *= 51;
    group1 += (*input)[2];

    group1 *= 51;
    group1 += (*input)[3];

    *((uint64_t *)((*output) + 2)) |= (group1 << 7);
    *input += 4;
    uint64_t group2 = 0;
    group2 *= 51;
    group2 += (*input)[0];

    group2 *= 51;
    group2 += (*input)[1];

    group2 *= 51;
    group2 += (*input)[2];

    group2 *= 51;
    group2 += (*input)[3];

    *((uint64_t *)((*output) + 5)) |= (group2 << 6);
    *input += 4;
    uint64_t group3 = 0;
    group3 *= 51;
    group3 += (*input)[0];

    group3 *= 51;
    group3 += (*input)[1];

    group3 *= 51;
    group3 += (*input)[2];

    group3 *= 51;
    group3 += (*input)[3];

    *((uint64_t *)((*output) + 8)) |= (group3 << 5);
    *input += 4;
    uint64_t group4 = 0;
    group4 *= 51;
    group4 += (*input)[0];

    group4 *= 51;
    group4 += (*input)[1];

    group4 *= 51;
    group4 += (*input)[2];

    group4 *= 51;
    group4 += (*input)[3];

    *((uint64_t *)((*output) + 11)) |= (group4 << 4);
    *input += 4;
    uint64_t group5 = 0;
    group5 *= 51;
    group5 += (*input)[0];

    group5 *= 51;
    group5 += (*input)[1];

    group5 *= 51;
    group5 += (*input)[2];

    group5 *= 51;
    group5 += (*input)[3];

    *((uint64_t *)((*output) + 14)) |= (group5 << 3);
    *input += 4;
    uint64_t group6 = 0;
    group6 *= 51;
    group6 += (*input)[0];

    group6 *= 51;
    group6 += (*input)[1];

    group6 *= 51;
    group6 += (*input)[2];

    group6 *= 51;
    group6 += (*input)[3];

    *((uint64_t *)((*output) + 17)) |= (group6 << 2);
    *input += 4;
    uint64_t group7 = 0;
    group7 *= 51;
    group7 += (*input)[0];

    group7 *= 51;
    group7 += (*input)[1];

    group7 *= 51;
    group7 += (*input)[2];

    group7 *= 51;
    group7 += (*input)[3];

    *((uint64_t *)((*output) + 20)) |= (group7 << 1);
    *input += 4;
    *output += 23;
}

// Pack 8 groups using 23 bytes (32 values total)
void Ultrapack_Compress52(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 52;
    group0 += (*input)[0];

    group0 *= 52;
    group0 += (*input)[1];

    group0 *= 52;
    group0 += (*input)[2];

    group0 *= 52;
    group0 += (*input)[3];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 4;
    uint64_t group1 = 0;
    group1 *= 52;
    group1 += (*input)[0];

    group1 *= 52;
    group1 += (*input)[1];

    group1 *= 52;
    group1 += (*input)[2];

    group1 *= 52;
    group1 += (*input)[3];

    *((uint64_t *)((*output) + 2)) |= (group1 << 7);
    *input += 4;
    uint64_t group2 = 0;
    group2 *= 52;
    group2 += (*input)[0];

    group2 *= 52;
    group2 += (*input)[1];

    group2 *= 52;
    group2 += (*input)[2];

    group2 *= 52;
    group2 += (*input)[3];

    *((uint64_t *)((*output) + 5)) |= (group2 << 6);
    *input += 4;
    uint64_t group3 = 0;
    group3 *= 52;
    group3 += (*input)[0];

    group3 *= 52;
    group3 += (*input)[1];

    group3 *= 52;
    group3 += (*input)[2];

    group3 *= 52;
    group3 += (*input)[3];

    *((uint64_t *)((*output) + 8)) |= (group3 << 5);
    *input += 4;
    uint64_t group4 = 0;
    group4 *= 52;
    group4 += (*input)[0];

    group4 *= 52;
    group4 += (*input)[1];

    group4 *= 52;
    group4 += (*input)[2];

    group4 *= 52;
    group4 += (*input)[3];

    *((uint64_t *)((*output) + 11)) |= (group4 << 4);
    *input += 4;
    uint64_t group5 = 0;
    group5 *= 52;
    group5 += (*input)[0];

    group5 *= 52;
    group5 += (*input)[1];

    group5 *= 52;
    group5 += (*input)[2];

    group5 *= 52;
    group5 += (*input)[3];

    *((uint64_t *)((*output) + 14)) |= (group5 << 3);
    *input += 4;
    uint64_t group6 = 0;
    group6 *= 52;
    group6 += (*input)[0];

    group6 *= 52;
    group6 += (*input)[1];

    group6 *= 52;
    group6 += (*input)[2];

    group6 *= 52;
    group6 += (*input)[3];

    *((uint64_t *)((*output) + 17)) |= (group6 << 2);
    *input += 4;
    uint64_t group7 = 0;
    group7 *= 52;
    group7 += (*input)[0];

    group7 *= 52;
    group7 += (*input)[1];

    group7 *= 52;
    group7 += (*input)[2];

    group7 *= 52;
    group7 += (*input)[3];

    *((uint64_t *)((*output) + 20)) |= (group7 << 1);
    *input += 4;
    *output += 23;
}

// Pack 8 groups using 23 bytes (32 values total)
void Ultrapack_Compress53(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 53;
    group0 += (*input)[0];

    group0 *= 53;
    group0 += (*input)[1];

    group0 *= 53;
    group0 += (*input)[2];

    group0 *= 53;
    group0 += (*input)[3];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 4;
    uint64_t group1 = 0;
    group1 *= 53;
    group1 += (*input)[0];

    group1 *= 53;
    group1 += (*input)[1];

    group1 *= 53;
    group1 += (*input)[2];

    group1 *= 53;
    group1 += (*input)[3];

    *((uint64_t *)((*output) + 2)) |= (group1 << 7);
    *input += 4;
    uint64_t group2 = 0;
    group2 *= 53;
    group2 += (*input)[0];

    group2 *= 53;
    group2 += (*input)[1];

    group2 *= 53;
    group2 += (*input)[2];

    group2 *= 53;
    group2 += (*input)[3];

    *((uint64_t *)((*output) + 5)) |= (group2 << 6);
    *input += 4;
    uint64_t group3 = 0;
    group3 *= 53;
    group3 += (*input)[0];

    group3 *= 53;
    group3 += (*input)[1];

    group3 *= 53;
    group3 += (*input)[2];

    group3 *= 53;
    group3 += (*input)[3];

    *((uint64_t *)((*output) + 8)) |= (group3 << 5);
    *input += 4;
    uint64_t group4 = 0;
    group4 *= 53;
    group4 += (*input)[0];

    group4 *= 53;
    group4 += (*input)[1];

    group4 *= 53;
    group4 += (*input)[2];

    group4 *= 53;
    group4 += (*input)[3];

    *((uint64_t *)((*output) + 11)) |= (group4 << 4);
    *input += 4;
    uint64_t group5 = 0;
    group5 *= 53;
    group5 += (*input)[0];

    group5 *= 53;
    group5 += (*input)[1];

    group5 *= 53;
    group5 += (*input)[2];

    group5 *= 53;
    group5 += (*input)[3];

    *((uint64_t *)((*output) + 14)) |= (group5 << 3);
    *input += 4;
    uint64_t group6 = 0;
    group6 *= 53;
    group6 += (*input)[0];

    group6 *= 53;
    group6 += (*input)[1];

    group6 *= 53;
    group6 += (*input)[2];

    group6 *= 53;
    group6 += (*input)[3];

    *((uint64_t *)((*output) + 17)) |= (group6 << 2);
    *input += 4;
    uint64_t group7 = 0;
    group7 *= 53;
    group7 += (*input)[0];

    group7 *= 53;
    group7 += (*input)[1];

    group7 *= 53;
    group7 += (*input)[2];

    group7 *= 53;
    group7 += (*input)[3];

    *((uint64_t *)((*output) + 20)) |= (group7 << 1);
    *input += 4;
    *output += 23;
}

// Pack 8 groups using 29 bytes (40 values total)
void Ultrapack_Compress54(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 54;
    group0 += (*input)[0];

    group0 *= 54;
    group0 += (*input)[1];

    group0 *= 54;
    group0 += (*input)[2];

    group0 *= 54;
    group0 += (*input)[3];

    group0 *= 54;
    group0 += (*input)[4];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 5;
    uint64_t group1 = 0;
    group1 *= 54;
    group1 += (*input)[0];

    group1 *= 54;
    group1 += (*input)[1];

    group1 *= 54;
    group1 += (*input)[2];

    group1 *= 54;
    group1 += (*input)[3];

    group1 *= 54;
    group1 += (*input)[4];

    *((uint64_t *)((*output) + 3)) |= (group1 << 5);
    *input += 5;
    uint64_t group2 = 0;
    group2 *= 54;
    group2 += (*input)[0];

    group2 *= 54;
    group2 += (*input)[1];

    group2 *= 54;
    group2 += (*input)[2];

    group2 *= 54;
    group2 += (*input)[3];

    group2 *= 54;
    group2 += (*input)[4];

    *((uint64_t *)((*output) + 7)) |= (group2 << 2);
    *input += 5;
    uint64_t group3 = 0;
    group3 *= 54;
    group3 += (*input)[0];

    group3 *= 54;
    group3 += (*input)[1];

    group3 *= 54;
    group3 += (*input)[2];

    group3 *= 54;
    group3 += (*input)[3];

    group3 *= 54;
    group3 += (*input)[4];

    *((uint64_t *)((*output) + 10)) |= (group3 << 7);
    *input += 5;
    uint64_t group4 = 0;
    group4 *= 54;
    group4 += (*input)[0];

    group4 *= 54;
    group4 += (*input)[1];

    group4 *= 54;
    group4 += (*input)[2];

    group4 *= 54;
    group4 += (*input)[3];

    group4 *= 54;
    group4 += (*input)[4];

    *((uint64_t *)((*output) + 14)) |= (group4 << 4);
    *input += 5;
    uint64_t group5 = 0;
    group5 *= 54;
    group5 += (*input)[0];

    group5 *= 54;
    group5 += (*input)[1];

    group5 *= 54;
    group5 += (*input)[2];

    group5 *= 54;
    group5 += (*input)[3];

    group5 *= 54;
    group5 += (*input)[4];

    *((uint64_t *)((*output) + 18)) |= (group5 << 1);
    *input += 5;
    uint64_t group6 = 0;
    group6 *= 54;
    group6 += (*input)[0];

    group6 *= 54;
    group6 += (*input)[1];

    group6 *= 54;
    group6 += (*input)[2];

    group6 *= 54;
    group6 += (*input)[3];

    group6 *= 54;
    group6 += (*input)[4];

    *((uint64_t *)((*output) + 21)) |= (group6 << 6);
    *input += 5;
    uint64_t group7 = 0;
    group7 *= 54;
    group7 += (*input)[0];

    group7 *= 54;
    group7 += (*input)[1];

    group7 *= 54;
    group7 += (*input)[2];

    group7 *= 54;
    group7 += (*input)[3];

    group7 *= 54;
    group7 += (*input)[4];

    *((uint64_t *)((*output) + 25)) |= (group7 << 3);
    *input += 5;
    *output += 29;
}

// Pack 8 groups using 29 bytes (40 values total)
void Ultrapack_Compress55(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 55;
    group0 += (*input)[0];

    group0 *= 55;
    group0 += (*input)[1];

    group0 *= 55;
    group0 += (*input)[2];

    group0 *= 55;
    group0 += (*input)[3];

    group0 *= 55;
    group0 += (*input)[4];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 5;
    uint64_t group1 = 0;
    group1 *= 55;
    group1 += (*input)[0];

    group1 *= 55;
    group1 += (*input)[1];

    group1 *= 55;
    group1 += (*input)[2];

    group1 *= 55;
    group1 += (*input)[3];

    group1 *= 55;
    group1 += (*input)[4];

    *((uint64_t *)((*output) + 3)) |= (group1 << 5);
    *input += 5;
    uint64_t group2 = 0;
    group2 *= 55;
    group2 += (*input)[0];

    group2 *= 55;
    group2 += (*input)[1];

    group2 *= 55;
    group2 += (*input)[2];

    group2 *= 55;
    group2 += (*input)[3];

    group2 *= 55;
    group2 += (*input)[4];

    *((uint64_t *)((*output) + 7)) |= (group2 << 2);
    *input += 5;
    uint64_t group3 = 0;
    group3 *= 55;
    group3 += (*input)[0];

    group3 *= 55;
    group3 += (*input)[1];

    group3 *= 55;
    group3 += (*input)[2];

    group3 *= 55;
    group3 += (*input)[3];

    group3 *= 55;
    group3 += (*input)[4];

    *((uint64_t *)((*output) + 10)) |= (group3 << 7);
    *input += 5;
    uint64_t group4 = 0;
    group4 *= 55;
    group4 += (*input)[0];

    group4 *= 55;
    group4 += (*input)[1];

    group4 *= 55;
    group4 += (*input)[2];

    group4 *= 55;
    group4 += (*input)[3];

    group4 *= 55;
    group4 += (*input)[4];

    *((uint64_t *)((*output) + 14)) |= (group4 << 4);
    *input += 5;
    uint64_t group5 = 0;
    group5 *= 55;
    group5 += (*input)[0];

    group5 *= 55;
    group5 += (*input)[1];

    group5 *= 55;
    group5 += (*input)[2];

    group5 *= 55;
    group5 += (*input)[3];

    group5 *= 55;
    group5 += (*input)[4];

    *((uint64_t *)((*output) + 18)) |= (group5 << 1);
    *input += 5;
    uint64_t group6 = 0;
    group6 *= 55;
    group6 += (*input)[0];

    group6 *= 55;
    group6 += (*input)[1];

    group6 *= 55;
    group6 += (*input)[2];

    group6 *= 55;
    group6 += (*input)[3];

    group6 *= 55;
    group6 += (*input)[4];

    *((uint64_t *)((*output) + 21)) |= (group6 << 6);
    *input += 5;
    uint64_t group7 = 0;
    group7 *= 55;
    group7 += (*input)[0];

    group7 *= 55;
    group7 += (*input)[1];

    group7 *= 55;
    group7 += (*input)[2];

    group7 *= 55;
    group7 += (*input)[3];

    group7 *= 55;
    group7 += (*input)[4];

    *((uint64_t *)((*output) + 25)) |= (group7 << 3);
    *input += 5;
    *output += 29;
}

// Pack 8 groups using 35 bytes (48 values total)
void Ultrapack_Compress56(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 56;
    group0 += (*input)[0];

    group0 *= 56;
    group0 += (*input)[1];

    group0 *= 56;
    group0 += (*input)[2];

    group0 *= 56;
    group0 += (*input)[3];

    group0 *= 56;
    group0 += (*input)[4];

    group0 *= 56;
    group0 += (*input)[5];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 6;
    uint64_t group1 = 0;
    group1 *= 56;
    group1 += (*input)[0];

    group1 *= 56;
    group1 += (*input)[1];

    group1 *= 56;
    group1 += (*input)[2];

    group1 *= 56;
    group1 += (*input)[3];

    group1 *= 56;
    group1 += (*input)[4];

    group1 *= 56;
    group1 += (*input)[5];

    *((uint64_t *)((*output) + 4)) |= (group1 << 3);
    *input += 6;
    uint64_t group2 = 0;
    group2 *= 56;
    group2 += (*input)[0];

    group2 *= 56;
    group2 += (*input)[1];

    group2 *= 56;
    group2 += (*input)[2];

    group2 *= 56;
    group2 += (*input)[3];

    group2 *= 56;
    group2 += (*input)[4];

    group2 *= 56;
    group2 += (*input)[5];

    *((uint64_t *)((*output) + 8)) |= (group2 << 6);
    *input += 6;
    uint64_t group3 = 0;
    group3 *= 56;
    group3 += (*input)[0];

    group3 *= 56;
    group3 += (*input)[1];

    group3 *= 56;
    group3 += (*input)[2];

    group3 *= 56;
    group3 += (*input)[3];

    group3 *= 56;
    group3 += (*input)[4];

    group3 *= 56;
    group3 += (*input)[5];

    *((uint64_t *)((*output) + 13)) |= (group3 << 1);
    *input += 6;
    uint64_t group4 = 0;
    group4 *= 56;
    group4 += (*input)[0];

    group4 *= 56;
    group4 += (*input)[1];

    group4 *= 56;
    group4 += (*input)[2];

    group4 *= 56;
    group4 += (*input)[3];

    group4 *= 56;
    group4 += (*input)[4];

    group4 *= 56;
    group4 += (*input)[5];

    *((uint64_t *)((*output) + 17)) |= (group4 << 4);
    *input += 6;
    uint64_t group5 = 0;
    group5 *= 56;
    group5 += (*input)[0];

    group5 *= 56;
    group5 += (*input)[1];

    group5 *= 56;
    group5 += (*input)[2];

    group5 *= 56;
    group5 += (*input)[3];

    group5 *= 56;
    group5 += (*input)[4];

    group5 *= 56;
    group5 += (*input)[5];

    *((uint64_t *)((*output) + 21)) |= (group5 << 7);
    *input += 6;
    uint64_t group6 = 0;
    group6 *= 56;
    group6 += (*input)[0];

    group6 *= 56;
    group6 += (*input)[1];

    group6 *= 56;
    group6 += (*input)[2];

    group6 *= 56;
    group6 += (*input)[3];

    group6 *= 56;
    group6 += (*input)[4];

    group6 *= 56;
    group6 += (*input)[5];

    *((uint64_t *)((*output) + 26)) |= (group6 << 2);
    *input += 6;
    uint64_t group7 = 0;
    group7 *= 56;
    group7 += (*input)[0];

    group7 *= 56;
    group7 += (*input)[1];

    group7 *= 56;
    group7 += (*input)[2];

    group7 *= 56;
    group7 += (*input)[3];

    group7 *= 56;
    group7 += (*input)[4];

    group7 *= 56;
    group7 += (*input)[5];

    *((uint64_t *)((*output) + 30)) |= (group7 << 5);
    *input += 6;
    *output += 35;
}

// Pack 8 groups using 35 bytes (48 values total)
void Ultrapack_Compress57(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 57;
    group0 += (*input)[0];

    group0 *= 57;
    group0 += (*input)[1];

    group0 *= 57;
    group0 += (*input)[2];

    group0 *= 57;
    group0 += (*input)[3];

    group0 *= 57;
    group0 += (*input)[4];

    group0 *= 57;
    group0 += (*input)[5];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 6;
    uint64_t group1 = 0;
    group1 *= 57;
    group1 += (*input)[0];

    group1 *= 57;
    group1 += (*input)[1];

    group1 *= 57;
    group1 += (*input)[2];

    group1 *= 57;
    group1 += (*input)[3];

    group1 *= 57;
    group1 += (*input)[4];

    group1 *= 57;
    group1 += (*input)[5];

    *((uint64_t *)((*output) + 4)) |= (group1 << 3);
    *input += 6;
    uint64_t group2 = 0;
    group2 *= 57;
    group2 += (*input)[0];

    group2 *= 57;
    group2 += (*input)[1];

    group2 *= 57;
    group2 += (*input)[2];

    group2 *= 57;
    group2 += (*input)[3];

    group2 *= 57;
    group2 += (*input)[4];

    group2 *= 57;
    group2 += (*input)[5];

    *((uint64_t *)((*output) + 8)) |= (group2 << 6);
    *input += 6;
    uint64_t group3 = 0;
    group3 *= 57;
    group3 += (*input)[0];

    group3 *= 57;
    group3 += (*input)[1];

    group3 *= 57;
    group3 += (*input)[2];

    group3 *= 57;
    group3 += (*input)[3];

    group3 *= 57;
    group3 += (*input)[4];

    group3 *= 57;
    group3 += (*input)[5];

    *((uint64_t *)((*output) + 13)) |= (group3 << 1);
    *input += 6;
    uint64_t group4 = 0;
    group4 *= 57;
    group4 += (*input)[0];

    group4 *= 57;
    group4 += (*input)[1];

    group4 *= 57;
    group4 += (*input)[2];

    group4 *= 57;
    group4 += (*input)[3];

    group4 *= 57;
    group4 += (*input)[4];

    group4 *= 57;
    group4 += (*input)[5];

    *((uint64_t *)((*output) + 17)) |= (group4 << 4);
    *input += 6;
    uint64_t group5 = 0;
    group5 *= 57;
    group5 += (*input)[0];

    group5 *= 57;
    group5 += (*input)[1];

    group5 *= 57;
    group5 += (*input)[2];

    group5 *= 57;
    group5 += (*input)[3];

    group5 *= 57;
    group5 += (*input)[4];

    group5 *= 57;
    group5 += (*input)[5];

    *((uint64_t *)((*output) + 21)) |= (group5 << 7);
    *input += 6;
    uint64_t group6 = 0;
    group6 *= 57;
    group6 += (*input)[0];

    group6 *= 57;
    group6 += (*input)[1];

    group6 *= 57;
    group6 += (*input)[2];

    group6 *= 57;
    group6 += (*input)[3];

    group6 *= 57;
    group6 += (*input)[4];

    group6 *= 57;
    group6 += (*input)[5];

    *((uint64_t *)((*output) + 26)) |= (group6 << 2);
    *input += 6;
    uint64_t group7 = 0;
    group7 *= 57;
    group7 += (*input)[0];

    group7 *= 57;
    group7 += (*input)[1];

    group7 *= 57;
    group7 += (*input)[2];

    group7 *= 57;
    group7 += (*input)[3];

    group7 *= 57;
    group7 += (*input)[4];

    group7 *= 57;
    group7 += (*input)[5];

    *((uint64_t *)((*output) + 30)) |= (group7 << 5);
    *input += 6;
    *output += 35;
}

// Pack 8 groups using 47 bytes (64 values total)
void Ultrapack_Compress58(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 58;
    group0 += (*input)[0];

    group0 *= 58;
    group0 += (*input)[1];

    group0 *= 58;
    group0 += (*input)[2];

    group0 *= 58;
    group0 += (*input)[3];

    group0 *= 58;
    group0 += (*input)[4];

    group0 *= 58;
    group0 += (*input)[5];

    group0 *= 58;
    group0 += (*input)[6];

    group0 *= 58;
    group0 += (*input)[7];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 8;
    uint64_t group1 = 0;
    group1 *= 58;
    group1 += (*input)[0];

    group1 *= 58;
    group1 += (*input)[1];

    group1 *= 58;
    group1 += (*input)[2];

    group1 *= 58;
    group1 += (*input)[3];

    group1 *= 58;
    group1 += (*input)[4];

    group1 *= 58;
    group1 += (*input)[5];

    group1 *= 58;
    group1 += (*input)[6];

    group1 *= 58;
    group1 += (*input)[7];

    *((uint64_t *)((*output) + 5)) |= (group1 << 7);
    *input += 8;
    uint64_t group2 = 0;
    group2 *= 58;
    group2 += (*input)[0];

    group2 *= 58;
    group2 += (*input)[1];

    group2 *= 58;
    group2 += (*input)[2];

    group2 *= 58;
    group2 += (*input)[3];

    group2 *= 58;
    group2 += (*input)[4];

    group2 *= 58;
    group2 += (*input)[5];

    group2 *= 58;
    group2 += (*input)[6];

    group2 *= 58;
    group2 += (*input)[7];

    *((uint64_t *)((*output) + 11)) |= (group2 << 6);
    *input += 8;
    uint64_t group3 = 0;
    group3 *= 58;
    group3 += (*input)[0];

    group3 *= 58;
    group3 += (*input)[1];

    group3 *= 58;
    group3 += (*input)[2];

    group3 *= 58;
    group3 += (*input)[3];

    group3 *= 58;
    group3 += (*input)[4];

    group3 *= 58;
    group3 += (*input)[5];

    group3 *= 58;
    group3 += (*input)[6];

    group3 *= 58;
    group3 += (*input)[7];

    *((uint64_t *)((*output) + 17)) |= (group3 << 5);
    *input += 8;
    uint64_t group4 = 0;
    group4 *= 58;
    group4 += (*input)[0];

    group4 *= 58;
    group4 += (*input)[1];

    group4 *= 58;
    group4 += (*input)[2];

    group4 *= 58;
    group4 += (*input)[3];

    group4 *= 58;
    group4 += (*input)[4];

    group4 *= 58;
    group4 += (*input)[5];

    group4 *= 58;
    group4 += (*input)[6];

    group4 *= 58;
    group4 += (*input)[7];

    *((uint64_t *)((*output) + 23)) |= (group4 << 4);
    *input += 8;
    uint64_t group5 = 0;
    group5 *= 58;
    group5 += (*input)[0];

    group5 *= 58;
    group5 += (*input)[1];

    group5 *= 58;
    group5 += (*input)[2];

    group5 *= 58;
    group5 += (*input)[3];

    group5 *= 58;
    group5 += (*input)[4];

    group5 *= 58;
    group5 += (*input)[5];

    group5 *= 58;
    group5 += (*input)[6];

    group5 *= 58;
    group5 += (*input)[7];

    *((uint64_t *)((*output) + 29)) |= (group5 << 3);
    *input += 8;
    uint64_t group6 = 0;
    group6 *= 58;
    group6 += (*input)[0];

    group6 *= 58;
    group6 += (*input)[1];

    group6 *= 58;
    group6 += (*input)[2];

    group6 *= 58;
    group6 += (*input)[3];

    group6 *= 58;
    group6 += (*input)[4];

    group6 *= 58;
    group6 += (*input)[5];

    group6 *= 58;
    group6 += (*input)[6];

    group6 *= 58;
    group6 += (*input)[7];

    *((uint64_t *)((*output) + 35)) |= (group6 << 2);
    *input += 8;
    uint64_t group7 = 0;
    group7 *= 58;
    group7 += (*input)[0];

    group7 *= 58;
    group7 += (*input)[1];

    group7 *= 58;
    group7 += (*input)[2];

    group7 *= 58;
    group7 += (*input)[3];

    group7 *= 58;
    group7 += (*input)[4];

    group7 *= 58;
    group7 += (*input)[5];

    group7 *= 58;
    group7 += (*input)[6];

    group7 *= 58;
    group7 += (*input)[7];

    *((uint64_t *)((*output) + 41)) |= (group7 << 1);
    *input += 8;
    *output += 47;
}

// Pack 8 groups using 53 bytes (72 values total)
void Ultrapack_Compress59(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 59;
    group0 += (*input)[0];

    group0 *= 59;
    group0 += (*input)[1];

    group0 *= 59;
    group0 += (*input)[2];

    group0 *= 59;
    group0 += (*input)[3];

    group0 *= 59;
    group0 += (*input)[4];

    group0 *= 59;
    group0 += (*input)[5];

    group0 *= 59;
    group0 += (*input)[6];

    group0 *= 59;
    group0 += (*input)[7];

    group0 *= 59;
    group0 += (*input)[8];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 9;
    uint64_t group1 = 0;
    group1 *= 59;
    group1 += (*input)[0];

    group1 *= 59;
    group1 += (*input)[1];

    group1 *= 59;
    group1 += (*input)[2];

    group1 *= 59;
    group1 += (*input)[3];

    group1 *= 59;
    group1 += (*input)[4];

    group1 *= 59;
    group1 += (*input)[5];

    group1 *= 59;
    group1 += (*input)[6];

    group1 *= 59;
    group1 += (*input)[7];

    group1 *= 59;
    group1 += (*input)[8];

    *((uint64_t *)((*output) + 6)) |= (group1 << 5);
    *input += 9;
    uint64_t group2 = 0;
    group2 *= 59;
    group2 += (*input)[0];

    group2 *= 59;
    group2 += (*input)[1];

    group2 *= 59;
    group2 += (*input)[2];

    group2 *= 59;
    group2 += (*input)[3];

    group2 *= 59;
    group2 += (*input)[4];

    group2 *= 59;
    group2 += (*input)[5];

    group2 *= 59;
    group2 += (*input)[6];

    group2 *= 59;
    group2 += (*input)[7];

    group2 *= 59;
    group2 += (*input)[8];

    *((uint64_t *)((*output) + 13)) |= (group2 << 2);
    *input += 9;
    uint64_t group3 = 0;
    group3 *= 59;
    group3 += (*input)[0];

    group3 *= 59;
    group3 += (*input)[1];

    group3 *= 59;
    group3 += (*input)[2];

    group3 *= 59;
    group3 += (*input)[3];

    group3 *= 59;
    group3 += (*input)[4];

    group3 *= 59;
    group3 += (*input)[5];

    group3 *= 59;
    group3 += (*input)[6];

    group3 *= 59;
    group3 += (*input)[7];

    group3 *= 59;
    group3 += (*input)[8];

    *((uint64_t *)((*output) + 19)) |= (group3 << 7);
    *input += 9;
    uint64_t group4 = 0;
    group4 *= 59;
    group4 += (*input)[0];

    group4 *= 59;
    group4 += (*input)[1];

    group4 *= 59;
    group4 += (*input)[2];

    group4 *= 59;
    group4 += (*input)[3];

    group4 *= 59;
    group4 += (*input)[4];

    group4 *= 59;
    group4 += (*input)[5];

    group4 *= 59;
    group4 += (*input)[6];

    group4 *= 59;
    group4 += (*input)[7];

    group4 *= 59;
    group4 += (*input)[8];

    *((uint64_t *)((*output) + 26)) |= (group4 << 4);
    *input += 9;
    uint64_t group5 = 0;
    group5 *= 59;
    group5 += (*input)[0];

    group5 *= 59;
    group5 += (*input)[1];

    group5 *= 59;
    group5 += (*input)[2];

    group5 *= 59;
    group5 += (*input)[3];

    group5 *= 59;
    group5 += (*input)[4];

    group5 *= 59;
    group5 += (*input)[5];

    group5 *= 59;
    group5 += (*input)[6];

    group5 *= 59;
    group5 += (*input)[7];

    group5 *= 59;
    group5 += (*input)[8];

    *((uint64_t *)((*output) + 33)) |= (group5 << 1);
    *input += 9;
    uint64_t group6 = 0;
    group6 *= 59;
    group6 += (*input)[0];

    group6 *= 59;
    group6 += (*input)[1];

    group6 *= 59;
    group6 += (*input)[2];

    group6 *= 59;
    group6 += (*input)[3];

    group6 *= 59;
    group6 += (*input)[4];

    group6 *= 59;
    group6 += (*input)[5];

    group6 *= 59;
    group6 += (*input)[6];

    group6 *= 59;
    group6 += (*input)[7];

    group6 *= 59;
    group6 += (*input)[8];

    *((uint64_t *)((*output) + 39)) |= (group6 << 6);
    *input += 9;
    uint64_t group7 = 0;
    group7 *= 59;
    group7 += (*input)[0];

    group7 *= 59;
    group7 += (*input)[1];

    group7 *= 59;
    group7 += (*input)[2];

    group7 *= 59;
    group7 += (*input)[3];

    group7 *= 59;
    group7 += (*input)[4];

    group7 *= 59;
    group7 += (*input)[5];

    group7 *= 59;
    group7 += (*input)[6];

    group7 *= 59;
    group7 += (*input)[7];

    group7 *= 59;
    group7 += (*input)[8];

    *((uint64_t *)((*output) + 46)) |= (group7 << 3);
    *input += 9;
    *output += 53;
}

// Pack 4 groups using 3 bytes (4 values total)
void Ultrapack_Compress60(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 60;
    group0 += (*input)[0];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 1;
    uint64_t group1 = 0;
    group1 *= 60;
    group1 += (*input)[0];

    *((uint64_t *)((*output) + 0)) |= (group1 << 6);
    *input += 1;
    uint64_t group2 = 0;
    group2 *= 60;
    group2 += (*input)[0];

    *((uint64_t *)((*output) + 1)) |= (group2 << 4);
    *input += 1;
    uint64_t group3 = 0;
    group3 *= 60;
    group3 += (*input)[0];

    *((uint64_t *)((*output) + 2)) |= (group3 << 2);
    *input += 1;
    *output += 3;
}

// Pack 4 groups using 3 bytes (4 values total)
void Ultrapack_Compress61(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 61;
    group0 += (*input)[0];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 1;
    uint64_t group1 = 0;
    group1 *= 61;
    group1 += (*input)[0];

    *((uint64_t *)((*output) + 0)) |= (group1 << 6);
    *input += 1;
    uint64_t group2 = 0;
    group2 *= 61;
    group2 += (*input)[0];

    *((uint64_t *)((*output) + 1)) |= (group2 << 4);
    *input += 1;
    uint64_t group3 = 0;
    group3 *= 61;
    group3 += (*input)[0];

    *((uint64_t *)((*output) + 2)) |= (group3 << 2);
    *input += 1;
    *output += 3;
}

// Pack 4 groups using 3 bytes (4 values total)
void Ultrapack_Compress62(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 62;
    group0 += (*input)[0];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 1;
    uint64_t group1 = 0;
    group1 *= 62;
    group1 += (*input)[0];

    *((uint64_t *)((*output) + 0)) |= (group1 << 6);
    *input += 1;
    uint64_t group2 = 0;
    group2 *= 62;
    group2 += (*input)[0];

    *((uint64_t *)((*output) + 1)) |= (group2 << 4);
    *input += 1;
    uint64_t group3 = 0;
    group3 *= 62;
    group3 += (*input)[0];

    *((uint64_t *)((*output) + 2)) |= (group3 << 2);
    *input += 1;
    *output += 3;
}

// Pack 4 groups using 3 bytes (4 values total)
void Ultrapack_Compress63(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 63;
    group0 += (*input)[0];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 1;
    uint64_t group1 = 0;
    group1 *= 63;
    group1 += (*input)[0];

    *((uint64_t *)((*output) + 0)) |= (group1 << 6);
    *input += 1;
    uint64_t group2 = 0;
    group2 *= 63;
    group2 += (*input)[0];

    *((uint64_t *)((*output) + 1)) |= (group2 << 4);
    *input += 1;
    uint64_t group3 = 0;
    group3 *= 63;
    group3 += (*input)[0];

    *((uint64_t *)((*output) + 2)) |= (group3 << 2);
    *input += 1;
    *output += 3;
}

// Pack 4 groups using 3 bytes (4 values total)
void Ultrapack_Compress64(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 64;
    group0 += (*input)[0];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 1;
    uint64_t group1 = 0;
    group1 *= 64;
    group1 += (*input)[0];

    *((uint64_t *)((*output) + 0)) |= (group1 << 6);
    *input += 1;
    uint64_t group2 = 0;
    group2 *= 64;
    group2 += (*input)[0];

    *((uint64_t *)((*output) + 1)) |= (group2 << 4);
    *input += 1;
    uint64_t group3 = 0;
    group3 *= 64;
    group3 += (*input)[0];

    *((uint64_t *)((*output) + 2)) |= (group3 << 2);
    *input += 1;
    *output += 3;
}

// Pack 8 groups using 55 bytes (72 values total)
void Ultrapack_Compress65(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 65;
    group0 += (*input)[0];

    group0 *= 65;
    group0 += (*input)[1];

    group0 *= 65;
    group0 += (*input)[2];

    group0 *= 65;
    group0 += (*input)[3];

    group0 *= 65;
    group0 += (*input)[4];

    group0 *= 65;
    group0 += (*input)[5];

    group0 *= 65;
    group0 += (*input)[6];

    group0 *= 65;
    group0 += (*input)[7];

    group0 *= 65;
    group0 += (*input)[8];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 9;
    uint64_t group1 = 0;
    group1 *= 65;
    group1 += (*input)[0];

    group1 *= 65;
    group1 += (*input)[1];

    group1 *= 65;
    group1 += (*input)[2];

    group1 *= 65;
    group1 += (*input)[3];

    group1 *= 65;
    group1 += (*input)[4];

    group1 *= 65;
    group1 += (*input)[5];

    group1 *= 65;
    group1 += (*input)[6];

    group1 *= 65;
    group1 += (*input)[7];

    group1 *= 65;
    group1 += (*input)[8];

    *((uint64_t *)((*output) + 6)) |= (group1 << 7);
    *input += 9;
    uint64_t group2 = 0;
    group2 *= 65;
    group2 += (*input)[0];

    group2 *= 65;
    group2 += (*input)[1];

    group2 *= 65;
    group2 += (*input)[2];

    group2 *= 65;
    group2 += (*input)[3];

    group2 *= 65;
    group2 += (*input)[4];

    group2 *= 65;
    group2 += (*input)[5];

    group2 *= 65;
    group2 += (*input)[6];

    group2 *= 65;
    group2 += (*input)[7];

    group2 *= 65;
    group2 += (*input)[8];

    *((uint64_t *)((*output) + 13)) |= (group2 << 6);
    *input += 9;
    uint64_t group3 = 0;
    group3 *= 65;
    group3 += (*input)[0];

    group3 *= 65;
    group3 += (*input)[1];

    group3 *= 65;
    group3 += (*input)[2];

    group3 *= 65;
    group3 += (*input)[3];

    group3 *= 65;
    group3 += (*input)[4];

    group3 *= 65;
    group3 += (*input)[5];

    group3 *= 65;
    group3 += (*input)[6];

    group3 *= 65;
    group3 += (*input)[7];

    group3 *= 65;
    group3 += (*input)[8];

    *((uint64_t *)((*output) + 20)) |= (group3 << 5);
    *input += 9;
    uint64_t group4 = 0;
    group4 *= 65;
    group4 += (*input)[0];

    group4 *= 65;
    group4 += (*input)[1];

    group4 *= 65;
    group4 += (*input)[2];

    group4 *= 65;
    group4 += (*input)[3];

    group4 *= 65;
    group4 += (*input)[4];

    group4 *= 65;
    group4 += (*input)[5];

    group4 *= 65;
    group4 += (*input)[6];

    group4 *= 65;
    group4 += (*input)[7];

    group4 *= 65;
    group4 += (*input)[8];

    *((uint64_t *)((*output) + 27)) |= (group4 << 4);
    *input += 9;
    uint64_t group5 = 0;
    group5 *= 65;
    group5 += (*input)[0];

    group5 *= 65;
    group5 += (*input)[1];

    group5 *= 65;
    group5 += (*input)[2];

    group5 *= 65;
    group5 += (*input)[3];

    group5 *= 65;
    group5 += (*input)[4];

    group5 *= 65;
    group5 += (*input)[5];

    group5 *= 65;
    group5 += (*input)[6];

    group5 *= 65;
    group5 += (*input)[7];

    group5 *= 65;
    group5 += (*input)[8];

    *((uint64_t *)((*output) + 34)) |= (group5 << 3);
    *input += 9;
    uint64_t group6 = 0;
    group6 *= 65;
    group6 += (*input)[0];

    group6 *= 65;
    group6 += (*input)[1];

    group6 *= 65;
    group6 += (*input)[2];

    group6 *= 65;
    group6 += (*input)[3];

    group6 *= 65;
    group6 += (*input)[4];

    group6 *= 65;
    group6 += (*input)[5];

    group6 *= 65;
    group6 += (*input)[6];

    group6 *= 65;
    group6 += (*input)[7];

    group6 *= 65;
    group6 += (*input)[8];

    *((uint64_t *)((*output) + 41)) |= (group6 << 2);
    *input += 9;
    uint64_t group7 = 0;
    group7 *= 65;
    group7 += (*input)[0];

    group7 *= 65;
    group7 += (*input)[1];

    group7 *= 65;
    group7 += (*input)[2];

    group7 *= 65;
    group7 += (*input)[3];

    group7 *= 65;
    group7 += (*input)[4];

    group7 *= 65;
    group7 += (*input)[5];

    group7 *= 65;
    group7 += (*input)[6];

    group7 *= 65;
    group7 += (*input)[7];

    group7 *= 65;
    group7 += (*input)[8];

    *((uint64_t *)((*output) + 48)) |= (group7 << 1);
    *input += 9;
    *output += 55;
}

// Pack 8 groups using 55 bytes (72 values total)
void Ultrapack_Compress66(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 66;
    group0 += (*input)[0];

    group0 *= 66;
    group0 += (*input)[1];

    group0 *= 66;
    group0 += (*input)[2];

    group0 *= 66;
    group0 += (*input)[3];

    group0 *= 66;
    group0 += (*input)[4];

    group0 *= 66;
    group0 += (*input)[5];

    group0 *= 66;
    group0 += (*input)[6];

    group0 *= 66;
    group0 += (*input)[7];

    group0 *= 66;
    group0 += (*input)[8];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 9;
    uint64_t group1 = 0;
    group1 *= 66;
    group1 += (*input)[0];

    group1 *= 66;
    group1 += (*input)[1];

    group1 *= 66;
    group1 += (*input)[2];

    group1 *= 66;
    group1 += (*input)[3];

    group1 *= 66;
    group1 += (*input)[4];

    group1 *= 66;
    group1 += (*input)[5];

    group1 *= 66;
    group1 += (*input)[6];

    group1 *= 66;
    group1 += (*input)[7];

    group1 *= 66;
    group1 += (*input)[8];

    *((uint64_t *)((*output) + 6)) |= (group1 << 7);
    *input += 9;
    uint64_t group2 = 0;
    group2 *= 66;
    group2 += (*input)[0];

    group2 *= 66;
    group2 += (*input)[1];

    group2 *= 66;
    group2 += (*input)[2];

    group2 *= 66;
    group2 += (*input)[3];

    group2 *= 66;
    group2 += (*input)[4];

    group2 *= 66;
    group2 += (*input)[5];

    group2 *= 66;
    group2 += (*input)[6];

    group2 *= 66;
    group2 += (*input)[7];

    group2 *= 66;
    group2 += (*input)[8];

    *((uint64_t *)((*output) + 13)) |= (group2 << 6);
    *input += 9;
    uint64_t group3 = 0;
    group3 *= 66;
    group3 += (*input)[0];

    group3 *= 66;
    group3 += (*input)[1];

    group3 *= 66;
    group3 += (*input)[2];

    group3 *= 66;
    group3 += (*input)[3];

    group3 *= 66;
    group3 += (*input)[4];

    group3 *= 66;
    group3 += (*input)[5];

    group3 *= 66;
    group3 += (*input)[6];

    group3 *= 66;
    group3 += (*input)[7];

    group3 *= 66;
    group3 += (*input)[8];

    *((uint64_t *)((*output) + 20)) |= (group3 << 5);
    *input += 9;
    uint64_t group4 = 0;
    group4 *= 66;
    group4 += (*input)[0];

    group4 *= 66;
    group4 += (*input)[1];

    group4 *= 66;
    group4 += (*input)[2];

    group4 *= 66;
    group4 += (*input)[3];

    group4 *= 66;
    group4 += (*input)[4];

    group4 *= 66;
    group4 += (*input)[5];

    group4 *= 66;
    group4 += (*input)[6];

    group4 *= 66;
    group4 += (*input)[7];

    group4 *= 66;
    group4 += (*input)[8];

    *((uint64_t *)((*output) + 27)) |= (group4 << 4);
    *input += 9;
    uint64_t group5 = 0;
    group5 *= 66;
    group5 += (*input)[0];

    group5 *= 66;
    group5 += (*input)[1];

    group5 *= 66;
    group5 += (*input)[2];

    group5 *= 66;
    group5 += (*input)[3];

    group5 *= 66;
    group5 += (*input)[4];

    group5 *= 66;
    group5 += (*input)[5];

    group5 *= 66;
    group5 += (*input)[6];

    group5 *= 66;
    group5 += (*input)[7];

    group5 *= 66;
    group5 += (*input)[8];

    *((uint64_t *)((*output) + 34)) |= (group5 << 3);
    *input += 9;
    uint64_t group6 = 0;
    group6 *= 66;
    group6 += (*input)[0];

    group6 *= 66;
    group6 += (*input)[1];

    group6 *= 66;
    group6 += (*input)[2];

    group6 *= 66;
    group6 += (*input)[3];

    group6 *= 66;
    group6 += (*input)[4];

    group6 *= 66;
    group6 += (*input)[5];

    group6 *= 66;
    group6 += (*input)[6];

    group6 *= 66;
    group6 += (*input)[7];

    group6 *= 66;
    group6 += (*input)[8];

    *((uint64_t *)((*output) + 41)) |= (group6 << 2);
    *input += 9;
    uint64_t group7 = 0;
    group7 *= 66;
    group7 += (*input)[0];

    group7 *= 66;
    group7 += (*input)[1];

    group7 *= 66;
    group7 += (*input)[2];

    group7 *= 66;
    group7 += (*input)[3];

    group7 *= 66;
    group7 += (*input)[4];

    group7 *= 66;
    group7 += (*input)[5];

    group7 *= 66;
    group7 += (*input)[6];

    group7 *= 66;
    group7 += (*input)[7];

    group7 *= 66;
    group7 += (*input)[8];

    *((uint64_t *)((*output) + 48)) |= (group7 << 1);
    *input += 9;
    *output += 55;
}

// Pack 8 groups using 55 bytes (72 values total)
void Ultrapack_Compress67(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 67;
    group0 += (*input)[0];

    group0 *= 67;
    group0 += (*input)[1];

    group0 *= 67;
    group0 += (*input)[2];

    group0 *= 67;
    group0 += (*input)[3];

    group0 *= 67;
    group0 += (*input)[4];

    group0 *= 67;
    group0 += (*input)[5];

    group0 *= 67;
    group0 += (*input)[6];

    group0 *= 67;
    group0 += (*input)[7];

    group0 *= 67;
    group0 += (*input)[8];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 9;
    uint64_t group1 = 0;
    group1 *= 67;
    group1 += (*input)[0];

    group1 *= 67;
    group1 += (*input)[1];

    group1 *= 67;
    group1 += (*input)[2];

    group1 *= 67;
    group1 += (*input)[3];

    group1 *= 67;
    group1 += (*input)[4];

    group1 *= 67;
    group1 += (*input)[5];

    group1 *= 67;
    group1 += (*input)[6];

    group1 *= 67;
    group1 += (*input)[7];

    group1 *= 67;
    group1 += (*input)[8];

    *((uint64_t *)((*output) + 6)) |= (group1 << 7);
    *input += 9;
    uint64_t group2 = 0;
    group2 *= 67;
    group2 += (*input)[0];

    group2 *= 67;
    group2 += (*input)[1];

    group2 *= 67;
    group2 += (*input)[2];

    group2 *= 67;
    group2 += (*input)[3];

    group2 *= 67;
    group2 += (*input)[4];

    group2 *= 67;
    group2 += (*input)[5];

    group2 *= 67;
    group2 += (*input)[6];

    group2 *= 67;
    group2 += (*input)[7];

    group2 *= 67;
    group2 += (*input)[8];

    *((uint64_t *)((*output) + 13)) |= (group2 << 6);
    *input += 9;
    uint64_t group3 = 0;
    group3 *= 67;
    group3 += (*input)[0];

    group3 *= 67;
    group3 += (*input)[1];

    group3 *= 67;
    group3 += (*input)[2];

    group3 *= 67;
    group3 += (*input)[3];

    group3 *= 67;
    group3 += (*input)[4];

    group3 *= 67;
    group3 += (*input)[5];

    group3 *= 67;
    group3 += (*input)[6];

    group3 *= 67;
    group3 += (*input)[7];

    group3 *= 67;
    group3 += (*input)[8];

    *((uint64_t *)((*output) + 20)) |= (group3 << 5);
    *input += 9;
    uint64_t group4 = 0;
    group4 *= 67;
    group4 += (*input)[0];

    group4 *= 67;
    group4 += (*input)[1];

    group4 *= 67;
    group4 += (*input)[2];

    group4 *= 67;
    group4 += (*input)[3];

    group4 *= 67;
    group4 += (*input)[4];

    group4 *= 67;
    group4 += (*input)[5];

    group4 *= 67;
    group4 += (*input)[6];

    group4 *= 67;
    group4 += (*input)[7];

    group4 *= 67;
    group4 += (*input)[8];

    *((uint64_t *)((*output) + 27)) |= (group4 << 4);
    *input += 9;
    uint64_t group5 = 0;
    group5 *= 67;
    group5 += (*input)[0];

    group5 *= 67;
    group5 += (*input)[1];

    group5 *= 67;
    group5 += (*input)[2];

    group5 *= 67;
    group5 += (*input)[3];

    group5 *= 67;
    group5 += (*input)[4];

    group5 *= 67;
    group5 += (*input)[5];

    group5 *= 67;
    group5 += (*input)[6];

    group5 *= 67;
    group5 += (*input)[7];

    group5 *= 67;
    group5 += (*input)[8];

    *((uint64_t *)((*output) + 34)) |= (group5 << 3);
    *input += 9;
    uint64_t group6 = 0;
    group6 *= 67;
    group6 += (*input)[0];

    group6 *= 67;
    group6 += (*input)[1];

    group6 *= 67;
    group6 += (*input)[2];

    group6 *= 67;
    group6 += (*input)[3];

    group6 *= 67;
    group6 += (*input)[4];

    group6 *= 67;
    group6 += (*input)[5];

    group6 *= 67;
    group6 += (*input)[6];

    group6 *= 67;
    group6 += (*input)[7];

    group6 *= 67;
    group6 += (*input)[8];

    *((uint64_t *)((*output) + 41)) |= (group6 << 2);
    *input += 9;
    uint64_t group7 = 0;
    group7 *= 67;
    group7 += (*input)[0];

    group7 *= 67;
    group7 += (*input)[1];

    group7 *= 67;
    group7 += (*input)[2];

    group7 *= 67;
    group7 += (*input)[3];

    group7 *= 67;
    group7 += (*input)[4];

    group7 *= 67;
    group7 += (*input)[5];

    group7 *= 67;
    group7 += (*input)[6];

    group7 *= 67;
    group7 += (*input)[7];

    group7 *= 67;
    group7 += (*input)[8];

    *((uint64_t *)((*output) + 48)) |= (group7 << 1);
    *input += 9;
    *output += 55;
}

// Pack 8 groups using 55 bytes (72 values total)
void Ultrapack_Compress68(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 68;
    group0 += (*input)[0];

    group0 *= 68;
    group0 += (*input)[1];

    group0 *= 68;
    group0 += (*input)[2];

    group0 *= 68;
    group0 += (*input)[3];

    group0 *= 68;
    group0 += (*input)[4];

    group0 *= 68;
    group0 += (*input)[5];

    group0 *= 68;
    group0 += (*input)[6];

    group0 *= 68;
    group0 += (*input)[7];

    group0 *= 68;
    group0 += (*input)[8];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 9;
    uint64_t group1 = 0;
    group1 *= 68;
    group1 += (*input)[0];

    group1 *= 68;
    group1 += (*input)[1];

    group1 *= 68;
    group1 += (*input)[2];

    group1 *= 68;
    group1 += (*input)[3];

    group1 *= 68;
    group1 += (*input)[4];

    group1 *= 68;
    group1 += (*input)[5];

    group1 *= 68;
    group1 += (*input)[6];

    group1 *= 68;
    group1 += (*input)[7];

    group1 *= 68;
    group1 += (*input)[8];

    *((uint64_t *)((*output) + 6)) |= (group1 << 7);
    *input += 9;
    uint64_t group2 = 0;
    group2 *= 68;
    group2 += (*input)[0];

    group2 *= 68;
    group2 += (*input)[1];

    group2 *= 68;
    group2 += (*input)[2];

    group2 *= 68;
    group2 += (*input)[3];

    group2 *= 68;
    group2 += (*input)[4];

    group2 *= 68;
    group2 += (*input)[5];

    group2 *= 68;
    group2 += (*input)[6];

    group2 *= 68;
    group2 += (*input)[7];

    group2 *= 68;
    group2 += (*input)[8];

    *((uint64_t *)((*output) + 13)) |= (group2 << 6);
    *input += 9;
    uint64_t group3 = 0;
    group3 *= 68;
    group3 += (*input)[0];

    group3 *= 68;
    group3 += (*input)[1];

    group3 *= 68;
    group3 += (*input)[2];

    group3 *= 68;
    group3 += (*input)[3];

    group3 *= 68;
    group3 += (*input)[4];

    group3 *= 68;
    group3 += (*input)[5];

    group3 *= 68;
    group3 += (*input)[6];

    group3 *= 68;
    group3 += (*input)[7];

    group3 *= 68;
    group3 += (*input)[8];

    *((uint64_t *)((*output) + 20)) |= (group3 << 5);
    *input += 9;
    uint64_t group4 = 0;
    group4 *= 68;
    group4 += (*input)[0];

    group4 *= 68;
    group4 += (*input)[1];

    group4 *= 68;
    group4 += (*input)[2];

    group4 *= 68;
    group4 += (*input)[3];

    group4 *= 68;
    group4 += (*input)[4];

    group4 *= 68;
    group4 += (*input)[5];

    group4 *= 68;
    group4 += (*input)[6];

    group4 *= 68;
    group4 += (*input)[7];

    group4 *= 68;
    group4 += (*input)[8];

    *((uint64_t *)((*output) + 27)) |= (group4 << 4);
    *input += 9;
    uint64_t group5 = 0;
    group5 *= 68;
    group5 += (*input)[0];

    group5 *= 68;
    group5 += (*input)[1];

    group5 *= 68;
    group5 += (*input)[2];

    group5 *= 68;
    group5 += (*input)[3];

    group5 *= 68;
    group5 += (*input)[4];

    group5 *= 68;
    group5 += (*input)[5];

    group5 *= 68;
    group5 += (*input)[6];

    group5 *= 68;
    group5 += (*input)[7];

    group5 *= 68;
    group5 += (*input)[8];

    *((uint64_t *)((*output) + 34)) |= (group5 << 3);
    *input += 9;
    uint64_t group6 = 0;
    group6 *= 68;
    group6 += (*input)[0];

    group6 *= 68;
    group6 += (*input)[1];

    group6 *= 68;
    group6 += (*input)[2];

    group6 *= 68;
    group6 += (*input)[3];

    group6 *= 68;
    group6 += (*input)[4];

    group6 *= 68;
    group6 += (*input)[5];

    group6 *= 68;
    group6 += (*input)[6];

    group6 *= 68;
    group6 += (*input)[7];

    group6 *= 68;
    group6 += (*input)[8];

    *((uint64_t *)((*output) + 41)) |= (group6 << 2);
    *input += 9;
    uint64_t group7 = 0;
    group7 *= 68;
    group7 += (*input)[0];

    group7 *= 68;
    group7 += (*input)[1];

    group7 *= 68;
    group7 += (*input)[2];

    group7 *= 68;
    group7 += (*input)[3];

    group7 *= 68;
    group7 += (*input)[4];

    group7 *= 68;
    group7 += (*input)[5];

    group7 *= 68;
    group7 += (*input)[6];

    group7 *= 68;
    group7 += (*input)[7];

    group7 *= 68;
    group7 += (*input)[8];

    *((uint64_t *)((*output) + 48)) |= (group7 << 1);
    *input += 9;
    *output += 55;
}

// Pack 8 groups using 55 bytes (72 values total)
void Ultrapack_Compress69(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 69;
    group0 += (*input)[0];

    group0 *= 69;
    group0 += (*input)[1];

    group0 *= 69;
    group0 += (*input)[2];

    group0 *= 69;
    group0 += (*input)[3];

    group0 *= 69;
    group0 += (*input)[4];

    group0 *= 69;
    group0 += (*input)[5];

    group0 *= 69;
    group0 += (*input)[6];

    group0 *= 69;
    group0 += (*input)[7];

    group0 *= 69;
    group0 += (*input)[8];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 9;
    uint64_t group1 = 0;
    group1 *= 69;
    group1 += (*input)[0];

    group1 *= 69;
    group1 += (*input)[1];

    group1 *= 69;
    group1 += (*input)[2];

    group1 *= 69;
    group1 += (*input)[3];

    group1 *= 69;
    group1 += (*input)[4];

    group1 *= 69;
    group1 += (*input)[5];

    group1 *= 69;
    group1 += (*input)[6];

    group1 *= 69;
    group1 += (*input)[7];

    group1 *= 69;
    group1 += (*input)[8];

    *((uint64_t *)((*output) + 6)) |= (group1 << 7);
    *input += 9;
    uint64_t group2 = 0;
    group2 *= 69;
    group2 += (*input)[0];

    group2 *= 69;
    group2 += (*input)[1];

    group2 *= 69;
    group2 += (*input)[2];

    group2 *= 69;
    group2 += (*input)[3];

    group2 *= 69;
    group2 += (*input)[4];

    group2 *= 69;
    group2 += (*input)[5];

    group2 *= 69;
    group2 += (*input)[6];

    group2 *= 69;
    group2 += (*input)[7];

    group2 *= 69;
    group2 += (*input)[8];

    *((uint64_t *)((*output) + 13)) |= (group2 << 6);
    *input += 9;
    uint64_t group3 = 0;
    group3 *= 69;
    group3 += (*input)[0];

    group3 *= 69;
    group3 += (*input)[1];

    group3 *= 69;
    group3 += (*input)[2];

    group3 *= 69;
    group3 += (*input)[3];

    group3 *= 69;
    group3 += (*input)[4];

    group3 *= 69;
    group3 += (*input)[5];

    group3 *= 69;
    group3 += (*input)[6];

    group3 *= 69;
    group3 += (*input)[7];

    group3 *= 69;
    group3 += (*input)[8];

    *((uint64_t *)((*output) + 20)) |= (group3 << 5);
    *input += 9;
    uint64_t group4 = 0;
    group4 *= 69;
    group4 += (*input)[0];

    group4 *= 69;
    group4 += (*input)[1];

    group4 *= 69;
    group4 += (*input)[2];

    group4 *= 69;
    group4 += (*input)[3];

    group4 *= 69;
    group4 += (*input)[4];

    group4 *= 69;
    group4 += (*input)[5];

    group4 *= 69;
    group4 += (*input)[6];

    group4 *= 69;
    group4 += (*input)[7];

    group4 *= 69;
    group4 += (*input)[8];

    *((uint64_t *)((*output) + 27)) |= (group4 << 4);
    *input += 9;
    uint64_t group5 = 0;
    group5 *= 69;
    group5 += (*input)[0];

    group5 *= 69;
    group5 += (*input)[1];

    group5 *= 69;
    group5 += (*input)[2];

    group5 *= 69;
    group5 += (*input)[3];

    group5 *= 69;
    group5 += (*input)[4];

    group5 *= 69;
    group5 += (*input)[5];

    group5 *= 69;
    group5 += (*input)[6];

    group5 *= 69;
    group5 += (*input)[7];

    group5 *= 69;
    group5 += (*input)[8];

    *((uint64_t *)((*output) + 34)) |= (group5 << 3);
    *input += 9;
    uint64_t group6 = 0;
    group6 *= 69;
    group6 += (*input)[0];

    group6 *= 69;
    group6 += (*input)[1];

    group6 *= 69;
    group6 += (*input)[2];

    group6 *= 69;
    group6 += (*input)[3];

    group6 *= 69;
    group6 += (*input)[4];

    group6 *= 69;
    group6 += (*input)[5];

    group6 *= 69;
    group6 += (*input)[6];

    group6 *= 69;
    group6 += (*input)[7];

    group6 *= 69;
    group6 += (*input)[8];

    *((uint64_t *)((*output) + 41)) |= (group6 << 2);
    *input += 9;
    uint64_t group7 = 0;
    group7 *= 69;
    group7 += (*input)[0];

    group7 *= 69;
    group7 += (*input)[1];

    group7 *= 69;
    group7 += (*input)[2];

    group7 *= 69;
    group7 += (*input)[3];

    group7 *= 69;
    group7 += (*input)[4];

    group7 *= 69;
    group7 += (*input)[5];

    group7 *= 69;
    group7 += (*input)[6];

    group7 *= 69;
    group7 += (*input)[7];

    group7 *= 69;
    group7 += (*input)[8];

    *((uint64_t *)((*output) + 48)) |= (group7 << 1);
    *input += 9;
    *output += 55;
}

// Pack 8 groups using 37 bytes (48 values total)
void Ultrapack_Compress70(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 70;
    group0 += (*input)[0];

    group0 *= 70;
    group0 += (*input)[1];

    group0 *= 70;
    group0 += (*input)[2];

    group0 *= 70;
    group0 += (*input)[3];

    group0 *= 70;
    group0 += (*input)[4];

    group0 *= 70;
    group0 += (*input)[5];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 6;
    uint64_t group1 = 0;
    group1 *= 70;
    group1 += (*input)[0];

    group1 *= 70;
    group1 += (*input)[1];

    group1 *= 70;
    group1 += (*input)[2];

    group1 *= 70;
    group1 += (*input)[3];

    group1 *= 70;
    group1 += (*input)[4];

    group1 *= 70;
    group1 += (*input)[5];

    *((uint64_t *)((*output) + 4)) |= (group1 << 5);
    *input += 6;
    uint64_t group2 = 0;
    group2 *= 70;
    group2 += (*input)[0];

    group2 *= 70;
    group2 += (*input)[1];

    group2 *= 70;
    group2 += (*input)[2];

    group2 *= 70;
    group2 += (*input)[3];

    group2 *= 70;
    group2 += (*input)[4];

    group2 *= 70;
    group2 += (*input)[5];

    *((uint64_t *)((*output) + 9)) |= (group2 << 2);
    *input += 6;
    uint64_t group3 = 0;
    group3 *= 70;
    group3 += (*input)[0];

    group3 *= 70;
    group3 += (*input)[1];

    group3 *= 70;
    group3 += (*input)[2];

    group3 *= 70;
    group3 += (*input)[3];

    group3 *= 70;
    group3 += (*input)[4];

    group3 *= 70;
    group3 += (*input)[5];

    *((uint64_t *)((*output) + 13)) |= (group3 << 7);
    *input += 6;
    uint64_t group4 = 0;
    group4 *= 70;
    group4 += (*input)[0];

    group4 *= 70;
    group4 += (*input)[1];

    group4 *= 70;
    group4 += (*input)[2];

    group4 *= 70;
    group4 += (*input)[3];

    group4 *= 70;
    group4 += (*input)[4];

    group4 *= 70;
    group4 += (*input)[5];

    *((uint64_t *)((*output) + 18)) |= (group4 << 4);
    *input += 6;
    uint64_t group5 = 0;
    group5 *= 70;
    group5 += (*input)[0];

    group5 *= 70;
    group5 += (*input)[1];

    group5 *= 70;
    group5 += (*input)[2];

    group5 *= 70;
    group5 += (*input)[3];

    group5 *= 70;
    group5 += (*input)[4];

    group5 *= 70;
    group5 += (*input)[5];

    *((uint64_t *)((*output) + 23)) |= (group5 << 1);
    *input += 6;
    uint64_t group6 = 0;
    group6 *= 70;
    group6 += (*input)[0];

    group6 *= 70;
    group6 += (*input)[1];

    group6 *= 70;
    group6 += (*input)[2];

    group6 *= 70;
    group6 += (*input)[3];

    group6 *= 70;
    group6 += (*input)[4];

    group6 *= 70;
    group6 += (*input)[5];

    *((uint64_t *)((*output) + 27)) |= (group6 << 6);
    *input += 6;
    uint64_t group7 = 0;
    group7 *= 70;
    group7 += (*input)[0];

    group7 *= 70;
    group7 += (*input)[1];

    group7 *= 70;
    group7 += (*input)[2];

    group7 *= 70;
    group7 += (*input)[3];

    group7 *= 70;
    group7 += (*input)[4];

    group7 *= 70;
    group7 += (*input)[5];

    *((uint64_t *)((*output) + 32)) |= (group7 << 3);
    *input += 6;
    *output += 37;
}

// Pack 8 groups using 37 bytes (48 values total)
void Ultrapack_Compress71(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 71;
    group0 += (*input)[0];

    group0 *= 71;
    group0 += (*input)[1];

    group0 *= 71;
    group0 += (*input)[2];

    group0 *= 71;
    group0 += (*input)[3];

    group0 *= 71;
    group0 += (*input)[4];

    group0 *= 71;
    group0 += (*input)[5];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 6;
    uint64_t group1 = 0;
    group1 *= 71;
    group1 += (*input)[0];

    group1 *= 71;
    group1 += (*input)[1];

    group1 *= 71;
    group1 += (*input)[2];

    group1 *= 71;
    group1 += (*input)[3];

    group1 *= 71;
    group1 += (*input)[4];

    group1 *= 71;
    group1 += (*input)[5];

    *((uint64_t *)((*output) + 4)) |= (group1 << 5);
    *input += 6;
    uint64_t group2 = 0;
    group2 *= 71;
    group2 += (*input)[0];

    group2 *= 71;
    group2 += (*input)[1];

    group2 *= 71;
    group2 += (*input)[2];

    group2 *= 71;
    group2 += (*input)[3];

    group2 *= 71;
    group2 += (*input)[4];

    group2 *= 71;
    group2 += (*input)[5];

    *((uint64_t *)((*output) + 9)) |= (group2 << 2);
    *input += 6;
    uint64_t group3 = 0;
    group3 *= 71;
    group3 += (*input)[0];

    group3 *= 71;
    group3 += (*input)[1];

    group3 *= 71;
    group3 += (*input)[2];

    group3 *= 71;
    group3 += (*input)[3];

    group3 *= 71;
    group3 += (*input)[4];

    group3 *= 71;
    group3 += (*input)[5];

    *((uint64_t *)((*output) + 13)) |= (group3 << 7);
    *input += 6;
    uint64_t group4 = 0;
    group4 *= 71;
    group4 += (*input)[0];

    group4 *= 71;
    group4 += (*input)[1];

    group4 *= 71;
    group4 += (*input)[2];

    group4 *= 71;
    group4 += (*input)[3];

    group4 *= 71;
    group4 += (*input)[4];

    group4 *= 71;
    group4 += (*input)[5];

    *((uint64_t *)((*output) + 18)) |= (group4 << 4);
    *input += 6;
    uint64_t group5 = 0;
    group5 *= 71;
    group5 += (*input)[0];

    group5 *= 71;
    group5 += (*input)[1];

    group5 *= 71;
    group5 += (*input)[2];

    group5 *= 71;
    group5 += (*input)[3];

    group5 *= 71;
    group5 += (*input)[4];

    group5 *= 71;
    group5 += (*input)[5];

    *((uint64_t *)((*output) + 23)) |= (group5 << 1);
    *input += 6;
    uint64_t group6 = 0;
    group6 *= 71;
    group6 += (*input)[0];

    group6 *= 71;
    group6 += (*input)[1];

    group6 *= 71;
    group6 += (*input)[2];

    group6 *= 71;
    group6 += (*input)[3];

    group6 *= 71;
    group6 += (*input)[4];

    group6 *= 71;
    group6 += (*input)[5];

    *((uint64_t *)((*output) + 27)) |= (group6 << 6);
    *input += 6;
    uint64_t group7 = 0;
    group7 *= 71;
    group7 += (*input)[0];

    group7 *= 71;
    group7 += (*input)[1];

    group7 *= 71;
    group7 += (*input)[2];

    group7 *= 71;
    group7 += (*input)[3];

    group7 *= 71;
    group7 += (*input)[4];

    group7 *= 71;
    group7 += (*input)[5];

    *((uint64_t *)((*output) + 32)) |= (group7 << 3);
    *input += 6;
    *output += 37;
}

// Pack 8 groups using 25 bytes (32 values total)
void Ultrapack_Compress72(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 72;
    group0 += (*input)[0];

    group0 *= 72;
    group0 += (*input)[1];

    group0 *= 72;
    group0 += (*input)[2];

    group0 *= 72;
    group0 += (*input)[3];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 4;
    uint64_t group1 = 0;
    group1 *= 72;
    group1 += (*input)[0];

    group1 *= 72;
    group1 += (*input)[1];

    group1 *= 72;
    group1 += (*input)[2];

    group1 *= 72;
    group1 += (*input)[3];

    *((uint64_t *)((*output) + 3)) |= (group1 << 1);
    *input += 4;
    uint64_t group2 = 0;
    group2 *= 72;
    group2 += (*input)[0];

    group2 *= 72;
    group2 += (*input)[1];

    group2 *= 72;
    group2 += (*input)[2];

    group2 *= 72;
    group2 += (*input)[3];

    *((uint64_t *)((*output) + 6)) |= (group2 << 2);
    *input += 4;
    uint64_t group3 = 0;
    group3 *= 72;
    group3 += (*input)[0];

    group3 *= 72;
    group3 += (*input)[1];

    group3 *= 72;
    group3 += (*input)[2];

    group3 *= 72;
    group3 += (*input)[3];

    *((uint64_t *)((*output) + 9)) |= (group3 << 3);
    *input += 4;
    uint64_t group4 = 0;
    group4 *= 72;
    group4 += (*input)[0];

    group4 *= 72;
    group4 += (*input)[1];

    group4 *= 72;
    group4 += (*input)[2];

    group4 *= 72;
    group4 += (*input)[3];

    *((uint64_t *)((*output) + 12)) |= (group4 << 4);
    *input += 4;
    uint64_t group5 = 0;
    group5 *= 72;
    group5 += (*input)[0];

    group5 *= 72;
    group5 += (*input)[1];

    group5 *= 72;
    group5 += (*input)[2];

    group5 *= 72;
    group5 += (*input)[3];

    *((uint64_t *)((*output) + 15)) |= (group5 << 5);
    *input += 4;
    uint64_t group6 = 0;
    group6 *= 72;
    group6 += (*input)[0];

    group6 *= 72;
    group6 += (*input)[1];

    group6 *= 72;
    group6 += (*input)[2];

    group6 *= 72;
    group6 += (*input)[3];

    *((uint64_t *)((*output) + 18)) |= (group6 << 6);
    *input += 4;
    uint64_t group7 = 0;
    group7 *= 72;
    group7 += (*input)[0];

    group7 *= 72;
    group7 += (*input)[1];

    group7 *= 72;
    group7 += (*input)[2];

    group7 *= 72;
    group7 += (*input)[3];

    *((uint64_t *)((*output) + 21)) |= (group7 << 7);
    *input += 4;
    *output += 25;
}

// Pack 8 groups using 25 bytes (32 values total)
void Ultrapack_Compress73(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 73;
    group0 += (*input)[0];

    group0 *= 73;
    group0 += (*input)[1];

    group0 *= 73;
    group0 += (*input)[2];

    group0 *= 73;
    group0 += (*input)[3];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 4;
    uint64_t group1 = 0;
    group1 *= 73;
    group1 += (*input)[0];

    group1 *= 73;
    group1 += (*input)[1];

    group1 *= 73;
    group1 += (*input)[2];

    group1 *= 73;
    group1 += (*input)[3];

    *((uint64_t *)((*output) + 3)) |= (group1 << 1);
    *input += 4;
    uint64_t group2 = 0;
    group2 *= 73;
    group2 += (*input)[0];

    group2 *= 73;
    group2 += (*input)[1];

    group2 *= 73;
    group2 += (*input)[2];

    group2 *= 73;
    group2 += (*input)[3];

    *((uint64_t *)((*output) + 6)) |= (group2 << 2);
    *input += 4;
    uint64_t group3 = 0;
    group3 *= 73;
    group3 += (*input)[0];

    group3 *= 73;
    group3 += (*input)[1];

    group3 *= 73;
    group3 += (*input)[2];

    group3 *= 73;
    group3 += (*input)[3];

    *((uint64_t *)((*output) + 9)) |= (group3 << 3);
    *input += 4;
    uint64_t group4 = 0;
    group4 *= 73;
    group4 += (*input)[0];

    group4 *= 73;
    group4 += (*input)[1];

    group4 *= 73;
    group4 += (*input)[2];

    group4 *= 73;
    group4 += (*input)[3];

    *((uint64_t *)((*output) + 12)) |= (group4 << 4);
    *input += 4;
    uint64_t group5 = 0;
    group5 *= 73;
    group5 += (*input)[0];

    group5 *= 73;
    group5 += (*input)[1];

    group5 *= 73;
    group5 += (*input)[2];

    group5 *= 73;
    group5 += (*input)[3];

    *((uint64_t *)((*output) + 15)) |= (group5 << 5);
    *input += 4;
    uint64_t group6 = 0;
    group6 *= 73;
    group6 += (*input)[0];

    group6 *= 73;
    group6 += (*input)[1];

    group6 *= 73;
    group6 += (*input)[2];

    group6 *= 73;
    group6 += (*input)[3];

    *((uint64_t *)((*output) + 18)) |= (group6 << 6);
    *input += 4;
    uint64_t group7 = 0;
    group7 *= 73;
    group7 += (*input)[0];

    group7 *= 73;
    group7 += (*input)[1];

    group7 *= 73;
    group7 += (*input)[2];

    group7 *= 73;
    group7 += (*input)[3];

    *((uint64_t *)((*output) + 21)) |= (group7 << 7);
    *input += 4;
    *output += 25;
}

// Pack 8 groups using 25 bytes (32 values total)
void Ultrapack_Compress74(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 74;
    group0 += (*input)[0];

    group0 *= 74;
    group0 += (*input)[1];

    group0 *= 74;
    group0 += (*input)[2];

    group0 *= 74;
    group0 += (*input)[3];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 4;
    uint64_t group1 = 0;
    group1 *= 74;
    group1 += (*input)[0];

    group1 *= 74;
    group1 += (*input)[1];

    group1 *= 74;
    group1 += (*input)[2];

    group1 *= 74;
    group1 += (*input)[3];

    *((uint64_t *)((*output) + 3)) |= (group1 << 1);
    *input += 4;
    uint64_t group2 = 0;
    group2 *= 74;
    group2 += (*input)[0];

    group2 *= 74;
    group2 += (*input)[1];

    group2 *= 74;
    group2 += (*input)[2];

    group2 *= 74;
    group2 += (*input)[3];

    *((uint64_t *)((*output) + 6)) |= (group2 << 2);
    *input += 4;
    uint64_t group3 = 0;
    group3 *= 74;
    group3 += (*input)[0];

    group3 *= 74;
    group3 += (*input)[1];

    group3 *= 74;
    group3 += (*input)[2];

    group3 *= 74;
    group3 += (*input)[3];

    *((uint64_t *)((*output) + 9)) |= (group3 << 3);
    *input += 4;
    uint64_t group4 = 0;
    group4 *= 74;
    group4 += (*input)[0];

    group4 *= 74;
    group4 += (*input)[1];

    group4 *= 74;
    group4 += (*input)[2];

    group4 *= 74;
    group4 += (*input)[3];

    *((uint64_t *)((*output) + 12)) |= (group4 << 4);
    *input += 4;
    uint64_t group5 = 0;
    group5 *= 74;
    group5 += (*input)[0];

    group5 *= 74;
    group5 += (*input)[1];

    group5 *= 74;
    group5 += (*input)[2];

    group5 *= 74;
    group5 += (*input)[3];

    *((uint64_t *)((*output) + 15)) |= (group5 << 5);
    *input += 4;
    uint64_t group6 = 0;
    group6 *= 74;
    group6 += (*input)[0];

    group6 *= 74;
    group6 += (*input)[1];

    group6 *= 74;
    group6 += (*input)[2];

    group6 *= 74;
    group6 += (*input)[3];

    *((uint64_t *)((*output) + 18)) |= (group6 << 6);
    *input += 4;
    uint64_t group7 = 0;
    group7 *= 74;
    group7 += (*input)[0];

    group7 *= 74;
    group7 += (*input)[1];

    group7 *= 74;
    group7 += (*input)[2];

    group7 *= 74;
    group7 += (*input)[3];

    *((uint64_t *)((*output) + 21)) |= (group7 << 7);
    *input += 4;
    *output += 25;
}

// Pack 8 groups using 25 bytes (32 values total)
void Ultrapack_Compress75(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 75;
    group0 += (*input)[0];

    group0 *= 75;
    group0 += (*input)[1];

    group0 *= 75;
    group0 += (*input)[2];

    group0 *= 75;
    group0 += (*input)[3];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 4;
    uint64_t group1 = 0;
    group1 *= 75;
    group1 += (*input)[0];

    group1 *= 75;
    group1 += (*input)[1];

    group1 *= 75;
    group1 += (*input)[2];

    group1 *= 75;
    group1 += (*input)[3];

    *((uint64_t *)((*output) + 3)) |= (group1 << 1);
    *input += 4;
    uint64_t group2 = 0;
    group2 *= 75;
    group2 += (*input)[0];

    group2 *= 75;
    group2 += (*input)[1];

    group2 *= 75;
    group2 += (*input)[2];

    group2 *= 75;
    group2 += (*input)[3];

    *((uint64_t *)((*output) + 6)) |= (group2 << 2);
    *input += 4;
    uint64_t group3 = 0;
    group3 *= 75;
    group3 += (*input)[0];

    group3 *= 75;
    group3 += (*input)[1];

    group3 *= 75;
    group3 += (*input)[2];

    group3 *= 75;
    group3 += (*input)[3];

    *((uint64_t *)((*output) + 9)) |= (group3 << 3);
    *input += 4;
    uint64_t group4 = 0;
    group4 *= 75;
    group4 += (*input)[0];

    group4 *= 75;
    group4 += (*input)[1];

    group4 *= 75;
    group4 += (*input)[2];

    group4 *= 75;
    group4 += (*input)[3];

    *((uint64_t *)((*output) + 12)) |= (group4 << 4);
    *input += 4;
    uint64_t group5 = 0;
    group5 *= 75;
    group5 += (*input)[0];

    group5 *= 75;
    group5 += (*input)[1];

    group5 *= 75;
    group5 += (*input)[2];

    group5 *= 75;
    group5 += (*input)[3];

    *((uint64_t *)((*output) + 15)) |= (group5 << 5);
    *input += 4;
    uint64_t group6 = 0;
    group6 *= 75;
    group6 += (*input)[0];

    group6 *= 75;
    group6 += (*input)[1];

    group6 *= 75;
    group6 += (*input)[2];

    group6 *= 75;
    group6 += (*input)[3];

    *((uint64_t *)((*output) + 18)) |= (group6 << 6);
    *input += 4;
    uint64_t group7 = 0;
    group7 *= 75;
    group7 += (*input)[0];

    group7 *= 75;
    group7 += (*input)[1];

    group7 *= 75;
    group7 += (*input)[2];

    group7 *= 75;
    group7 += (*input)[3];

    *((uint64_t *)((*output) + 21)) |= (group7 << 7);
    *input += 4;
    *output += 25;
}

// Pack 8 groups using 25 bytes (32 values total)
void Ultrapack_Compress76(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 76;
    group0 += (*input)[0];

    group0 *= 76;
    group0 += (*input)[1];

    group0 *= 76;
    group0 += (*input)[2];

    group0 *= 76;
    group0 += (*input)[3];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 4;
    uint64_t group1 = 0;
    group1 *= 76;
    group1 += (*input)[0];

    group1 *= 76;
    group1 += (*input)[1];

    group1 *= 76;
    group1 += (*input)[2];

    group1 *= 76;
    group1 += (*input)[3];

    *((uint64_t *)((*output) + 3)) |= (group1 << 1);
    *input += 4;
    uint64_t group2 = 0;
    group2 *= 76;
    group2 += (*input)[0];

    group2 *= 76;
    group2 += (*input)[1];

    group2 *= 76;
    group2 += (*input)[2];

    group2 *= 76;
    group2 += (*input)[3];

    *((uint64_t *)((*output) + 6)) |= (group2 << 2);
    *input += 4;
    uint64_t group3 = 0;
    group3 *= 76;
    group3 += (*input)[0];

    group3 *= 76;
    group3 += (*input)[1];

    group3 *= 76;
    group3 += (*input)[2];

    group3 *= 76;
    group3 += (*input)[3];

    *((uint64_t *)((*output) + 9)) |= (group3 << 3);
    *input += 4;
    uint64_t group4 = 0;
    group4 *= 76;
    group4 += (*input)[0];

    group4 *= 76;
    group4 += (*input)[1];

    group4 *= 76;
    group4 += (*input)[2];

    group4 *= 76;
    group4 += (*input)[3];

    *((uint64_t *)((*output) + 12)) |= (group4 << 4);
    *input += 4;
    uint64_t group5 = 0;
    group5 *= 76;
    group5 += (*input)[0];

    group5 *= 76;
    group5 += (*input)[1];

    group5 *= 76;
    group5 += (*input)[2];

    group5 *= 76;
    group5 += (*input)[3];

    *((uint64_t *)((*output) + 15)) |= (group5 << 5);
    *input += 4;
    uint64_t group6 = 0;
    group6 *= 76;
    group6 += (*input)[0];

    group6 *= 76;
    group6 += (*input)[1];

    group6 *= 76;
    group6 += (*input)[2];

    group6 *= 76;
    group6 += (*input)[3];

    *((uint64_t *)((*output) + 18)) |= (group6 << 6);
    *input += 4;
    uint64_t group7 = 0;
    group7 *= 76;
    group7 += (*input)[0];

    group7 *= 76;
    group7 += (*input)[1];

    group7 *= 76;
    group7 += (*input)[2];

    group7 *= 76;
    group7 += (*input)[3];

    *((uint64_t *)((*output) + 21)) |= (group7 << 7);
    *input += 4;
    *output += 25;
}

// Pack 8 groups using 19 bytes (24 values total)
void Ultrapack_Compress77(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 77;
    group0 += (*input)[0];

    group0 *= 77;
    group0 += (*input)[1];

    group0 *= 77;
    group0 += (*input)[2];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 3;
    uint64_t group1 = 0;
    group1 *= 77;
    group1 += (*input)[0];

    group1 *= 77;
    group1 += (*input)[1];

    group1 *= 77;
    group1 += (*input)[2];

    *((uint64_t *)((*output) + 2)) |= (group1 << 3);
    *input += 3;
    uint64_t group2 = 0;
    group2 *= 77;
    group2 += (*input)[0];

    group2 *= 77;
    group2 += (*input)[1];

    group2 *= 77;
    group2 += (*input)[2];

    *((uint64_t *)((*output) + 4)) |= (group2 << 6);
    *input += 3;
    uint64_t group3 = 0;
    group3 *= 77;
    group3 += (*input)[0];

    group3 *= 77;
    group3 += (*input)[1];

    group3 *= 77;
    group3 += (*input)[2];

    *((uint64_t *)((*output) + 7)) |= (group3 << 1);
    *input += 3;
    uint64_t group4 = 0;
    group4 *= 77;
    group4 += (*input)[0];

    group4 *= 77;
    group4 += (*input)[1];

    group4 *= 77;
    group4 += (*input)[2];

    *((uint64_t *)((*output) + 9)) |= (group4 << 4);
    *input += 3;
    uint64_t group5 = 0;
    group5 *= 77;
    group5 += (*input)[0];

    group5 *= 77;
    group5 += (*input)[1];

    group5 *= 77;
    group5 += (*input)[2];

    *((uint64_t *)((*output) + 11)) |= (group5 << 7);
    *input += 3;
    uint64_t group6 = 0;
    group6 *= 77;
    group6 += (*input)[0];

    group6 *= 77;
    group6 += (*input)[1];

    group6 *= 77;
    group6 += (*input)[2];

    *((uint64_t *)((*output) + 14)) |= (group6 << 2);
    *input += 3;
    uint64_t group7 = 0;
    group7 *= 77;
    group7 += (*input)[0];

    group7 *= 77;
    group7 += (*input)[1];

    group7 *= 77;
    group7 += (*input)[2];

    *((uint64_t *)((*output) + 16)) |= (group7 << 5);
    *input += 3;
    *output += 19;
}

// Pack 8 groups using 19 bytes (24 values total)
void Ultrapack_Compress78(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 78;
    group0 += (*input)[0];

    group0 *= 78;
    group0 += (*input)[1];

    group0 *= 78;
    group0 += (*input)[2];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 3;
    uint64_t group1 = 0;
    group1 *= 78;
    group1 += (*input)[0];

    group1 *= 78;
    group1 += (*input)[1];

    group1 *= 78;
    group1 += (*input)[2];

    *((uint64_t *)((*output) + 2)) |= (group1 << 3);
    *input += 3;
    uint64_t group2 = 0;
    group2 *= 78;
    group2 += (*input)[0];

    group2 *= 78;
    group2 += (*input)[1];

    group2 *= 78;
    group2 += (*input)[2];

    *((uint64_t *)((*output) + 4)) |= (group2 << 6);
    *input += 3;
    uint64_t group3 = 0;
    group3 *= 78;
    group3 += (*input)[0];

    group3 *= 78;
    group3 += (*input)[1];

    group3 *= 78;
    group3 += (*input)[2];

    *((uint64_t *)((*output) + 7)) |= (group3 << 1);
    *input += 3;
    uint64_t group4 = 0;
    group4 *= 78;
    group4 += (*input)[0];

    group4 *= 78;
    group4 += (*input)[1];

    group4 *= 78;
    group4 += (*input)[2];

    *((uint64_t *)((*output) + 9)) |= (group4 << 4);
    *input += 3;
    uint64_t group5 = 0;
    group5 *= 78;
    group5 += (*input)[0];

    group5 *= 78;
    group5 += (*input)[1];

    group5 *= 78;
    group5 += (*input)[2];

    *((uint64_t *)((*output) + 11)) |= (group5 << 7);
    *input += 3;
    uint64_t group6 = 0;
    group6 *= 78;
    group6 += (*input)[0];

    group6 *= 78;
    group6 += (*input)[1];

    group6 *= 78;
    group6 += (*input)[2];

    *((uint64_t *)((*output) + 14)) |= (group6 << 2);
    *input += 3;
    uint64_t group7 = 0;
    group7 *= 78;
    group7 += (*input)[0];

    group7 *= 78;
    group7 += (*input)[1];

    group7 *= 78;
    group7 += (*input)[2];

    *((uint64_t *)((*output) + 16)) |= (group7 << 5);
    *input += 3;
    *output += 19;
}

// Pack 8 groups using 19 bytes (24 values total)
void Ultrapack_Compress79(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 79;
    group0 += (*input)[0];

    group0 *= 79;
    group0 += (*input)[1];

    group0 *= 79;
    group0 += (*input)[2];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 3;
    uint64_t group1 = 0;
    group1 *= 79;
    group1 += (*input)[0];

    group1 *= 79;
    group1 += (*input)[1];

    group1 *= 79;
    group1 += (*input)[2];

    *((uint64_t *)((*output) + 2)) |= (group1 << 3);
    *input += 3;
    uint64_t group2 = 0;
    group2 *= 79;
    group2 += (*input)[0];

    group2 *= 79;
    group2 += (*input)[1];

    group2 *= 79;
    group2 += (*input)[2];

    *((uint64_t *)((*output) + 4)) |= (group2 << 6);
    *input += 3;
    uint64_t group3 = 0;
    group3 *= 79;
    group3 += (*input)[0];

    group3 *= 79;
    group3 += (*input)[1];

    group3 *= 79;
    group3 += (*input)[2];

    *((uint64_t *)((*output) + 7)) |= (group3 << 1);
    *input += 3;
    uint64_t group4 = 0;
    group4 *= 79;
    group4 += (*input)[0];

    group4 *= 79;
    group4 += (*input)[1];

    group4 *= 79;
    group4 += (*input)[2];

    *((uint64_t *)((*output) + 9)) |= (group4 << 4);
    *input += 3;
    uint64_t group5 = 0;
    group5 *= 79;
    group5 += (*input)[0];

    group5 *= 79;
    group5 += (*input)[1];

    group5 *= 79;
    group5 += (*input)[2];

    *((uint64_t *)((*output) + 11)) |= (group5 << 7);
    *input += 3;
    uint64_t group6 = 0;
    group6 *= 79;
    group6 += (*input)[0];

    group6 *= 79;
    group6 += (*input)[1];

    group6 *= 79;
    group6 += (*input)[2];

    *((uint64_t *)((*output) + 14)) |= (group6 << 2);
    *input += 3;
    uint64_t group7 = 0;
    group7 *= 79;
    group7 += (*input)[0];

    group7 *= 79;
    group7 += (*input)[1];

    group7 *= 79;
    group7 += (*input)[2];

    *((uint64_t *)((*output) + 16)) |= (group7 << 5);
    *input += 3;
    *output += 19;
}

// Pack 8 groups using 19 bytes (24 values total)
void Ultrapack_Compress80(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 80;
    group0 += (*input)[0];

    group0 *= 80;
    group0 += (*input)[1];

    group0 *= 80;
    group0 += (*input)[2];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 3;
    uint64_t group1 = 0;
    group1 *= 80;
    group1 += (*input)[0];

    group1 *= 80;
    group1 += (*input)[1];

    group1 *= 80;
    group1 += (*input)[2];

    *((uint64_t *)((*output) + 2)) |= (group1 << 3);
    *input += 3;
    uint64_t group2 = 0;
    group2 *= 80;
    group2 += (*input)[0];

    group2 *= 80;
    group2 += (*input)[1];

    group2 *= 80;
    group2 += (*input)[2];

    *((uint64_t *)((*output) + 4)) |= (group2 << 6);
    *input += 3;
    uint64_t group3 = 0;
    group3 *= 80;
    group3 += (*input)[0];

    group3 *= 80;
    group3 += (*input)[1];

    group3 *= 80;
    group3 += (*input)[2];

    *((uint64_t *)((*output) + 7)) |= (group3 << 1);
    *input += 3;
    uint64_t group4 = 0;
    group4 *= 80;
    group4 += (*input)[0];

    group4 *= 80;
    group4 += (*input)[1];

    group4 *= 80;
    group4 += (*input)[2];

    *((uint64_t *)((*output) + 9)) |= (group4 << 4);
    *input += 3;
    uint64_t group5 = 0;
    group5 *= 80;
    group5 += (*input)[0];

    group5 *= 80;
    group5 += (*input)[1];

    group5 *= 80;
    group5 += (*input)[2];

    *((uint64_t *)((*output) + 11)) |= (group5 << 7);
    *input += 3;
    uint64_t group6 = 0;
    group6 *= 80;
    group6 += (*input)[0];

    group6 *= 80;
    group6 += (*input)[1];

    group6 *= 80;
    group6 += (*input)[2];

    *((uint64_t *)((*output) + 14)) |= (group6 << 2);
    *input += 3;
    uint64_t group7 = 0;
    group7 *= 80;
    group7 += (*input)[0];

    group7 *= 80;
    group7 += (*input)[1];

    group7 *= 80;
    group7 += (*input)[2];

    *((uint64_t *)((*output) + 16)) |= (group7 << 5);
    *input += 3;
    *output += 19;
}

// Pack 1 groups using 4 bytes (5 values total)
void Ultrapack_Compress81(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 81;
    group0 += (*input)[0];

    group0 *= 81;
    group0 += (*input)[1];

    group0 *= 81;
    group0 += (*input)[2];

    group0 *= 81;
    group0 += (*input)[3];

    group0 *= 81;
    group0 += (*input)[4];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 5;
    *output += 4;
}

// Pack 1 groups using 4 bytes (5 values total)
void Ultrapack_Compress82(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 82;
    group0 += (*input)[0];

    group0 *= 82;
    group0 += (*input)[1];

    group0 *= 82;
    group0 += (*input)[2];

    group0 *= 82;
    group0 += (*input)[3];

    group0 *= 82;
    group0 += (*input)[4];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 5;
    *output += 4;
}

// Pack 1 groups using 4 bytes (5 values total)
void Ultrapack_Compress83(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 83;
    group0 += (*input)[0];

    group0 *= 83;
    group0 += (*input)[1];

    group0 *= 83;
    group0 += (*input)[2];

    group0 *= 83;
    group0 += (*input)[3];

    group0 *= 83;
    group0 += (*input)[4];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 5;
    *output += 4;
}

// Pack 1 groups using 4 bytes (5 values total)
void Ultrapack_Compress84(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 84;
    group0 += (*input)[0];

    group0 *= 84;
    group0 += (*input)[1];

    group0 *= 84;
    group0 += (*input)[2];

    group0 *= 84;
    group0 += (*input)[3];

    group0 *= 84;
    group0 += (*input)[4];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 5;
    *output += 4;
}

// Pack 8 groups using 45 bytes (56 values total)
void Ultrapack_Compress85(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 85;
    group0 += (*input)[0];

    group0 *= 85;
    group0 += (*input)[1];

    group0 *= 85;
    group0 += (*input)[2];

    group0 *= 85;
    group0 += (*input)[3];

    group0 *= 85;
    group0 += (*input)[4];

    group0 *= 85;
    group0 += (*input)[5];

    group0 *= 85;
    group0 += (*input)[6];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 7;
    uint64_t group1 = 0;
    group1 *= 85;
    group1 += (*input)[0];

    group1 *= 85;
    group1 += (*input)[1];

    group1 *= 85;
    group1 += (*input)[2];

    group1 *= 85;
    group1 += (*input)[3];

    group1 *= 85;
    group1 += (*input)[4];

    group1 *= 85;
    group1 += (*input)[5];

    group1 *= 85;
    group1 += (*input)[6];

    *((uint64_t *)((*output) + 5)) |= (group1 << 5);
    *input += 7;
    uint64_t group2 = 0;
    group2 *= 85;
    group2 += (*input)[0];

    group2 *= 85;
    group2 += (*input)[1];

    group2 *= 85;
    group2 += (*input)[2];

    group2 *= 85;
    group2 += (*input)[3];

    group2 *= 85;
    group2 += (*input)[4];

    group2 *= 85;
    group2 += (*input)[5];

    group2 *= 85;
    group2 += (*input)[6];

    *((uint64_t *)((*output) + 11)) |= (group2 << 2);
    *input += 7;
    uint64_t group3 = 0;
    group3 *= 85;
    group3 += (*input)[0];

    group3 *= 85;
    group3 += (*input)[1];

    group3 *= 85;
    group3 += (*input)[2];

    group3 *= 85;
    group3 += (*input)[3];

    group3 *= 85;
    group3 += (*input)[4];

    group3 *= 85;
    group3 += (*input)[5];

    group3 *= 85;
    group3 += (*input)[6];

    *((uint64_t *)((*output) + 16)) |= (group3 << 7);
    *input += 7;
    uint64_t group4 = 0;
    group4 *= 85;
    group4 += (*input)[0];

    group4 *= 85;
    group4 += (*input)[1];

    group4 *= 85;
    group4 += (*input)[2];

    group4 *= 85;
    group4 += (*input)[3];

    group4 *= 85;
    group4 += (*input)[4];

    group4 *= 85;
    group4 += (*input)[5];

    group4 *= 85;
    group4 += (*input)[6];

    *((uint64_t *)((*output) + 22)) |= (group4 << 4);
    *input += 7;
    uint64_t group5 = 0;
    group5 *= 85;
    group5 += (*input)[0];

    group5 *= 85;
    group5 += (*input)[1];

    group5 *= 85;
    group5 += (*input)[2];

    group5 *= 85;
    group5 += (*input)[3];

    group5 *= 85;
    group5 += (*input)[4];

    group5 *= 85;
    group5 += (*input)[5];

    group5 *= 85;
    group5 += (*input)[6];

    *((uint64_t *)((*output) + 28)) |= (group5 << 1);
    *input += 7;
    uint64_t group6 = 0;
    group6 *= 85;
    group6 += (*input)[0];

    group6 *= 85;
    group6 += (*input)[1];

    group6 *= 85;
    group6 += (*input)[2];

    group6 *= 85;
    group6 += (*input)[3];

    group6 *= 85;
    group6 += (*input)[4];

    group6 *= 85;
    group6 += (*input)[5];

    group6 *= 85;
    group6 += (*input)[6];

    *((uint64_t *)((*output) + 33)) |= (group6 << 6);
    *input += 7;
    uint64_t group7 = 0;
    group7 *= 85;
    group7 += (*input)[0];

    group7 *= 85;
    group7 += (*input)[1];

    group7 *= 85;
    group7 += (*input)[2];

    group7 *= 85;
    group7 += (*input)[3];

    group7 *= 85;
    group7 += (*input)[4];

    group7 *= 85;
    group7 += (*input)[5];

    group7 *= 85;
    group7 += (*input)[6];

    *((uint64_t *)((*output) + 39)) |= (group7 << 3);
    *input += 7;
    *output += 45;
}

// Pack 8 groups using 45 bytes (56 values total)
void Ultrapack_Compress86(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 86;
    group0 += (*input)[0];

    group0 *= 86;
    group0 += (*input)[1];

    group0 *= 86;
    group0 += (*input)[2];

    group0 *= 86;
    group0 += (*input)[3];

    group0 *= 86;
    group0 += (*input)[4];

    group0 *= 86;
    group0 += (*input)[5];

    group0 *= 86;
    group0 += (*input)[6];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 7;
    uint64_t group1 = 0;
    group1 *= 86;
    group1 += (*input)[0];

    group1 *= 86;
    group1 += (*input)[1];

    group1 *= 86;
    group1 += (*input)[2];

    group1 *= 86;
    group1 += (*input)[3];

    group1 *= 86;
    group1 += (*input)[4];

    group1 *= 86;
    group1 += (*input)[5];

    group1 *= 86;
    group1 += (*input)[6];

    *((uint64_t *)((*output) + 5)) |= (group1 << 5);
    *input += 7;
    uint64_t group2 = 0;
    group2 *= 86;
    group2 += (*input)[0];

    group2 *= 86;
    group2 += (*input)[1];

    group2 *= 86;
    group2 += (*input)[2];

    group2 *= 86;
    group2 += (*input)[3];

    group2 *= 86;
    group2 += (*input)[4];

    group2 *= 86;
    group2 += (*input)[5];

    group2 *= 86;
    group2 += (*input)[6];

    *((uint64_t *)((*output) + 11)) |= (group2 << 2);
    *input += 7;
    uint64_t group3 = 0;
    group3 *= 86;
    group3 += (*input)[0];

    group3 *= 86;
    group3 += (*input)[1];

    group3 *= 86;
    group3 += (*input)[2];

    group3 *= 86;
    group3 += (*input)[3];

    group3 *= 86;
    group3 += (*input)[4];

    group3 *= 86;
    group3 += (*input)[5];

    group3 *= 86;
    group3 += (*input)[6];

    *((uint64_t *)((*output) + 16)) |= (group3 << 7);
    *input += 7;
    uint64_t group4 = 0;
    group4 *= 86;
    group4 += (*input)[0];

    group4 *= 86;
    group4 += (*input)[1];

    group4 *= 86;
    group4 += (*input)[2];

    group4 *= 86;
    group4 += (*input)[3];

    group4 *= 86;
    group4 += (*input)[4];

    group4 *= 86;
    group4 += (*input)[5];

    group4 *= 86;
    group4 += (*input)[6];

    *((uint64_t *)((*output) + 22)) |= (group4 << 4);
    *input += 7;
    uint64_t group5 = 0;
    group5 *= 86;
    group5 += (*input)[0];

    group5 *= 86;
    group5 += (*input)[1];

    group5 *= 86;
    group5 += (*input)[2];

    group5 *= 86;
    group5 += (*input)[3];

    group5 *= 86;
    group5 += (*input)[4];

    group5 *= 86;
    group5 += (*input)[5];

    group5 *= 86;
    group5 += (*input)[6];

    *((uint64_t *)((*output) + 28)) |= (group5 << 1);
    *input += 7;
    uint64_t group6 = 0;
    group6 *= 86;
    group6 += (*input)[0];

    group6 *= 86;
    group6 += (*input)[1];

    group6 *= 86;
    group6 += (*input)[2];

    group6 *= 86;
    group6 += (*input)[3];

    group6 *= 86;
    group6 += (*input)[4];

    group6 *= 86;
    group6 += (*input)[5];

    group6 *= 86;
    group6 += (*input)[6];

    *((uint64_t *)((*output) + 33)) |= (group6 << 6);
    *input += 7;
    uint64_t group7 = 0;
    group7 *= 86;
    group7 += (*input)[0];

    group7 *= 86;
    group7 += (*input)[1];

    group7 *= 86;
    group7 += (*input)[2];

    group7 *= 86;
    group7 += (*input)[3];

    group7 *= 86;
    group7 += (*input)[4];

    group7 *= 86;
    group7 += (*input)[5];

    group7 *= 86;
    group7 += (*input)[6];

    *((uint64_t *)((*output) + 39)) |= (group7 << 3);
    *input += 7;
    *output += 45;
}

// Pack 8 groups using 13 bytes (16 values total)
void Ultrapack_Compress87(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 87;
    group0 += (*input)[0];

    group0 *= 87;
    group0 += (*input)[1];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 2;
    uint64_t group1 = 0;
    group1 *= 87;
    group1 += (*input)[0];

    group1 *= 87;
    group1 += (*input)[1];

    *((uint64_t *)((*output) + 1)) |= (group1 << 5);
    *input += 2;
    uint64_t group2 = 0;
    group2 *= 87;
    group2 += (*input)[0];

    group2 *= 87;
    group2 += (*input)[1];

    *((uint64_t *)((*output) + 3)) |= (group2 << 2);
    *input += 2;
    uint64_t group3 = 0;
    group3 *= 87;
    group3 += (*input)[0];

    group3 *= 87;
    group3 += (*input)[1];

    *((uint64_t *)((*output) + 4)) |= (group3 << 7);
    *input += 2;
    uint64_t group4 = 0;
    group4 *= 87;
    group4 += (*input)[0];

    group4 *= 87;
    group4 += (*input)[1];

    *((uint64_t *)((*output) + 6)) |= (group4 << 4);
    *input += 2;
    uint64_t group5 = 0;
    group5 *= 87;
    group5 += (*input)[0];

    group5 *= 87;
    group5 += (*input)[1];

    *((uint64_t *)((*output) + 8)) |= (group5 << 1);
    *input += 2;
    uint64_t group6 = 0;
    group6 *= 87;
    group6 += (*input)[0];

    group6 *= 87;
    group6 += (*input)[1];

    *((uint64_t *)((*output) + 9)) |= (group6 << 6);
    *input += 2;
    uint64_t group7 = 0;
    group7 *= 87;
    group7 += (*input)[0];

    group7 *= 87;
    group7 += (*input)[1];

    *((uint64_t *)((*output) + 11)) |= (group7 << 3);
    *input += 2;
    *output += 13;
}

// Pack 8 groups using 13 bytes (16 values total)
void Ultrapack_Compress88(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 88;
    group0 += (*input)[0];

    group0 *= 88;
    group0 += (*input)[1];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 2;
    uint64_t group1 = 0;
    group1 *= 88;
    group1 += (*input)[0];

    group1 *= 88;
    group1 += (*input)[1];

    *((uint64_t *)((*output) + 1)) |= (group1 << 5);
    *input += 2;
    uint64_t group2 = 0;
    group2 *= 88;
    group2 += (*input)[0];

    group2 *= 88;
    group2 += (*input)[1];

    *((uint64_t *)((*output) + 3)) |= (group2 << 2);
    *input += 2;
    uint64_t group3 = 0;
    group3 *= 88;
    group3 += (*input)[0];

    group3 *= 88;
    group3 += (*input)[1];

    *((uint64_t *)((*output) + 4)) |= (group3 << 7);
    *input += 2;
    uint64_t group4 = 0;
    group4 *= 88;
    group4 += (*input)[0];

    group4 *= 88;
    group4 += (*input)[1];

    *((uint64_t *)((*output) + 6)) |= (group4 << 4);
    *input += 2;
    uint64_t group5 = 0;
    group5 *= 88;
    group5 += (*input)[0];

    group5 *= 88;
    group5 += (*input)[1];

    *((uint64_t *)((*output) + 8)) |= (group5 << 1);
    *input += 2;
    uint64_t group6 = 0;
    group6 *= 88;
    group6 += (*input)[0];

    group6 *= 88;
    group6 += (*input)[1];

    *((uint64_t *)((*output) + 9)) |= (group6 << 6);
    *input += 2;
    uint64_t group7 = 0;
    group7 *= 88;
    group7 += (*input)[0];

    group7 *= 88;
    group7 += (*input)[1];

    *((uint64_t *)((*output) + 11)) |= (group7 << 3);
    *input += 2;
    *output += 13;
}

// Pack 8 groups using 13 bytes (16 values total)
void Ultrapack_Compress89(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 89;
    group0 += (*input)[0];

    group0 *= 89;
    group0 += (*input)[1];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 2;
    uint64_t group1 = 0;
    group1 *= 89;
    group1 += (*input)[0];

    group1 *= 89;
    group1 += (*input)[1];

    *((uint64_t *)((*output) + 1)) |= (group1 << 5);
    *input += 2;
    uint64_t group2 = 0;
    group2 *= 89;
    group2 += (*input)[0];

    group2 *= 89;
    group2 += (*input)[1];

    *((uint64_t *)((*output) + 3)) |= (group2 << 2);
    *input += 2;
    uint64_t group3 = 0;
    group3 *= 89;
    group3 += (*input)[0];

    group3 *= 89;
    group3 += (*input)[1];

    *((uint64_t *)((*output) + 4)) |= (group3 << 7);
    *input += 2;
    uint64_t group4 = 0;
    group4 *= 89;
    group4 += (*input)[0];

    group4 *= 89;
    group4 += (*input)[1];

    *((uint64_t *)((*output) + 6)) |= (group4 << 4);
    *input += 2;
    uint64_t group5 = 0;
    group5 *= 89;
    group5 += (*input)[0];

    group5 *= 89;
    group5 += (*input)[1];

    *((uint64_t *)((*output) + 8)) |= (group5 << 1);
    *input += 2;
    uint64_t group6 = 0;
    group6 *= 89;
    group6 += (*input)[0];

    group6 *= 89;
    group6 += (*input)[1];

    *((uint64_t *)((*output) + 9)) |= (group6 << 6);
    *input += 2;
    uint64_t group7 = 0;
    group7 *= 89;
    group7 += (*input)[0];

    group7 *= 89;
    group7 += (*input)[1];

    *((uint64_t *)((*output) + 11)) |= (group7 << 3);
    *input += 2;
    *output += 13;
}

// Pack 8 groups using 13 bytes (16 values total)
void Ultrapack_Compress90(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 90;
    group0 += (*input)[0];

    group0 *= 90;
    group0 += (*input)[1];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 2;
    uint64_t group1 = 0;
    group1 *= 90;
    group1 += (*input)[0];

    group1 *= 90;
    group1 += (*input)[1];

    *((uint64_t *)((*output) + 1)) |= (group1 << 5);
    *input += 2;
    uint64_t group2 = 0;
    group2 *= 90;
    group2 += (*input)[0];

    group2 *= 90;
    group2 += (*input)[1];

    *((uint64_t *)((*output) + 3)) |= (group2 << 2);
    *input += 2;
    uint64_t group3 = 0;
    group3 *= 90;
    group3 += (*input)[0];

    group3 *= 90;
    group3 += (*input)[1];

    *((uint64_t *)((*output) + 4)) |= (group3 << 7);
    *input += 2;
    uint64_t group4 = 0;
    group4 *= 90;
    group4 += (*input)[0];

    group4 *= 90;
    group4 += (*input)[1];

    *((uint64_t *)((*output) + 6)) |= (group4 << 4);
    *input += 2;
    uint64_t group5 = 0;
    group5 *= 90;
    group5 += (*input)[0];

    group5 *= 90;
    group5 += (*input)[1];

    *((uint64_t *)((*output) + 8)) |= (group5 << 1);
    *input += 2;
    uint64_t group6 = 0;
    group6 *= 90;
    group6 += (*input)[0];

    group6 *= 90;
    group6 += (*input)[1];

    *((uint64_t *)((*output) + 9)) |= (group6 << 6);
    *input += 2;
    uint64_t group7 = 0;
    group7 *= 90;
    group7 += (*input)[0];

    group7 *= 90;
    group7 += (*input)[1];

    *((uint64_t *)((*output) + 11)) |= (group7 << 3);
    *input += 2;
    *output += 13;
}

// Pack 8 groups using 33 bytes (40 values total)
void Ultrapack_Compress91(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 91;
    group0 += (*input)[0];

    group0 *= 91;
    group0 += (*input)[1];

    group0 *= 91;
    group0 += (*input)[2];

    group0 *= 91;
    group0 += (*input)[3];

    group0 *= 91;
    group0 += (*input)[4];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 5;
    uint64_t group1 = 0;
    group1 *= 91;
    group1 += (*input)[0];

    group1 *= 91;
    group1 += (*input)[1];

    group1 *= 91;
    group1 += (*input)[2];

    group1 *= 91;
    group1 += (*input)[3];

    group1 *= 91;
    group1 += (*input)[4];

    *((uint64_t *)((*output) + 4)) |= (group1 << 1);
    *input += 5;
    uint64_t group2 = 0;
    group2 *= 91;
    group2 += (*input)[0];

    group2 *= 91;
    group2 += (*input)[1];

    group2 *= 91;
    group2 += (*input)[2];

    group2 *= 91;
    group2 += (*input)[3];

    group2 *= 91;
    group2 += (*input)[4];

    *((uint64_t *)((*output) + 8)) |= (group2 << 2);
    *input += 5;
    uint64_t group3 = 0;
    group3 *= 91;
    group3 += (*input)[0];

    group3 *= 91;
    group3 += (*input)[1];

    group3 *= 91;
    group3 += (*input)[2];

    group3 *= 91;
    group3 += (*input)[3];

    group3 *= 91;
    group3 += (*input)[4];

    *((uint64_t *)((*output) + 12)) |= (group3 << 3);
    *input += 5;
    uint64_t group4 = 0;
    group4 *= 91;
    group4 += (*input)[0];

    group4 *= 91;
    group4 += (*input)[1];

    group4 *= 91;
    group4 += (*input)[2];

    group4 *= 91;
    group4 += (*input)[3];

    group4 *= 91;
    group4 += (*input)[4];

    *((uint64_t *)((*output) + 16)) |= (group4 << 4);
    *input += 5;
    uint64_t group5 = 0;
    group5 *= 91;
    group5 += (*input)[0];

    group5 *= 91;
    group5 += (*input)[1];

    group5 *= 91;
    group5 += (*input)[2];

    group5 *= 91;
    group5 += (*input)[3];

    group5 *= 91;
    group5 += (*input)[4];

    *((uint64_t *)((*output) + 20)) |= (group5 << 5);
    *input += 5;
    uint64_t group6 = 0;
    group6 *= 91;
    group6 += (*input)[0];

    group6 *= 91;
    group6 += (*input)[1];

    group6 *= 91;
    group6 += (*input)[2];

    group6 *= 91;
    group6 += (*input)[3];

    group6 *= 91;
    group6 += (*input)[4];

    *((uint64_t *)((*output) + 24)) |= (group6 << 6);
    *input += 5;
    uint64_t group7 = 0;
    group7 *= 91;
    group7 += (*input)[0];

    group7 *= 91;
    group7 += (*input)[1];

    group7 *= 91;
    group7 += (*input)[2];

    group7 *= 91;
    group7 += (*input)[3];

    group7 *= 91;
    group7 += (*input)[4];

    *((uint64_t *)((*output) + 28)) |= (group7 << 7);
    *input += 5;
    *output += 33;
}

// Pack 8 groups using 33 bytes (40 values total)
void Ultrapack_Compress92(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 92;
    group0 += (*input)[0];

    group0 *= 92;
    group0 += (*input)[1];

    group0 *= 92;
    group0 += (*input)[2];

    group0 *= 92;
    group0 += (*input)[3];

    group0 *= 92;
    group0 += (*input)[4];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 5;
    uint64_t group1 = 0;
    group1 *= 92;
    group1 += (*input)[0];

    group1 *= 92;
    group1 += (*input)[1];

    group1 *= 92;
    group1 += (*input)[2];

    group1 *= 92;
    group1 += (*input)[3];

    group1 *= 92;
    group1 += (*input)[4];

    *((uint64_t *)((*output) + 4)) |= (group1 << 1);
    *input += 5;
    uint64_t group2 = 0;
    group2 *= 92;
    group2 += (*input)[0];

    group2 *= 92;
    group2 += (*input)[1];

    group2 *= 92;
    group2 += (*input)[2];

    group2 *= 92;
    group2 += (*input)[3];

    group2 *= 92;
    group2 += (*input)[4];

    *((uint64_t *)((*output) + 8)) |= (group2 << 2);
    *input += 5;
    uint64_t group3 = 0;
    group3 *= 92;
    group3 += (*input)[0];

    group3 *= 92;
    group3 += (*input)[1];

    group3 *= 92;
    group3 += (*input)[2];

    group3 *= 92;
    group3 += (*input)[3];

    group3 *= 92;
    group3 += (*input)[4];

    *((uint64_t *)((*output) + 12)) |= (group3 << 3);
    *input += 5;
    uint64_t group4 = 0;
    group4 *= 92;
    group4 += (*input)[0];

    group4 *= 92;
    group4 += (*input)[1];

    group4 *= 92;
    group4 += (*input)[2];

    group4 *= 92;
    group4 += (*input)[3];

    group4 *= 92;
    group4 += (*input)[4];

    *((uint64_t *)((*output) + 16)) |= (group4 << 4);
    *input += 5;
    uint64_t group5 = 0;
    group5 *= 92;
    group5 += (*input)[0];

    group5 *= 92;
    group5 += (*input)[1];

    group5 *= 92;
    group5 += (*input)[2];

    group5 *= 92;
    group5 += (*input)[3];

    group5 *= 92;
    group5 += (*input)[4];

    *((uint64_t *)((*output) + 20)) |= (group5 << 5);
    *input += 5;
    uint64_t group6 = 0;
    group6 *= 92;
    group6 += (*input)[0];

    group6 *= 92;
    group6 += (*input)[1];

    group6 *= 92;
    group6 += (*input)[2];

    group6 *= 92;
    group6 += (*input)[3];

    group6 *= 92;
    group6 += (*input)[4];

    *((uint64_t *)((*output) + 24)) |= (group6 << 6);
    *input += 5;
    uint64_t group7 = 0;
    group7 *= 92;
    group7 += (*input)[0];

    group7 *= 92;
    group7 += (*input)[1];

    group7 *= 92;
    group7 += (*input)[2];

    group7 *= 92;
    group7 += (*input)[3];

    group7 *= 92;
    group7 += (*input)[4];

    *((uint64_t *)((*output) + 28)) |= (group7 << 7);
    *input += 5;
    *output += 33;
}

// Pack 8 groups using 33 bytes (40 values total)
void Ultrapack_Compress93(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 93;
    group0 += (*input)[0];

    group0 *= 93;
    group0 += (*input)[1];

    group0 *= 93;
    group0 += (*input)[2];

    group0 *= 93;
    group0 += (*input)[3];

    group0 *= 93;
    group0 += (*input)[4];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 5;
    uint64_t group1 = 0;
    group1 *= 93;
    group1 += (*input)[0];

    group1 *= 93;
    group1 += (*input)[1];

    group1 *= 93;
    group1 += (*input)[2];

    group1 *= 93;
    group1 += (*input)[3];

    group1 *= 93;
    group1 += (*input)[4];

    *((uint64_t *)((*output) + 4)) |= (group1 << 1);
    *input += 5;
    uint64_t group2 = 0;
    group2 *= 93;
    group2 += (*input)[0];

    group2 *= 93;
    group2 += (*input)[1];

    group2 *= 93;
    group2 += (*input)[2];

    group2 *= 93;
    group2 += (*input)[3];

    group2 *= 93;
    group2 += (*input)[4];

    *((uint64_t *)((*output) + 8)) |= (group2 << 2);
    *input += 5;
    uint64_t group3 = 0;
    group3 *= 93;
    group3 += (*input)[0];

    group3 *= 93;
    group3 += (*input)[1];

    group3 *= 93;
    group3 += (*input)[2];

    group3 *= 93;
    group3 += (*input)[3];

    group3 *= 93;
    group3 += (*input)[4];

    *((uint64_t *)((*output) + 12)) |= (group3 << 3);
    *input += 5;
    uint64_t group4 = 0;
    group4 *= 93;
    group4 += (*input)[0];

    group4 *= 93;
    group4 += (*input)[1];

    group4 *= 93;
    group4 += (*input)[2];

    group4 *= 93;
    group4 += (*input)[3];

    group4 *= 93;
    group4 += (*input)[4];

    *((uint64_t *)((*output) + 16)) |= (group4 << 4);
    *input += 5;
    uint64_t group5 = 0;
    group5 *= 93;
    group5 += (*input)[0];

    group5 *= 93;
    group5 += (*input)[1];

    group5 *= 93;
    group5 += (*input)[2];

    group5 *= 93;
    group5 += (*input)[3];

    group5 *= 93;
    group5 += (*input)[4];

    *((uint64_t *)((*output) + 20)) |= (group5 << 5);
    *input += 5;
    uint64_t group6 = 0;
    group6 *= 93;
    group6 += (*input)[0];

    group6 *= 93;
    group6 += (*input)[1];

    group6 *= 93;
    group6 += (*input)[2];

    group6 *= 93;
    group6 += (*input)[3];

    group6 *= 93;
    group6 += (*input)[4];

    *((uint64_t *)((*output) + 24)) |= (group6 << 6);
    *input += 5;
    uint64_t group7 = 0;
    group7 *= 93;
    group7 += (*input)[0];

    group7 *= 93;
    group7 += (*input)[1];

    group7 *= 93;
    group7 += (*input)[2];

    group7 *= 93;
    group7 += (*input)[3];

    group7 *= 93;
    group7 += (*input)[4];

    *((uint64_t *)((*output) + 28)) |= (group7 << 7);
    *input += 5;
    *output += 33;
}

// Pack 8 groups using 33 bytes (40 values total)
void Ultrapack_Compress94(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 94;
    group0 += (*input)[0];

    group0 *= 94;
    group0 += (*input)[1];

    group0 *= 94;
    group0 += (*input)[2];

    group0 *= 94;
    group0 += (*input)[3];

    group0 *= 94;
    group0 += (*input)[4];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 5;
    uint64_t group1 = 0;
    group1 *= 94;
    group1 += (*input)[0];

    group1 *= 94;
    group1 += (*input)[1];

    group1 *= 94;
    group1 += (*input)[2];

    group1 *= 94;
    group1 += (*input)[3];

    group1 *= 94;
    group1 += (*input)[4];

    *((uint64_t *)((*output) + 4)) |= (group1 << 1);
    *input += 5;
    uint64_t group2 = 0;
    group2 *= 94;
    group2 += (*input)[0];

    group2 *= 94;
    group2 += (*input)[1];

    group2 *= 94;
    group2 += (*input)[2];

    group2 *= 94;
    group2 += (*input)[3];

    group2 *= 94;
    group2 += (*input)[4];

    *((uint64_t *)((*output) + 8)) |= (group2 << 2);
    *input += 5;
    uint64_t group3 = 0;
    group3 *= 94;
    group3 += (*input)[0];

    group3 *= 94;
    group3 += (*input)[1];

    group3 *= 94;
    group3 += (*input)[2];

    group3 *= 94;
    group3 += (*input)[3];

    group3 *= 94;
    group3 += (*input)[4];

    *((uint64_t *)((*output) + 12)) |= (group3 << 3);
    *input += 5;
    uint64_t group4 = 0;
    group4 *= 94;
    group4 += (*input)[0];

    group4 *= 94;
    group4 += (*input)[1];

    group4 *= 94;
    group4 += (*input)[2];

    group4 *= 94;
    group4 += (*input)[3];

    group4 *= 94;
    group4 += (*input)[4];

    *((uint64_t *)((*output) + 16)) |= (group4 << 4);
    *input += 5;
    uint64_t group5 = 0;
    group5 *= 94;
    group5 += (*input)[0];

    group5 *= 94;
    group5 += (*input)[1];

    group5 *= 94;
    group5 += (*input)[2];

    group5 *= 94;
    group5 += (*input)[3];

    group5 *= 94;
    group5 += (*input)[4];

    *((uint64_t *)((*output) + 20)) |= (group5 << 5);
    *input += 5;
    uint64_t group6 = 0;
    group6 *= 94;
    group6 += (*input)[0];

    group6 *= 94;
    group6 += (*input)[1];

    group6 *= 94;
    group6 += (*input)[2];

    group6 *= 94;
    group6 += (*input)[3];

    group6 *= 94;
    group6 += (*input)[4];

    *((uint64_t *)((*output) + 24)) |= (group6 << 6);
    *input += 5;
    uint64_t group7 = 0;
    group7 *= 94;
    group7 += (*input)[0];

    group7 *= 94;
    group7 += (*input)[1];

    group7 *= 94;
    group7 += (*input)[2];

    group7 *= 94;
    group7 += (*input)[3];

    group7 *= 94;
    group7 += (*input)[4];

    *((uint64_t *)((*output) + 28)) |= (group7 << 7);
    *input += 5;
    *output += 33;
}

// Pack 8 groups using 33 bytes (40 values total)
void Ultrapack_Compress95(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 95;
    group0 += (*input)[0];

    group0 *= 95;
    group0 += (*input)[1];

    group0 *= 95;
    group0 += (*input)[2];

    group0 *= 95;
    group0 += (*input)[3];

    group0 *= 95;
    group0 += (*input)[4];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 5;
    uint64_t group1 = 0;
    group1 *= 95;
    group1 += (*input)[0];

    group1 *= 95;
    group1 += (*input)[1];

    group1 *= 95;
    group1 += (*input)[2];

    group1 *= 95;
    group1 += (*input)[3];

    group1 *= 95;
    group1 += (*input)[4];

    *((uint64_t *)((*output) + 4)) |= (group1 << 1);
    *input += 5;
    uint64_t group2 = 0;
    group2 *= 95;
    group2 += (*input)[0];

    group2 *= 95;
    group2 += (*input)[1];

    group2 *= 95;
    group2 += (*input)[2];

    group2 *= 95;
    group2 += (*input)[3];

    group2 *= 95;
    group2 += (*input)[4];

    *((uint64_t *)((*output) + 8)) |= (group2 << 2);
    *input += 5;
    uint64_t group3 = 0;
    group3 *= 95;
    group3 += (*input)[0];

    group3 *= 95;
    group3 += (*input)[1];

    group3 *= 95;
    group3 += (*input)[2];

    group3 *= 95;
    group3 += (*input)[3];

    group3 *= 95;
    group3 += (*input)[4];

    *((uint64_t *)((*output) + 12)) |= (group3 << 3);
    *input += 5;
    uint64_t group4 = 0;
    group4 *= 95;
    group4 += (*input)[0];

    group4 *= 95;
    group4 += (*input)[1];

    group4 *= 95;
    group4 += (*input)[2];

    group4 *= 95;
    group4 += (*input)[3];

    group4 *= 95;
    group4 += (*input)[4];

    *((uint64_t *)((*output) + 16)) |= (group4 << 4);
    *input += 5;
    uint64_t group5 = 0;
    group5 *= 95;
    group5 += (*input)[0];

    group5 *= 95;
    group5 += (*input)[1];

    group5 *= 95;
    group5 += (*input)[2];

    group5 *= 95;
    group5 += (*input)[3];

    group5 *= 95;
    group5 += (*input)[4];

    *((uint64_t *)((*output) + 20)) |= (group5 << 5);
    *input += 5;
    uint64_t group6 = 0;
    group6 *= 95;
    group6 += (*input)[0];

    group6 *= 95;
    group6 += (*input)[1];

    group6 *= 95;
    group6 += (*input)[2];

    group6 *= 95;
    group6 += (*input)[3];

    group6 *= 95;
    group6 += (*input)[4];

    *((uint64_t *)((*output) + 24)) |= (group6 << 6);
    *input += 5;
    uint64_t group7 = 0;
    group7 *= 95;
    group7 += (*input)[0];

    group7 *= 95;
    group7 += (*input)[1];

    group7 *= 95;
    group7 += (*input)[2];

    group7 *= 95;
    group7 += (*input)[3];

    group7 *= 95;
    group7 += (*input)[4];

    *((uint64_t *)((*output) + 28)) |= (group7 << 7);
    *input += 5;
    *output += 33;
}

// Pack 8 groups using 33 bytes (40 values total)
void Ultrapack_Compress96(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 96;
    group0 += (*input)[0];

    group0 *= 96;
    group0 += (*input)[1];

    group0 *= 96;
    group0 += (*input)[2];

    group0 *= 96;
    group0 += (*input)[3];

    group0 *= 96;
    group0 += (*input)[4];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 5;
    uint64_t group1 = 0;
    group1 *= 96;
    group1 += (*input)[0];

    group1 *= 96;
    group1 += (*input)[1];

    group1 *= 96;
    group1 += (*input)[2];

    group1 *= 96;
    group1 += (*input)[3];

    group1 *= 96;
    group1 += (*input)[4];

    *((uint64_t *)((*output) + 4)) |= (group1 << 1);
    *input += 5;
    uint64_t group2 = 0;
    group2 *= 96;
    group2 += (*input)[0];

    group2 *= 96;
    group2 += (*input)[1];

    group2 *= 96;
    group2 += (*input)[2];

    group2 *= 96;
    group2 += (*input)[3];

    group2 *= 96;
    group2 += (*input)[4];

    *((uint64_t *)((*output) + 8)) |= (group2 << 2);
    *input += 5;
    uint64_t group3 = 0;
    group3 *= 96;
    group3 += (*input)[0];

    group3 *= 96;
    group3 += (*input)[1];

    group3 *= 96;
    group3 += (*input)[2];

    group3 *= 96;
    group3 += (*input)[3];

    group3 *= 96;
    group3 += (*input)[4];

    *((uint64_t *)((*output) + 12)) |= (group3 << 3);
    *input += 5;
    uint64_t group4 = 0;
    group4 *= 96;
    group4 += (*input)[0];

    group4 *= 96;
    group4 += (*input)[1];

    group4 *= 96;
    group4 += (*input)[2];

    group4 *= 96;
    group4 += (*input)[3];

    group4 *= 96;
    group4 += (*input)[4];

    *((uint64_t *)((*output) + 16)) |= (group4 << 4);
    *input += 5;
    uint64_t group5 = 0;
    group5 *= 96;
    group5 += (*input)[0];

    group5 *= 96;
    group5 += (*input)[1];

    group5 *= 96;
    group5 += (*input)[2];

    group5 *= 96;
    group5 += (*input)[3];

    group5 *= 96;
    group5 += (*input)[4];

    *((uint64_t *)((*output) + 20)) |= (group5 << 5);
    *input += 5;
    uint64_t group6 = 0;
    group6 *= 96;
    group6 += (*input)[0];

    group6 *= 96;
    group6 += (*input)[1];

    group6 *= 96;
    group6 += (*input)[2];

    group6 *= 96;
    group6 += (*input)[3];

    group6 *= 96;
    group6 += (*input)[4];

    *((uint64_t *)((*output) + 24)) |= (group6 << 6);
    *input += 5;
    uint64_t group7 = 0;
    group7 *= 96;
    group7 += (*input)[0];

    group7 *= 96;
    group7 += (*input)[1];

    group7 *= 96;
    group7 += (*input)[2];

    group7 *= 96;
    group7 += (*input)[3];

    group7 *= 96;
    group7 += (*input)[4];

    *((uint64_t *)((*output) + 28)) |= (group7 << 7);
    *input += 5;
    *output += 33;
}

// Pack 8 groups using 33 bytes (40 values total)
void Ultrapack_Compress97(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 97;
    group0 += (*input)[0];

    group0 *= 97;
    group0 += (*input)[1];

    group0 *= 97;
    group0 += (*input)[2];

    group0 *= 97;
    group0 += (*input)[3];

    group0 *= 97;
    group0 += (*input)[4];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 5;
    uint64_t group1 = 0;
    group1 *= 97;
    group1 += (*input)[0];

    group1 *= 97;
    group1 += (*input)[1];

    group1 *= 97;
    group1 += (*input)[2];

    group1 *= 97;
    group1 += (*input)[3];

    group1 *= 97;
    group1 += (*input)[4];

    *((uint64_t *)((*output) + 4)) |= (group1 << 1);
    *input += 5;
    uint64_t group2 = 0;
    group2 *= 97;
    group2 += (*input)[0];

    group2 *= 97;
    group2 += (*input)[1];

    group2 *= 97;
    group2 += (*input)[2];

    group2 *= 97;
    group2 += (*input)[3];

    group2 *= 97;
    group2 += (*input)[4];

    *((uint64_t *)((*output) + 8)) |= (group2 << 2);
    *input += 5;
    uint64_t group3 = 0;
    group3 *= 97;
    group3 += (*input)[0];

    group3 *= 97;
    group3 += (*input)[1];

    group3 *= 97;
    group3 += (*input)[2];

    group3 *= 97;
    group3 += (*input)[3];

    group3 *= 97;
    group3 += (*input)[4];

    *((uint64_t *)((*output) + 12)) |= (group3 << 3);
    *input += 5;
    uint64_t group4 = 0;
    group4 *= 97;
    group4 += (*input)[0];

    group4 *= 97;
    group4 += (*input)[1];

    group4 *= 97;
    group4 += (*input)[2];

    group4 *= 97;
    group4 += (*input)[3];

    group4 *= 97;
    group4 += (*input)[4];

    *((uint64_t *)((*output) + 16)) |= (group4 << 4);
    *input += 5;
    uint64_t group5 = 0;
    group5 *= 97;
    group5 += (*input)[0];

    group5 *= 97;
    group5 += (*input)[1];

    group5 *= 97;
    group5 += (*input)[2];

    group5 *= 97;
    group5 += (*input)[3];

    group5 *= 97;
    group5 += (*input)[4];

    *((uint64_t *)((*output) + 20)) |= (group5 << 5);
    *input += 5;
    uint64_t group6 = 0;
    group6 *= 97;
    group6 += (*input)[0];

    group6 *= 97;
    group6 += (*input)[1];

    group6 *= 97;
    group6 += (*input)[2];

    group6 *= 97;
    group6 += (*input)[3];

    group6 *= 97;
    group6 += (*input)[4];

    *((uint64_t *)((*output) + 24)) |= (group6 << 6);
    *input += 5;
    uint64_t group7 = 0;
    group7 *= 97;
    group7 += (*input)[0];

    group7 *= 97;
    group7 += (*input)[1];

    group7 *= 97;
    group7 += (*input)[2];

    group7 *= 97;
    group7 += (*input)[3];

    group7 *= 97;
    group7 += (*input)[4];

    *((uint64_t *)((*output) + 28)) |= (group7 << 7);
    *input += 5;
    *output += 33;
}

// Pack 2 groups using 5 bytes (6 values total)
void Ultrapack_Compress98(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 98;
    group0 += (*input)[0];

    group0 *= 98;
    group0 += (*input)[1];

    group0 *= 98;
    group0 += (*input)[2];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 3;
    uint64_t group1 = 0;
    group1 *= 98;
    group1 += (*input)[0];

    group1 *= 98;
    group1 += (*input)[1];

    group1 *= 98;
    group1 += (*input)[2];

    *((uint64_t *)((*output) + 2)) |= (group1 << 4);
    *input += 3;
    *output += 5;
}

// Pack 2 groups using 5 bytes (6 values total)
void Ultrapack_Compress99(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 99;
    group0 += (*input)[0];

    group0 *= 99;
    group0 += (*input)[1];

    group0 *= 99;
    group0 += (*input)[2];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 3;
    uint64_t group1 = 0;
    group1 *= 99;
    group1 += (*input)[0];

    group1 *= 99;
    group1 += (*input)[1];

    group1 *= 99;
    group1 += (*input)[2];

    *((uint64_t *)((*output) + 2)) |= (group1 << 4);
    *input += 3;
    *output += 5;
}

// Pack 2 groups using 5 bytes (6 values total)
void Ultrapack_Compress100(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 100;
    group0 += (*input)[0];

    group0 *= 100;
    group0 += (*input)[1];

    group0 *= 100;
    group0 += (*input)[2];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 3;
    uint64_t group1 = 0;
    group1 *= 100;
    group1 += (*input)[0];

    group1 *= 100;
    group1 += (*input)[1];

    group1 *= 100;
    group1 += (*input)[2];

    *((uint64_t *)((*output) + 2)) |= (group1 << 4);
    *input += 3;
    *output += 5;
}

// Pack 2 groups using 5 bytes (6 values total)
void Ultrapack_Compress101(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 101;
    group0 += (*input)[0];

    group0 *= 101;
    group0 += (*input)[1];

    group0 *= 101;
    group0 += (*input)[2];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 3;
    uint64_t group1 = 0;
    group1 *= 101;
    group1 += (*input)[0];

    group1 *= 101;
    group1 += (*input)[1];

    group1 *= 101;
    group1 += (*input)[2];

    *((uint64_t *)((*output) + 2)) |= (group1 << 4);
    *input += 3;
    *output += 5;
}

// Pack 8 groups using 27 bytes (32 values total)
void Ultrapack_Compress102(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 102;
    group0 += (*input)[0];

    group0 *= 102;
    group0 += (*input)[1];

    group0 *= 102;
    group0 += (*input)[2];

    group0 *= 102;
    group0 += (*input)[3];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 4;
    uint64_t group1 = 0;
    group1 *= 102;
    group1 += (*input)[0];

    group1 *= 102;
    group1 += (*input)[1];

    group1 *= 102;
    group1 += (*input)[2];

    group1 *= 102;
    group1 += (*input)[3];

    *((uint64_t *)((*output) + 3)) |= (group1 << 3);
    *input += 4;
    uint64_t group2 = 0;
    group2 *= 102;
    group2 += (*input)[0];

    group2 *= 102;
    group2 += (*input)[1];

    group2 *= 102;
    group2 += (*input)[2];

    group2 *= 102;
    group2 += (*input)[3];

    *((uint64_t *)((*output) + 6)) |= (group2 << 6);
    *input += 4;
    uint64_t group3 = 0;
    group3 *= 102;
    group3 += (*input)[0];

    group3 *= 102;
    group3 += (*input)[1];

    group3 *= 102;
    group3 += (*input)[2];

    group3 *= 102;
    group3 += (*input)[3];

    *((uint64_t *)((*output) + 10)) |= (group3 << 1);
    *input += 4;
    uint64_t group4 = 0;
    group4 *= 102;
    group4 += (*input)[0];

    group4 *= 102;
    group4 += (*input)[1];

    group4 *= 102;
    group4 += (*input)[2];

    group4 *= 102;
    group4 += (*input)[3];

    *((uint64_t *)((*output) + 13)) |= (group4 << 4);
    *input += 4;
    uint64_t group5 = 0;
    group5 *= 102;
    group5 += (*input)[0];

    group5 *= 102;
    group5 += (*input)[1];

    group5 *= 102;
    group5 += (*input)[2];

    group5 *= 102;
    group5 += (*input)[3];

    *((uint64_t *)((*output) + 16)) |= (group5 << 7);
    *input += 4;
    uint64_t group6 = 0;
    group6 *= 102;
    group6 += (*input)[0];

    group6 *= 102;
    group6 += (*input)[1];

    group6 *= 102;
    group6 += (*input)[2];

    group6 *= 102;
    group6 += (*input)[3];

    *((uint64_t *)((*output) + 20)) |= (group6 << 2);
    *input += 4;
    uint64_t group7 = 0;
    group7 *= 102;
    group7 += (*input)[0];

    group7 *= 102;
    group7 += (*input)[1];

    group7 *= 102;
    group7 += (*input)[2];

    group7 *= 102;
    group7 += (*input)[3];

    *((uint64_t *)((*output) + 23)) |= (group7 << 5);
    *input += 4;
    *output += 27;
}

// Pack 8 groups using 27 bytes (32 values total)
void Ultrapack_Compress103(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 103;
    group0 += (*input)[0];

    group0 *= 103;
    group0 += (*input)[1];

    group0 *= 103;
    group0 += (*input)[2];

    group0 *= 103;
    group0 += (*input)[3];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 4;
    uint64_t group1 = 0;
    group1 *= 103;
    group1 += (*input)[0];

    group1 *= 103;
    group1 += (*input)[1];

    group1 *= 103;
    group1 += (*input)[2];

    group1 *= 103;
    group1 += (*input)[3];

    *((uint64_t *)((*output) + 3)) |= (group1 << 3);
    *input += 4;
    uint64_t group2 = 0;
    group2 *= 103;
    group2 += (*input)[0];

    group2 *= 103;
    group2 += (*input)[1];

    group2 *= 103;
    group2 += (*input)[2];

    group2 *= 103;
    group2 += (*input)[3];

    *((uint64_t *)((*output) + 6)) |= (group2 << 6);
    *input += 4;
    uint64_t group3 = 0;
    group3 *= 103;
    group3 += (*input)[0];

    group3 *= 103;
    group3 += (*input)[1];

    group3 *= 103;
    group3 += (*input)[2];

    group3 *= 103;
    group3 += (*input)[3];

    *((uint64_t *)((*output) + 10)) |= (group3 << 1);
    *input += 4;
    uint64_t group4 = 0;
    group4 *= 103;
    group4 += (*input)[0];

    group4 *= 103;
    group4 += (*input)[1];

    group4 *= 103;
    group4 += (*input)[2];

    group4 *= 103;
    group4 += (*input)[3];

    *((uint64_t *)((*output) + 13)) |= (group4 << 4);
    *input += 4;
    uint64_t group5 = 0;
    group5 *= 103;
    group5 += (*input)[0];

    group5 *= 103;
    group5 += (*input)[1];

    group5 *= 103;
    group5 += (*input)[2];

    group5 *= 103;
    group5 += (*input)[3];

    *((uint64_t *)((*output) + 16)) |= (group5 << 7);
    *input += 4;
    uint64_t group6 = 0;
    group6 *= 103;
    group6 += (*input)[0];

    group6 *= 103;
    group6 += (*input)[1];

    group6 *= 103;
    group6 += (*input)[2];

    group6 *= 103;
    group6 += (*input)[3];

    *((uint64_t *)((*output) + 20)) |= (group6 << 2);
    *input += 4;
    uint64_t group7 = 0;
    group7 *= 103;
    group7 += (*input)[0];

    group7 *= 103;
    group7 += (*input)[1];

    group7 *= 103;
    group7 += (*input)[2];

    group7 *= 103;
    group7 += (*input)[3];

    *((uint64_t *)((*output) + 23)) |= (group7 << 5);
    *input += 4;
    *output += 27;
}

// Pack 8 groups using 27 bytes (32 values total)
void Ultrapack_Compress104(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 104;
    group0 += (*input)[0];

    group0 *= 104;
    group0 += (*input)[1];

    group0 *= 104;
    group0 += (*input)[2];

    group0 *= 104;
    group0 += (*input)[3];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 4;
    uint64_t group1 = 0;
    group1 *= 104;
    group1 += (*input)[0];

    group1 *= 104;
    group1 += (*input)[1];

    group1 *= 104;
    group1 += (*input)[2];

    group1 *= 104;
    group1 += (*input)[3];

    *((uint64_t *)((*output) + 3)) |= (group1 << 3);
    *input += 4;
    uint64_t group2 = 0;
    group2 *= 104;
    group2 += (*input)[0];

    group2 *= 104;
    group2 += (*input)[1];

    group2 *= 104;
    group2 += (*input)[2];

    group2 *= 104;
    group2 += (*input)[3];

    *((uint64_t *)((*output) + 6)) |= (group2 << 6);
    *input += 4;
    uint64_t group3 = 0;
    group3 *= 104;
    group3 += (*input)[0];

    group3 *= 104;
    group3 += (*input)[1];

    group3 *= 104;
    group3 += (*input)[2];

    group3 *= 104;
    group3 += (*input)[3];

    *((uint64_t *)((*output) + 10)) |= (group3 << 1);
    *input += 4;
    uint64_t group4 = 0;
    group4 *= 104;
    group4 += (*input)[0];

    group4 *= 104;
    group4 += (*input)[1];

    group4 *= 104;
    group4 += (*input)[2];

    group4 *= 104;
    group4 += (*input)[3];

    *((uint64_t *)((*output) + 13)) |= (group4 << 4);
    *input += 4;
    uint64_t group5 = 0;
    group5 *= 104;
    group5 += (*input)[0];

    group5 *= 104;
    group5 += (*input)[1];

    group5 *= 104;
    group5 += (*input)[2];

    group5 *= 104;
    group5 += (*input)[3];

    *((uint64_t *)((*output) + 16)) |= (group5 << 7);
    *input += 4;
    uint64_t group6 = 0;
    group6 *= 104;
    group6 += (*input)[0];

    group6 *= 104;
    group6 += (*input)[1];

    group6 *= 104;
    group6 += (*input)[2];

    group6 *= 104;
    group6 += (*input)[3];

    *((uint64_t *)((*output) + 20)) |= (group6 << 2);
    *input += 4;
    uint64_t group7 = 0;
    group7 *= 104;
    group7 += (*input)[0];

    group7 *= 104;
    group7 += (*input)[1];

    group7 *= 104;
    group7 += (*input)[2];

    group7 *= 104;
    group7 += (*input)[3];

    *((uint64_t *)((*output) + 23)) |= (group7 << 5);
    *input += 4;
    *output += 27;
}

// Pack 8 groups using 27 bytes (32 values total)
void Ultrapack_Compress105(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 105;
    group0 += (*input)[0];

    group0 *= 105;
    group0 += (*input)[1];

    group0 *= 105;
    group0 += (*input)[2];

    group0 *= 105;
    group0 += (*input)[3];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 4;
    uint64_t group1 = 0;
    group1 *= 105;
    group1 += (*input)[0];

    group1 *= 105;
    group1 += (*input)[1];

    group1 *= 105;
    group1 += (*input)[2];

    group1 *= 105;
    group1 += (*input)[3];

    *((uint64_t *)((*output) + 3)) |= (group1 << 3);
    *input += 4;
    uint64_t group2 = 0;
    group2 *= 105;
    group2 += (*input)[0];

    group2 *= 105;
    group2 += (*input)[1];

    group2 *= 105;
    group2 += (*input)[2];

    group2 *= 105;
    group2 += (*input)[3];

    *((uint64_t *)((*output) + 6)) |= (group2 << 6);
    *input += 4;
    uint64_t group3 = 0;
    group3 *= 105;
    group3 += (*input)[0];

    group3 *= 105;
    group3 += (*input)[1];

    group3 *= 105;
    group3 += (*input)[2];

    group3 *= 105;
    group3 += (*input)[3];

    *((uint64_t *)((*output) + 10)) |= (group3 << 1);
    *input += 4;
    uint64_t group4 = 0;
    group4 *= 105;
    group4 += (*input)[0];

    group4 *= 105;
    group4 += (*input)[1];

    group4 *= 105;
    group4 += (*input)[2];

    group4 *= 105;
    group4 += (*input)[3];

    *((uint64_t *)((*output) + 13)) |= (group4 << 4);
    *input += 4;
    uint64_t group5 = 0;
    group5 *= 105;
    group5 += (*input)[0];

    group5 *= 105;
    group5 += (*input)[1];

    group5 *= 105;
    group5 += (*input)[2];

    group5 *= 105;
    group5 += (*input)[3];

    *((uint64_t *)((*output) + 16)) |= (group5 << 7);
    *input += 4;
    uint64_t group6 = 0;
    group6 *= 105;
    group6 += (*input)[0];

    group6 *= 105;
    group6 += (*input)[1];

    group6 *= 105;
    group6 += (*input)[2];

    group6 *= 105;
    group6 += (*input)[3];

    *((uint64_t *)((*output) + 20)) |= (group6 << 2);
    *input += 4;
    uint64_t group7 = 0;
    group7 *= 105;
    group7 += (*input)[0];

    group7 *= 105;
    group7 += (*input)[1];

    group7 *= 105;
    group7 += (*input)[2];

    group7 *= 105;
    group7 += (*input)[3];

    *((uint64_t *)((*output) + 23)) |= (group7 << 5);
    *input += 4;
    *output += 27;
}

// Pack 8 groups using 27 bytes (32 values total)
void Ultrapack_Compress106(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 106;
    group0 += (*input)[0];

    group0 *= 106;
    group0 += (*input)[1];

    group0 *= 106;
    group0 += (*input)[2];

    group0 *= 106;
    group0 += (*input)[3];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 4;
    uint64_t group1 = 0;
    group1 *= 106;
    group1 += (*input)[0];

    group1 *= 106;
    group1 += (*input)[1];

    group1 *= 106;
    group1 += (*input)[2];

    group1 *= 106;
    group1 += (*input)[3];

    *((uint64_t *)((*output) + 3)) |= (group1 << 3);
    *input += 4;
    uint64_t group2 = 0;
    group2 *= 106;
    group2 += (*input)[0];

    group2 *= 106;
    group2 += (*input)[1];

    group2 *= 106;
    group2 += (*input)[2];

    group2 *= 106;
    group2 += (*input)[3];

    *((uint64_t *)((*output) + 6)) |= (group2 << 6);
    *input += 4;
    uint64_t group3 = 0;
    group3 *= 106;
    group3 += (*input)[0];

    group3 *= 106;
    group3 += (*input)[1];

    group3 *= 106;
    group3 += (*input)[2];

    group3 *= 106;
    group3 += (*input)[3];

    *((uint64_t *)((*output) + 10)) |= (group3 << 1);
    *input += 4;
    uint64_t group4 = 0;
    group4 *= 106;
    group4 += (*input)[0];

    group4 *= 106;
    group4 += (*input)[1];

    group4 *= 106;
    group4 += (*input)[2];

    group4 *= 106;
    group4 += (*input)[3];

    *((uint64_t *)((*output) + 13)) |= (group4 << 4);
    *input += 4;
    uint64_t group5 = 0;
    group5 *= 106;
    group5 += (*input)[0];

    group5 *= 106;
    group5 += (*input)[1];

    group5 *= 106;
    group5 += (*input)[2];

    group5 *= 106;
    group5 += (*input)[3];

    *((uint64_t *)((*output) + 16)) |= (group5 << 7);
    *input += 4;
    uint64_t group6 = 0;
    group6 *= 106;
    group6 += (*input)[0];

    group6 *= 106;
    group6 += (*input)[1];

    group6 *= 106;
    group6 += (*input)[2];

    group6 *= 106;
    group6 += (*input)[3];

    *((uint64_t *)((*output) + 20)) |= (group6 << 2);
    *input += 4;
    uint64_t group7 = 0;
    group7 *= 106;
    group7 += (*input)[0];

    group7 *= 106;
    group7 += (*input)[1];

    group7 *= 106;
    group7 += (*input)[2];

    group7 *= 106;
    group7 += (*input)[3];

    *((uint64_t *)((*output) + 23)) |= (group7 << 5);
    *input += 4;
    *output += 27;
}

// Pack 8 groups using 27 bytes (32 values total)
void Ultrapack_Compress107(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 107;
    group0 += (*input)[0];

    group0 *= 107;
    group0 += (*input)[1];

    group0 *= 107;
    group0 += (*input)[2];

    group0 *= 107;
    group0 += (*input)[3];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 4;
    uint64_t group1 = 0;
    group1 *= 107;
    group1 += (*input)[0];

    group1 *= 107;
    group1 += (*input)[1];

    group1 *= 107;
    group1 += (*input)[2];

    group1 *= 107;
    group1 += (*input)[3];

    *((uint64_t *)((*output) + 3)) |= (group1 << 3);
    *input += 4;
    uint64_t group2 = 0;
    group2 *= 107;
    group2 += (*input)[0];

    group2 *= 107;
    group2 += (*input)[1];

    group2 *= 107;
    group2 += (*input)[2];

    group2 *= 107;
    group2 += (*input)[3];

    *((uint64_t *)((*output) + 6)) |= (group2 << 6);
    *input += 4;
    uint64_t group3 = 0;
    group3 *= 107;
    group3 += (*input)[0];

    group3 *= 107;
    group3 += (*input)[1];

    group3 *= 107;
    group3 += (*input)[2];

    group3 *= 107;
    group3 += (*input)[3];

    *((uint64_t *)((*output) + 10)) |= (group3 << 1);
    *input += 4;
    uint64_t group4 = 0;
    group4 *= 107;
    group4 += (*input)[0];

    group4 *= 107;
    group4 += (*input)[1];

    group4 *= 107;
    group4 += (*input)[2];

    group4 *= 107;
    group4 += (*input)[3];

    *((uint64_t *)((*output) + 13)) |= (group4 << 4);
    *input += 4;
    uint64_t group5 = 0;
    group5 *= 107;
    group5 += (*input)[0];

    group5 *= 107;
    group5 += (*input)[1];

    group5 *= 107;
    group5 += (*input)[2];

    group5 *= 107;
    group5 += (*input)[3];

    *((uint64_t *)((*output) + 16)) |= (group5 << 7);
    *input += 4;
    uint64_t group6 = 0;
    group6 *= 107;
    group6 += (*input)[0];

    group6 *= 107;
    group6 += (*input)[1];

    group6 *= 107;
    group6 += (*input)[2];

    group6 *= 107;
    group6 += (*input)[3];

    *((uint64_t *)((*output) + 20)) |= (group6 << 2);
    *input += 4;
    uint64_t group7 = 0;
    group7 *= 107;
    group7 += (*input)[0];

    group7 *= 107;
    group7 += (*input)[1];

    group7 *= 107;
    group7 += (*input)[2];

    group7 *= 107;
    group7 += (*input)[3];

    *((uint64_t *)((*output) + 23)) |= (group7 << 5);
    *input += 4;
    *output += 27;
}

// Pack 4 groups using 17 bytes (20 values total)
void Ultrapack_Compress108(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 108;
    group0 += (*input)[0];

    group0 *= 108;
    group0 += (*input)[1];

    group0 *= 108;
    group0 += (*input)[2];

    group0 *= 108;
    group0 += (*input)[3];

    group0 *= 108;
    group0 += (*input)[4];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 5;
    uint64_t group1 = 0;
    group1 *= 108;
    group1 += (*input)[0];

    group1 *= 108;
    group1 += (*input)[1];

    group1 *= 108;
    group1 += (*input)[2];

    group1 *= 108;
    group1 += (*input)[3];

    group1 *= 108;
    group1 += (*input)[4];

    *((uint64_t *)((*output) + 4)) |= (group1 << 2);
    *input += 5;
    uint64_t group2 = 0;
    group2 *= 108;
    group2 += (*input)[0];

    group2 *= 108;
    group2 += (*input)[1];

    group2 *= 108;
    group2 += (*input)[2];

    group2 *= 108;
    group2 += (*input)[3];

    group2 *= 108;
    group2 += (*input)[4];

    *((uint64_t *)((*output) + 8)) |= (group2 << 4);
    *input += 5;
    uint64_t group3 = 0;
    group3 *= 108;
    group3 += (*input)[0];

    group3 *= 108;
    group3 += (*input)[1];

    group3 *= 108;
    group3 += (*input)[2];

    group3 *= 108;
    group3 += (*input)[3];

    group3 *= 108;
    group3 += (*input)[4];

    *((uint64_t *)((*output) + 12)) |= (group3 << 6);
    *input += 5;
    *output += 17;
}

// Pack 4 groups using 17 bytes (20 values total)
void Ultrapack_Compress109(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 109;
    group0 += (*input)[0];

    group0 *= 109;
    group0 += (*input)[1];

    group0 *= 109;
    group0 += (*input)[2];

    group0 *= 109;
    group0 += (*input)[3];

    group0 *= 109;
    group0 += (*input)[4];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 5;
    uint64_t group1 = 0;
    group1 *= 109;
    group1 += (*input)[0];

    group1 *= 109;
    group1 += (*input)[1];

    group1 *= 109;
    group1 += (*input)[2];

    group1 *= 109;
    group1 += (*input)[3];

    group1 *= 109;
    group1 += (*input)[4];

    *((uint64_t *)((*output) + 4)) |= (group1 << 2);
    *input += 5;
    uint64_t group2 = 0;
    group2 *= 109;
    group2 += (*input)[0];

    group2 *= 109;
    group2 += (*input)[1];

    group2 *= 109;
    group2 += (*input)[2];

    group2 *= 109;
    group2 += (*input)[3];

    group2 *= 109;
    group2 += (*input)[4];

    *((uint64_t *)((*output) + 8)) |= (group2 << 4);
    *input += 5;
    uint64_t group3 = 0;
    group3 *= 109;
    group3 += (*input)[0];

    group3 *= 109;
    group3 += (*input)[1];

    group3 *= 109;
    group3 += (*input)[2];

    group3 *= 109;
    group3 += (*input)[3];

    group3 *= 109;
    group3 += (*input)[4];

    *((uint64_t *)((*output) + 12)) |= (group3 << 6);
    *input += 5;
    *output += 17;
}

// Pack 4 groups using 17 bytes (20 values total)
void Ultrapack_Compress110(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 110;
    group0 += (*input)[0];

    group0 *= 110;
    group0 += (*input)[1];

    group0 *= 110;
    group0 += (*input)[2];

    group0 *= 110;
    group0 += (*input)[3];

    group0 *= 110;
    group0 += (*input)[4];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 5;
    uint64_t group1 = 0;
    group1 *= 110;
    group1 += (*input)[0];

    group1 *= 110;
    group1 += (*input)[1];

    group1 *= 110;
    group1 += (*input)[2];

    group1 *= 110;
    group1 += (*input)[3];

    group1 *= 110;
    group1 += (*input)[4];

    *((uint64_t *)((*output) + 4)) |= (group1 << 2);
    *input += 5;
    uint64_t group2 = 0;
    group2 *= 110;
    group2 += (*input)[0];

    group2 *= 110;
    group2 += (*input)[1];

    group2 *= 110;
    group2 += (*input)[2];

    group2 *= 110;
    group2 += (*input)[3];

    group2 *= 110;
    group2 += (*input)[4];

    *((uint64_t *)((*output) + 8)) |= (group2 << 4);
    *input += 5;
    uint64_t group3 = 0;
    group3 *= 110;
    group3 += (*input)[0];

    group3 *= 110;
    group3 += (*input)[1];

    group3 *= 110;
    group3 += (*input)[2];

    group3 *= 110;
    group3 += (*input)[3];

    group3 *= 110;
    group3 += (*input)[4];

    *((uint64_t *)((*output) + 12)) |= (group3 << 6);
    *input += 5;
    *output += 17;
}

// Pack 4 groups using 17 bytes (20 values total)
void Ultrapack_Compress111(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 111;
    group0 += (*input)[0];

    group0 *= 111;
    group0 += (*input)[1];

    group0 *= 111;
    group0 += (*input)[2];

    group0 *= 111;
    group0 += (*input)[3];

    group0 *= 111;
    group0 += (*input)[4];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 5;
    uint64_t group1 = 0;
    group1 *= 111;
    group1 += (*input)[0];

    group1 *= 111;
    group1 += (*input)[1];

    group1 *= 111;
    group1 += (*input)[2];

    group1 *= 111;
    group1 += (*input)[3];

    group1 *= 111;
    group1 += (*input)[4];

    *((uint64_t *)((*output) + 4)) |= (group1 << 2);
    *input += 5;
    uint64_t group2 = 0;
    group2 *= 111;
    group2 += (*input)[0];

    group2 *= 111;
    group2 += (*input)[1];

    group2 *= 111;
    group2 += (*input)[2];

    group2 *= 111;
    group2 += (*input)[3];

    group2 *= 111;
    group2 += (*input)[4];

    *((uint64_t *)((*output) + 8)) |= (group2 << 4);
    *input += 5;
    uint64_t group3 = 0;
    group3 *= 111;
    group3 += (*input)[0];

    group3 *= 111;
    group3 += (*input)[1];

    group3 *= 111;
    group3 += (*input)[2];

    group3 *= 111;
    group3 += (*input)[3];

    group3 *= 111;
    group3 += (*input)[4];

    *((uint64_t *)((*output) + 12)) |= (group3 << 6);
    *input += 5;
    *output += 17;
}

// Pack 8 groups using 41 bytes (48 values total)
void Ultrapack_Compress112(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 112;
    group0 += (*input)[0];

    group0 *= 112;
    group0 += (*input)[1];

    group0 *= 112;
    group0 += (*input)[2];

    group0 *= 112;
    group0 += (*input)[3];

    group0 *= 112;
    group0 += (*input)[4];

    group0 *= 112;
    group0 += (*input)[5];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 6;
    uint64_t group1 = 0;
    group1 *= 112;
    group1 += (*input)[0];

    group1 *= 112;
    group1 += (*input)[1];

    group1 *= 112;
    group1 += (*input)[2];

    group1 *= 112;
    group1 += (*input)[3];

    group1 *= 112;
    group1 += (*input)[4];

    group1 *= 112;
    group1 += (*input)[5];

    *((uint64_t *)((*output) + 5)) |= (group1 << 1);
    *input += 6;
    uint64_t group2 = 0;
    group2 *= 112;
    group2 += (*input)[0];

    group2 *= 112;
    group2 += (*input)[1];

    group2 *= 112;
    group2 += (*input)[2];

    group2 *= 112;
    group2 += (*input)[3];

    group2 *= 112;
    group2 += (*input)[4];

    group2 *= 112;
    group2 += (*input)[5];

    *((uint64_t *)((*output) + 10)) |= (group2 << 2);
    *input += 6;
    uint64_t group3 = 0;
    group3 *= 112;
    group3 += (*input)[0];

    group3 *= 112;
    group3 += (*input)[1];

    group3 *= 112;
    group3 += (*input)[2];

    group3 *= 112;
    group3 += (*input)[3];

    group3 *= 112;
    group3 += (*input)[4];

    group3 *= 112;
    group3 += (*input)[5];

    *((uint64_t *)((*output) + 15)) |= (group3 << 3);
    *input += 6;
    uint64_t group4 = 0;
    group4 *= 112;
    group4 += (*input)[0];

    group4 *= 112;
    group4 += (*input)[1];

    group4 *= 112;
    group4 += (*input)[2];

    group4 *= 112;
    group4 += (*input)[3];

    group4 *= 112;
    group4 += (*input)[4];

    group4 *= 112;
    group4 += (*input)[5];

    *((uint64_t *)((*output) + 20)) |= (group4 << 4);
    *input += 6;
    uint64_t group5 = 0;
    group5 *= 112;
    group5 += (*input)[0];

    group5 *= 112;
    group5 += (*input)[1];

    group5 *= 112;
    group5 += (*input)[2];

    group5 *= 112;
    group5 += (*input)[3];

    group5 *= 112;
    group5 += (*input)[4];

    group5 *= 112;
    group5 += (*input)[5];

    *((uint64_t *)((*output) + 25)) |= (group5 << 5);
    *input += 6;
    uint64_t group6 = 0;
    group6 *= 112;
    group6 += (*input)[0];

    group6 *= 112;
    group6 += (*input)[1];

    group6 *= 112;
    group6 += (*input)[2];

    group6 *= 112;
    group6 += (*input)[3];

    group6 *= 112;
    group6 += (*input)[4];

    group6 *= 112;
    group6 += (*input)[5];

    *((uint64_t *)((*output) + 30)) |= (group6 << 6);
    *input += 6;
    uint64_t group7 = 0;
    group7 *= 112;
    group7 += (*input)[0];

    group7 *= 112;
    group7 += (*input)[1];

    group7 *= 112;
    group7 += (*input)[2];

    group7 *= 112;
    group7 += (*input)[3];

    group7 *= 112;
    group7 += (*input)[4];

    group7 *= 112;
    group7 += (*input)[5];

    *((uint64_t *)((*output) + 35)) |= (group7 << 7);
    *input += 6;
    *output += 41;
}

// Pack 8 groups using 41 bytes (48 values total)
void Ultrapack_Compress113(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 113;
    group0 += (*input)[0];

    group0 *= 113;
    group0 += (*input)[1];

    group0 *= 113;
    group0 += (*input)[2];

    group0 *= 113;
    group0 += (*input)[3];

    group0 *= 113;
    group0 += (*input)[4];

    group0 *= 113;
    group0 += (*input)[5];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 6;
    uint64_t group1 = 0;
    group1 *= 113;
    group1 += (*input)[0];

    group1 *= 113;
    group1 += (*input)[1];

    group1 *= 113;
    group1 += (*input)[2];

    group1 *= 113;
    group1 += (*input)[3];

    group1 *= 113;
    group1 += (*input)[4];

    group1 *= 113;
    group1 += (*input)[5];

    *((uint64_t *)((*output) + 5)) |= (group1 << 1);
    *input += 6;
    uint64_t group2 = 0;
    group2 *= 113;
    group2 += (*input)[0];

    group2 *= 113;
    group2 += (*input)[1];

    group2 *= 113;
    group2 += (*input)[2];

    group2 *= 113;
    group2 += (*input)[3];

    group2 *= 113;
    group2 += (*input)[4];

    group2 *= 113;
    group2 += (*input)[5];

    *((uint64_t *)((*output) + 10)) |= (group2 << 2);
    *input += 6;
    uint64_t group3 = 0;
    group3 *= 113;
    group3 += (*input)[0];

    group3 *= 113;
    group3 += (*input)[1];

    group3 *= 113;
    group3 += (*input)[2];

    group3 *= 113;
    group3 += (*input)[3];

    group3 *= 113;
    group3 += (*input)[4];

    group3 *= 113;
    group3 += (*input)[5];

    *((uint64_t *)((*output) + 15)) |= (group3 << 3);
    *input += 6;
    uint64_t group4 = 0;
    group4 *= 113;
    group4 += (*input)[0];

    group4 *= 113;
    group4 += (*input)[1];

    group4 *= 113;
    group4 += (*input)[2];

    group4 *= 113;
    group4 += (*input)[3];

    group4 *= 113;
    group4 += (*input)[4];

    group4 *= 113;
    group4 += (*input)[5];

    *((uint64_t *)((*output) + 20)) |= (group4 << 4);
    *input += 6;
    uint64_t group5 = 0;
    group5 *= 113;
    group5 += (*input)[0];

    group5 *= 113;
    group5 += (*input)[1];

    group5 *= 113;
    group5 += (*input)[2];

    group5 *= 113;
    group5 += (*input)[3];

    group5 *= 113;
    group5 += (*input)[4];

    group5 *= 113;
    group5 += (*input)[5];

    *((uint64_t *)((*output) + 25)) |= (group5 << 5);
    *input += 6;
    uint64_t group6 = 0;
    group6 *= 113;
    group6 += (*input)[0];

    group6 *= 113;
    group6 += (*input)[1];

    group6 *= 113;
    group6 += (*input)[2];

    group6 *= 113;
    group6 += (*input)[3];

    group6 *= 113;
    group6 += (*input)[4];

    group6 *= 113;
    group6 += (*input)[5];

    *((uint64_t *)((*output) + 30)) |= (group6 << 6);
    *input += 6;
    uint64_t group7 = 0;
    group7 *= 113;
    group7 += (*input)[0];

    group7 *= 113;
    group7 += (*input)[1];

    group7 *= 113;
    group7 += (*input)[2];

    group7 *= 113;
    group7 += (*input)[3];

    group7 *= 113;
    group7 += (*input)[4];

    group7 *= 113;
    group7 += (*input)[5];

    *((uint64_t *)((*output) + 35)) |= (group7 << 7);
    *input += 6;
    *output += 41;
}

// Pack 8 groups using 41 bytes (48 values total)
void Ultrapack_Compress114(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 114;
    group0 += (*input)[0];

    group0 *= 114;
    group0 += (*input)[1];

    group0 *= 114;
    group0 += (*input)[2];

    group0 *= 114;
    group0 += (*input)[3];

    group0 *= 114;
    group0 += (*input)[4];

    group0 *= 114;
    group0 += (*input)[5];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 6;
    uint64_t group1 = 0;
    group1 *= 114;
    group1 += (*input)[0];

    group1 *= 114;
    group1 += (*input)[1];

    group1 *= 114;
    group1 += (*input)[2];

    group1 *= 114;
    group1 += (*input)[3];

    group1 *= 114;
    group1 += (*input)[4];

    group1 *= 114;
    group1 += (*input)[5];

    *((uint64_t *)((*output) + 5)) |= (group1 << 1);
    *input += 6;
    uint64_t group2 = 0;
    group2 *= 114;
    group2 += (*input)[0];

    group2 *= 114;
    group2 += (*input)[1];

    group2 *= 114;
    group2 += (*input)[2];

    group2 *= 114;
    group2 += (*input)[3];

    group2 *= 114;
    group2 += (*input)[4];

    group2 *= 114;
    group2 += (*input)[5];

    *((uint64_t *)((*output) + 10)) |= (group2 << 2);
    *input += 6;
    uint64_t group3 = 0;
    group3 *= 114;
    group3 += (*input)[0];

    group3 *= 114;
    group3 += (*input)[1];

    group3 *= 114;
    group3 += (*input)[2];

    group3 *= 114;
    group3 += (*input)[3];

    group3 *= 114;
    group3 += (*input)[4];

    group3 *= 114;
    group3 += (*input)[5];

    *((uint64_t *)((*output) + 15)) |= (group3 << 3);
    *input += 6;
    uint64_t group4 = 0;
    group4 *= 114;
    group4 += (*input)[0];

    group4 *= 114;
    group4 += (*input)[1];

    group4 *= 114;
    group4 += (*input)[2];

    group4 *= 114;
    group4 += (*input)[3];

    group4 *= 114;
    group4 += (*input)[4];

    group4 *= 114;
    group4 += (*input)[5];

    *((uint64_t *)((*output) + 20)) |= (group4 << 4);
    *input += 6;
    uint64_t group5 = 0;
    group5 *= 114;
    group5 += (*input)[0];

    group5 *= 114;
    group5 += (*input)[1];

    group5 *= 114;
    group5 += (*input)[2];

    group5 *= 114;
    group5 += (*input)[3];

    group5 *= 114;
    group5 += (*input)[4];

    group5 *= 114;
    group5 += (*input)[5];

    *((uint64_t *)((*output) + 25)) |= (group5 << 5);
    *input += 6;
    uint64_t group6 = 0;
    group6 *= 114;
    group6 += (*input)[0];

    group6 *= 114;
    group6 += (*input)[1];

    group6 *= 114;
    group6 += (*input)[2];

    group6 *= 114;
    group6 += (*input)[3];

    group6 *= 114;
    group6 += (*input)[4];

    group6 *= 114;
    group6 += (*input)[5];

    *((uint64_t *)((*output) + 30)) |= (group6 << 6);
    *input += 6;
    uint64_t group7 = 0;
    group7 *= 114;
    group7 += (*input)[0];

    group7 *= 114;
    group7 += (*input)[1];

    group7 *= 114;
    group7 += (*input)[2];

    group7 *= 114;
    group7 += (*input)[3];

    group7 *= 114;
    group7 += (*input)[4];

    group7 *= 114;
    group7 += (*input)[5];

    *((uint64_t *)((*output) + 35)) |= (group7 << 7);
    *input += 6;
    *output += 41;
}

// Pack 1 groups using 6 bytes (7 values total)
void Ultrapack_Compress115(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 115;
    group0 += (*input)[0];

    group0 *= 115;
    group0 += (*input)[1];

    group0 *= 115;
    group0 += (*input)[2];

    group0 *= 115;
    group0 += (*input)[3];

    group0 *= 115;
    group0 += (*input)[4];

    group0 *= 115;
    group0 += (*input)[5];

    group0 *= 115;
    group0 += (*input)[6];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 7;
    *output += 6;
}

// Pack 8 groups using 55 bytes (64 values total)
void Ultrapack_Compress116(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 116;
    group0 += (*input)[0];

    group0 *= 116;
    group0 += (*input)[1];

    group0 *= 116;
    group0 += (*input)[2];

    group0 *= 116;
    group0 += (*input)[3];

    group0 *= 116;
    group0 += (*input)[4];

    group0 *= 116;
    group0 += (*input)[5];

    group0 *= 116;
    group0 += (*input)[6];

    group0 *= 116;
    group0 += (*input)[7];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 8;
    uint64_t group1 = 0;
    group1 *= 116;
    group1 += (*input)[0];

    group1 *= 116;
    group1 += (*input)[1];

    group1 *= 116;
    group1 += (*input)[2];

    group1 *= 116;
    group1 += (*input)[3];

    group1 *= 116;
    group1 += (*input)[4];

    group1 *= 116;
    group1 += (*input)[5];

    group1 *= 116;
    group1 += (*input)[6];

    group1 *= 116;
    group1 += (*input)[7];

    *((uint64_t *)((*output) + 6)) |= (group1 << 7);
    *input += 8;
    uint64_t group2 = 0;
    group2 *= 116;
    group2 += (*input)[0];

    group2 *= 116;
    group2 += (*input)[1];

    group2 *= 116;
    group2 += (*input)[2];

    group2 *= 116;
    group2 += (*input)[3];

    group2 *= 116;
    group2 += (*input)[4];

    group2 *= 116;
    group2 += (*input)[5];

    group2 *= 116;
    group2 += (*input)[6];

    group2 *= 116;
    group2 += (*input)[7];

    *((uint64_t *)((*output) + 13)) |= (group2 << 6);
    *input += 8;
    uint64_t group3 = 0;
    group3 *= 116;
    group3 += (*input)[0];

    group3 *= 116;
    group3 += (*input)[1];

    group3 *= 116;
    group3 += (*input)[2];

    group3 *= 116;
    group3 += (*input)[3];

    group3 *= 116;
    group3 += (*input)[4];

    group3 *= 116;
    group3 += (*input)[5];

    group3 *= 116;
    group3 += (*input)[6];

    group3 *= 116;
    group3 += (*input)[7];

    *((uint64_t *)((*output) + 20)) |= (group3 << 5);
    *input += 8;
    uint64_t group4 = 0;
    group4 *= 116;
    group4 += (*input)[0];

    group4 *= 116;
    group4 += (*input)[1];

    group4 *= 116;
    group4 += (*input)[2];

    group4 *= 116;
    group4 += (*input)[3];

    group4 *= 116;
    group4 += (*input)[4];

    group4 *= 116;
    group4 += (*input)[5];

    group4 *= 116;
    group4 += (*input)[6];

    group4 *= 116;
    group4 += (*input)[7];

    *((uint64_t *)((*output) + 27)) |= (group4 << 4);
    *input += 8;
    uint64_t group5 = 0;
    group5 *= 116;
    group5 += (*input)[0];

    group5 *= 116;
    group5 += (*input)[1];

    group5 *= 116;
    group5 += (*input)[2];

    group5 *= 116;
    group5 += (*input)[3];

    group5 *= 116;
    group5 += (*input)[4];

    group5 *= 116;
    group5 += (*input)[5];

    group5 *= 116;
    group5 += (*input)[6];

    group5 *= 116;
    group5 += (*input)[7];

    *((uint64_t *)((*output) + 34)) |= (group5 << 3);
    *input += 8;
    uint64_t group6 = 0;
    group6 *= 116;
    group6 += (*input)[0];

    group6 *= 116;
    group6 += (*input)[1];

    group6 *= 116;
    group6 += (*input)[2];

    group6 *= 116;
    group6 += (*input)[3];

    group6 *= 116;
    group6 += (*input)[4];

    group6 *= 116;
    group6 += (*input)[5];

    group6 *= 116;
    group6 += (*input)[6];

    group6 *= 116;
    group6 += (*input)[7];

    *((uint64_t *)((*output) + 41)) |= (group6 << 2);
    *input += 8;
    uint64_t group7 = 0;
    group7 *= 116;
    group7 += (*input)[0];

    group7 *= 116;
    group7 += (*input)[1];

    group7 *= 116;
    group7 += (*input)[2];

    group7 *= 116;
    group7 += (*input)[3];

    group7 *= 116;
    group7 += (*input)[4];

    group7 *= 116;
    group7 += (*input)[5];

    group7 *= 116;
    group7 += (*input)[6];

    group7 *= 116;
    group7 += (*input)[7];

    *((uint64_t *)((*output) + 48)) |= (group7 << 1);
    *input += 8;
    *output += 55;
}

// Pack 8 groups using 55 bytes (64 values total)
void Ultrapack_Compress117(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 117;
    group0 += (*input)[0];

    group0 *= 117;
    group0 += (*input)[1];

    group0 *= 117;
    group0 += (*input)[2];

    group0 *= 117;
    group0 += (*input)[3];

    group0 *= 117;
    group0 += (*input)[4];

    group0 *= 117;
    group0 += (*input)[5];

    group0 *= 117;
    group0 += (*input)[6];

    group0 *= 117;
    group0 += (*input)[7];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 8;
    uint64_t group1 = 0;
    group1 *= 117;
    group1 += (*input)[0];

    group1 *= 117;
    group1 += (*input)[1];

    group1 *= 117;
    group1 += (*input)[2];

    group1 *= 117;
    group1 += (*input)[3];

    group1 *= 117;
    group1 += (*input)[4];

    group1 *= 117;
    group1 += (*input)[5];

    group1 *= 117;
    group1 += (*input)[6];

    group1 *= 117;
    group1 += (*input)[7];

    *((uint64_t *)((*output) + 6)) |= (group1 << 7);
    *input += 8;
    uint64_t group2 = 0;
    group2 *= 117;
    group2 += (*input)[0];

    group2 *= 117;
    group2 += (*input)[1];

    group2 *= 117;
    group2 += (*input)[2];

    group2 *= 117;
    group2 += (*input)[3];

    group2 *= 117;
    group2 += (*input)[4];

    group2 *= 117;
    group2 += (*input)[5];

    group2 *= 117;
    group2 += (*input)[6];

    group2 *= 117;
    group2 += (*input)[7];

    *((uint64_t *)((*output) + 13)) |= (group2 << 6);
    *input += 8;
    uint64_t group3 = 0;
    group3 *= 117;
    group3 += (*input)[0];

    group3 *= 117;
    group3 += (*input)[1];

    group3 *= 117;
    group3 += (*input)[2];

    group3 *= 117;
    group3 += (*input)[3];

    group3 *= 117;
    group3 += (*input)[4];

    group3 *= 117;
    group3 += (*input)[5];

    group3 *= 117;
    group3 += (*input)[6];

    group3 *= 117;
    group3 += (*input)[7];

    *((uint64_t *)((*output) + 20)) |= (group3 << 5);
    *input += 8;
    uint64_t group4 = 0;
    group4 *= 117;
    group4 += (*input)[0];

    group4 *= 117;
    group4 += (*input)[1];

    group4 *= 117;
    group4 += (*input)[2];

    group4 *= 117;
    group4 += (*input)[3];

    group4 *= 117;
    group4 += (*input)[4];

    group4 *= 117;
    group4 += (*input)[5];

    group4 *= 117;
    group4 += (*input)[6];

    group4 *= 117;
    group4 += (*input)[7];

    *((uint64_t *)((*output) + 27)) |= (group4 << 4);
    *input += 8;
    uint64_t group5 = 0;
    group5 *= 117;
    group5 += (*input)[0];

    group5 *= 117;
    group5 += (*input)[1];

    group5 *= 117;
    group5 += (*input)[2];

    group5 *= 117;
    group5 += (*input)[3];

    group5 *= 117;
    group5 += (*input)[4];

    group5 *= 117;
    group5 += (*input)[5];

    group5 *= 117;
    group5 += (*input)[6];

    group5 *= 117;
    group5 += (*input)[7];

    *((uint64_t *)((*output) + 34)) |= (group5 << 3);
    *input += 8;
    uint64_t group6 = 0;
    group6 *= 117;
    group6 += (*input)[0];

    group6 *= 117;
    group6 += (*input)[1];

    group6 *= 117;
    group6 += (*input)[2];

    group6 *= 117;
    group6 += (*input)[3];

    group6 *= 117;
    group6 += (*input)[4];

    group6 *= 117;
    group6 += (*input)[5];

    group6 *= 117;
    group6 += (*input)[6];

    group6 *= 117;
    group6 += (*input)[7];

    *((uint64_t *)((*output) + 41)) |= (group6 << 2);
    *input += 8;
    uint64_t group7 = 0;
    group7 *= 117;
    group7 += (*input)[0];

    group7 *= 117;
    group7 += (*input)[1];

    group7 *= 117;
    group7 += (*input)[2];

    group7 *= 117;
    group7 += (*input)[3];

    group7 *= 117;
    group7 += (*input)[4];

    group7 *= 117;
    group7 += (*input)[5];

    group7 *= 117;
    group7 += (*input)[6];

    group7 *= 117;
    group7 += (*input)[7];

    *((uint64_t *)((*output) + 48)) |= (group7 << 1);
    *input += 8;
    *output += 55;
}

// Pack 8 groups using 7 bytes (8 values total)
void Ultrapack_Compress118(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 118;
    group0 += (*input)[0];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 1;
    uint64_t group1 = 0;
    group1 *= 118;
    group1 += (*input)[0];

    *((uint64_t *)((*output) + 0)) |= (group1 << 7);
    *input += 1;
    uint64_t group2 = 0;
    group2 *= 118;
    group2 += (*input)[0];

    *((uint64_t *)((*output) + 1)) |= (group2 << 6);
    *input += 1;
    uint64_t group3 = 0;
    group3 *= 118;
    group3 += (*input)[0];

    *((uint64_t *)((*output) + 2)) |= (group3 << 5);
    *input += 1;
    uint64_t group4 = 0;
    group4 *= 118;
    group4 += (*input)[0];

    *((uint64_t *)((*output) + 3)) |= (group4 << 4);
    *input += 1;
    uint64_t group5 = 0;
    group5 *= 118;
    group5 += (*input)[0];

    *((uint64_t *)((*output) + 4)) |= (group5 << 3);
    *input += 1;
    uint64_t group6 = 0;
    group6 *= 118;
    group6 += (*input)[0];

    *((uint64_t *)((*output) + 5)) |= (group6 << 2);
    *input += 1;
    uint64_t group7 = 0;
    group7 *= 118;
    group7 += (*input)[0];

    *((uint64_t *)((*output) + 6)) |= (group7 << 1);
    *input += 1;
    *output += 7;
}

// Pack 8 groups using 7 bytes (8 values total)
void Ultrapack_Compress119(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 119;
    group0 += (*input)[0];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 1;
    uint64_t group1 = 0;
    group1 *= 119;
    group1 += (*input)[0];

    *((uint64_t *)((*output) + 0)) |= (group1 << 7);
    *input += 1;
    uint64_t group2 = 0;
    group2 *= 119;
    group2 += (*input)[0];

    *((uint64_t *)((*output) + 1)) |= (group2 << 6);
    *input += 1;
    uint64_t group3 = 0;
    group3 *= 119;
    group3 += (*input)[0];

    *((uint64_t *)((*output) + 2)) |= (group3 << 5);
    *input += 1;
    uint64_t group4 = 0;
    group4 *= 119;
    group4 += (*input)[0];

    *((uint64_t *)((*output) + 3)) |= (group4 << 4);
    *input += 1;
    uint64_t group5 = 0;
    group5 *= 119;
    group5 += (*input)[0];

    *((uint64_t *)((*output) + 4)) |= (group5 << 3);
    *input += 1;
    uint64_t group6 = 0;
    group6 *= 119;
    group6 += (*input)[0];

    *((uint64_t *)((*output) + 5)) |= (group6 << 2);
    *input += 1;
    uint64_t group7 = 0;
    group7 *= 119;
    group7 += (*input)[0];

    *((uint64_t *)((*output) + 6)) |= (group7 << 1);
    *input += 1;
    *output += 7;
}

// Pack 8 groups using 7 bytes (8 values total)
void Ultrapack_Compress120(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 120;
    group0 += (*input)[0];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 1;
    uint64_t group1 = 0;
    group1 *= 120;
    group1 += (*input)[0];

    *((uint64_t *)((*output) + 0)) |= (group1 << 7);
    *input += 1;
    uint64_t group2 = 0;
    group2 *= 120;
    group2 += (*input)[0];

    *((uint64_t *)((*output) + 1)) |= (group2 << 6);
    *input += 1;
    uint64_t group3 = 0;
    group3 *= 120;
    group3 += (*input)[0];

    *((uint64_t *)((*output) + 2)) |= (group3 << 5);
    *input += 1;
    uint64_t group4 = 0;
    group4 *= 120;
    group4 += (*input)[0];

    *((uint64_t *)((*output) + 3)) |= (group4 << 4);
    *input += 1;
    uint64_t group5 = 0;
    group5 *= 120;
    group5 += (*input)[0];

    *((uint64_t *)((*output) + 4)) |= (group5 << 3);
    *input += 1;
    uint64_t group6 = 0;
    group6 *= 120;
    group6 += (*input)[0];

    *((uint64_t *)((*output) + 5)) |= (group6 << 2);
    *input += 1;
    uint64_t group7 = 0;
    group7 *= 120;
    group7 += (*input)[0];

    *((uint64_t *)((*output) + 6)) |= (group7 << 1);
    *input += 1;
    *output += 7;
}

// Pack 8 groups using 7 bytes (8 values total)
void Ultrapack_Compress121(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 121;
    group0 += (*input)[0];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 1;
    uint64_t group1 = 0;
    group1 *= 121;
    group1 += (*input)[0];

    *((uint64_t *)((*output) + 0)) |= (group1 << 7);
    *input += 1;
    uint64_t group2 = 0;
    group2 *= 121;
    group2 += (*input)[0];

    *((uint64_t *)((*output) + 1)) |= (group2 << 6);
    *input += 1;
    uint64_t group3 = 0;
    group3 *= 121;
    group3 += (*input)[0];

    *((uint64_t *)((*output) + 2)) |= (group3 << 5);
    *input += 1;
    uint64_t group4 = 0;
    group4 *= 121;
    group4 += (*input)[0];

    *((uint64_t *)((*output) + 3)) |= (group4 << 4);
    *input += 1;
    uint64_t group5 = 0;
    group5 *= 121;
    group5 += (*input)[0];

    *((uint64_t *)((*output) + 4)) |= (group5 << 3);
    *input += 1;
    uint64_t group6 = 0;
    group6 *= 121;
    group6 += (*input)[0];

    *((uint64_t *)((*output) + 5)) |= (group6 << 2);
    *input += 1;
    uint64_t group7 = 0;
    group7 *= 121;
    group7 += (*input)[0];

    *((uint64_t *)((*output) + 6)) |= (group7 << 1);
    *input += 1;
    *output += 7;
}

// Pack 8 groups using 7 bytes (8 values total)
void Ultrapack_Compress122(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 122;
    group0 += (*input)[0];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 1;
    uint64_t group1 = 0;
    group1 *= 122;
    group1 += (*input)[0];

    *((uint64_t *)((*output) + 0)) |= (group1 << 7);
    *input += 1;
    uint64_t group2 = 0;
    group2 *= 122;
    group2 += (*input)[0];

    *((uint64_t *)((*output) + 1)) |= (group2 << 6);
    *input += 1;
    uint64_t group3 = 0;
    group3 *= 122;
    group3 += (*input)[0];

    *((uint64_t *)((*output) + 2)) |= (group3 << 5);
    *input += 1;
    uint64_t group4 = 0;
    group4 *= 122;
    group4 += (*input)[0];

    *((uint64_t *)((*output) + 3)) |= (group4 << 4);
    *input += 1;
    uint64_t group5 = 0;
    group5 *= 122;
    group5 += (*input)[0];

    *((uint64_t *)((*output) + 4)) |= (group5 << 3);
    *input += 1;
    uint64_t group6 = 0;
    group6 *= 122;
    group6 += (*input)[0];

    *((uint64_t *)((*output) + 5)) |= (group6 << 2);
    *input += 1;
    uint64_t group7 = 0;
    group7 *= 122;
    group7 += (*input)[0];

    *((uint64_t *)((*output) + 6)) |= (group7 << 1);
    *input += 1;
    *output += 7;
}

// Pack 8 groups using 7 bytes (8 values total)
void Ultrapack_Compress123(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 123;
    group0 += (*input)[0];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 1;
    uint64_t group1 = 0;
    group1 *= 123;
    group1 += (*input)[0];

    *((uint64_t *)((*output) + 0)) |= (group1 << 7);
    *input += 1;
    uint64_t group2 = 0;
    group2 *= 123;
    group2 += (*input)[0];

    *((uint64_t *)((*output) + 1)) |= (group2 << 6);
    *input += 1;
    uint64_t group3 = 0;
    group3 *= 123;
    group3 += (*input)[0];

    *((uint64_t *)((*output) + 2)) |= (group3 << 5);
    *input += 1;
    uint64_t group4 = 0;
    group4 *= 123;
    group4 += (*input)[0];

    *((uint64_t *)((*output) + 3)) |= (group4 << 4);
    *input += 1;
    uint64_t group5 = 0;
    group5 *= 123;
    group5 += (*input)[0];

    *((uint64_t *)((*output) + 4)) |= (group5 << 3);
    *input += 1;
    uint64_t group6 = 0;
    group6 *= 123;
    group6 += (*input)[0];

    *((uint64_t *)((*output) + 5)) |= (group6 << 2);
    *input += 1;
    uint64_t group7 = 0;
    group7 *= 123;
    group7 += (*input)[0];

    *((uint64_t *)((*output) + 6)) |= (group7 << 1);
    *input += 1;
    *output += 7;
}

// Pack 8 groups using 7 bytes (8 values total)
void Ultrapack_Compress124(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 124;
    group0 += (*input)[0];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 1;
    uint64_t group1 = 0;
    group1 *= 124;
    group1 += (*input)[0];

    *((uint64_t *)((*output) + 0)) |= (group1 << 7);
    *input += 1;
    uint64_t group2 = 0;
    group2 *= 124;
    group2 += (*input)[0];

    *((uint64_t *)((*output) + 1)) |= (group2 << 6);
    *input += 1;
    uint64_t group3 = 0;
    group3 *= 124;
    group3 += (*input)[0];

    *((uint64_t *)((*output) + 2)) |= (group3 << 5);
    *input += 1;
    uint64_t group4 = 0;
    group4 *= 124;
    group4 += (*input)[0];

    *((uint64_t *)((*output) + 3)) |= (group4 << 4);
    *input += 1;
    uint64_t group5 = 0;
    group5 *= 124;
    group5 += (*input)[0];

    *((uint64_t *)((*output) + 4)) |= (group5 << 3);
    *input += 1;
    uint64_t group6 = 0;
    group6 *= 124;
    group6 += (*input)[0];

    *((uint64_t *)((*output) + 5)) |= (group6 << 2);
    *input += 1;
    uint64_t group7 = 0;
    group7 *= 124;
    group7 += (*input)[0];

    *((uint64_t *)((*output) + 6)) |= (group7 << 1);
    *input += 1;
    *output += 7;
}

// Pack 8 groups using 7 bytes (8 values total)
void Ultrapack_Compress125(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 125;
    group0 += (*input)[0];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 1;
    uint64_t group1 = 0;
    group1 *= 125;
    group1 += (*input)[0];

    *((uint64_t *)((*output) + 0)) |= (group1 << 7);
    *input += 1;
    uint64_t group2 = 0;
    group2 *= 125;
    group2 += (*input)[0];

    *((uint64_t *)((*output) + 1)) |= (group2 << 6);
    *input += 1;
    uint64_t group3 = 0;
    group3 *= 125;
    group3 += (*input)[0];

    *((uint64_t *)((*output) + 2)) |= (group3 << 5);
    *input += 1;
    uint64_t group4 = 0;
    group4 *= 125;
    group4 += (*input)[0];

    *((uint64_t *)((*output) + 3)) |= (group4 << 4);
    *input += 1;
    uint64_t group5 = 0;
    group5 *= 125;
    group5 += (*input)[0];

    *((uint64_t *)((*output) + 4)) |= (group5 << 3);
    *input += 1;
    uint64_t group6 = 0;
    group6 *= 125;
    group6 += (*input)[0];

    *((uint64_t *)((*output) + 5)) |= (group6 << 2);
    *input += 1;
    uint64_t group7 = 0;
    group7 *= 125;
    group7 += (*input)[0];

    *((uint64_t *)((*output) + 6)) |= (group7 << 1);
    *input += 1;
    *output += 7;
}

// Pack 8 groups using 7 bytes (8 values total)
void Ultrapack_Compress126(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 126;
    group0 += (*input)[0];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 1;
    uint64_t group1 = 0;
    group1 *= 126;
    group1 += (*input)[0];

    *((uint64_t *)((*output) + 0)) |= (group1 << 7);
    *input += 1;
    uint64_t group2 = 0;
    group2 *= 126;
    group2 += (*input)[0];

    *((uint64_t *)((*output) + 1)) |= (group2 << 6);
    *input += 1;
    uint64_t group3 = 0;
    group3 *= 126;
    group3 += (*input)[0];

    *((uint64_t *)((*output) + 2)) |= (group3 << 5);
    *input += 1;
    uint64_t group4 = 0;
    group4 *= 126;
    group4 += (*input)[0];

    *((uint64_t *)((*output) + 3)) |= (group4 << 4);
    *input += 1;
    uint64_t group5 = 0;
    group5 *= 126;
    group5 += (*input)[0];

    *((uint64_t *)((*output) + 4)) |= (group5 << 3);
    *input += 1;
    uint64_t group6 = 0;
    group6 *= 126;
    group6 += (*input)[0];

    *((uint64_t *)((*output) + 5)) |= (group6 << 2);
    *input += 1;
    uint64_t group7 = 0;
    group7 *= 126;
    group7 += (*input)[0];

    *((uint64_t *)((*output) + 6)) |= (group7 << 1);
    *input += 1;
    *output += 7;
}

// Pack 8 groups using 7 bytes (8 values total)
void Ultrapack_Compress127(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 127;
    group0 += (*input)[0];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 1;
    uint64_t group1 = 0;
    group1 *= 127;
    group1 += (*input)[0];

    *((uint64_t *)((*output) + 0)) |= (group1 << 7);
    *input += 1;
    uint64_t group2 = 0;
    group2 *= 127;
    group2 += (*input)[0];

    *((uint64_t *)((*output) + 1)) |= (group2 << 6);
    *input += 1;
    uint64_t group3 = 0;
    group3 *= 127;
    group3 += (*input)[0];

    *((uint64_t *)((*output) + 2)) |= (group3 << 5);
    *input += 1;
    uint64_t group4 = 0;
    group4 *= 127;
    group4 += (*input)[0];

    *((uint64_t *)((*output) + 3)) |= (group4 << 4);
    *input += 1;
    uint64_t group5 = 0;
    group5 *= 127;
    group5 += (*input)[0];

    *((uint64_t *)((*output) + 4)) |= (group5 << 3);
    *input += 1;
    uint64_t group6 = 0;
    group6 *= 127;
    group6 += (*input)[0];

    *((uint64_t *)((*output) + 5)) |= (group6 << 2);
    *input += 1;
    uint64_t group7 = 0;
    group7 *= 127;
    group7 += (*input)[0];

    *((uint64_t *)((*output) + 6)) |= (group7 << 1);
    *input += 1;
    *output += 7;
}

// Pack 8 groups using 7 bytes (8 values total)
void Ultrapack_Compress128(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 128;
    group0 += (*input)[0];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 1;
    uint64_t group1 = 0;
    group1 *= 128;
    group1 += (*input)[0];

    *((uint64_t *)((*output) + 0)) |= (group1 << 7);
    *input += 1;
    uint64_t group2 = 0;
    group2 *= 128;
    group2 += (*input)[0];

    *((uint64_t *)((*output) + 1)) |= (group2 << 6);
    *input += 1;
    uint64_t group3 = 0;
    group3 *= 128;
    group3 += (*input)[0];

    *((uint64_t *)((*output) + 2)) |= (group3 << 5);
    *input += 1;
    uint64_t group4 = 0;
    group4 *= 128;
    group4 += (*input)[0];

    *((uint64_t *)((*output) + 3)) |= (group4 << 4);
    *input += 1;
    uint64_t group5 = 0;
    group5 *= 128;
    group5 += (*input)[0];

    *((uint64_t *)((*output) + 4)) |= (group5 << 3);
    *input += 1;
    uint64_t group6 = 0;
    group6 *= 128;
    group6 += (*input)[0];

    *((uint64_t *)((*output) + 5)) |= (group6 << 2);
    *input += 1;
    uint64_t group7 = 0;
    group7 *= 128;
    group7 += (*input)[0];

    *((uint64_t *)((*output) + 6)) |= (group7 << 1);
    *input += 1;
    *output += 7;
}

// Pack 8 groups using 43 bytes (48 values total)
void Ultrapack_Compress129(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 129;
    group0 += (*input)[0];

    group0 *= 129;
    group0 += (*input)[1];

    group0 *= 129;
    group0 += (*input)[2];

    group0 *= 129;
    group0 += (*input)[3];

    group0 *= 129;
    group0 += (*input)[4];

    group0 *= 129;
    group0 += (*input)[5];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 6;
    uint64_t group1 = 0;
    group1 *= 129;
    group1 += (*input)[0];

    group1 *= 129;
    group1 += (*input)[1];

    group1 *= 129;
    group1 += (*input)[2];

    group1 *= 129;
    group1 += (*input)[3];

    group1 *= 129;
    group1 += (*input)[4];

    group1 *= 129;
    group1 += (*input)[5];

    *((uint64_t *)((*output) + 5)) |= (group1 << 3);
    *input += 6;
    uint64_t group2 = 0;
    group2 *= 129;
    group2 += (*input)[0];

    group2 *= 129;
    group2 += (*input)[1];

    group2 *= 129;
    group2 += (*input)[2];

    group2 *= 129;
    group2 += (*input)[3];

    group2 *= 129;
    group2 += (*input)[4];

    group2 *= 129;
    group2 += (*input)[5];

    *((uint64_t *)((*output) + 10)) |= (group2 << 6);
    *input += 6;
    uint64_t group3 = 0;
    group3 *= 129;
    group3 += (*input)[0];

    group3 *= 129;
    group3 += (*input)[1];

    group3 *= 129;
    group3 += (*input)[2];

    group3 *= 129;
    group3 += (*input)[3];

    group3 *= 129;
    group3 += (*input)[4];

    group3 *= 129;
    group3 += (*input)[5];

    *((uint64_t *)((*output) + 16)) |= (group3 << 1);
    *input += 6;
    uint64_t group4 = 0;
    group4 *= 129;
    group4 += (*input)[0];

    group4 *= 129;
    group4 += (*input)[1];

    group4 *= 129;
    group4 += (*input)[2];

    group4 *= 129;
    group4 += (*input)[3];

    group4 *= 129;
    group4 += (*input)[4];

    group4 *= 129;
    group4 += (*input)[5];

    *((uint64_t *)((*output) + 21)) |= (group4 << 4);
    *input += 6;
    uint64_t group5 = 0;
    group5 *= 129;
    group5 += (*input)[0];

    group5 *= 129;
    group5 += (*input)[1];

    group5 *= 129;
    group5 += (*input)[2];

    group5 *= 129;
    group5 += (*input)[3];

    group5 *= 129;
    group5 += (*input)[4];

    group5 *= 129;
    group5 += (*input)[5];

    *((uint64_t *)((*output) + 26)) |= (group5 << 7);
    *input += 6;
    uint64_t group6 = 0;
    group6 *= 129;
    group6 += (*input)[0];

    group6 *= 129;
    group6 += (*input)[1];

    group6 *= 129;
    group6 += (*input)[2];

    group6 *= 129;
    group6 += (*input)[3];

    group6 *= 129;
    group6 += (*input)[4];

    group6 *= 129;
    group6 += (*input)[5];

    *((uint64_t *)((*output) + 32)) |= (group6 << 2);
    *input += 6;
    uint64_t group7 = 0;
    group7 *= 129;
    group7 += (*input)[0];

    group7 *= 129;
    group7 += (*input)[1];

    group7 *= 129;
    group7 += (*input)[2];

    group7 *= 129;
    group7 += (*input)[3];

    group7 *= 129;
    group7 += (*input)[4];

    group7 *= 129;
    group7 += (*input)[5];

    *((uint64_t *)((*output) + 37)) |= (group7 << 5);
    *input += 6;
    *output += 43;
}

// Pack 8 groups using 43 bytes (48 values total)
void Ultrapack_Compress130(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 130;
    group0 += (*input)[0];

    group0 *= 130;
    group0 += (*input)[1];

    group0 *= 130;
    group0 += (*input)[2];

    group0 *= 130;
    group0 += (*input)[3];

    group0 *= 130;
    group0 += (*input)[4];

    group0 *= 130;
    group0 += (*input)[5];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 6;
    uint64_t group1 = 0;
    group1 *= 130;
    group1 += (*input)[0];

    group1 *= 130;
    group1 += (*input)[1];

    group1 *= 130;
    group1 += (*input)[2];

    group1 *= 130;
    group1 += (*input)[3];

    group1 *= 130;
    group1 += (*input)[4];

    group1 *= 130;
    group1 += (*input)[5];

    *((uint64_t *)((*output) + 5)) |= (group1 << 3);
    *input += 6;
    uint64_t group2 = 0;
    group2 *= 130;
    group2 += (*input)[0];

    group2 *= 130;
    group2 += (*input)[1];

    group2 *= 130;
    group2 += (*input)[2];

    group2 *= 130;
    group2 += (*input)[3];

    group2 *= 130;
    group2 += (*input)[4];

    group2 *= 130;
    group2 += (*input)[5];

    *((uint64_t *)((*output) + 10)) |= (group2 << 6);
    *input += 6;
    uint64_t group3 = 0;
    group3 *= 130;
    group3 += (*input)[0];

    group3 *= 130;
    group3 += (*input)[1];

    group3 *= 130;
    group3 += (*input)[2];

    group3 *= 130;
    group3 += (*input)[3];

    group3 *= 130;
    group3 += (*input)[4];

    group3 *= 130;
    group3 += (*input)[5];

    *((uint64_t *)((*output) + 16)) |= (group3 << 1);
    *input += 6;
    uint64_t group4 = 0;
    group4 *= 130;
    group4 += (*input)[0];

    group4 *= 130;
    group4 += (*input)[1];

    group4 *= 130;
    group4 += (*input)[2];

    group4 *= 130;
    group4 += (*input)[3];

    group4 *= 130;
    group4 += (*input)[4];

    group4 *= 130;
    group4 += (*input)[5];

    *((uint64_t *)((*output) + 21)) |= (group4 << 4);
    *input += 6;
    uint64_t group5 = 0;
    group5 *= 130;
    group5 += (*input)[0];

    group5 *= 130;
    group5 += (*input)[1];

    group5 *= 130;
    group5 += (*input)[2];

    group5 *= 130;
    group5 += (*input)[3];

    group5 *= 130;
    group5 += (*input)[4];

    group5 *= 130;
    group5 += (*input)[5];

    *((uint64_t *)((*output) + 26)) |= (group5 << 7);
    *input += 6;
    uint64_t group6 = 0;
    group6 *= 130;
    group6 += (*input)[0];

    group6 *= 130;
    group6 += (*input)[1];

    group6 *= 130;
    group6 += (*input)[2];

    group6 *= 130;
    group6 += (*input)[3];

    group6 *= 130;
    group6 += (*input)[4];

    group6 *= 130;
    group6 += (*input)[5];

    *((uint64_t *)((*output) + 32)) |= (group6 << 2);
    *input += 6;
    uint64_t group7 = 0;
    group7 *= 130;
    group7 += (*input)[0];

    group7 *= 130;
    group7 += (*input)[1];

    group7 *= 130;
    group7 += (*input)[2];

    group7 *= 130;
    group7 += (*input)[3];

    group7 *= 130;
    group7 += (*input)[4];

    group7 *= 130;
    group7 += (*input)[5];

    *((uint64_t *)((*output) + 37)) |= (group7 << 5);
    *input += 6;
    *output += 43;
}

// Pack 8 groups using 43 bytes (48 values total)
void Ultrapack_Compress131(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 131;
    group0 += (*input)[0];

    group0 *= 131;
    group0 += (*input)[1];

    group0 *= 131;
    group0 += (*input)[2];

    group0 *= 131;
    group0 += (*input)[3];

    group0 *= 131;
    group0 += (*input)[4];

    group0 *= 131;
    group0 += (*input)[5];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 6;
    uint64_t group1 = 0;
    group1 *= 131;
    group1 += (*input)[0];

    group1 *= 131;
    group1 += (*input)[1];

    group1 *= 131;
    group1 += (*input)[2];

    group1 *= 131;
    group1 += (*input)[3];

    group1 *= 131;
    group1 += (*input)[4];

    group1 *= 131;
    group1 += (*input)[5];

    *((uint64_t *)((*output) + 5)) |= (group1 << 3);
    *input += 6;
    uint64_t group2 = 0;
    group2 *= 131;
    group2 += (*input)[0];

    group2 *= 131;
    group2 += (*input)[1];

    group2 *= 131;
    group2 += (*input)[2];

    group2 *= 131;
    group2 += (*input)[3];

    group2 *= 131;
    group2 += (*input)[4];

    group2 *= 131;
    group2 += (*input)[5];

    *((uint64_t *)((*output) + 10)) |= (group2 << 6);
    *input += 6;
    uint64_t group3 = 0;
    group3 *= 131;
    group3 += (*input)[0];

    group3 *= 131;
    group3 += (*input)[1];

    group3 *= 131;
    group3 += (*input)[2];

    group3 *= 131;
    group3 += (*input)[3];

    group3 *= 131;
    group3 += (*input)[4];

    group3 *= 131;
    group3 += (*input)[5];

    *((uint64_t *)((*output) + 16)) |= (group3 << 1);
    *input += 6;
    uint64_t group4 = 0;
    group4 *= 131;
    group4 += (*input)[0];

    group4 *= 131;
    group4 += (*input)[1];

    group4 *= 131;
    group4 += (*input)[2];

    group4 *= 131;
    group4 += (*input)[3];

    group4 *= 131;
    group4 += (*input)[4];

    group4 *= 131;
    group4 += (*input)[5];

    *((uint64_t *)((*output) + 21)) |= (group4 << 4);
    *input += 6;
    uint64_t group5 = 0;
    group5 *= 131;
    group5 += (*input)[0];

    group5 *= 131;
    group5 += (*input)[1];

    group5 *= 131;
    group5 += (*input)[2];

    group5 *= 131;
    group5 += (*input)[3];

    group5 *= 131;
    group5 += (*input)[4];

    group5 *= 131;
    group5 += (*input)[5];

    *((uint64_t *)((*output) + 26)) |= (group5 << 7);
    *input += 6;
    uint64_t group6 = 0;
    group6 *= 131;
    group6 += (*input)[0];

    group6 *= 131;
    group6 += (*input)[1];

    group6 *= 131;
    group6 += (*input)[2];

    group6 *= 131;
    group6 += (*input)[3];

    group6 *= 131;
    group6 += (*input)[4];

    group6 *= 131;
    group6 += (*input)[5];

    *((uint64_t *)((*output) + 32)) |= (group6 << 2);
    *input += 6;
    uint64_t group7 = 0;
    group7 *= 131;
    group7 += (*input)[0];

    group7 *= 131;
    group7 += (*input)[1];

    group7 *= 131;
    group7 += (*input)[2];

    group7 *= 131;
    group7 += (*input)[3];

    group7 *= 131;
    group7 += (*input)[4];

    group7 *= 131;
    group7 += (*input)[5];

    *((uint64_t *)((*output) + 37)) |= (group7 << 5);
    *input += 6;
    *output += 43;
}

// Pack 8 groups using 43 bytes (48 values total)
void Ultrapack_Compress132(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 132;
    group0 += (*input)[0];

    group0 *= 132;
    group0 += (*input)[1];

    group0 *= 132;
    group0 += (*input)[2];

    group0 *= 132;
    group0 += (*input)[3];

    group0 *= 132;
    group0 += (*input)[4];

    group0 *= 132;
    group0 += (*input)[5];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 6;
    uint64_t group1 = 0;
    group1 *= 132;
    group1 += (*input)[0];

    group1 *= 132;
    group1 += (*input)[1];

    group1 *= 132;
    group1 += (*input)[2];

    group1 *= 132;
    group1 += (*input)[3];

    group1 *= 132;
    group1 += (*input)[4];

    group1 *= 132;
    group1 += (*input)[5];

    *((uint64_t *)((*output) + 5)) |= (group1 << 3);
    *input += 6;
    uint64_t group2 = 0;
    group2 *= 132;
    group2 += (*input)[0];

    group2 *= 132;
    group2 += (*input)[1];

    group2 *= 132;
    group2 += (*input)[2];

    group2 *= 132;
    group2 += (*input)[3];

    group2 *= 132;
    group2 += (*input)[4];

    group2 *= 132;
    group2 += (*input)[5];

    *((uint64_t *)((*output) + 10)) |= (group2 << 6);
    *input += 6;
    uint64_t group3 = 0;
    group3 *= 132;
    group3 += (*input)[0];

    group3 *= 132;
    group3 += (*input)[1];

    group3 *= 132;
    group3 += (*input)[2];

    group3 *= 132;
    group3 += (*input)[3];

    group3 *= 132;
    group3 += (*input)[4];

    group3 *= 132;
    group3 += (*input)[5];

    *((uint64_t *)((*output) + 16)) |= (group3 << 1);
    *input += 6;
    uint64_t group4 = 0;
    group4 *= 132;
    group4 += (*input)[0];

    group4 *= 132;
    group4 += (*input)[1];

    group4 *= 132;
    group4 += (*input)[2];

    group4 *= 132;
    group4 += (*input)[3];

    group4 *= 132;
    group4 += (*input)[4];

    group4 *= 132;
    group4 += (*input)[5];

    *((uint64_t *)((*output) + 21)) |= (group4 << 4);
    *input += 6;
    uint64_t group5 = 0;
    group5 *= 132;
    group5 += (*input)[0];

    group5 *= 132;
    group5 += (*input)[1];

    group5 *= 132;
    group5 += (*input)[2];

    group5 *= 132;
    group5 += (*input)[3];

    group5 *= 132;
    group5 += (*input)[4];

    group5 *= 132;
    group5 += (*input)[5];

    *((uint64_t *)((*output) + 26)) |= (group5 << 7);
    *input += 6;
    uint64_t group6 = 0;
    group6 *= 132;
    group6 += (*input)[0];

    group6 *= 132;
    group6 += (*input)[1];

    group6 *= 132;
    group6 += (*input)[2];

    group6 *= 132;
    group6 += (*input)[3];

    group6 *= 132;
    group6 += (*input)[4];

    group6 *= 132;
    group6 += (*input)[5];

    *((uint64_t *)((*output) + 32)) |= (group6 << 2);
    *input += 6;
    uint64_t group7 = 0;
    group7 *= 132;
    group7 += (*input)[0];

    group7 *= 132;
    group7 += (*input)[1];

    group7 *= 132;
    group7 += (*input)[2];

    group7 *= 132;
    group7 += (*input)[3];

    group7 *= 132;
    group7 += (*input)[4];

    group7 *= 132;
    group7 += (*input)[5];

    *((uint64_t *)((*output) + 37)) |= (group7 << 5);
    *input += 6;
    *output += 43;
}

// Pack 8 groups using 43 bytes (48 values total)
void Ultrapack_Compress133(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 133;
    group0 += (*input)[0];

    group0 *= 133;
    group0 += (*input)[1];

    group0 *= 133;
    group0 += (*input)[2];

    group0 *= 133;
    group0 += (*input)[3];

    group0 *= 133;
    group0 += (*input)[4];

    group0 *= 133;
    group0 += (*input)[5];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 6;
    uint64_t group1 = 0;
    group1 *= 133;
    group1 += (*input)[0];

    group1 *= 133;
    group1 += (*input)[1];

    group1 *= 133;
    group1 += (*input)[2];

    group1 *= 133;
    group1 += (*input)[3];

    group1 *= 133;
    group1 += (*input)[4];

    group1 *= 133;
    group1 += (*input)[5];

    *((uint64_t *)((*output) + 5)) |= (group1 << 3);
    *input += 6;
    uint64_t group2 = 0;
    group2 *= 133;
    group2 += (*input)[0];

    group2 *= 133;
    group2 += (*input)[1];

    group2 *= 133;
    group2 += (*input)[2];

    group2 *= 133;
    group2 += (*input)[3];

    group2 *= 133;
    group2 += (*input)[4];

    group2 *= 133;
    group2 += (*input)[5];

    *((uint64_t *)((*output) + 10)) |= (group2 << 6);
    *input += 6;
    uint64_t group3 = 0;
    group3 *= 133;
    group3 += (*input)[0];

    group3 *= 133;
    group3 += (*input)[1];

    group3 *= 133;
    group3 += (*input)[2];

    group3 *= 133;
    group3 += (*input)[3];

    group3 *= 133;
    group3 += (*input)[4];

    group3 *= 133;
    group3 += (*input)[5];

    *((uint64_t *)((*output) + 16)) |= (group3 << 1);
    *input += 6;
    uint64_t group4 = 0;
    group4 *= 133;
    group4 += (*input)[0];

    group4 *= 133;
    group4 += (*input)[1];

    group4 *= 133;
    group4 += (*input)[2];

    group4 *= 133;
    group4 += (*input)[3];

    group4 *= 133;
    group4 += (*input)[4];

    group4 *= 133;
    group4 += (*input)[5];

    *((uint64_t *)((*output) + 21)) |= (group4 << 4);
    *input += 6;
    uint64_t group5 = 0;
    group5 *= 133;
    group5 += (*input)[0];

    group5 *= 133;
    group5 += (*input)[1];

    group5 *= 133;
    group5 += (*input)[2];

    group5 *= 133;
    group5 += (*input)[3];

    group5 *= 133;
    group5 += (*input)[4];

    group5 *= 133;
    group5 += (*input)[5];

    *((uint64_t *)((*output) + 26)) |= (group5 << 7);
    *input += 6;
    uint64_t group6 = 0;
    group6 *= 133;
    group6 += (*input)[0];

    group6 *= 133;
    group6 += (*input)[1];

    group6 *= 133;
    group6 += (*input)[2];

    group6 *= 133;
    group6 += (*input)[3];

    group6 *= 133;
    group6 += (*input)[4];

    group6 *= 133;
    group6 += (*input)[5];

    *((uint64_t *)((*output) + 32)) |= (group6 << 2);
    *input += 6;
    uint64_t group7 = 0;
    group7 *= 133;
    group7 += (*input)[0];

    group7 *= 133;
    group7 += (*input)[1];

    group7 *= 133;
    group7 += (*input)[2];

    group7 *= 133;
    group7 += (*input)[3];

    group7 *= 133;
    group7 += (*input)[4];

    group7 *= 133;
    group7 += (*input)[5];

    *((uint64_t *)((*output) + 37)) |= (group7 << 5);
    *input += 6;
    *output += 43;
}

// Pack 8 groups using 43 bytes (48 values total)
void Ultrapack_Compress134(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 134;
    group0 += (*input)[0];

    group0 *= 134;
    group0 += (*input)[1];

    group0 *= 134;
    group0 += (*input)[2];

    group0 *= 134;
    group0 += (*input)[3];

    group0 *= 134;
    group0 += (*input)[4];

    group0 *= 134;
    group0 += (*input)[5];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 6;
    uint64_t group1 = 0;
    group1 *= 134;
    group1 += (*input)[0];

    group1 *= 134;
    group1 += (*input)[1];

    group1 *= 134;
    group1 += (*input)[2];

    group1 *= 134;
    group1 += (*input)[3];

    group1 *= 134;
    group1 += (*input)[4];

    group1 *= 134;
    group1 += (*input)[5];

    *((uint64_t *)((*output) + 5)) |= (group1 << 3);
    *input += 6;
    uint64_t group2 = 0;
    group2 *= 134;
    group2 += (*input)[0];

    group2 *= 134;
    group2 += (*input)[1];

    group2 *= 134;
    group2 += (*input)[2];

    group2 *= 134;
    group2 += (*input)[3];

    group2 *= 134;
    group2 += (*input)[4];

    group2 *= 134;
    group2 += (*input)[5];

    *((uint64_t *)((*output) + 10)) |= (group2 << 6);
    *input += 6;
    uint64_t group3 = 0;
    group3 *= 134;
    group3 += (*input)[0];

    group3 *= 134;
    group3 += (*input)[1];

    group3 *= 134;
    group3 += (*input)[2];

    group3 *= 134;
    group3 += (*input)[3];

    group3 *= 134;
    group3 += (*input)[4];

    group3 *= 134;
    group3 += (*input)[5];

    *((uint64_t *)((*output) + 16)) |= (group3 << 1);
    *input += 6;
    uint64_t group4 = 0;
    group4 *= 134;
    group4 += (*input)[0];

    group4 *= 134;
    group4 += (*input)[1];

    group4 *= 134;
    group4 += (*input)[2];

    group4 *= 134;
    group4 += (*input)[3];

    group4 *= 134;
    group4 += (*input)[4];

    group4 *= 134;
    group4 += (*input)[5];

    *((uint64_t *)((*output) + 21)) |= (group4 << 4);
    *input += 6;
    uint64_t group5 = 0;
    group5 *= 134;
    group5 += (*input)[0];

    group5 *= 134;
    group5 += (*input)[1];

    group5 *= 134;
    group5 += (*input)[2];

    group5 *= 134;
    group5 += (*input)[3];

    group5 *= 134;
    group5 += (*input)[4];

    group5 *= 134;
    group5 += (*input)[5];

    *((uint64_t *)((*output) + 26)) |= (group5 << 7);
    *input += 6;
    uint64_t group6 = 0;
    group6 *= 134;
    group6 += (*input)[0];

    group6 *= 134;
    group6 += (*input)[1];

    group6 *= 134;
    group6 += (*input)[2];

    group6 *= 134;
    group6 += (*input)[3];

    group6 *= 134;
    group6 += (*input)[4];

    group6 *= 134;
    group6 += (*input)[5];

    *((uint64_t *)((*output) + 32)) |= (group6 << 2);
    *input += 6;
    uint64_t group7 = 0;
    group7 *= 134;
    group7 += (*input)[0];

    group7 *= 134;
    group7 += (*input)[1];

    group7 *= 134;
    group7 += (*input)[2];

    group7 *= 134;
    group7 += (*input)[3];

    group7 *= 134;
    group7 += (*input)[4];

    group7 *= 134;
    group7 += (*input)[5];

    *((uint64_t *)((*output) + 37)) |= (group7 << 5);
    *input += 6;
    *output += 43;
}

// Pack 8 groups using 43 bytes (48 values total)
void Ultrapack_Compress135(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 135;
    group0 += (*input)[0];

    group0 *= 135;
    group0 += (*input)[1];

    group0 *= 135;
    group0 += (*input)[2];

    group0 *= 135;
    group0 += (*input)[3];

    group0 *= 135;
    group0 += (*input)[4];

    group0 *= 135;
    group0 += (*input)[5];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 6;
    uint64_t group1 = 0;
    group1 *= 135;
    group1 += (*input)[0];

    group1 *= 135;
    group1 += (*input)[1];

    group1 *= 135;
    group1 += (*input)[2];

    group1 *= 135;
    group1 += (*input)[3];

    group1 *= 135;
    group1 += (*input)[4];

    group1 *= 135;
    group1 += (*input)[5];

    *((uint64_t *)((*output) + 5)) |= (group1 << 3);
    *input += 6;
    uint64_t group2 = 0;
    group2 *= 135;
    group2 += (*input)[0];

    group2 *= 135;
    group2 += (*input)[1];

    group2 *= 135;
    group2 += (*input)[2];

    group2 *= 135;
    group2 += (*input)[3];

    group2 *= 135;
    group2 += (*input)[4];

    group2 *= 135;
    group2 += (*input)[5];

    *((uint64_t *)((*output) + 10)) |= (group2 << 6);
    *input += 6;
    uint64_t group3 = 0;
    group3 *= 135;
    group3 += (*input)[0];

    group3 *= 135;
    group3 += (*input)[1];

    group3 *= 135;
    group3 += (*input)[2];

    group3 *= 135;
    group3 += (*input)[3];

    group3 *= 135;
    group3 += (*input)[4];

    group3 *= 135;
    group3 += (*input)[5];

    *((uint64_t *)((*output) + 16)) |= (group3 << 1);
    *input += 6;
    uint64_t group4 = 0;
    group4 *= 135;
    group4 += (*input)[0];

    group4 *= 135;
    group4 += (*input)[1];

    group4 *= 135;
    group4 += (*input)[2];

    group4 *= 135;
    group4 += (*input)[3];

    group4 *= 135;
    group4 += (*input)[4];

    group4 *= 135;
    group4 += (*input)[5];

    *((uint64_t *)((*output) + 21)) |= (group4 << 4);
    *input += 6;
    uint64_t group5 = 0;
    group5 *= 135;
    group5 += (*input)[0];

    group5 *= 135;
    group5 += (*input)[1];

    group5 *= 135;
    group5 += (*input)[2];

    group5 *= 135;
    group5 += (*input)[3];

    group5 *= 135;
    group5 += (*input)[4];

    group5 *= 135;
    group5 += (*input)[5];

    *((uint64_t *)((*output) + 26)) |= (group5 << 7);
    *input += 6;
    uint64_t group6 = 0;
    group6 *= 135;
    group6 += (*input)[0];

    group6 *= 135;
    group6 += (*input)[1];

    group6 *= 135;
    group6 += (*input)[2];

    group6 *= 135;
    group6 += (*input)[3];

    group6 *= 135;
    group6 += (*input)[4];

    group6 *= 135;
    group6 += (*input)[5];

    *((uint64_t *)((*output) + 32)) |= (group6 << 2);
    *input += 6;
    uint64_t group7 = 0;
    group7 *= 135;
    group7 += (*input)[0];

    group7 *= 135;
    group7 += (*input)[1];

    group7 *= 135;
    group7 += (*input)[2];

    group7 *= 135;
    group7 += (*input)[3];

    group7 *= 135;
    group7 += (*input)[4];

    group7 *= 135;
    group7 += (*input)[5];

    *((uint64_t *)((*output) + 37)) |= (group7 << 5);
    *input += 6;
    *output += 43;
}

// Pack 8 groups using 43 bytes (48 values total)
void Ultrapack_Compress136(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 136;
    group0 += (*input)[0];

    group0 *= 136;
    group0 += (*input)[1];

    group0 *= 136;
    group0 += (*input)[2];

    group0 *= 136;
    group0 += (*input)[3];

    group0 *= 136;
    group0 += (*input)[4];

    group0 *= 136;
    group0 += (*input)[5];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 6;
    uint64_t group1 = 0;
    group1 *= 136;
    group1 += (*input)[0];

    group1 *= 136;
    group1 += (*input)[1];

    group1 *= 136;
    group1 += (*input)[2];

    group1 *= 136;
    group1 += (*input)[3];

    group1 *= 136;
    group1 += (*input)[4];

    group1 *= 136;
    group1 += (*input)[5];

    *((uint64_t *)((*output) + 5)) |= (group1 << 3);
    *input += 6;
    uint64_t group2 = 0;
    group2 *= 136;
    group2 += (*input)[0];

    group2 *= 136;
    group2 += (*input)[1];

    group2 *= 136;
    group2 += (*input)[2];

    group2 *= 136;
    group2 += (*input)[3];

    group2 *= 136;
    group2 += (*input)[4];

    group2 *= 136;
    group2 += (*input)[5];

    *((uint64_t *)((*output) + 10)) |= (group2 << 6);
    *input += 6;
    uint64_t group3 = 0;
    group3 *= 136;
    group3 += (*input)[0];

    group3 *= 136;
    group3 += (*input)[1];

    group3 *= 136;
    group3 += (*input)[2];

    group3 *= 136;
    group3 += (*input)[3];

    group3 *= 136;
    group3 += (*input)[4];

    group3 *= 136;
    group3 += (*input)[5];

    *((uint64_t *)((*output) + 16)) |= (group3 << 1);
    *input += 6;
    uint64_t group4 = 0;
    group4 *= 136;
    group4 += (*input)[0];

    group4 *= 136;
    group4 += (*input)[1];

    group4 *= 136;
    group4 += (*input)[2];

    group4 *= 136;
    group4 += (*input)[3];

    group4 *= 136;
    group4 += (*input)[4];

    group4 *= 136;
    group4 += (*input)[5];

    *((uint64_t *)((*output) + 21)) |= (group4 << 4);
    *input += 6;
    uint64_t group5 = 0;
    group5 *= 136;
    group5 += (*input)[0];

    group5 *= 136;
    group5 += (*input)[1];

    group5 *= 136;
    group5 += (*input)[2];

    group5 *= 136;
    group5 += (*input)[3];

    group5 *= 136;
    group5 += (*input)[4];

    group5 *= 136;
    group5 += (*input)[5];

    *((uint64_t *)((*output) + 26)) |= (group5 << 7);
    *input += 6;
    uint64_t group6 = 0;
    group6 *= 136;
    group6 += (*input)[0];

    group6 *= 136;
    group6 += (*input)[1];

    group6 *= 136;
    group6 += (*input)[2];

    group6 *= 136;
    group6 += (*input)[3];

    group6 *= 136;
    group6 += (*input)[4];

    group6 *= 136;
    group6 += (*input)[5];

    *((uint64_t *)((*output) + 32)) |= (group6 << 2);
    *input += 6;
    uint64_t group7 = 0;
    group7 *= 136;
    group7 += (*input)[0];

    group7 *= 136;
    group7 += (*input)[1];

    group7 *= 136;
    group7 += (*input)[2];

    group7 *= 136;
    group7 += (*input)[3];

    group7 *= 136;
    group7 += (*input)[4];

    group7 *= 136;
    group7 += (*input)[5];

    *((uint64_t *)((*output) + 37)) |= (group7 << 5);
    *input += 6;
    *output += 43;
}

// Pack 8 groups using 43 bytes (48 values total)
void Ultrapack_Compress137(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 137;
    group0 += (*input)[0];

    group0 *= 137;
    group0 += (*input)[1];

    group0 *= 137;
    group0 += (*input)[2];

    group0 *= 137;
    group0 += (*input)[3];

    group0 *= 137;
    group0 += (*input)[4];

    group0 *= 137;
    group0 += (*input)[5];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 6;
    uint64_t group1 = 0;
    group1 *= 137;
    group1 += (*input)[0];

    group1 *= 137;
    group1 += (*input)[1];

    group1 *= 137;
    group1 += (*input)[2];

    group1 *= 137;
    group1 += (*input)[3];

    group1 *= 137;
    group1 += (*input)[4];

    group1 *= 137;
    group1 += (*input)[5];

    *((uint64_t *)((*output) + 5)) |= (group1 << 3);
    *input += 6;
    uint64_t group2 = 0;
    group2 *= 137;
    group2 += (*input)[0];

    group2 *= 137;
    group2 += (*input)[1];

    group2 *= 137;
    group2 += (*input)[2];

    group2 *= 137;
    group2 += (*input)[3];

    group2 *= 137;
    group2 += (*input)[4];

    group2 *= 137;
    group2 += (*input)[5];

    *((uint64_t *)((*output) + 10)) |= (group2 << 6);
    *input += 6;
    uint64_t group3 = 0;
    group3 *= 137;
    group3 += (*input)[0];

    group3 *= 137;
    group3 += (*input)[1];

    group3 *= 137;
    group3 += (*input)[2];

    group3 *= 137;
    group3 += (*input)[3];

    group3 *= 137;
    group3 += (*input)[4];

    group3 *= 137;
    group3 += (*input)[5];

    *((uint64_t *)((*output) + 16)) |= (group3 << 1);
    *input += 6;
    uint64_t group4 = 0;
    group4 *= 137;
    group4 += (*input)[0];

    group4 *= 137;
    group4 += (*input)[1];

    group4 *= 137;
    group4 += (*input)[2];

    group4 *= 137;
    group4 += (*input)[3];

    group4 *= 137;
    group4 += (*input)[4];

    group4 *= 137;
    group4 += (*input)[5];

    *((uint64_t *)((*output) + 21)) |= (group4 << 4);
    *input += 6;
    uint64_t group5 = 0;
    group5 *= 137;
    group5 += (*input)[0];

    group5 *= 137;
    group5 += (*input)[1];

    group5 *= 137;
    group5 += (*input)[2];

    group5 *= 137;
    group5 += (*input)[3];

    group5 *= 137;
    group5 += (*input)[4];

    group5 *= 137;
    group5 += (*input)[5];

    *((uint64_t *)((*output) + 26)) |= (group5 << 7);
    *input += 6;
    uint64_t group6 = 0;
    group6 *= 137;
    group6 += (*input)[0];

    group6 *= 137;
    group6 += (*input)[1];

    group6 *= 137;
    group6 += (*input)[2];

    group6 *= 137;
    group6 += (*input)[3];

    group6 *= 137;
    group6 += (*input)[4];

    group6 *= 137;
    group6 += (*input)[5];

    *((uint64_t *)((*output) + 32)) |= (group6 << 2);
    *input += 6;
    uint64_t group7 = 0;
    group7 *= 137;
    group7 += (*input)[0];

    group7 *= 137;
    group7 += (*input)[1];

    group7 *= 137;
    group7 += (*input)[2];

    group7 *= 137;
    group7 += (*input)[3];

    group7 *= 137;
    group7 += (*input)[4];

    group7 *= 137;
    group7 += (*input)[5];

    *((uint64_t *)((*output) + 37)) |= (group7 << 5);
    *input += 6;
    *output += 43;
}

// Pack 8 groups using 43 bytes (48 values total)
void Ultrapack_Compress138(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 138;
    group0 += (*input)[0];

    group0 *= 138;
    group0 += (*input)[1];

    group0 *= 138;
    group0 += (*input)[2];

    group0 *= 138;
    group0 += (*input)[3];

    group0 *= 138;
    group0 += (*input)[4];

    group0 *= 138;
    group0 += (*input)[5];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 6;
    uint64_t group1 = 0;
    group1 *= 138;
    group1 += (*input)[0];

    group1 *= 138;
    group1 += (*input)[1];

    group1 *= 138;
    group1 += (*input)[2];

    group1 *= 138;
    group1 += (*input)[3];

    group1 *= 138;
    group1 += (*input)[4];

    group1 *= 138;
    group1 += (*input)[5];

    *((uint64_t *)((*output) + 5)) |= (group1 << 3);
    *input += 6;
    uint64_t group2 = 0;
    group2 *= 138;
    group2 += (*input)[0];

    group2 *= 138;
    group2 += (*input)[1];

    group2 *= 138;
    group2 += (*input)[2];

    group2 *= 138;
    group2 += (*input)[3];

    group2 *= 138;
    group2 += (*input)[4];

    group2 *= 138;
    group2 += (*input)[5];

    *((uint64_t *)((*output) + 10)) |= (group2 << 6);
    *input += 6;
    uint64_t group3 = 0;
    group3 *= 138;
    group3 += (*input)[0];

    group3 *= 138;
    group3 += (*input)[1];

    group3 *= 138;
    group3 += (*input)[2];

    group3 *= 138;
    group3 += (*input)[3];

    group3 *= 138;
    group3 += (*input)[4];

    group3 *= 138;
    group3 += (*input)[5];

    *((uint64_t *)((*output) + 16)) |= (group3 << 1);
    *input += 6;
    uint64_t group4 = 0;
    group4 *= 138;
    group4 += (*input)[0];

    group4 *= 138;
    group4 += (*input)[1];

    group4 *= 138;
    group4 += (*input)[2];

    group4 *= 138;
    group4 += (*input)[3];

    group4 *= 138;
    group4 += (*input)[4];

    group4 *= 138;
    group4 += (*input)[5];

    *((uint64_t *)((*output) + 21)) |= (group4 << 4);
    *input += 6;
    uint64_t group5 = 0;
    group5 *= 138;
    group5 += (*input)[0];

    group5 *= 138;
    group5 += (*input)[1];

    group5 *= 138;
    group5 += (*input)[2];

    group5 *= 138;
    group5 += (*input)[3];

    group5 *= 138;
    group5 += (*input)[4];

    group5 *= 138;
    group5 += (*input)[5];

    *((uint64_t *)((*output) + 26)) |= (group5 << 7);
    *input += 6;
    uint64_t group6 = 0;
    group6 *= 138;
    group6 += (*input)[0];

    group6 *= 138;
    group6 += (*input)[1];

    group6 *= 138;
    group6 += (*input)[2];

    group6 *= 138;
    group6 += (*input)[3];

    group6 *= 138;
    group6 += (*input)[4];

    group6 *= 138;
    group6 += (*input)[5];

    *((uint64_t *)((*output) + 32)) |= (group6 << 2);
    *input += 6;
    uint64_t group7 = 0;
    group7 *= 138;
    group7 += (*input)[0];

    group7 *= 138;
    group7 += (*input)[1];

    group7 *= 138;
    group7 += (*input)[2];

    group7 *= 138;
    group7 += (*input)[3];

    group7 *= 138;
    group7 += (*input)[4];

    group7 *= 138;
    group7 += (*input)[5];

    *((uint64_t *)((*output) + 37)) |= (group7 << 5);
    *input += 6;
    *output += 43;
}

// Pack 8 groups using 43 bytes (48 values total)
void Ultrapack_Compress139(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 139;
    group0 += (*input)[0];

    group0 *= 139;
    group0 += (*input)[1];

    group0 *= 139;
    group0 += (*input)[2];

    group0 *= 139;
    group0 += (*input)[3];

    group0 *= 139;
    group0 += (*input)[4];

    group0 *= 139;
    group0 += (*input)[5];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 6;
    uint64_t group1 = 0;
    group1 *= 139;
    group1 += (*input)[0];

    group1 *= 139;
    group1 += (*input)[1];

    group1 *= 139;
    group1 += (*input)[2];

    group1 *= 139;
    group1 += (*input)[3];

    group1 *= 139;
    group1 += (*input)[4];

    group1 *= 139;
    group1 += (*input)[5];

    *((uint64_t *)((*output) + 5)) |= (group1 << 3);
    *input += 6;
    uint64_t group2 = 0;
    group2 *= 139;
    group2 += (*input)[0];

    group2 *= 139;
    group2 += (*input)[1];

    group2 *= 139;
    group2 += (*input)[2];

    group2 *= 139;
    group2 += (*input)[3];

    group2 *= 139;
    group2 += (*input)[4];

    group2 *= 139;
    group2 += (*input)[5];

    *((uint64_t *)((*output) + 10)) |= (group2 << 6);
    *input += 6;
    uint64_t group3 = 0;
    group3 *= 139;
    group3 += (*input)[0];

    group3 *= 139;
    group3 += (*input)[1];

    group3 *= 139;
    group3 += (*input)[2];

    group3 *= 139;
    group3 += (*input)[3];

    group3 *= 139;
    group3 += (*input)[4];

    group3 *= 139;
    group3 += (*input)[5];

    *((uint64_t *)((*output) + 16)) |= (group3 << 1);
    *input += 6;
    uint64_t group4 = 0;
    group4 *= 139;
    group4 += (*input)[0];

    group4 *= 139;
    group4 += (*input)[1];

    group4 *= 139;
    group4 += (*input)[2];

    group4 *= 139;
    group4 += (*input)[3];

    group4 *= 139;
    group4 += (*input)[4];

    group4 *= 139;
    group4 += (*input)[5];

    *((uint64_t *)((*output) + 21)) |= (group4 << 4);
    *input += 6;
    uint64_t group5 = 0;
    group5 *= 139;
    group5 += (*input)[0];

    group5 *= 139;
    group5 += (*input)[1];

    group5 *= 139;
    group5 += (*input)[2];

    group5 *= 139;
    group5 += (*input)[3];

    group5 *= 139;
    group5 += (*input)[4];

    group5 *= 139;
    group5 += (*input)[5];

    *((uint64_t *)((*output) + 26)) |= (group5 << 7);
    *input += 6;
    uint64_t group6 = 0;
    group6 *= 139;
    group6 += (*input)[0];

    group6 *= 139;
    group6 += (*input)[1];

    group6 *= 139;
    group6 += (*input)[2];

    group6 *= 139;
    group6 += (*input)[3];

    group6 *= 139;
    group6 += (*input)[4];

    group6 *= 139;
    group6 += (*input)[5];

    *((uint64_t *)((*output) + 32)) |= (group6 << 2);
    *input += 6;
    uint64_t group7 = 0;
    group7 *= 139;
    group7 += (*input)[0];

    group7 *= 139;
    group7 += (*input)[1];

    group7 *= 139;
    group7 += (*input)[2];

    group7 *= 139;
    group7 += (*input)[3];

    group7 *= 139;
    group7 += (*input)[4];

    group7 *= 139;
    group7 += (*input)[5];

    *((uint64_t *)((*output) + 37)) |= (group7 << 5);
    *input += 6;
    *output += 43;
}

// Pack 8 groups using 43 bytes (48 values total)
void Ultrapack_Compress140(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 140;
    group0 += (*input)[0];

    group0 *= 140;
    group0 += (*input)[1];

    group0 *= 140;
    group0 += (*input)[2];

    group0 *= 140;
    group0 += (*input)[3];

    group0 *= 140;
    group0 += (*input)[4];

    group0 *= 140;
    group0 += (*input)[5];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 6;
    uint64_t group1 = 0;
    group1 *= 140;
    group1 += (*input)[0];

    group1 *= 140;
    group1 += (*input)[1];

    group1 *= 140;
    group1 += (*input)[2];

    group1 *= 140;
    group1 += (*input)[3];

    group1 *= 140;
    group1 += (*input)[4];

    group1 *= 140;
    group1 += (*input)[5];

    *((uint64_t *)((*output) + 5)) |= (group1 << 3);
    *input += 6;
    uint64_t group2 = 0;
    group2 *= 140;
    group2 += (*input)[0];

    group2 *= 140;
    group2 += (*input)[1];

    group2 *= 140;
    group2 += (*input)[2];

    group2 *= 140;
    group2 += (*input)[3];

    group2 *= 140;
    group2 += (*input)[4];

    group2 *= 140;
    group2 += (*input)[5];

    *((uint64_t *)((*output) + 10)) |= (group2 << 6);
    *input += 6;
    uint64_t group3 = 0;
    group3 *= 140;
    group3 += (*input)[0];

    group3 *= 140;
    group3 += (*input)[1];

    group3 *= 140;
    group3 += (*input)[2];

    group3 *= 140;
    group3 += (*input)[3];

    group3 *= 140;
    group3 += (*input)[4];

    group3 *= 140;
    group3 += (*input)[5];

    *((uint64_t *)((*output) + 16)) |= (group3 << 1);
    *input += 6;
    uint64_t group4 = 0;
    group4 *= 140;
    group4 += (*input)[0];

    group4 *= 140;
    group4 += (*input)[1];

    group4 *= 140;
    group4 += (*input)[2];

    group4 *= 140;
    group4 += (*input)[3];

    group4 *= 140;
    group4 += (*input)[4];

    group4 *= 140;
    group4 += (*input)[5];

    *((uint64_t *)((*output) + 21)) |= (group4 << 4);
    *input += 6;
    uint64_t group5 = 0;
    group5 *= 140;
    group5 += (*input)[0];

    group5 *= 140;
    group5 += (*input)[1];

    group5 *= 140;
    group5 += (*input)[2];

    group5 *= 140;
    group5 += (*input)[3];

    group5 *= 140;
    group5 += (*input)[4];

    group5 *= 140;
    group5 += (*input)[5];

    *((uint64_t *)((*output) + 26)) |= (group5 << 7);
    *input += 6;
    uint64_t group6 = 0;
    group6 *= 140;
    group6 += (*input)[0];

    group6 *= 140;
    group6 += (*input)[1];

    group6 *= 140;
    group6 += (*input)[2];

    group6 *= 140;
    group6 += (*input)[3];

    group6 *= 140;
    group6 += (*input)[4];

    group6 *= 140;
    group6 += (*input)[5];

    *((uint64_t *)((*output) + 32)) |= (group6 << 2);
    *input += 6;
    uint64_t group7 = 0;
    group7 *= 140;
    group7 += (*input)[0];

    group7 *= 140;
    group7 += (*input)[1];

    group7 *= 140;
    group7 += (*input)[2];

    group7 *= 140;
    group7 += (*input)[3];

    group7 *= 140;
    group7 += (*input)[4];

    group7 *= 140;
    group7 += (*input)[5];

    *((uint64_t *)((*output) + 37)) |= (group7 << 5);
    *input += 6;
    *output += 43;
}

// Pack 8 groups using 43 bytes (48 values total)
void Ultrapack_Compress141(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 141;
    group0 += (*input)[0];

    group0 *= 141;
    group0 += (*input)[1];

    group0 *= 141;
    group0 += (*input)[2];

    group0 *= 141;
    group0 += (*input)[3];

    group0 *= 141;
    group0 += (*input)[4];

    group0 *= 141;
    group0 += (*input)[5];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 6;
    uint64_t group1 = 0;
    group1 *= 141;
    group1 += (*input)[0];

    group1 *= 141;
    group1 += (*input)[1];

    group1 *= 141;
    group1 += (*input)[2];

    group1 *= 141;
    group1 += (*input)[3];

    group1 *= 141;
    group1 += (*input)[4];

    group1 *= 141;
    group1 += (*input)[5];

    *((uint64_t *)((*output) + 5)) |= (group1 << 3);
    *input += 6;
    uint64_t group2 = 0;
    group2 *= 141;
    group2 += (*input)[0];

    group2 *= 141;
    group2 += (*input)[1];

    group2 *= 141;
    group2 += (*input)[2];

    group2 *= 141;
    group2 += (*input)[3];

    group2 *= 141;
    group2 += (*input)[4];

    group2 *= 141;
    group2 += (*input)[5];

    *((uint64_t *)((*output) + 10)) |= (group2 << 6);
    *input += 6;
    uint64_t group3 = 0;
    group3 *= 141;
    group3 += (*input)[0];

    group3 *= 141;
    group3 += (*input)[1];

    group3 *= 141;
    group3 += (*input)[2];

    group3 *= 141;
    group3 += (*input)[3];

    group3 *= 141;
    group3 += (*input)[4];

    group3 *= 141;
    group3 += (*input)[5];

    *((uint64_t *)((*output) + 16)) |= (group3 << 1);
    *input += 6;
    uint64_t group4 = 0;
    group4 *= 141;
    group4 += (*input)[0];

    group4 *= 141;
    group4 += (*input)[1];

    group4 *= 141;
    group4 += (*input)[2];

    group4 *= 141;
    group4 += (*input)[3];

    group4 *= 141;
    group4 += (*input)[4];

    group4 *= 141;
    group4 += (*input)[5];

    *((uint64_t *)((*output) + 21)) |= (group4 << 4);
    *input += 6;
    uint64_t group5 = 0;
    group5 *= 141;
    group5 += (*input)[0];

    group5 *= 141;
    group5 += (*input)[1];

    group5 *= 141;
    group5 += (*input)[2];

    group5 *= 141;
    group5 += (*input)[3];

    group5 *= 141;
    group5 += (*input)[4];

    group5 *= 141;
    group5 += (*input)[5];

    *((uint64_t *)((*output) + 26)) |= (group5 << 7);
    *input += 6;
    uint64_t group6 = 0;
    group6 *= 141;
    group6 += (*input)[0];

    group6 *= 141;
    group6 += (*input)[1];

    group6 *= 141;
    group6 += (*input)[2];

    group6 *= 141;
    group6 += (*input)[3];

    group6 *= 141;
    group6 += (*input)[4];

    group6 *= 141;
    group6 += (*input)[5];

    *((uint64_t *)((*output) + 32)) |= (group6 << 2);
    *input += 6;
    uint64_t group7 = 0;
    group7 *= 141;
    group7 += (*input)[0];

    group7 *= 141;
    group7 += (*input)[1];

    group7 *= 141;
    group7 += (*input)[2];

    group7 *= 141;
    group7 += (*input)[3];

    group7 *= 141;
    group7 += (*input)[4];

    group7 *= 141;
    group7 += (*input)[5];

    *((uint64_t *)((*output) + 37)) |= (group7 << 5);
    *input += 6;
    *output += 43;
}

// Pack 8 groups using 43 bytes (48 values total)
void Ultrapack_Compress142(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 142;
    group0 += (*input)[0];

    group0 *= 142;
    group0 += (*input)[1];

    group0 *= 142;
    group0 += (*input)[2];

    group0 *= 142;
    group0 += (*input)[3];

    group0 *= 142;
    group0 += (*input)[4];

    group0 *= 142;
    group0 += (*input)[5];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 6;
    uint64_t group1 = 0;
    group1 *= 142;
    group1 += (*input)[0];

    group1 *= 142;
    group1 += (*input)[1];

    group1 *= 142;
    group1 += (*input)[2];

    group1 *= 142;
    group1 += (*input)[3];

    group1 *= 142;
    group1 += (*input)[4];

    group1 *= 142;
    group1 += (*input)[5];

    *((uint64_t *)((*output) + 5)) |= (group1 << 3);
    *input += 6;
    uint64_t group2 = 0;
    group2 *= 142;
    group2 += (*input)[0];

    group2 *= 142;
    group2 += (*input)[1];

    group2 *= 142;
    group2 += (*input)[2];

    group2 *= 142;
    group2 += (*input)[3];

    group2 *= 142;
    group2 += (*input)[4];

    group2 *= 142;
    group2 += (*input)[5];

    *((uint64_t *)((*output) + 10)) |= (group2 << 6);
    *input += 6;
    uint64_t group3 = 0;
    group3 *= 142;
    group3 += (*input)[0];

    group3 *= 142;
    group3 += (*input)[1];

    group3 *= 142;
    group3 += (*input)[2];

    group3 *= 142;
    group3 += (*input)[3];

    group3 *= 142;
    group3 += (*input)[4];

    group3 *= 142;
    group3 += (*input)[5];

    *((uint64_t *)((*output) + 16)) |= (group3 << 1);
    *input += 6;
    uint64_t group4 = 0;
    group4 *= 142;
    group4 += (*input)[0];

    group4 *= 142;
    group4 += (*input)[1];

    group4 *= 142;
    group4 += (*input)[2];

    group4 *= 142;
    group4 += (*input)[3];

    group4 *= 142;
    group4 += (*input)[4];

    group4 *= 142;
    group4 += (*input)[5];

    *((uint64_t *)((*output) + 21)) |= (group4 << 4);
    *input += 6;
    uint64_t group5 = 0;
    group5 *= 142;
    group5 += (*input)[0];

    group5 *= 142;
    group5 += (*input)[1];

    group5 *= 142;
    group5 += (*input)[2];

    group5 *= 142;
    group5 += (*input)[3];

    group5 *= 142;
    group5 += (*input)[4];

    group5 *= 142;
    group5 += (*input)[5];

    *((uint64_t *)((*output) + 26)) |= (group5 << 7);
    *input += 6;
    uint64_t group6 = 0;
    group6 *= 142;
    group6 += (*input)[0];

    group6 *= 142;
    group6 += (*input)[1];

    group6 *= 142;
    group6 += (*input)[2];

    group6 *= 142;
    group6 += (*input)[3];

    group6 *= 142;
    group6 += (*input)[4];

    group6 *= 142;
    group6 += (*input)[5];

    *((uint64_t *)((*output) + 32)) |= (group6 << 2);
    *input += 6;
    uint64_t group7 = 0;
    group7 *= 142;
    group7 += (*input)[0];

    group7 *= 142;
    group7 += (*input)[1];

    group7 *= 142;
    group7 += (*input)[2];

    group7 *= 142;
    group7 += (*input)[3];

    group7 *= 142;
    group7 += (*input)[4];

    group7 *= 142;
    group7 += (*input)[5];

    *((uint64_t *)((*output) + 37)) |= (group7 << 5);
    *input += 6;
    *output += 43;
}

// Pack 8 groups using 43 bytes (48 values total)
void Ultrapack_Compress143(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 143;
    group0 += (*input)[0];

    group0 *= 143;
    group0 += (*input)[1];

    group0 *= 143;
    group0 += (*input)[2];

    group0 *= 143;
    group0 += (*input)[3];

    group0 *= 143;
    group0 += (*input)[4];

    group0 *= 143;
    group0 += (*input)[5];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 6;
    uint64_t group1 = 0;
    group1 *= 143;
    group1 += (*input)[0];

    group1 *= 143;
    group1 += (*input)[1];

    group1 *= 143;
    group1 += (*input)[2];

    group1 *= 143;
    group1 += (*input)[3];

    group1 *= 143;
    group1 += (*input)[4];

    group1 *= 143;
    group1 += (*input)[5];

    *((uint64_t *)((*output) + 5)) |= (group1 << 3);
    *input += 6;
    uint64_t group2 = 0;
    group2 *= 143;
    group2 += (*input)[0];

    group2 *= 143;
    group2 += (*input)[1];

    group2 *= 143;
    group2 += (*input)[2];

    group2 *= 143;
    group2 += (*input)[3];

    group2 *= 143;
    group2 += (*input)[4];

    group2 *= 143;
    group2 += (*input)[5];

    *((uint64_t *)((*output) + 10)) |= (group2 << 6);
    *input += 6;
    uint64_t group3 = 0;
    group3 *= 143;
    group3 += (*input)[0];

    group3 *= 143;
    group3 += (*input)[1];

    group3 *= 143;
    group3 += (*input)[2];

    group3 *= 143;
    group3 += (*input)[3];

    group3 *= 143;
    group3 += (*input)[4];

    group3 *= 143;
    group3 += (*input)[5];

    *((uint64_t *)((*output) + 16)) |= (group3 << 1);
    *input += 6;
    uint64_t group4 = 0;
    group4 *= 143;
    group4 += (*input)[0];

    group4 *= 143;
    group4 += (*input)[1];

    group4 *= 143;
    group4 += (*input)[2];

    group4 *= 143;
    group4 += (*input)[3];

    group4 *= 143;
    group4 += (*input)[4];

    group4 *= 143;
    group4 += (*input)[5];

    *((uint64_t *)((*output) + 21)) |= (group4 << 4);
    *input += 6;
    uint64_t group5 = 0;
    group5 *= 143;
    group5 += (*input)[0];

    group5 *= 143;
    group5 += (*input)[1];

    group5 *= 143;
    group5 += (*input)[2];

    group5 *= 143;
    group5 += (*input)[3];

    group5 *= 143;
    group5 += (*input)[4];

    group5 *= 143;
    group5 += (*input)[5];

    *((uint64_t *)((*output) + 26)) |= (group5 << 7);
    *input += 6;
    uint64_t group6 = 0;
    group6 *= 143;
    group6 += (*input)[0];

    group6 *= 143;
    group6 += (*input)[1];

    group6 *= 143;
    group6 += (*input)[2];

    group6 *= 143;
    group6 += (*input)[3];

    group6 *= 143;
    group6 += (*input)[4];

    group6 *= 143;
    group6 += (*input)[5];

    *((uint64_t *)((*output) + 32)) |= (group6 << 2);
    *input += 6;
    uint64_t group7 = 0;
    group7 *= 143;
    group7 += (*input)[0];

    group7 *= 143;
    group7 += (*input)[1];

    group7 *= 143;
    group7 += (*input)[2];

    group7 *= 143;
    group7 += (*input)[3];

    group7 *= 143;
    group7 += (*input)[4];

    group7 *= 143;
    group7 += (*input)[5];

    *((uint64_t *)((*output) + 37)) |= (group7 << 5);
    *input += 6;
    *output += 43;
}

// Pack 8 groups using 29 bytes (32 values total)
void Ultrapack_Compress144(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 144;
    group0 += (*input)[0];

    group0 *= 144;
    group0 += (*input)[1];

    group0 *= 144;
    group0 += (*input)[2];

    group0 *= 144;
    group0 += (*input)[3];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 4;
    uint64_t group1 = 0;
    group1 *= 144;
    group1 += (*input)[0];

    group1 *= 144;
    group1 += (*input)[1];

    group1 *= 144;
    group1 += (*input)[2];

    group1 *= 144;
    group1 += (*input)[3];

    *((uint64_t *)((*output) + 3)) |= (group1 << 5);
    *input += 4;
    uint64_t group2 = 0;
    group2 *= 144;
    group2 += (*input)[0];

    group2 *= 144;
    group2 += (*input)[1];

    group2 *= 144;
    group2 += (*input)[2];

    group2 *= 144;
    group2 += (*input)[3];

    *((uint64_t *)((*output) + 7)) |= (group2 << 2);
    *input += 4;
    uint64_t group3 = 0;
    group3 *= 144;
    group3 += (*input)[0];

    group3 *= 144;
    group3 += (*input)[1];

    group3 *= 144;
    group3 += (*input)[2];

    group3 *= 144;
    group3 += (*input)[3];

    *((uint64_t *)((*output) + 10)) |= (group3 << 7);
    *input += 4;
    uint64_t group4 = 0;
    group4 *= 144;
    group4 += (*input)[0];

    group4 *= 144;
    group4 += (*input)[1];

    group4 *= 144;
    group4 += (*input)[2];

    group4 *= 144;
    group4 += (*input)[3];

    *((uint64_t *)((*output) + 14)) |= (group4 << 4);
    *input += 4;
    uint64_t group5 = 0;
    group5 *= 144;
    group5 += (*input)[0];

    group5 *= 144;
    group5 += (*input)[1];

    group5 *= 144;
    group5 += (*input)[2];

    group5 *= 144;
    group5 += (*input)[3];

    *((uint64_t *)((*output) + 18)) |= (group5 << 1);
    *input += 4;
    uint64_t group6 = 0;
    group6 *= 144;
    group6 += (*input)[0];

    group6 *= 144;
    group6 += (*input)[1];

    group6 *= 144;
    group6 += (*input)[2];

    group6 *= 144;
    group6 += (*input)[3];

    *((uint64_t *)((*output) + 21)) |= (group6 << 6);
    *input += 4;
    uint64_t group7 = 0;
    group7 *= 144;
    group7 += (*input)[0];

    group7 *= 144;
    group7 += (*input)[1];

    group7 *= 144;
    group7 += (*input)[2];

    group7 *= 144;
    group7 += (*input)[3];

    *((uint64_t *)((*output) + 25)) |= (group7 << 3);
    *input += 4;
    *output += 29;
}

// Pack 8 groups using 29 bytes (32 values total)
void Ultrapack_Compress145(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 145;
    group0 += (*input)[0];

    group0 *= 145;
    group0 += (*input)[1];

    group0 *= 145;
    group0 += (*input)[2];

    group0 *= 145;
    group0 += (*input)[3];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 4;
    uint64_t group1 = 0;
    group1 *= 145;
    group1 += (*input)[0];

    group1 *= 145;
    group1 += (*input)[1];

    group1 *= 145;
    group1 += (*input)[2];

    group1 *= 145;
    group1 += (*input)[3];

    *((uint64_t *)((*output) + 3)) |= (group1 << 5);
    *input += 4;
    uint64_t group2 = 0;
    group2 *= 145;
    group2 += (*input)[0];

    group2 *= 145;
    group2 += (*input)[1];

    group2 *= 145;
    group2 += (*input)[2];

    group2 *= 145;
    group2 += (*input)[3];

    *((uint64_t *)((*output) + 7)) |= (group2 << 2);
    *input += 4;
    uint64_t group3 = 0;
    group3 *= 145;
    group3 += (*input)[0];

    group3 *= 145;
    group3 += (*input)[1];

    group3 *= 145;
    group3 += (*input)[2];

    group3 *= 145;
    group3 += (*input)[3];

    *((uint64_t *)((*output) + 10)) |= (group3 << 7);
    *input += 4;
    uint64_t group4 = 0;
    group4 *= 145;
    group4 += (*input)[0];

    group4 *= 145;
    group4 += (*input)[1];

    group4 *= 145;
    group4 += (*input)[2];

    group4 *= 145;
    group4 += (*input)[3];

    *((uint64_t *)((*output) + 14)) |= (group4 << 4);
    *input += 4;
    uint64_t group5 = 0;
    group5 *= 145;
    group5 += (*input)[0];

    group5 *= 145;
    group5 += (*input)[1];

    group5 *= 145;
    group5 += (*input)[2];

    group5 *= 145;
    group5 += (*input)[3];

    *((uint64_t *)((*output) + 18)) |= (group5 << 1);
    *input += 4;
    uint64_t group6 = 0;
    group6 *= 145;
    group6 += (*input)[0];

    group6 *= 145;
    group6 += (*input)[1];

    group6 *= 145;
    group6 += (*input)[2];

    group6 *= 145;
    group6 += (*input)[3];

    *((uint64_t *)((*output) + 21)) |= (group6 << 6);
    *input += 4;
    uint64_t group7 = 0;
    group7 *= 145;
    group7 += (*input)[0];

    group7 *= 145;
    group7 += (*input)[1];

    group7 *= 145;
    group7 += (*input)[2];

    group7 *= 145;
    group7 += (*input)[3];

    *((uint64_t *)((*output) + 25)) |= (group7 << 3);
    *input += 4;
    *output += 29;
}

// Pack 8 groups using 29 bytes (32 values total)
void Ultrapack_Compress146(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 146;
    group0 += (*input)[0];

    group0 *= 146;
    group0 += (*input)[1];

    group0 *= 146;
    group0 += (*input)[2];

    group0 *= 146;
    group0 += (*input)[3];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 4;
    uint64_t group1 = 0;
    group1 *= 146;
    group1 += (*input)[0];

    group1 *= 146;
    group1 += (*input)[1];

    group1 *= 146;
    group1 += (*input)[2];

    group1 *= 146;
    group1 += (*input)[3];

    *((uint64_t *)((*output) + 3)) |= (group1 << 5);
    *input += 4;
    uint64_t group2 = 0;
    group2 *= 146;
    group2 += (*input)[0];

    group2 *= 146;
    group2 += (*input)[1];

    group2 *= 146;
    group2 += (*input)[2];

    group2 *= 146;
    group2 += (*input)[3];

    *((uint64_t *)((*output) + 7)) |= (group2 << 2);
    *input += 4;
    uint64_t group3 = 0;
    group3 *= 146;
    group3 += (*input)[0];

    group3 *= 146;
    group3 += (*input)[1];

    group3 *= 146;
    group3 += (*input)[2];

    group3 *= 146;
    group3 += (*input)[3];

    *((uint64_t *)((*output) + 10)) |= (group3 << 7);
    *input += 4;
    uint64_t group4 = 0;
    group4 *= 146;
    group4 += (*input)[0];

    group4 *= 146;
    group4 += (*input)[1];

    group4 *= 146;
    group4 += (*input)[2];

    group4 *= 146;
    group4 += (*input)[3];

    *((uint64_t *)((*output) + 14)) |= (group4 << 4);
    *input += 4;
    uint64_t group5 = 0;
    group5 *= 146;
    group5 += (*input)[0];

    group5 *= 146;
    group5 += (*input)[1];

    group5 *= 146;
    group5 += (*input)[2];

    group5 *= 146;
    group5 += (*input)[3];

    *((uint64_t *)((*output) + 18)) |= (group5 << 1);
    *input += 4;
    uint64_t group6 = 0;
    group6 *= 146;
    group6 += (*input)[0];

    group6 *= 146;
    group6 += (*input)[1];

    group6 *= 146;
    group6 += (*input)[2];

    group6 *= 146;
    group6 += (*input)[3];

    *((uint64_t *)((*output) + 21)) |= (group6 << 6);
    *input += 4;
    uint64_t group7 = 0;
    group7 *= 146;
    group7 += (*input)[0];

    group7 *= 146;
    group7 += (*input)[1];

    group7 *= 146;
    group7 += (*input)[2];

    group7 *= 146;
    group7 += (*input)[3];

    *((uint64_t *)((*output) + 25)) |= (group7 << 3);
    *input += 4;
    *output += 29;
}

// Pack 8 groups using 29 bytes (32 values total)
void Ultrapack_Compress147(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 147;
    group0 += (*input)[0];

    group0 *= 147;
    group0 += (*input)[1];

    group0 *= 147;
    group0 += (*input)[2];

    group0 *= 147;
    group0 += (*input)[3];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 4;
    uint64_t group1 = 0;
    group1 *= 147;
    group1 += (*input)[0];

    group1 *= 147;
    group1 += (*input)[1];

    group1 *= 147;
    group1 += (*input)[2];

    group1 *= 147;
    group1 += (*input)[3];

    *((uint64_t *)((*output) + 3)) |= (group1 << 5);
    *input += 4;
    uint64_t group2 = 0;
    group2 *= 147;
    group2 += (*input)[0];

    group2 *= 147;
    group2 += (*input)[1];

    group2 *= 147;
    group2 += (*input)[2];

    group2 *= 147;
    group2 += (*input)[3];

    *((uint64_t *)((*output) + 7)) |= (group2 << 2);
    *input += 4;
    uint64_t group3 = 0;
    group3 *= 147;
    group3 += (*input)[0];

    group3 *= 147;
    group3 += (*input)[1];

    group3 *= 147;
    group3 += (*input)[2];

    group3 *= 147;
    group3 += (*input)[3];

    *((uint64_t *)((*output) + 10)) |= (group3 << 7);
    *input += 4;
    uint64_t group4 = 0;
    group4 *= 147;
    group4 += (*input)[0];

    group4 *= 147;
    group4 += (*input)[1];

    group4 *= 147;
    group4 += (*input)[2];

    group4 *= 147;
    group4 += (*input)[3];

    *((uint64_t *)((*output) + 14)) |= (group4 << 4);
    *input += 4;
    uint64_t group5 = 0;
    group5 *= 147;
    group5 += (*input)[0];

    group5 *= 147;
    group5 += (*input)[1];

    group5 *= 147;
    group5 += (*input)[2];

    group5 *= 147;
    group5 += (*input)[3];

    *((uint64_t *)((*output) + 18)) |= (group5 << 1);
    *input += 4;
    uint64_t group6 = 0;
    group6 *= 147;
    group6 += (*input)[0];

    group6 *= 147;
    group6 += (*input)[1];

    group6 *= 147;
    group6 += (*input)[2];

    group6 *= 147;
    group6 += (*input)[3];

    *((uint64_t *)((*output) + 21)) |= (group6 << 6);
    *input += 4;
    uint64_t group7 = 0;
    group7 *= 147;
    group7 += (*input)[0];

    group7 *= 147;
    group7 += (*input)[1];

    group7 *= 147;
    group7 += (*input)[2];

    group7 *= 147;
    group7 += (*input)[3];

    *((uint64_t *)((*output) + 25)) |= (group7 << 3);
    *input += 4;
    *output += 29;
}

// Pack 8 groups using 29 bytes (32 values total)
void Ultrapack_Compress148(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 148;
    group0 += (*input)[0];

    group0 *= 148;
    group0 += (*input)[1];

    group0 *= 148;
    group0 += (*input)[2];

    group0 *= 148;
    group0 += (*input)[3];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 4;
    uint64_t group1 = 0;
    group1 *= 148;
    group1 += (*input)[0];

    group1 *= 148;
    group1 += (*input)[1];

    group1 *= 148;
    group1 += (*input)[2];

    group1 *= 148;
    group1 += (*input)[3];

    *((uint64_t *)((*output) + 3)) |= (group1 << 5);
    *input += 4;
    uint64_t group2 = 0;
    group2 *= 148;
    group2 += (*input)[0];

    group2 *= 148;
    group2 += (*input)[1];

    group2 *= 148;
    group2 += (*input)[2];

    group2 *= 148;
    group2 += (*input)[3];

    *((uint64_t *)((*output) + 7)) |= (group2 << 2);
    *input += 4;
    uint64_t group3 = 0;
    group3 *= 148;
    group3 += (*input)[0];

    group3 *= 148;
    group3 += (*input)[1];

    group3 *= 148;
    group3 += (*input)[2];

    group3 *= 148;
    group3 += (*input)[3];

    *((uint64_t *)((*output) + 10)) |= (group3 << 7);
    *input += 4;
    uint64_t group4 = 0;
    group4 *= 148;
    group4 += (*input)[0];

    group4 *= 148;
    group4 += (*input)[1];

    group4 *= 148;
    group4 += (*input)[2];

    group4 *= 148;
    group4 += (*input)[3];

    *((uint64_t *)((*output) + 14)) |= (group4 << 4);
    *input += 4;
    uint64_t group5 = 0;
    group5 *= 148;
    group5 += (*input)[0];

    group5 *= 148;
    group5 += (*input)[1];

    group5 *= 148;
    group5 += (*input)[2];

    group5 *= 148;
    group5 += (*input)[3];

    *((uint64_t *)((*output) + 18)) |= (group5 << 1);
    *input += 4;
    uint64_t group6 = 0;
    group6 *= 148;
    group6 += (*input)[0];

    group6 *= 148;
    group6 += (*input)[1];

    group6 *= 148;
    group6 += (*input)[2];

    group6 *= 148;
    group6 += (*input)[3];

    *((uint64_t *)((*output) + 21)) |= (group6 << 6);
    *input += 4;
    uint64_t group7 = 0;
    group7 *= 148;
    group7 += (*input)[0];

    group7 *= 148;
    group7 += (*input)[1];

    group7 *= 148;
    group7 += (*input)[2];

    group7 *= 148;
    group7 += (*input)[3];

    *((uint64_t *)((*output) + 25)) |= (group7 << 3);
    *input += 4;
    *output += 29;
}

// Pack 8 groups using 29 bytes (32 values total)
void Ultrapack_Compress149(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 149;
    group0 += (*input)[0];

    group0 *= 149;
    group0 += (*input)[1];

    group0 *= 149;
    group0 += (*input)[2];

    group0 *= 149;
    group0 += (*input)[3];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 4;
    uint64_t group1 = 0;
    group1 *= 149;
    group1 += (*input)[0];

    group1 *= 149;
    group1 += (*input)[1];

    group1 *= 149;
    group1 += (*input)[2];

    group1 *= 149;
    group1 += (*input)[3];

    *((uint64_t *)((*output) + 3)) |= (group1 << 5);
    *input += 4;
    uint64_t group2 = 0;
    group2 *= 149;
    group2 += (*input)[0];

    group2 *= 149;
    group2 += (*input)[1];

    group2 *= 149;
    group2 += (*input)[2];

    group2 *= 149;
    group2 += (*input)[3];

    *((uint64_t *)((*output) + 7)) |= (group2 << 2);
    *input += 4;
    uint64_t group3 = 0;
    group3 *= 149;
    group3 += (*input)[0];

    group3 *= 149;
    group3 += (*input)[1];

    group3 *= 149;
    group3 += (*input)[2];

    group3 *= 149;
    group3 += (*input)[3];

    *((uint64_t *)((*output) + 10)) |= (group3 << 7);
    *input += 4;
    uint64_t group4 = 0;
    group4 *= 149;
    group4 += (*input)[0];

    group4 *= 149;
    group4 += (*input)[1];

    group4 *= 149;
    group4 += (*input)[2];

    group4 *= 149;
    group4 += (*input)[3];

    *((uint64_t *)((*output) + 14)) |= (group4 << 4);
    *input += 4;
    uint64_t group5 = 0;
    group5 *= 149;
    group5 += (*input)[0];

    group5 *= 149;
    group5 += (*input)[1];

    group5 *= 149;
    group5 += (*input)[2];

    group5 *= 149;
    group5 += (*input)[3];

    *((uint64_t *)((*output) + 18)) |= (group5 << 1);
    *input += 4;
    uint64_t group6 = 0;
    group6 *= 149;
    group6 += (*input)[0];

    group6 *= 149;
    group6 += (*input)[1];

    group6 *= 149;
    group6 += (*input)[2];

    group6 *= 149;
    group6 += (*input)[3];

    *((uint64_t *)((*output) + 21)) |= (group6 << 6);
    *input += 4;
    uint64_t group7 = 0;
    group7 *= 149;
    group7 += (*input)[0];

    group7 *= 149;
    group7 += (*input)[1];

    group7 *= 149;
    group7 += (*input)[2];

    group7 *= 149;
    group7 += (*input)[3];

    *((uint64_t *)((*output) + 25)) |= (group7 << 3);
    *input += 4;
    *output += 29;
}

// Pack 8 groups using 29 bytes (32 values total)
void Ultrapack_Compress150(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 150;
    group0 += (*input)[0];

    group0 *= 150;
    group0 += (*input)[1];

    group0 *= 150;
    group0 += (*input)[2];

    group0 *= 150;
    group0 += (*input)[3];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 4;
    uint64_t group1 = 0;
    group1 *= 150;
    group1 += (*input)[0];

    group1 *= 150;
    group1 += (*input)[1];

    group1 *= 150;
    group1 += (*input)[2];

    group1 *= 150;
    group1 += (*input)[3];

    *((uint64_t *)((*output) + 3)) |= (group1 << 5);
    *input += 4;
    uint64_t group2 = 0;
    group2 *= 150;
    group2 += (*input)[0];

    group2 *= 150;
    group2 += (*input)[1];

    group2 *= 150;
    group2 += (*input)[2];

    group2 *= 150;
    group2 += (*input)[3];

    *((uint64_t *)((*output) + 7)) |= (group2 << 2);
    *input += 4;
    uint64_t group3 = 0;
    group3 *= 150;
    group3 += (*input)[0];

    group3 *= 150;
    group3 += (*input)[1];

    group3 *= 150;
    group3 += (*input)[2];

    group3 *= 150;
    group3 += (*input)[3];

    *((uint64_t *)((*output) + 10)) |= (group3 << 7);
    *input += 4;
    uint64_t group4 = 0;
    group4 *= 150;
    group4 += (*input)[0];

    group4 *= 150;
    group4 += (*input)[1];

    group4 *= 150;
    group4 += (*input)[2];

    group4 *= 150;
    group4 += (*input)[3];

    *((uint64_t *)((*output) + 14)) |= (group4 << 4);
    *input += 4;
    uint64_t group5 = 0;
    group5 *= 150;
    group5 += (*input)[0];

    group5 *= 150;
    group5 += (*input)[1];

    group5 *= 150;
    group5 += (*input)[2];

    group5 *= 150;
    group5 += (*input)[3];

    *((uint64_t *)((*output) + 18)) |= (group5 << 1);
    *input += 4;
    uint64_t group6 = 0;
    group6 *= 150;
    group6 += (*input)[0];

    group6 *= 150;
    group6 += (*input)[1];

    group6 *= 150;
    group6 += (*input)[2];

    group6 *= 150;
    group6 += (*input)[3];

    *((uint64_t *)((*output) + 21)) |= (group6 << 6);
    *input += 4;
    uint64_t group7 = 0;
    group7 *= 150;
    group7 += (*input)[0];

    group7 *= 150;
    group7 += (*input)[1];

    group7 *= 150;
    group7 += (*input)[2];

    group7 *= 150;
    group7 += (*input)[3];

    *((uint64_t *)((*output) + 25)) |= (group7 << 3);
    *input += 4;
    *output += 29;
}

// Pack 8 groups using 29 bytes (32 values total)
void Ultrapack_Compress151(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 151;
    group0 += (*input)[0];

    group0 *= 151;
    group0 += (*input)[1];

    group0 *= 151;
    group0 += (*input)[2];

    group0 *= 151;
    group0 += (*input)[3];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 4;
    uint64_t group1 = 0;
    group1 *= 151;
    group1 += (*input)[0];

    group1 *= 151;
    group1 += (*input)[1];

    group1 *= 151;
    group1 += (*input)[2];

    group1 *= 151;
    group1 += (*input)[3];

    *((uint64_t *)((*output) + 3)) |= (group1 << 5);
    *input += 4;
    uint64_t group2 = 0;
    group2 *= 151;
    group2 += (*input)[0];

    group2 *= 151;
    group2 += (*input)[1];

    group2 *= 151;
    group2 += (*input)[2];

    group2 *= 151;
    group2 += (*input)[3];

    *((uint64_t *)((*output) + 7)) |= (group2 << 2);
    *input += 4;
    uint64_t group3 = 0;
    group3 *= 151;
    group3 += (*input)[0];

    group3 *= 151;
    group3 += (*input)[1];

    group3 *= 151;
    group3 += (*input)[2];

    group3 *= 151;
    group3 += (*input)[3];

    *((uint64_t *)((*output) + 10)) |= (group3 << 7);
    *input += 4;
    uint64_t group4 = 0;
    group4 *= 151;
    group4 += (*input)[0];

    group4 *= 151;
    group4 += (*input)[1];

    group4 *= 151;
    group4 += (*input)[2];

    group4 *= 151;
    group4 += (*input)[3];

    *((uint64_t *)((*output) + 14)) |= (group4 << 4);
    *input += 4;
    uint64_t group5 = 0;
    group5 *= 151;
    group5 += (*input)[0];

    group5 *= 151;
    group5 += (*input)[1];

    group5 *= 151;
    group5 += (*input)[2];

    group5 *= 151;
    group5 += (*input)[3];

    *((uint64_t *)((*output) + 18)) |= (group5 << 1);
    *input += 4;
    uint64_t group6 = 0;
    group6 *= 151;
    group6 += (*input)[0];

    group6 *= 151;
    group6 += (*input)[1];

    group6 *= 151;
    group6 += (*input)[2];

    group6 *= 151;
    group6 += (*input)[3];

    *((uint64_t *)((*output) + 21)) |= (group6 << 6);
    *input += 4;
    uint64_t group7 = 0;
    group7 *= 151;
    group7 += (*input)[0];

    group7 *= 151;
    group7 += (*input)[1];

    group7 *= 151;
    group7 += (*input)[2];

    group7 *= 151;
    group7 += (*input)[3];

    *((uint64_t *)((*output) + 25)) |= (group7 << 3);
    *input += 4;
    *output += 29;
}

// Pack 8 groups using 29 bytes (32 values total)
void Ultrapack_Compress152(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 152;
    group0 += (*input)[0];

    group0 *= 152;
    group0 += (*input)[1];

    group0 *= 152;
    group0 += (*input)[2];

    group0 *= 152;
    group0 += (*input)[3];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 4;
    uint64_t group1 = 0;
    group1 *= 152;
    group1 += (*input)[0];

    group1 *= 152;
    group1 += (*input)[1];

    group1 *= 152;
    group1 += (*input)[2];

    group1 *= 152;
    group1 += (*input)[3];

    *((uint64_t *)((*output) + 3)) |= (group1 << 5);
    *input += 4;
    uint64_t group2 = 0;
    group2 *= 152;
    group2 += (*input)[0];

    group2 *= 152;
    group2 += (*input)[1];

    group2 *= 152;
    group2 += (*input)[2];

    group2 *= 152;
    group2 += (*input)[3];

    *((uint64_t *)((*output) + 7)) |= (group2 << 2);
    *input += 4;
    uint64_t group3 = 0;
    group3 *= 152;
    group3 += (*input)[0];

    group3 *= 152;
    group3 += (*input)[1];

    group3 *= 152;
    group3 += (*input)[2];

    group3 *= 152;
    group3 += (*input)[3];

    *((uint64_t *)((*output) + 10)) |= (group3 << 7);
    *input += 4;
    uint64_t group4 = 0;
    group4 *= 152;
    group4 += (*input)[0];

    group4 *= 152;
    group4 += (*input)[1];

    group4 *= 152;
    group4 += (*input)[2];

    group4 *= 152;
    group4 += (*input)[3];

    *((uint64_t *)((*output) + 14)) |= (group4 << 4);
    *input += 4;
    uint64_t group5 = 0;
    group5 *= 152;
    group5 += (*input)[0];

    group5 *= 152;
    group5 += (*input)[1];

    group5 *= 152;
    group5 += (*input)[2];

    group5 *= 152;
    group5 += (*input)[3];

    *((uint64_t *)((*output) + 18)) |= (group5 << 1);
    *input += 4;
    uint64_t group6 = 0;
    group6 *= 152;
    group6 += (*input)[0];

    group6 *= 152;
    group6 += (*input)[1];

    group6 *= 152;
    group6 += (*input)[2];

    group6 *= 152;
    group6 += (*input)[3];

    *((uint64_t *)((*output) + 21)) |= (group6 << 6);
    *input += 4;
    uint64_t group7 = 0;
    group7 *= 152;
    group7 += (*input)[0];

    group7 *= 152;
    group7 += (*input)[1];

    group7 *= 152;
    group7 += (*input)[2];

    group7 *= 152;
    group7 += (*input)[3];

    *((uint64_t *)((*output) + 25)) |= (group7 << 3);
    *input += 4;
    *output += 29;
}

// Pack 4 groups using 11 bytes (12 values total)
void Ultrapack_Compress153(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 153;
    group0 += (*input)[0];

    group0 *= 153;
    group0 += (*input)[1];

    group0 *= 153;
    group0 += (*input)[2];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 3;
    uint64_t group1 = 0;
    group1 *= 153;
    group1 += (*input)[0];

    group1 *= 153;
    group1 += (*input)[1];

    group1 *= 153;
    group1 += (*input)[2];

    *((uint64_t *)((*output) + 2)) |= (group1 << 6);
    *input += 3;
    uint64_t group2 = 0;
    group2 *= 153;
    group2 += (*input)[0];

    group2 *= 153;
    group2 += (*input)[1];

    group2 *= 153;
    group2 += (*input)[2];

    *((uint64_t *)((*output) + 5)) |= (group2 << 4);
    *input += 3;
    uint64_t group3 = 0;
    group3 *= 153;
    group3 += (*input)[0];

    group3 *= 153;
    group3 += (*input)[1];

    group3 *= 153;
    group3 += (*input)[2];

    *((uint64_t *)((*output) + 8)) |= (group3 << 2);
    *input += 3;
    *output += 11;
}

// Pack 4 groups using 11 bytes (12 values total)
void Ultrapack_Compress154(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 154;
    group0 += (*input)[0];

    group0 *= 154;
    group0 += (*input)[1];

    group0 *= 154;
    group0 += (*input)[2];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 3;
    uint64_t group1 = 0;
    group1 *= 154;
    group1 += (*input)[0];

    group1 *= 154;
    group1 += (*input)[1];

    group1 *= 154;
    group1 += (*input)[2];

    *((uint64_t *)((*output) + 2)) |= (group1 << 6);
    *input += 3;
    uint64_t group2 = 0;
    group2 *= 154;
    group2 += (*input)[0];

    group2 *= 154;
    group2 += (*input)[1];

    group2 *= 154;
    group2 += (*input)[2];

    *((uint64_t *)((*output) + 5)) |= (group2 << 4);
    *input += 3;
    uint64_t group3 = 0;
    group3 *= 154;
    group3 += (*input)[0];

    group3 *= 154;
    group3 += (*input)[1];

    group3 *= 154;
    group3 += (*input)[2];

    *((uint64_t *)((*output) + 8)) |= (group3 << 2);
    *input += 3;
    *output += 11;
}

// Pack 4 groups using 11 bytes (12 values total)
void Ultrapack_Compress155(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 155;
    group0 += (*input)[0];

    group0 *= 155;
    group0 += (*input)[1];

    group0 *= 155;
    group0 += (*input)[2];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 3;
    uint64_t group1 = 0;
    group1 *= 155;
    group1 += (*input)[0];

    group1 *= 155;
    group1 += (*input)[1];

    group1 *= 155;
    group1 += (*input)[2];

    *((uint64_t *)((*output) + 2)) |= (group1 << 6);
    *input += 3;
    uint64_t group2 = 0;
    group2 *= 155;
    group2 += (*input)[0];

    group2 *= 155;
    group2 += (*input)[1];

    group2 *= 155;
    group2 += (*input)[2];

    *((uint64_t *)((*output) + 5)) |= (group2 << 4);
    *input += 3;
    uint64_t group3 = 0;
    group3 *= 155;
    group3 += (*input)[0];

    group3 *= 155;
    group3 += (*input)[1];

    group3 *= 155;
    group3 += (*input)[2];

    *((uint64_t *)((*output) + 8)) |= (group3 << 2);
    *input += 3;
    *output += 11;
}

// Pack 4 groups using 11 bytes (12 values total)
void Ultrapack_Compress156(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 156;
    group0 += (*input)[0];

    group0 *= 156;
    group0 += (*input)[1];

    group0 *= 156;
    group0 += (*input)[2];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 3;
    uint64_t group1 = 0;
    group1 *= 156;
    group1 += (*input)[0];

    group1 *= 156;
    group1 += (*input)[1];

    group1 *= 156;
    group1 += (*input)[2];

    *((uint64_t *)((*output) + 2)) |= (group1 << 6);
    *input += 3;
    uint64_t group2 = 0;
    group2 *= 156;
    group2 += (*input)[0];

    group2 *= 156;
    group2 += (*input)[1];

    group2 *= 156;
    group2 += (*input)[2];

    *((uint64_t *)((*output) + 5)) |= (group2 << 4);
    *input += 3;
    uint64_t group3 = 0;
    group3 *= 156;
    group3 += (*input)[0];

    group3 *= 156;
    group3 += (*input)[1];

    group3 *= 156;
    group3 += (*input)[2];

    *((uint64_t *)((*output) + 8)) |= (group3 << 2);
    *input += 3;
    *output += 11;
}

// Pack 4 groups using 11 bytes (12 values total)
void Ultrapack_Compress157(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 157;
    group0 += (*input)[0];

    group0 *= 157;
    group0 += (*input)[1];

    group0 *= 157;
    group0 += (*input)[2];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 3;
    uint64_t group1 = 0;
    group1 *= 157;
    group1 += (*input)[0];

    group1 *= 157;
    group1 += (*input)[1];

    group1 *= 157;
    group1 += (*input)[2];

    *((uint64_t *)((*output) + 2)) |= (group1 << 6);
    *input += 3;
    uint64_t group2 = 0;
    group2 *= 157;
    group2 += (*input)[0];

    group2 *= 157;
    group2 += (*input)[1];

    group2 *= 157;
    group2 += (*input)[2];

    *((uint64_t *)((*output) + 5)) |= (group2 << 4);
    *input += 3;
    uint64_t group3 = 0;
    group3 *= 157;
    group3 += (*input)[0];

    group3 *= 157;
    group3 += (*input)[1];

    group3 *= 157;
    group3 += (*input)[2];

    *((uint64_t *)((*output) + 8)) |= (group3 << 2);
    *input += 3;
    *output += 11;
}

// Pack 4 groups using 11 bytes (12 values total)
void Ultrapack_Compress158(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 158;
    group0 += (*input)[0];

    group0 *= 158;
    group0 += (*input)[1];

    group0 *= 158;
    group0 += (*input)[2];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 3;
    uint64_t group1 = 0;
    group1 *= 158;
    group1 += (*input)[0];

    group1 *= 158;
    group1 += (*input)[1];

    group1 *= 158;
    group1 += (*input)[2];

    *((uint64_t *)((*output) + 2)) |= (group1 << 6);
    *input += 3;
    uint64_t group2 = 0;
    group2 *= 158;
    group2 += (*input)[0];

    group2 *= 158;
    group2 += (*input)[1];

    group2 *= 158;
    group2 += (*input)[2];

    *((uint64_t *)((*output) + 5)) |= (group2 << 4);
    *input += 3;
    uint64_t group3 = 0;
    group3 *= 158;
    group3 += (*input)[0];

    group3 *= 158;
    group3 += (*input)[1];

    group3 *= 158;
    group3 += (*input)[2];

    *((uint64_t *)((*output) + 8)) |= (group3 << 2);
    *input += 3;
    *output += 11;
}

// Pack 4 groups using 11 bytes (12 values total)
void Ultrapack_Compress159(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 159;
    group0 += (*input)[0];

    group0 *= 159;
    group0 += (*input)[1];

    group0 *= 159;
    group0 += (*input)[2];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 3;
    uint64_t group1 = 0;
    group1 *= 159;
    group1 += (*input)[0];

    group1 *= 159;
    group1 += (*input)[1];

    group1 *= 159;
    group1 += (*input)[2];

    *((uint64_t *)((*output) + 2)) |= (group1 << 6);
    *input += 3;
    uint64_t group2 = 0;
    group2 *= 159;
    group2 += (*input)[0];

    group2 *= 159;
    group2 += (*input)[1];

    group2 *= 159;
    group2 += (*input)[2];

    *((uint64_t *)((*output) + 5)) |= (group2 << 4);
    *input += 3;
    uint64_t group3 = 0;
    group3 *= 159;
    group3 += (*input)[0];

    group3 *= 159;
    group3 += (*input)[1];

    group3 *= 159;
    group3 += (*input)[2];

    *((uint64_t *)((*output) + 8)) |= (group3 << 2);
    *input += 3;
    *output += 11;
}

// Pack 4 groups using 11 bytes (12 values total)
void Ultrapack_Compress160(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 160;
    group0 += (*input)[0];

    group0 *= 160;
    group0 += (*input)[1];

    group0 *= 160;
    group0 += (*input)[2];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 3;
    uint64_t group1 = 0;
    group1 *= 160;
    group1 += (*input)[0];

    group1 *= 160;
    group1 += (*input)[1];

    group1 *= 160;
    group1 += (*input)[2];

    *((uint64_t *)((*output) + 2)) |= (group1 << 6);
    *input += 3;
    uint64_t group2 = 0;
    group2 *= 160;
    group2 += (*input)[0];

    group2 *= 160;
    group2 += (*input)[1];

    group2 *= 160;
    group2 += (*input)[2];

    *((uint64_t *)((*output) + 5)) |= (group2 << 4);
    *input += 3;
    uint64_t group3 = 0;
    group3 *= 160;
    group3 += (*input)[0];

    group3 *= 160;
    group3 += (*input)[1];

    group3 *= 160;
    group3 += (*input)[2];

    *((uint64_t *)((*output) + 8)) |= (group3 << 2);
    *input += 3;
    *output += 11;
}

// Pack 4 groups using 11 bytes (12 values total)
void Ultrapack_Compress161(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 161;
    group0 += (*input)[0];

    group0 *= 161;
    group0 += (*input)[1];

    group0 *= 161;
    group0 += (*input)[2];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 3;
    uint64_t group1 = 0;
    group1 *= 161;
    group1 += (*input)[0];

    group1 *= 161;
    group1 += (*input)[1];

    group1 *= 161;
    group1 += (*input)[2];

    *((uint64_t *)((*output) + 2)) |= (group1 << 6);
    *input += 3;
    uint64_t group2 = 0;
    group2 *= 161;
    group2 += (*input)[0];

    group2 *= 161;
    group2 += (*input)[1];

    group2 *= 161;
    group2 += (*input)[2];

    *((uint64_t *)((*output) + 5)) |= (group2 << 4);
    *input += 3;
    uint64_t group3 = 0;
    group3 *= 161;
    group3 += (*input)[0];

    group3 *= 161;
    group3 += (*input)[1];

    group3 *= 161;
    group3 += (*input)[2];

    *((uint64_t *)((*output) + 8)) |= (group3 << 2);
    *input += 3;
    *output += 11;
}

// Pack 8 groups using 37 bytes (40 values total)
void Ultrapack_Compress162(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 162;
    group0 += (*input)[0];

    group0 *= 162;
    group0 += (*input)[1];

    group0 *= 162;
    group0 += (*input)[2];

    group0 *= 162;
    group0 += (*input)[3];

    group0 *= 162;
    group0 += (*input)[4];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 5;
    uint64_t group1 = 0;
    group1 *= 162;
    group1 += (*input)[0];

    group1 *= 162;
    group1 += (*input)[1];

    group1 *= 162;
    group1 += (*input)[2];

    group1 *= 162;
    group1 += (*input)[3];

    group1 *= 162;
    group1 += (*input)[4];

    *((uint64_t *)((*output) + 4)) |= (group1 << 5);
    *input += 5;
    uint64_t group2 = 0;
    group2 *= 162;
    group2 += (*input)[0];

    group2 *= 162;
    group2 += (*input)[1];

    group2 *= 162;
    group2 += (*input)[2];

    group2 *= 162;
    group2 += (*input)[3];

    group2 *= 162;
    group2 += (*input)[4];

    *((uint64_t *)((*output) + 9)) |= (group2 << 2);
    *input += 5;
    uint64_t group3 = 0;
    group3 *= 162;
    group3 += (*input)[0];

    group3 *= 162;
    group3 += (*input)[1];

    group3 *= 162;
    group3 += (*input)[2];

    group3 *= 162;
    group3 += (*input)[3];

    group3 *= 162;
    group3 += (*input)[4];

    *((uint64_t *)((*output) + 13)) |= (group3 << 7);
    *input += 5;
    uint64_t group4 = 0;
    group4 *= 162;
    group4 += (*input)[0];

    group4 *= 162;
    group4 += (*input)[1];

    group4 *= 162;
    group4 += (*input)[2];

    group4 *= 162;
    group4 += (*input)[3];

    group4 *= 162;
    group4 += (*input)[4];

    *((uint64_t *)((*output) + 18)) |= (group4 << 4);
    *input += 5;
    uint64_t group5 = 0;
    group5 *= 162;
    group5 += (*input)[0];

    group5 *= 162;
    group5 += (*input)[1];

    group5 *= 162;
    group5 += (*input)[2];

    group5 *= 162;
    group5 += (*input)[3];

    group5 *= 162;
    group5 += (*input)[4];

    *((uint64_t *)((*output) + 23)) |= (group5 << 1);
    *input += 5;
    uint64_t group6 = 0;
    group6 *= 162;
    group6 += (*input)[0];

    group6 *= 162;
    group6 += (*input)[1];

    group6 *= 162;
    group6 += (*input)[2];

    group6 *= 162;
    group6 += (*input)[3];

    group6 *= 162;
    group6 += (*input)[4];

    *((uint64_t *)((*output) + 27)) |= (group6 << 6);
    *input += 5;
    uint64_t group7 = 0;
    group7 *= 162;
    group7 += (*input)[0];

    group7 *= 162;
    group7 += (*input)[1];

    group7 *= 162;
    group7 += (*input)[2];

    group7 *= 162;
    group7 += (*input)[3];

    group7 *= 162;
    group7 += (*input)[4];

    *((uint64_t *)((*output) + 32)) |= (group7 << 3);
    *input += 5;
    *output += 37;
}

// Pack 8 groups using 37 bytes (40 values total)
void Ultrapack_Compress163(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 163;
    group0 += (*input)[0];

    group0 *= 163;
    group0 += (*input)[1];

    group0 *= 163;
    group0 += (*input)[2];

    group0 *= 163;
    group0 += (*input)[3];

    group0 *= 163;
    group0 += (*input)[4];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 5;
    uint64_t group1 = 0;
    group1 *= 163;
    group1 += (*input)[0];

    group1 *= 163;
    group1 += (*input)[1];

    group1 *= 163;
    group1 += (*input)[2];

    group1 *= 163;
    group1 += (*input)[3];

    group1 *= 163;
    group1 += (*input)[4];

    *((uint64_t *)((*output) + 4)) |= (group1 << 5);
    *input += 5;
    uint64_t group2 = 0;
    group2 *= 163;
    group2 += (*input)[0];

    group2 *= 163;
    group2 += (*input)[1];

    group2 *= 163;
    group2 += (*input)[2];

    group2 *= 163;
    group2 += (*input)[3];

    group2 *= 163;
    group2 += (*input)[4];

    *((uint64_t *)((*output) + 9)) |= (group2 << 2);
    *input += 5;
    uint64_t group3 = 0;
    group3 *= 163;
    group3 += (*input)[0];

    group3 *= 163;
    group3 += (*input)[1];

    group3 *= 163;
    group3 += (*input)[2];

    group3 *= 163;
    group3 += (*input)[3];

    group3 *= 163;
    group3 += (*input)[4];

    *((uint64_t *)((*output) + 13)) |= (group3 << 7);
    *input += 5;
    uint64_t group4 = 0;
    group4 *= 163;
    group4 += (*input)[0];

    group4 *= 163;
    group4 += (*input)[1];

    group4 *= 163;
    group4 += (*input)[2];

    group4 *= 163;
    group4 += (*input)[3];

    group4 *= 163;
    group4 += (*input)[4];

    *((uint64_t *)((*output) + 18)) |= (group4 << 4);
    *input += 5;
    uint64_t group5 = 0;
    group5 *= 163;
    group5 += (*input)[0];

    group5 *= 163;
    group5 += (*input)[1];

    group5 *= 163;
    group5 += (*input)[2];

    group5 *= 163;
    group5 += (*input)[3];

    group5 *= 163;
    group5 += (*input)[4];

    *((uint64_t *)((*output) + 23)) |= (group5 << 1);
    *input += 5;
    uint64_t group6 = 0;
    group6 *= 163;
    group6 += (*input)[0];

    group6 *= 163;
    group6 += (*input)[1];

    group6 *= 163;
    group6 += (*input)[2];

    group6 *= 163;
    group6 += (*input)[3];

    group6 *= 163;
    group6 += (*input)[4];

    *((uint64_t *)((*output) + 27)) |= (group6 << 6);
    *input += 5;
    uint64_t group7 = 0;
    group7 *= 163;
    group7 += (*input)[0];

    group7 *= 163;
    group7 += (*input)[1];

    group7 *= 163;
    group7 += (*input)[2];

    group7 *= 163;
    group7 += (*input)[3];

    group7 *= 163;
    group7 += (*input)[4];

    *((uint64_t *)((*output) + 32)) |= (group7 << 3);
    *input += 5;
    *output += 37;
}

// Pack 8 groups using 37 bytes (40 values total)
void Ultrapack_Compress164(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 164;
    group0 += (*input)[0];

    group0 *= 164;
    group0 += (*input)[1];

    group0 *= 164;
    group0 += (*input)[2];

    group0 *= 164;
    group0 += (*input)[3];

    group0 *= 164;
    group0 += (*input)[4];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 5;
    uint64_t group1 = 0;
    group1 *= 164;
    group1 += (*input)[0];

    group1 *= 164;
    group1 += (*input)[1];

    group1 *= 164;
    group1 += (*input)[2];

    group1 *= 164;
    group1 += (*input)[3];

    group1 *= 164;
    group1 += (*input)[4];

    *((uint64_t *)((*output) + 4)) |= (group1 << 5);
    *input += 5;
    uint64_t group2 = 0;
    group2 *= 164;
    group2 += (*input)[0];

    group2 *= 164;
    group2 += (*input)[1];

    group2 *= 164;
    group2 += (*input)[2];

    group2 *= 164;
    group2 += (*input)[3];

    group2 *= 164;
    group2 += (*input)[4];

    *((uint64_t *)((*output) + 9)) |= (group2 << 2);
    *input += 5;
    uint64_t group3 = 0;
    group3 *= 164;
    group3 += (*input)[0];

    group3 *= 164;
    group3 += (*input)[1];

    group3 *= 164;
    group3 += (*input)[2];

    group3 *= 164;
    group3 += (*input)[3];

    group3 *= 164;
    group3 += (*input)[4];

    *((uint64_t *)((*output) + 13)) |= (group3 << 7);
    *input += 5;
    uint64_t group4 = 0;
    group4 *= 164;
    group4 += (*input)[0];

    group4 *= 164;
    group4 += (*input)[1];

    group4 *= 164;
    group4 += (*input)[2];

    group4 *= 164;
    group4 += (*input)[3];

    group4 *= 164;
    group4 += (*input)[4];

    *((uint64_t *)((*output) + 18)) |= (group4 << 4);
    *input += 5;
    uint64_t group5 = 0;
    group5 *= 164;
    group5 += (*input)[0];

    group5 *= 164;
    group5 += (*input)[1];

    group5 *= 164;
    group5 += (*input)[2];

    group5 *= 164;
    group5 += (*input)[3];

    group5 *= 164;
    group5 += (*input)[4];

    *((uint64_t *)((*output) + 23)) |= (group5 << 1);
    *input += 5;
    uint64_t group6 = 0;
    group6 *= 164;
    group6 += (*input)[0];

    group6 *= 164;
    group6 += (*input)[1];

    group6 *= 164;
    group6 += (*input)[2];

    group6 *= 164;
    group6 += (*input)[3];

    group6 *= 164;
    group6 += (*input)[4];

    *((uint64_t *)((*output) + 27)) |= (group6 << 6);
    *input += 5;
    uint64_t group7 = 0;
    group7 *= 164;
    group7 += (*input)[0];

    group7 *= 164;
    group7 += (*input)[1];

    group7 *= 164;
    group7 += (*input)[2];

    group7 *= 164;
    group7 += (*input)[3];

    group7 *= 164;
    group7 += (*input)[4];

    *((uint64_t *)((*output) + 32)) |= (group7 << 3);
    *input += 5;
    *output += 37;
}

// Pack 8 groups using 37 bytes (40 values total)
void Ultrapack_Compress165(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 165;
    group0 += (*input)[0];

    group0 *= 165;
    group0 += (*input)[1];

    group0 *= 165;
    group0 += (*input)[2];

    group0 *= 165;
    group0 += (*input)[3];

    group0 *= 165;
    group0 += (*input)[4];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 5;
    uint64_t group1 = 0;
    group1 *= 165;
    group1 += (*input)[0];

    group1 *= 165;
    group1 += (*input)[1];

    group1 *= 165;
    group1 += (*input)[2];

    group1 *= 165;
    group1 += (*input)[3];

    group1 *= 165;
    group1 += (*input)[4];

    *((uint64_t *)((*output) + 4)) |= (group1 << 5);
    *input += 5;
    uint64_t group2 = 0;
    group2 *= 165;
    group2 += (*input)[0];

    group2 *= 165;
    group2 += (*input)[1];

    group2 *= 165;
    group2 += (*input)[2];

    group2 *= 165;
    group2 += (*input)[3];

    group2 *= 165;
    group2 += (*input)[4];

    *((uint64_t *)((*output) + 9)) |= (group2 << 2);
    *input += 5;
    uint64_t group3 = 0;
    group3 *= 165;
    group3 += (*input)[0];

    group3 *= 165;
    group3 += (*input)[1];

    group3 *= 165;
    group3 += (*input)[2];

    group3 *= 165;
    group3 += (*input)[3];

    group3 *= 165;
    group3 += (*input)[4];

    *((uint64_t *)((*output) + 13)) |= (group3 << 7);
    *input += 5;
    uint64_t group4 = 0;
    group4 *= 165;
    group4 += (*input)[0];

    group4 *= 165;
    group4 += (*input)[1];

    group4 *= 165;
    group4 += (*input)[2];

    group4 *= 165;
    group4 += (*input)[3];

    group4 *= 165;
    group4 += (*input)[4];

    *((uint64_t *)((*output) + 18)) |= (group4 << 4);
    *input += 5;
    uint64_t group5 = 0;
    group5 *= 165;
    group5 += (*input)[0];

    group5 *= 165;
    group5 += (*input)[1];

    group5 *= 165;
    group5 += (*input)[2];

    group5 *= 165;
    group5 += (*input)[3];

    group5 *= 165;
    group5 += (*input)[4];

    *((uint64_t *)((*output) + 23)) |= (group5 << 1);
    *input += 5;
    uint64_t group6 = 0;
    group6 *= 165;
    group6 += (*input)[0];

    group6 *= 165;
    group6 += (*input)[1];

    group6 *= 165;
    group6 += (*input)[2];

    group6 *= 165;
    group6 += (*input)[3];

    group6 *= 165;
    group6 += (*input)[4];

    *((uint64_t *)((*output) + 27)) |= (group6 << 6);
    *input += 5;
    uint64_t group7 = 0;
    group7 *= 165;
    group7 += (*input)[0];

    group7 *= 165;
    group7 += (*input)[1];

    group7 *= 165;
    group7 += (*input)[2];

    group7 *= 165;
    group7 += (*input)[3];

    group7 *= 165;
    group7 += (*input)[4];

    *((uint64_t *)((*output) + 32)) |= (group7 << 3);
    *input += 5;
    *output += 37;
}

// Pack 8 groups using 37 bytes (40 values total)
void Ultrapack_Compress166(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 166;
    group0 += (*input)[0];

    group0 *= 166;
    group0 += (*input)[1];

    group0 *= 166;
    group0 += (*input)[2];

    group0 *= 166;
    group0 += (*input)[3];

    group0 *= 166;
    group0 += (*input)[4];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 5;
    uint64_t group1 = 0;
    group1 *= 166;
    group1 += (*input)[0];

    group1 *= 166;
    group1 += (*input)[1];

    group1 *= 166;
    group1 += (*input)[2];

    group1 *= 166;
    group1 += (*input)[3];

    group1 *= 166;
    group1 += (*input)[4];

    *((uint64_t *)((*output) + 4)) |= (group1 << 5);
    *input += 5;
    uint64_t group2 = 0;
    group2 *= 166;
    group2 += (*input)[0];

    group2 *= 166;
    group2 += (*input)[1];

    group2 *= 166;
    group2 += (*input)[2];

    group2 *= 166;
    group2 += (*input)[3];

    group2 *= 166;
    group2 += (*input)[4];

    *((uint64_t *)((*output) + 9)) |= (group2 << 2);
    *input += 5;
    uint64_t group3 = 0;
    group3 *= 166;
    group3 += (*input)[0];

    group3 *= 166;
    group3 += (*input)[1];

    group3 *= 166;
    group3 += (*input)[2];

    group3 *= 166;
    group3 += (*input)[3];

    group3 *= 166;
    group3 += (*input)[4];

    *((uint64_t *)((*output) + 13)) |= (group3 << 7);
    *input += 5;
    uint64_t group4 = 0;
    group4 *= 166;
    group4 += (*input)[0];

    group4 *= 166;
    group4 += (*input)[1];

    group4 *= 166;
    group4 += (*input)[2];

    group4 *= 166;
    group4 += (*input)[3];

    group4 *= 166;
    group4 += (*input)[4];

    *((uint64_t *)((*output) + 18)) |= (group4 << 4);
    *input += 5;
    uint64_t group5 = 0;
    group5 *= 166;
    group5 += (*input)[0];

    group5 *= 166;
    group5 += (*input)[1];

    group5 *= 166;
    group5 += (*input)[2];

    group5 *= 166;
    group5 += (*input)[3];

    group5 *= 166;
    group5 += (*input)[4];

    *((uint64_t *)((*output) + 23)) |= (group5 << 1);
    *input += 5;
    uint64_t group6 = 0;
    group6 *= 166;
    group6 += (*input)[0];

    group6 *= 166;
    group6 += (*input)[1];

    group6 *= 166;
    group6 += (*input)[2];

    group6 *= 166;
    group6 += (*input)[3];

    group6 *= 166;
    group6 += (*input)[4];

    *((uint64_t *)((*output) + 27)) |= (group6 << 6);
    *input += 5;
    uint64_t group7 = 0;
    group7 *= 166;
    group7 += (*input)[0];

    group7 *= 166;
    group7 += (*input)[1];

    group7 *= 166;
    group7 += (*input)[2];

    group7 *= 166;
    group7 += (*input)[3];

    group7 *= 166;
    group7 += (*input)[4];

    *((uint64_t *)((*output) + 32)) |= (group7 << 3);
    *input += 5;
    *output += 37;
}

// Pack 8 groups using 37 bytes (40 values total)
void Ultrapack_Compress167(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 167;
    group0 += (*input)[0];

    group0 *= 167;
    group0 += (*input)[1];

    group0 *= 167;
    group0 += (*input)[2];

    group0 *= 167;
    group0 += (*input)[3];

    group0 *= 167;
    group0 += (*input)[4];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 5;
    uint64_t group1 = 0;
    group1 *= 167;
    group1 += (*input)[0];

    group1 *= 167;
    group1 += (*input)[1];

    group1 *= 167;
    group1 += (*input)[2];

    group1 *= 167;
    group1 += (*input)[3];

    group1 *= 167;
    group1 += (*input)[4];

    *((uint64_t *)((*output) + 4)) |= (group1 << 5);
    *input += 5;
    uint64_t group2 = 0;
    group2 *= 167;
    group2 += (*input)[0];

    group2 *= 167;
    group2 += (*input)[1];

    group2 *= 167;
    group2 += (*input)[2];

    group2 *= 167;
    group2 += (*input)[3];

    group2 *= 167;
    group2 += (*input)[4];

    *((uint64_t *)((*output) + 9)) |= (group2 << 2);
    *input += 5;
    uint64_t group3 = 0;
    group3 *= 167;
    group3 += (*input)[0];

    group3 *= 167;
    group3 += (*input)[1];

    group3 *= 167;
    group3 += (*input)[2];

    group3 *= 167;
    group3 += (*input)[3];

    group3 *= 167;
    group3 += (*input)[4];

    *((uint64_t *)((*output) + 13)) |= (group3 << 7);
    *input += 5;
    uint64_t group4 = 0;
    group4 *= 167;
    group4 += (*input)[0];

    group4 *= 167;
    group4 += (*input)[1];

    group4 *= 167;
    group4 += (*input)[2];

    group4 *= 167;
    group4 += (*input)[3];

    group4 *= 167;
    group4 += (*input)[4];

    *((uint64_t *)((*output) + 18)) |= (group4 << 4);
    *input += 5;
    uint64_t group5 = 0;
    group5 *= 167;
    group5 += (*input)[0];

    group5 *= 167;
    group5 += (*input)[1];

    group5 *= 167;
    group5 += (*input)[2];

    group5 *= 167;
    group5 += (*input)[3];

    group5 *= 167;
    group5 += (*input)[4];

    *((uint64_t *)((*output) + 23)) |= (group5 << 1);
    *input += 5;
    uint64_t group6 = 0;
    group6 *= 167;
    group6 += (*input)[0];

    group6 *= 167;
    group6 += (*input)[1];

    group6 *= 167;
    group6 += (*input)[2];

    group6 *= 167;
    group6 += (*input)[3];

    group6 *= 167;
    group6 += (*input)[4];

    *((uint64_t *)((*output) + 27)) |= (group6 << 6);
    *input += 5;
    uint64_t group7 = 0;
    group7 *= 167;
    group7 += (*input)[0];

    group7 *= 167;
    group7 += (*input)[1];

    group7 *= 167;
    group7 += (*input)[2];

    group7 *= 167;
    group7 += (*input)[3];

    group7 *= 167;
    group7 += (*input)[4];

    *((uint64_t *)((*output) + 32)) |= (group7 << 3);
    *input += 5;
    *output += 37;
}

// Pack 8 groups using 37 bytes (40 values total)
void Ultrapack_Compress168(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 168;
    group0 += (*input)[0];

    group0 *= 168;
    group0 += (*input)[1];

    group0 *= 168;
    group0 += (*input)[2];

    group0 *= 168;
    group0 += (*input)[3];

    group0 *= 168;
    group0 += (*input)[4];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 5;
    uint64_t group1 = 0;
    group1 *= 168;
    group1 += (*input)[0];

    group1 *= 168;
    group1 += (*input)[1];

    group1 *= 168;
    group1 += (*input)[2];

    group1 *= 168;
    group1 += (*input)[3];

    group1 *= 168;
    group1 += (*input)[4];

    *((uint64_t *)((*output) + 4)) |= (group1 << 5);
    *input += 5;
    uint64_t group2 = 0;
    group2 *= 168;
    group2 += (*input)[0];

    group2 *= 168;
    group2 += (*input)[1];

    group2 *= 168;
    group2 += (*input)[2];

    group2 *= 168;
    group2 += (*input)[3];

    group2 *= 168;
    group2 += (*input)[4];

    *((uint64_t *)((*output) + 9)) |= (group2 << 2);
    *input += 5;
    uint64_t group3 = 0;
    group3 *= 168;
    group3 += (*input)[0];

    group3 *= 168;
    group3 += (*input)[1];

    group3 *= 168;
    group3 += (*input)[2];

    group3 *= 168;
    group3 += (*input)[3];

    group3 *= 168;
    group3 += (*input)[4];

    *((uint64_t *)((*output) + 13)) |= (group3 << 7);
    *input += 5;
    uint64_t group4 = 0;
    group4 *= 168;
    group4 += (*input)[0];

    group4 *= 168;
    group4 += (*input)[1];

    group4 *= 168;
    group4 += (*input)[2];

    group4 *= 168;
    group4 += (*input)[3];

    group4 *= 168;
    group4 += (*input)[4];

    *((uint64_t *)((*output) + 18)) |= (group4 << 4);
    *input += 5;
    uint64_t group5 = 0;
    group5 *= 168;
    group5 += (*input)[0];

    group5 *= 168;
    group5 += (*input)[1];

    group5 *= 168;
    group5 += (*input)[2];

    group5 *= 168;
    group5 += (*input)[3];

    group5 *= 168;
    group5 += (*input)[4];

    *((uint64_t *)((*output) + 23)) |= (group5 << 1);
    *input += 5;
    uint64_t group6 = 0;
    group6 *= 168;
    group6 += (*input)[0];

    group6 *= 168;
    group6 += (*input)[1];

    group6 *= 168;
    group6 += (*input)[2];

    group6 *= 168;
    group6 += (*input)[3];

    group6 *= 168;
    group6 += (*input)[4];

    *((uint64_t *)((*output) + 27)) |= (group6 << 6);
    *input += 5;
    uint64_t group7 = 0;
    group7 *= 168;
    group7 += (*input)[0];

    group7 *= 168;
    group7 += (*input)[1];

    group7 *= 168;
    group7 += (*input)[2];

    group7 *= 168;
    group7 += (*input)[3];

    group7 *= 168;
    group7 += (*input)[4];

    *((uint64_t *)((*output) + 32)) |= (group7 << 3);
    *input += 5;
    *output += 37;
}

// Pack 2 groups using 13 bytes (14 values total)
void Ultrapack_Compress169(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 169;
    group0 += (*input)[0];

    group0 *= 169;
    group0 += (*input)[1];

    group0 *= 169;
    group0 += (*input)[2];

    group0 *= 169;
    group0 += (*input)[3];

    group0 *= 169;
    group0 += (*input)[4];

    group0 *= 169;
    group0 += (*input)[5];

    group0 *= 169;
    group0 += (*input)[6];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 7;
    uint64_t group1 = 0;
    group1 *= 169;
    group1 += (*input)[0];

    group1 *= 169;
    group1 += (*input)[1];

    group1 *= 169;
    group1 += (*input)[2];

    group1 *= 169;
    group1 += (*input)[3];

    group1 *= 169;
    group1 += (*input)[4];

    group1 *= 169;
    group1 += (*input)[5];

    group1 *= 169;
    group1 += (*input)[6];

    *((uint64_t *)((*output) + 6)) |= (group1 << 4);
    *input += 7;
    *output += 13;
}

// Pack 2 groups using 13 bytes (14 values total)
void Ultrapack_Compress170(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 170;
    group0 += (*input)[0];

    group0 *= 170;
    group0 += (*input)[1];

    group0 *= 170;
    group0 += (*input)[2];

    group0 *= 170;
    group0 += (*input)[3];

    group0 *= 170;
    group0 += (*input)[4];

    group0 *= 170;
    group0 += (*input)[5];

    group0 *= 170;
    group0 += (*input)[6];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 7;
    uint64_t group1 = 0;
    group1 *= 170;
    group1 += (*input)[0];

    group1 *= 170;
    group1 += (*input)[1];

    group1 *= 170;
    group1 += (*input)[2];

    group1 *= 170;
    group1 += (*input)[3];

    group1 *= 170;
    group1 += (*input)[4];

    group1 *= 170;
    group1 += (*input)[5];

    group1 *= 170;
    group1 += (*input)[6];

    *((uint64_t *)((*output) + 6)) |= (group1 << 4);
    *input += 7;
    *output += 13;
}

// Pack 2 groups using 13 bytes (14 values total)
void Ultrapack_Compress171(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 171;
    group0 += (*input)[0];

    group0 *= 171;
    group0 += (*input)[1];

    group0 *= 171;
    group0 += (*input)[2];

    group0 *= 171;
    group0 += (*input)[3];

    group0 *= 171;
    group0 += (*input)[4];

    group0 *= 171;
    group0 += (*input)[5];

    group0 *= 171;
    group0 += (*input)[6];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 7;
    uint64_t group1 = 0;
    group1 *= 171;
    group1 += (*input)[0];

    group1 *= 171;
    group1 += (*input)[1];

    group1 *= 171;
    group1 += (*input)[2];

    group1 *= 171;
    group1 += (*input)[3];

    group1 *= 171;
    group1 += (*input)[4];

    group1 *= 171;
    group1 += (*input)[5];

    group1 *= 171;
    group1 += (*input)[6];

    *((uint64_t *)((*output) + 6)) |= (group1 << 4);
    *input += 7;
    *output += 13;
}

// Pack 2 groups using 13 bytes (14 values total)
void Ultrapack_Compress172(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 172;
    group0 += (*input)[0];

    group0 *= 172;
    group0 += (*input)[1];

    group0 *= 172;
    group0 += (*input)[2];

    group0 *= 172;
    group0 += (*input)[3];

    group0 *= 172;
    group0 += (*input)[4];

    group0 *= 172;
    group0 += (*input)[5];

    group0 *= 172;
    group0 += (*input)[6];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 7;
    uint64_t group1 = 0;
    group1 *= 172;
    group1 += (*input)[0];

    group1 *= 172;
    group1 += (*input)[1];

    group1 *= 172;
    group1 += (*input)[2];

    group1 *= 172;
    group1 += (*input)[3];

    group1 *= 172;
    group1 += (*input)[4];

    group1 *= 172;
    group1 += (*input)[5];

    group1 *= 172;
    group1 += (*input)[6];

    *((uint64_t *)((*output) + 6)) |= (group1 << 4);
    *input += 7;
    *output += 13;
}

// Pack 8 groups using 15 bytes (16 values total)
void Ultrapack_Compress173(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 173;
    group0 += (*input)[0];

    group0 *= 173;
    group0 += (*input)[1];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 2;
    uint64_t group1 = 0;
    group1 *= 173;
    group1 += (*input)[0];

    group1 *= 173;
    group1 += (*input)[1];

    *((uint64_t *)((*output) + 1)) |= (group1 << 7);
    *input += 2;
    uint64_t group2 = 0;
    group2 *= 173;
    group2 += (*input)[0];

    group2 *= 173;
    group2 += (*input)[1];

    *((uint64_t *)((*output) + 3)) |= (group2 << 6);
    *input += 2;
    uint64_t group3 = 0;
    group3 *= 173;
    group3 += (*input)[0];

    group3 *= 173;
    group3 += (*input)[1];

    *((uint64_t *)((*output) + 5)) |= (group3 << 5);
    *input += 2;
    uint64_t group4 = 0;
    group4 *= 173;
    group4 += (*input)[0];

    group4 *= 173;
    group4 += (*input)[1];

    *((uint64_t *)((*output) + 7)) |= (group4 << 4);
    *input += 2;
    uint64_t group5 = 0;
    group5 *= 173;
    group5 += (*input)[0];

    group5 *= 173;
    group5 += (*input)[1];

    *((uint64_t *)((*output) + 9)) |= (group5 << 3);
    *input += 2;
    uint64_t group6 = 0;
    group6 *= 173;
    group6 += (*input)[0];

    group6 *= 173;
    group6 += (*input)[1];

    *((uint64_t *)((*output) + 11)) |= (group6 << 2);
    *input += 2;
    uint64_t group7 = 0;
    group7 *= 173;
    group7 += (*input)[0];

    group7 *= 173;
    group7 += (*input)[1];

    *((uint64_t *)((*output) + 13)) |= (group7 << 1);
    *input += 2;
    *output += 15;
}

// Pack 8 groups using 15 bytes (16 values total)
void Ultrapack_Compress174(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 174;
    group0 += (*input)[0];

    group0 *= 174;
    group0 += (*input)[1];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 2;
    uint64_t group1 = 0;
    group1 *= 174;
    group1 += (*input)[0];

    group1 *= 174;
    group1 += (*input)[1];

    *((uint64_t *)((*output) + 1)) |= (group1 << 7);
    *input += 2;
    uint64_t group2 = 0;
    group2 *= 174;
    group2 += (*input)[0];

    group2 *= 174;
    group2 += (*input)[1];

    *((uint64_t *)((*output) + 3)) |= (group2 << 6);
    *input += 2;
    uint64_t group3 = 0;
    group3 *= 174;
    group3 += (*input)[0];

    group3 *= 174;
    group3 += (*input)[1];

    *((uint64_t *)((*output) + 5)) |= (group3 << 5);
    *input += 2;
    uint64_t group4 = 0;
    group4 *= 174;
    group4 += (*input)[0];

    group4 *= 174;
    group4 += (*input)[1];

    *((uint64_t *)((*output) + 7)) |= (group4 << 4);
    *input += 2;
    uint64_t group5 = 0;
    group5 *= 174;
    group5 += (*input)[0];

    group5 *= 174;
    group5 += (*input)[1];

    *((uint64_t *)((*output) + 9)) |= (group5 << 3);
    *input += 2;
    uint64_t group6 = 0;
    group6 *= 174;
    group6 += (*input)[0];

    group6 *= 174;
    group6 += (*input)[1];

    *((uint64_t *)((*output) + 11)) |= (group6 << 2);
    *input += 2;
    uint64_t group7 = 0;
    group7 *= 174;
    group7 += (*input)[0];

    group7 *= 174;
    group7 += (*input)[1];

    *((uint64_t *)((*output) + 13)) |= (group7 << 1);
    *input += 2;
    *output += 15;
}

// Pack 8 groups using 15 bytes (16 values total)
void Ultrapack_Compress175(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 175;
    group0 += (*input)[0];

    group0 *= 175;
    group0 += (*input)[1];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 2;
    uint64_t group1 = 0;
    group1 *= 175;
    group1 += (*input)[0];

    group1 *= 175;
    group1 += (*input)[1];

    *((uint64_t *)((*output) + 1)) |= (group1 << 7);
    *input += 2;
    uint64_t group2 = 0;
    group2 *= 175;
    group2 += (*input)[0];

    group2 *= 175;
    group2 += (*input)[1];

    *((uint64_t *)((*output) + 3)) |= (group2 << 6);
    *input += 2;
    uint64_t group3 = 0;
    group3 *= 175;
    group3 += (*input)[0];

    group3 *= 175;
    group3 += (*input)[1];

    *((uint64_t *)((*output) + 5)) |= (group3 << 5);
    *input += 2;
    uint64_t group4 = 0;
    group4 *= 175;
    group4 += (*input)[0];

    group4 *= 175;
    group4 += (*input)[1];

    *((uint64_t *)((*output) + 7)) |= (group4 << 4);
    *input += 2;
    uint64_t group5 = 0;
    group5 *= 175;
    group5 += (*input)[0];

    group5 *= 175;
    group5 += (*input)[1];

    *((uint64_t *)((*output) + 9)) |= (group5 << 3);
    *input += 2;
    uint64_t group6 = 0;
    group6 *= 175;
    group6 += (*input)[0];

    group6 *= 175;
    group6 += (*input)[1];

    *((uint64_t *)((*output) + 11)) |= (group6 << 2);
    *input += 2;
    uint64_t group7 = 0;
    group7 *= 175;
    group7 += (*input)[0];

    group7 *= 175;
    group7 += (*input)[1];

    *((uint64_t *)((*output) + 13)) |= (group7 << 1);
    *input += 2;
    *output += 15;
}

// Pack 8 groups using 15 bytes (16 values total)
void Ultrapack_Compress176(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 176;
    group0 += (*input)[0];

    group0 *= 176;
    group0 += (*input)[1];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 2;
    uint64_t group1 = 0;
    group1 *= 176;
    group1 += (*input)[0];

    group1 *= 176;
    group1 += (*input)[1];

    *((uint64_t *)((*output) + 1)) |= (group1 << 7);
    *input += 2;
    uint64_t group2 = 0;
    group2 *= 176;
    group2 += (*input)[0];

    group2 *= 176;
    group2 += (*input)[1];

    *((uint64_t *)((*output) + 3)) |= (group2 << 6);
    *input += 2;
    uint64_t group3 = 0;
    group3 *= 176;
    group3 += (*input)[0];

    group3 *= 176;
    group3 += (*input)[1];

    *((uint64_t *)((*output) + 5)) |= (group3 << 5);
    *input += 2;
    uint64_t group4 = 0;
    group4 *= 176;
    group4 += (*input)[0];

    group4 *= 176;
    group4 += (*input)[1];

    *((uint64_t *)((*output) + 7)) |= (group4 << 4);
    *input += 2;
    uint64_t group5 = 0;
    group5 *= 176;
    group5 += (*input)[0];

    group5 *= 176;
    group5 += (*input)[1];

    *((uint64_t *)((*output) + 9)) |= (group5 << 3);
    *input += 2;
    uint64_t group6 = 0;
    group6 *= 176;
    group6 += (*input)[0];

    group6 *= 176;
    group6 += (*input)[1];

    *((uint64_t *)((*output) + 11)) |= (group6 << 2);
    *input += 2;
    uint64_t group7 = 0;
    group7 *= 176;
    group7 += (*input)[0];

    group7 *= 176;
    group7 += (*input)[1];

    *((uint64_t *)((*output) + 13)) |= (group7 << 1);
    *input += 2;
    *output += 15;
}

// Pack 8 groups using 15 bytes (16 values total)
void Ultrapack_Compress177(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 177;
    group0 += (*input)[0];

    group0 *= 177;
    group0 += (*input)[1];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 2;
    uint64_t group1 = 0;
    group1 *= 177;
    group1 += (*input)[0];

    group1 *= 177;
    group1 += (*input)[1];

    *((uint64_t *)((*output) + 1)) |= (group1 << 7);
    *input += 2;
    uint64_t group2 = 0;
    group2 *= 177;
    group2 += (*input)[0];

    group2 *= 177;
    group2 += (*input)[1];

    *((uint64_t *)((*output) + 3)) |= (group2 << 6);
    *input += 2;
    uint64_t group3 = 0;
    group3 *= 177;
    group3 += (*input)[0];

    group3 *= 177;
    group3 += (*input)[1];

    *((uint64_t *)((*output) + 5)) |= (group3 << 5);
    *input += 2;
    uint64_t group4 = 0;
    group4 *= 177;
    group4 += (*input)[0];

    group4 *= 177;
    group4 += (*input)[1];

    *((uint64_t *)((*output) + 7)) |= (group4 << 4);
    *input += 2;
    uint64_t group5 = 0;
    group5 *= 177;
    group5 += (*input)[0];

    group5 *= 177;
    group5 += (*input)[1];

    *((uint64_t *)((*output) + 9)) |= (group5 << 3);
    *input += 2;
    uint64_t group6 = 0;
    group6 *= 177;
    group6 += (*input)[0];

    group6 *= 177;
    group6 += (*input)[1];

    *((uint64_t *)((*output) + 11)) |= (group6 << 2);
    *input += 2;
    uint64_t group7 = 0;
    group7 *= 177;
    group7 += (*input)[0];

    group7 *= 177;
    group7 += (*input)[1];

    *((uint64_t *)((*output) + 13)) |= (group7 << 1);
    *input += 2;
    *output += 15;
}

// Pack 8 groups using 15 bytes (16 values total)
void Ultrapack_Compress178(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 178;
    group0 += (*input)[0];

    group0 *= 178;
    group0 += (*input)[1];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 2;
    uint64_t group1 = 0;
    group1 *= 178;
    group1 += (*input)[0];

    group1 *= 178;
    group1 += (*input)[1];

    *((uint64_t *)((*output) + 1)) |= (group1 << 7);
    *input += 2;
    uint64_t group2 = 0;
    group2 *= 178;
    group2 += (*input)[0];

    group2 *= 178;
    group2 += (*input)[1];

    *((uint64_t *)((*output) + 3)) |= (group2 << 6);
    *input += 2;
    uint64_t group3 = 0;
    group3 *= 178;
    group3 += (*input)[0];

    group3 *= 178;
    group3 += (*input)[1];

    *((uint64_t *)((*output) + 5)) |= (group3 << 5);
    *input += 2;
    uint64_t group4 = 0;
    group4 *= 178;
    group4 += (*input)[0];

    group4 *= 178;
    group4 += (*input)[1];

    *((uint64_t *)((*output) + 7)) |= (group4 << 4);
    *input += 2;
    uint64_t group5 = 0;
    group5 *= 178;
    group5 += (*input)[0];

    group5 *= 178;
    group5 += (*input)[1];

    *((uint64_t *)((*output) + 9)) |= (group5 << 3);
    *input += 2;
    uint64_t group6 = 0;
    group6 *= 178;
    group6 += (*input)[0];

    group6 *= 178;
    group6 += (*input)[1];

    *((uint64_t *)((*output) + 11)) |= (group6 << 2);
    *input += 2;
    uint64_t group7 = 0;
    group7 *= 178;
    group7 += (*input)[0];

    group7 *= 178;
    group7 += (*input)[1];

    *((uint64_t *)((*output) + 13)) |= (group7 << 1);
    *input += 2;
    *output += 15;
}

// Pack 8 groups using 15 bytes (16 values total)
void Ultrapack_Compress179(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 179;
    group0 += (*input)[0];

    group0 *= 179;
    group0 += (*input)[1];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 2;
    uint64_t group1 = 0;
    group1 *= 179;
    group1 += (*input)[0];

    group1 *= 179;
    group1 += (*input)[1];

    *((uint64_t *)((*output) + 1)) |= (group1 << 7);
    *input += 2;
    uint64_t group2 = 0;
    group2 *= 179;
    group2 += (*input)[0];

    group2 *= 179;
    group2 += (*input)[1];

    *((uint64_t *)((*output) + 3)) |= (group2 << 6);
    *input += 2;
    uint64_t group3 = 0;
    group3 *= 179;
    group3 += (*input)[0];

    group3 *= 179;
    group3 += (*input)[1];

    *((uint64_t *)((*output) + 5)) |= (group3 << 5);
    *input += 2;
    uint64_t group4 = 0;
    group4 *= 179;
    group4 += (*input)[0];

    group4 *= 179;
    group4 += (*input)[1];

    *((uint64_t *)((*output) + 7)) |= (group4 << 4);
    *input += 2;
    uint64_t group5 = 0;
    group5 *= 179;
    group5 += (*input)[0];

    group5 *= 179;
    group5 += (*input)[1];

    *((uint64_t *)((*output) + 9)) |= (group5 << 3);
    *input += 2;
    uint64_t group6 = 0;
    group6 *= 179;
    group6 += (*input)[0];

    group6 *= 179;
    group6 += (*input)[1];

    *((uint64_t *)((*output) + 11)) |= (group6 << 2);
    *input += 2;
    uint64_t group7 = 0;
    group7 *= 179;
    group7 += (*input)[0];

    group7 *= 179;
    group7 += (*input)[1];

    *((uint64_t *)((*output) + 13)) |= (group7 << 1);
    *input += 2;
    *output += 15;
}

// Pack 8 groups using 15 bytes (16 values total)
void Ultrapack_Compress180(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 180;
    group0 += (*input)[0];

    group0 *= 180;
    group0 += (*input)[1];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 2;
    uint64_t group1 = 0;
    group1 *= 180;
    group1 += (*input)[0];

    group1 *= 180;
    group1 += (*input)[1];

    *((uint64_t *)((*output) + 1)) |= (group1 << 7);
    *input += 2;
    uint64_t group2 = 0;
    group2 *= 180;
    group2 += (*input)[0];

    group2 *= 180;
    group2 += (*input)[1];

    *((uint64_t *)((*output) + 3)) |= (group2 << 6);
    *input += 2;
    uint64_t group3 = 0;
    group3 *= 180;
    group3 += (*input)[0];

    group3 *= 180;
    group3 += (*input)[1];

    *((uint64_t *)((*output) + 5)) |= (group3 << 5);
    *input += 2;
    uint64_t group4 = 0;
    group4 *= 180;
    group4 += (*input)[0];

    group4 *= 180;
    group4 += (*input)[1];

    *((uint64_t *)((*output) + 7)) |= (group4 << 4);
    *input += 2;
    uint64_t group5 = 0;
    group5 *= 180;
    group5 += (*input)[0];

    group5 *= 180;
    group5 += (*input)[1];

    *((uint64_t *)((*output) + 9)) |= (group5 << 3);
    *input += 2;
    uint64_t group6 = 0;
    group6 *= 180;
    group6 += (*input)[0];

    group6 *= 180;
    group6 += (*input)[1];

    *((uint64_t *)((*output) + 11)) |= (group6 << 2);
    *input += 2;
    uint64_t group7 = 0;
    group7 *= 180;
    group7 += (*input)[0];

    group7 *= 180;
    group7 += (*input)[1];

    *((uint64_t *)((*output) + 13)) |= (group7 << 1);
    *input += 2;
    *output += 15;
}

// Pack 8 groups using 15 bytes (16 values total)
void Ultrapack_Compress181(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 181;
    group0 += (*input)[0];

    group0 *= 181;
    group0 += (*input)[1];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 2;
    uint64_t group1 = 0;
    group1 *= 181;
    group1 += (*input)[0];

    group1 *= 181;
    group1 += (*input)[1];

    *((uint64_t *)((*output) + 1)) |= (group1 << 7);
    *input += 2;
    uint64_t group2 = 0;
    group2 *= 181;
    group2 += (*input)[0];

    group2 *= 181;
    group2 += (*input)[1];

    *((uint64_t *)((*output) + 3)) |= (group2 << 6);
    *input += 2;
    uint64_t group3 = 0;
    group3 *= 181;
    group3 += (*input)[0];

    group3 *= 181;
    group3 += (*input)[1];

    *((uint64_t *)((*output) + 5)) |= (group3 << 5);
    *input += 2;
    uint64_t group4 = 0;
    group4 *= 181;
    group4 += (*input)[0];

    group4 *= 181;
    group4 += (*input)[1];

    *((uint64_t *)((*output) + 7)) |= (group4 << 4);
    *input += 2;
    uint64_t group5 = 0;
    group5 *= 181;
    group5 += (*input)[0];

    group5 *= 181;
    group5 += (*input)[1];

    *((uint64_t *)((*output) + 9)) |= (group5 << 3);
    *input += 2;
    uint64_t group6 = 0;
    group6 *= 181;
    group6 += (*input)[0];

    group6 *= 181;
    group6 += (*input)[1];

    *((uint64_t *)((*output) + 11)) |= (group6 << 2);
    *input += 2;
    uint64_t group7 = 0;
    group7 *= 181;
    group7 += (*input)[0];

    group7 *= 181;
    group7 += (*input)[1];

    *((uint64_t *)((*output) + 13)) |= (group7 << 1);
    *input += 2;
    *output += 15;
}

// Pack 4 groups using 19 bytes (20 values total)
void Ultrapack_Compress182(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 182;
    group0 += (*input)[0];

    group0 *= 182;
    group0 += (*input)[1];

    group0 *= 182;
    group0 += (*input)[2];

    group0 *= 182;
    group0 += (*input)[3];

    group0 *= 182;
    group0 += (*input)[4];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 5;
    uint64_t group1 = 0;
    group1 *= 182;
    group1 += (*input)[0];

    group1 *= 182;
    group1 += (*input)[1];

    group1 *= 182;
    group1 += (*input)[2];

    group1 *= 182;
    group1 += (*input)[3];

    group1 *= 182;
    group1 += (*input)[4];

    *((uint64_t *)((*output) + 4)) |= (group1 << 6);
    *input += 5;
    uint64_t group2 = 0;
    group2 *= 182;
    group2 += (*input)[0];

    group2 *= 182;
    group2 += (*input)[1];

    group2 *= 182;
    group2 += (*input)[2];

    group2 *= 182;
    group2 += (*input)[3];

    group2 *= 182;
    group2 += (*input)[4];

    *((uint64_t *)((*output) + 9)) |= (group2 << 4);
    *input += 5;
    uint64_t group3 = 0;
    group3 *= 182;
    group3 += (*input)[0];

    group3 *= 182;
    group3 += (*input)[1];

    group3 *= 182;
    group3 += (*input)[2];

    group3 *= 182;
    group3 += (*input)[3];

    group3 *= 182;
    group3 += (*input)[4];

    *((uint64_t *)((*output) + 14)) |= (group3 << 2);
    *input += 5;
    *output += 19;
}

// Pack 4 groups using 19 bytes (20 values total)
void Ultrapack_Compress183(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 183;
    group0 += (*input)[0];

    group0 *= 183;
    group0 += (*input)[1];

    group0 *= 183;
    group0 += (*input)[2];

    group0 *= 183;
    group0 += (*input)[3];

    group0 *= 183;
    group0 += (*input)[4];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 5;
    uint64_t group1 = 0;
    group1 *= 183;
    group1 += (*input)[0];

    group1 *= 183;
    group1 += (*input)[1];

    group1 *= 183;
    group1 += (*input)[2];

    group1 *= 183;
    group1 += (*input)[3];

    group1 *= 183;
    group1 += (*input)[4];

    *((uint64_t *)((*output) + 4)) |= (group1 << 6);
    *input += 5;
    uint64_t group2 = 0;
    group2 *= 183;
    group2 += (*input)[0];

    group2 *= 183;
    group2 += (*input)[1];

    group2 *= 183;
    group2 += (*input)[2];

    group2 *= 183;
    group2 += (*input)[3];

    group2 *= 183;
    group2 += (*input)[4];

    *((uint64_t *)((*output) + 9)) |= (group2 << 4);
    *input += 5;
    uint64_t group3 = 0;
    group3 *= 183;
    group3 += (*input)[0];

    group3 *= 183;
    group3 += (*input)[1];

    group3 *= 183;
    group3 += (*input)[2];

    group3 *= 183;
    group3 += (*input)[3];

    group3 *= 183;
    group3 += (*input)[4];

    *((uint64_t *)((*output) + 14)) |= (group3 << 2);
    *input += 5;
    *output += 19;
}

// Pack 4 groups using 19 bytes (20 values total)
void Ultrapack_Compress184(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 184;
    group0 += (*input)[0];

    group0 *= 184;
    group0 += (*input)[1];

    group0 *= 184;
    group0 += (*input)[2];

    group0 *= 184;
    group0 += (*input)[3];

    group0 *= 184;
    group0 += (*input)[4];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 5;
    uint64_t group1 = 0;
    group1 *= 184;
    group1 += (*input)[0];

    group1 *= 184;
    group1 += (*input)[1];

    group1 *= 184;
    group1 += (*input)[2];

    group1 *= 184;
    group1 += (*input)[3];

    group1 *= 184;
    group1 += (*input)[4];

    *((uint64_t *)((*output) + 4)) |= (group1 << 6);
    *input += 5;
    uint64_t group2 = 0;
    group2 *= 184;
    group2 += (*input)[0];

    group2 *= 184;
    group2 += (*input)[1];

    group2 *= 184;
    group2 += (*input)[2];

    group2 *= 184;
    group2 += (*input)[3];

    group2 *= 184;
    group2 += (*input)[4];

    *((uint64_t *)((*output) + 9)) |= (group2 << 4);
    *input += 5;
    uint64_t group3 = 0;
    group3 *= 184;
    group3 += (*input)[0];

    group3 *= 184;
    group3 += (*input)[1];

    group3 *= 184;
    group3 += (*input)[2];

    group3 *= 184;
    group3 += (*input)[3];

    group3 *= 184;
    group3 += (*input)[4];

    *((uint64_t *)((*output) + 14)) |= (group3 << 2);
    *input += 5;
    *output += 19;
}

// Pack 4 groups using 19 bytes (20 values total)
void Ultrapack_Compress185(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 185;
    group0 += (*input)[0];

    group0 *= 185;
    group0 += (*input)[1];

    group0 *= 185;
    group0 += (*input)[2];

    group0 *= 185;
    group0 += (*input)[3];

    group0 *= 185;
    group0 += (*input)[4];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 5;
    uint64_t group1 = 0;
    group1 *= 185;
    group1 += (*input)[0];

    group1 *= 185;
    group1 += (*input)[1];

    group1 *= 185;
    group1 += (*input)[2];

    group1 *= 185;
    group1 += (*input)[3];

    group1 *= 185;
    group1 += (*input)[4];

    *((uint64_t *)((*output) + 4)) |= (group1 << 6);
    *input += 5;
    uint64_t group2 = 0;
    group2 *= 185;
    group2 += (*input)[0];

    group2 *= 185;
    group2 += (*input)[1];

    group2 *= 185;
    group2 += (*input)[2];

    group2 *= 185;
    group2 += (*input)[3];

    group2 *= 185;
    group2 += (*input)[4];

    *((uint64_t *)((*output) + 9)) |= (group2 << 4);
    *input += 5;
    uint64_t group3 = 0;
    group3 *= 185;
    group3 += (*input)[0];

    group3 *= 185;
    group3 += (*input)[1];

    group3 *= 185;
    group3 += (*input)[2];

    group3 *= 185;
    group3 += (*input)[3];

    group3 *= 185;
    group3 += (*input)[4];

    *((uint64_t *)((*output) + 14)) |= (group3 << 2);
    *input += 5;
    *output += 19;
}

// Pack 4 groups using 19 bytes (20 values total)
void Ultrapack_Compress186(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 186;
    group0 += (*input)[0];

    group0 *= 186;
    group0 += (*input)[1];

    group0 *= 186;
    group0 += (*input)[2];

    group0 *= 186;
    group0 += (*input)[3];

    group0 *= 186;
    group0 += (*input)[4];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 5;
    uint64_t group1 = 0;
    group1 *= 186;
    group1 += (*input)[0];

    group1 *= 186;
    group1 += (*input)[1];

    group1 *= 186;
    group1 += (*input)[2];

    group1 *= 186;
    group1 += (*input)[3];

    group1 *= 186;
    group1 += (*input)[4];

    *((uint64_t *)((*output) + 4)) |= (group1 << 6);
    *input += 5;
    uint64_t group2 = 0;
    group2 *= 186;
    group2 += (*input)[0];

    group2 *= 186;
    group2 += (*input)[1];

    group2 *= 186;
    group2 += (*input)[2];

    group2 *= 186;
    group2 += (*input)[3];

    group2 *= 186;
    group2 += (*input)[4];

    *((uint64_t *)((*output) + 9)) |= (group2 << 4);
    *input += 5;
    uint64_t group3 = 0;
    group3 *= 186;
    group3 += (*input)[0];

    group3 *= 186;
    group3 += (*input)[1];

    group3 *= 186;
    group3 += (*input)[2];

    group3 *= 186;
    group3 += (*input)[3];

    group3 *= 186;
    group3 += (*input)[4];

    *((uint64_t *)((*output) + 14)) |= (group3 << 2);
    *input += 5;
    *output += 19;
}

// Pack 4 groups using 19 bytes (20 values total)
void Ultrapack_Compress187(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 187;
    group0 += (*input)[0];

    group0 *= 187;
    group0 += (*input)[1];

    group0 *= 187;
    group0 += (*input)[2];

    group0 *= 187;
    group0 += (*input)[3];

    group0 *= 187;
    group0 += (*input)[4];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 5;
    uint64_t group1 = 0;
    group1 *= 187;
    group1 += (*input)[0];

    group1 *= 187;
    group1 += (*input)[1];

    group1 *= 187;
    group1 += (*input)[2];

    group1 *= 187;
    group1 += (*input)[3];

    group1 *= 187;
    group1 += (*input)[4];

    *((uint64_t *)((*output) + 4)) |= (group1 << 6);
    *input += 5;
    uint64_t group2 = 0;
    group2 *= 187;
    group2 += (*input)[0];

    group2 *= 187;
    group2 += (*input)[1];

    group2 *= 187;
    group2 += (*input)[2];

    group2 *= 187;
    group2 += (*input)[3];

    group2 *= 187;
    group2 += (*input)[4];

    *((uint64_t *)((*output) + 9)) |= (group2 << 4);
    *input += 5;
    uint64_t group3 = 0;
    group3 *= 187;
    group3 += (*input)[0];

    group3 *= 187;
    group3 += (*input)[1];

    group3 *= 187;
    group3 += (*input)[2];

    group3 *= 187;
    group3 += (*input)[3];

    group3 *= 187;
    group3 += (*input)[4];

    *((uint64_t *)((*output) + 14)) |= (group3 << 2);
    *input += 5;
    *output += 19;
}

// Pack 4 groups using 19 bytes (20 values total)
void Ultrapack_Compress188(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 188;
    group0 += (*input)[0];

    group0 *= 188;
    group0 += (*input)[1];

    group0 *= 188;
    group0 += (*input)[2];

    group0 *= 188;
    group0 += (*input)[3];

    group0 *= 188;
    group0 += (*input)[4];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 5;
    uint64_t group1 = 0;
    group1 *= 188;
    group1 += (*input)[0];

    group1 *= 188;
    group1 += (*input)[1];

    group1 *= 188;
    group1 += (*input)[2];

    group1 *= 188;
    group1 += (*input)[3];

    group1 *= 188;
    group1 += (*input)[4];

    *((uint64_t *)((*output) + 4)) |= (group1 << 6);
    *input += 5;
    uint64_t group2 = 0;
    group2 *= 188;
    group2 += (*input)[0];

    group2 *= 188;
    group2 += (*input)[1];

    group2 *= 188;
    group2 += (*input)[2];

    group2 *= 188;
    group2 += (*input)[3];

    group2 *= 188;
    group2 += (*input)[4];

    *((uint64_t *)((*output) + 9)) |= (group2 << 4);
    *input += 5;
    uint64_t group3 = 0;
    group3 *= 188;
    group3 += (*input)[0];

    group3 *= 188;
    group3 += (*input)[1];

    group3 *= 188;
    group3 += (*input)[2];

    group3 *= 188;
    group3 += (*input)[3];

    group3 *= 188;
    group3 += (*input)[4];

    *((uint64_t *)((*output) + 14)) |= (group3 << 2);
    *input += 5;
    *output += 19;
}

// Pack 4 groups using 19 bytes (20 values total)
void Ultrapack_Compress189(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 189;
    group0 += (*input)[0];

    group0 *= 189;
    group0 += (*input)[1];

    group0 *= 189;
    group0 += (*input)[2];

    group0 *= 189;
    group0 += (*input)[3];

    group0 *= 189;
    group0 += (*input)[4];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 5;
    uint64_t group1 = 0;
    group1 *= 189;
    group1 += (*input)[0];

    group1 *= 189;
    group1 += (*input)[1];

    group1 *= 189;
    group1 += (*input)[2];

    group1 *= 189;
    group1 += (*input)[3];

    group1 *= 189;
    group1 += (*input)[4];

    *((uint64_t *)((*output) + 4)) |= (group1 << 6);
    *input += 5;
    uint64_t group2 = 0;
    group2 *= 189;
    group2 += (*input)[0];

    group2 *= 189;
    group2 += (*input)[1];

    group2 *= 189;
    group2 += (*input)[2];

    group2 *= 189;
    group2 += (*input)[3];

    group2 *= 189;
    group2 += (*input)[4];

    *((uint64_t *)((*output) + 9)) |= (group2 << 4);
    *input += 5;
    uint64_t group3 = 0;
    group3 *= 189;
    group3 += (*input)[0];

    group3 *= 189;
    group3 += (*input)[1];

    group3 *= 189;
    group3 += (*input)[2];

    group3 *= 189;
    group3 += (*input)[3];

    group3 *= 189;
    group3 += (*input)[4];

    *((uint64_t *)((*output) + 14)) |= (group3 << 2);
    *input += 5;
    *output += 19;
}

// Pack 4 groups using 19 bytes (20 values total)
void Ultrapack_Compress190(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 190;
    group0 += (*input)[0];

    group0 *= 190;
    group0 += (*input)[1];

    group0 *= 190;
    group0 += (*input)[2];

    group0 *= 190;
    group0 += (*input)[3];

    group0 *= 190;
    group0 += (*input)[4];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 5;
    uint64_t group1 = 0;
    group1 *= 190;
    group1 += (*input)[0];

    group1 *= 190;
    group1 += (*input)[1];

    group1 *= 190;
    group1 += (*input)[2];

    group1 *= 190;
    group1 += (*input)[3];

    group1 *= 190;
    group1 += (*input)[4];

    *((uint64_t *)((*output) + 4)) |= (group1 << 6);
    *input += 5;
    uint64_t group2 = 0;
    group2 *= 190;
    group2 += (*input)[0];

    group2 *= 190;
    group2 += (*input)[1];

    group2 *= 190;
    group2 += (*input)[2];

    group2 *= 190;
    group2 += (*input)[3];

    group2 *= 190;
    group2 += (*input)[4];

    *((uint64_t *)((*output) + 9)) |= (group2 << 4);
    *input += 5;
    uint64_t group3 = 0;
    group3 *= 190;
    group3 += (*input)[0];

    group3 *= 190;
    group3 += (*input)[1];

    group3 *= 190;
    group3 += (*input)[2];

    group3 *= 190;
    group3 += (*input)[3];

    group3 *= 190;
    group3 += (*input)[4];

    *((uint64_t *)((*output) + 14)) |= (group3 << 2);
    *input += 5;
    *output += 19;
}

// Pack 4 groups using 19 bytes (20 values total)
void Ultrapack_Compress191(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 191;
    group0 += (*input)[0];

    group0 *= 191;
    group0 += (*input)[1];

    group0 *= 191;
    group0 += (*input)[2];

    group0 *= 191;
    group0 += (*input)[3];

    group0 *= 191;
    group0 += (*input)[4];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 5;
    uint64_t group1 = 0;
    group1 *= 191;
    group1 += (*input)[0];

    group1 *= 191;
    group1 += (*input)[1];

    group1 *= 191;
    group1 += (*input)[2];

    group1 *= 191;
    group1 += (*input)[3];

    group1 *= 191;
    group1 += (*input)[4];

    *((uint64_t *)((*output) + 4)) |= (group1 << 6);
    *input += 5;
    uint64_t group2 = 0;
    group2 *= 191;
    group2 += (*input)[0];

    group2 *= 191;
    group2 += (*input)[1];

    group2 *= 191;
    group2 += (*input)[2];

    group2 *= 191;
    group2 += (*input)[3];

    group2 *= 191;
    group2 += (*input)[4];

    *((uint64_t *)((*output) + 9)) |= (group2 << 4);
    *input += 5;
    uint64_t group3 = 0;
    group3 *= 191;
    group3 += (*input)[0];

    group3 *= 191;
    group3 += (*input)[1];

    group3 *= 191;
    group3 += (*input)[2];

    group3 *= 191;
    group3 += (*input)[3];

    group3 *= 191;
    group3 += (*input)[4];

    *((uint64_t *)((*output) + 14)) |= (group3 << 2);
    *input += 5;
    *output += 19;
}

// Pack 4 groups using 19 bytes (20 values total)
void Ultrapack_Compress192(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 192;
    group0 += (*input)[0];

    group0 *= 192;
    group0 += (*input)[1];

    group0 *= 192;
    group0 += (*input)[2];

    group0 *= 192;
    group0 += (*input)[3];

    group0 *= 192;
    group0 += (*input)[4];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 5;
    uint64_t group1 = 0;
    group1 *= 192;
    group1 += (*input)[0];

    group1 *= 192;
    group1 += (*input)[1];

    group1 *= 192;
    group1 += (*input)[2];

    group1 *= 192;
    group1 += (*input)[3];

    group1 *= 192;
    group1 += (*input)[4];

    *((uint64_t *)((*output) + 4)) |= (group1 << 6);
    *input += 5;
    uint64_t group2 = 0;
    group2 *= 192;
    group2 += (*input)[0];

    group2 *= 192;
    group2 += (*input)[1];

    group2 *= 192;
    group2 += (*input)[2];

    group2 *= 192;
    group2 += (*input)[3];

    group2 *= 192;
    group2 += (*input)[4];

    *((uint64_t *)((*output) + 9)) |= (group2 << 4);
    *input += 5;
    uint64_t group3 = 0;
    group3 *= 192;
    group3 += (*input)[0];

    group3 *= 192;
    group3 += (*input)[1];

    group3 *= 192;
    group3 += (*input)[2];

    group3 *= 192;
    group3 += (*input)[3];

    group3 *= 192;
    group3 += (*input)[4];

    *((uint64_t *)((*output) + 14)) |= (group3 << 2);
    *input += 5;
    *output += 19;
}

// Pack 4 groups using 19 bytes (20 values total)
void Ultrapack_Compress193(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 193;
    group0 += (*input)[0];

    group0 *= 193;
    group0 += (*input)[1];

    group0 *= 193;
    group0 += (*input)[2];

    group0 *= 193;
    group0 += (*input)[3];

    group0 *= 193;
    group0 += (*input)[4];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 5;
    uint64_t group1 = 0;
    group1 *= 193;
    group1 += (*input)[0];

    group1 *= 193;
    group1 += (*input)[1];

    group1 *= 193;
    group1 += (*input)[2];

    group1 *= 193;
    group1 += (*input)[3];

    group1 *= 193;
    group1 += (*input)[4];

    *((uint64_t *)((*output) + 4)) |= (group1 << 6);
    *input += 5;
    uint64_t group2 = 0;
    group2 *= 193;
    group2 += (*input)[0];

    group2 *= 193;
    group2 += (*input)[1];

    group2 *= 193;
    group2 += (*input)[2];

    group2 *= 193;
    group2 += (*input)[3];

    group2 *= 193;
    group2 += (*input)[4];

    *((uint64_t *)((*output) + 9)) |= (group2 << 4);
    *input += 5;
    uint64_t group3 = 0;
    group3 *= 193;
    group3 += (*input)[0];

    group3 *= 193;
    group3 += (*input)[1];

    group3 *= 193;
    group3 += (*input)[2];

    group3 *= 193;
    group3 += (*input)[3];

    group3 *= 193;
    group3 += (*input)[4];

    *((uint64_t *)((*output) + 14)) |= (group3 << 2);
    *input += 5;
    *output += 19;
}

// Pack 4 groups using 19 bytes (20 values total)
void Ultrapack_Compress194(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 194;
    group0 += (*input)[0];

    group0 *= 194;
    group0 += (*input)[1];

    group0 *= 194;
    group0 += (*input)[2];

    group0 *= 194;
    group0 += (*input)[3];

    group0 *= 194;
    group0 += (*input)[4];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 5;
    uint64_t group1 = 0;
    group1 *= 194;
    group1 += (*input)[0];

    group1 *= 194;
    group1 += (*input)[1];

    group1 *= 194;
    group1 += (*input)[2];

    group1 *= 194;
    group1 += (*input)[3];

    group1 *= 194;
    group1 += (*input)[4];

    *((uint64_t *)((*output) + 4)) |= (group1 << 6);
    *input += 5;
    uint64_t group2 = 0;
    group2 *= 194;
    group2 += (*input)[0];

    group2 *= 194;
    group2 += (*input)[1];

    group2 *= 194;
    group2 += (*input)[2];

    group2 *= 194;
    group2 += (*input)[3];

    group2 *= 194;
    group2 += (*input)[4];

    *((uint64_t *)((*output) + 9)) |= (group2 << 4);
    *input += 5;
    uint64_t group3 = 0;
    group3 *= 194;
    group3 += (*input)[0];

    group3 *= 194;
    group3 += (*input)[1];

    group3 *= 194;
    group3 += (*input)[2];

    group3 *= 194;
    group3 += (*input)[3];

    group3 *= 194;
    group3 += (*input)[4];

    *((uint64_t *)((*output) + 14)) |= (group3 << 2);
    *input += 5;
    *output += 19;
}

// Pack 8 groups using 23 bytes (24 values total)
void Ultrapack_Compress195(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 195;
    group0 += (*input)[0];

    group0 *= 195;
    group0 += (*input)[1];

    group0 *= 195;
    group0 += (*input)[2];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 3;
    uint64_t group1 = 0;
    group1 *= 195;
    group1 += (*input)[0];

    group1 *= 195;
    group1 += (*input)[1];

    group1 *= 195;
    group1 += (*input)[2];

    *((uint64_t *)((*output) + 2)) |= (group1 << 7);
    *input += 3;
    uint64_t group2 = 0;
    group2 *= 195;
    group2 += (*input)[0];

    group2 *= 195;
    group2 += (*input)[1];

    group2 *= 195;
    group2 += (*input)[2];

    *((uint64_t *)((*output) + 5)) |= (group2 << 6);
    *input += 3;
    uint64_t group3 = 0;
    group3 *= 195;
    group3 += (*input)[0];

    group3 *= 195;
    group3 += (*input)[1];

    group3 *= 195;
    group3 += (*input)[2];

    *((uint64_t *)((*output) + 8)) |= (group3 << 5);
    *input += 3;
    uint64_t group4 = 0;
    group4 *= 195;
    group4 += (*input)[0];

    group4 *= 195;
    group4 += (*input)[1];

    group4 *= 195;
    group4 += (*input)[2];

    *((uint64_t *)((*output) + 11)) |= (group4 << 4);
    *input += 3;
    uint64_t group5 = 0;
    group5 *= 195;
    group5 += (*input)[0];

    group5 *= 195;
    group5 += (*input)[1];

    group5 *= 195;
    group5 += (*input)[2];

    *((uint64_t *)((*output) + 14)) |= (group5 << 3);
    *input += 3;
    uint64_t group6 = 0;
    group6 *= 195;
    group6 += (*input)[0];

    group6 *= 195;
    group6 += (*input)[1];

    group6 *= 195;
    group6 += (*input)[2];

    *((uint64_t *)((*output) + 17)) |= (group6 << 2);
    *input += 3;
    uint64_t group7 = 0;
    group7 *= 195;
    group7 += (*input)[0];

    group7 *= 195;
    group7 += (*input)[1];

    group7 *= 195;
    group7 += (*input)[2];

    *((uint64_t *)((*output) + 20)) |= (group7 << 1);
    *input += 3;
    *output += 23;
}

// Pack 8 groups using 23 bytes (24 values total)
void Ultrapack_Compress196(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 196;
    group0 += (*input)[0];

    group0 *= 196;
    group0 += (*input)[1];

    group0 *= 196;
    group0 += (*input)[2];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 3;
    uint64_t group1 = 0;
    group1 *= 196;
    group1 += (*input)[0];

    group1 *= 196;
    group1 += (*input)[1];

    group1 *= 196;
    group1 += (*input)[2];

    *((uint64_t *)((*output) + 2)) |= (group1 << 7);
    *input += 3;
    uint64_t group2 = 0;
    group2 *= 196;
    group2 += (*input)[0];

    group2 *= 196;
    group2 += (*input)[1];

    group2 *= 196;
    group2 += (*input)[2];

    *((uint64_t *)((*output) + 5)) |= (group2 << 6);
    *input += 3;
    uint64_t group3 = 0;
    group3 *= 196;
    group3 += (*input)[0];

    group3 *= 196;
    group3 += (*input)[1];

    group3 *= 196;
    group3 += (*input)[2];

    *((uint64_t *)((*output) + 8)) |= (group3 << 5);
    *input += 3;
    uint64_t group4 = 0;
    group4 *= 196;
    group4 += (*input)[0];

    group4 *= 196;
    group4 += (*input)[1];

    group4 *= 196;
    group4 += (*input)[2];

    *((uint64_t *)((*output) + 11)) |= (group4 << 4);
    *input += 3;
    uint64_t group5 = 0;
    group5 *= 196;
    group5 += (*input)[0];

    group5 *= 196;
    group5 += (*input)[1];

    group5 *= 196;
    group5 += (*input)[2];

    *((uint64_t *)((*output) + 14)) |= (group5 << 3);
    *input += 3;
    uint64_t group6 = 0;
    group6 *= 196;
    group6 += (*input)[0];

    group6 *= 196;
    group6 += (*input)[1];

    group6 *= 196;
    group6 += (*input)[2];

    *((uint64_t *)((*output) + 17)) |= (group6 << 2);
    *input += 3;
    uint64_t group7 = 0;
    group7 *= 196;
    group7 += (*input)[0];

    group7 *= 196;
    group7 += (*input)[1];

    group7 *= 196;
    group7 += (*input)[2];

    *((uint64_t *)((*output) + 20)) |= (group7 << 1);
    *input += 3;
    *output += 23;
}

// Pack 8 groups using 23 bytes (24 values total)
void Ultrapack_Compress197(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 197;
    group0 += (*input)[0];

    group0 *= 197;
    group0 += (*input)[1];

    group0 *= 197;
    group0 += (*input)[2];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 3;
    uint64_t group1 = 0;
    group1 *= 197;
    group1 += (*input)[0];

    group1 *= 197;
    group1 += (*input)[1];

    group1 *= 197;
    group1 += (*input)[2];

    *((uint64_t *)((*output) + 2)) |= (group1 << 7);
    *input += 3;
    uint64_t group2 = 0;
    group2 *= 197;
    group2 += (*input)[0];

    group2 *= 197;
    group2 += (*input)[1];

    group2 *= 197;
    group2 += (*input)[2];

    *((uint64_t *)((*output) + 5)) |= (group2 << 6);
    *input += 3;
    uint64_t group3 = 0;
    group3 *= 197;
    group3 += (*input)[0];

    group3 *= 197;
    group3 += (*input)[1];

    group3 *= 197;
    group3 += (*input)[2];

    *((uint64_t *)((*output) + 8)) |= (group3 << 5);
    *input += 3;
    uint64_t group4 = 0;
    group4 *= 197;
    group4 += (*input)[0];

    group4 *= 197;
    group4 += (*input)[1];

    group4 *= 197;
    group4 += (*input)[2];

    *((uint64_t *)((*output) + 11)) |= (group4 << 4);
    *input += 3;
    uint64_t group5 = 0;
    group5 *= 197;
    group5 += (*input)[0];

    group5 *= 197;
    group5 += (*input)[1];

    group5 *= 197;
    group5 += (*input)[2];

    *((uint64_t *)((*output) + 14)) |= (group5 << 3);
    *input += 3;
    uint64_t group6 = 0;
    group6 *= 197;
    group6 += (*input)[0];

    group6 *= 197;
    group6 += (*input)[1];

    group6 *= 197;
    group6 += (*input)[2];

    *((uint64_t *)((*output) + 17)) |= (group6 << 2);
    *input += 3;
    uint64_t group7 = 0;
    group7 *= 197;
    group7 += (*input)[0];

    group7 *= 197;
    group7 += (*input)[1];

    group7 *= 197;
    group7 += (*input)[2];

    *((uint64_t *)((*output) + 20)) |= (group7 << 1);
    *input += 3;
    *output += 23;
}

// Pack 8 groups using 23 bytes (24 values total)
void Ultrapack_Compress198(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 198;
    group0 += (*input)[0];

    group0 *= 198;
    group0 += (*input)[1];

    group0 *= 198;
    group0 += (*input)[2];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 3;
    uint64_t group1 = 0;
    group1 *= 198;
    group1 += (*input)[0];

    group1 *= 198;
    group1 += (*input)[1];

    group1 *= 198;
    group1 += (*input)[2];

    *((uint64_t *)((*output) + 2)) |= (group1 << 7);
    *input += 3;
    uint64_t group2 = 0;
    group2 *= 198;
    group2 += (*input)[0];

    group2 *= 198;
    group2 += (*input)[1];

    group2 *= 198;
    group2 += (*input)[2];

    *((uint64_t *)((*output) + 5)) |= (group2 << 6);
    *input += 3;
    uint64_t group3 = 0;
    group3 *= 198;
    group3 += (*input)[0];

    group3 *= 198;
    group3 += (*input)[1];

    group3 *= 198;
    group3 += (*input)[2];

    *((uint64_t *)((*output) + 8)) |= (group3 << 5);
    *input += 3;
    uint64_t group4 = 0;
    group4 *= 198;
    group4 += (*input)[0];

    group4 *= 198;
    group4 += (*input)[1];

    group4 *= 198;
    group4 += (*input)[2];

    *((uint64_t *)((*output) + 11)) |= (group4 << 4);
    *input += 3;
    uint64_t group5 = 0;
    group5 *= 198;
    group5 += (*input)[0];

    group5 *= 198;
    group5 += (*input)[1];

    group5 *= 198;
    group5 += (*input)[2];

    *((uint64_t *)((*output) + 14)) |= (group5 << 3);
    *input += 3;
    uint64_t group6 = 0;
    group6 *= 198;
    group6 += (*input)[0];

    group6 *= 198;
    group6 += (*input)[1];

    group6 *= 198;
    group6 += (*input)[2];

    *((uint64_t *)((*output) + 17)) |= (group6 << 2);
    *input += 3;
    uint64_t group7 = 0;
    group7 *= 198;
    group7 += (*input)[0];

    group7 *= 198;
    group7 += (*input)[1];

    group7 *= 198;
    group7 += (*input)[2];

    *((uint64_t *)((*output) + 20)) |= (group7 << 1);
    *input += 3;
    *output += 23;
}

// Pack 8 groups using 23 bytes (24 values total)
void Ultrapack_Compress199(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 199;
    group0 += (*input)[0];

    group0 *= 199;
    group0 += (*input)[1];

    group0 *= 199;
    group0 += (*input)[2];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 3;
    uint64_t group1 = 0;
    group1 *= 199;
    group1 += (*input)[0];

    group1 *= 199;
    group1 += (*input)[1];

    group1 *= 199;
    group1 += (*input)[2];

    *((uint64_t *)((*output) + 2)) |= (group1 << 7);
    *input += 3;
    uint64_t group2 = 0;
    group2 *= 199;
    group2 += (*input)[0];

    group2 *= 199;
    group2 += (*input)[1];

    group2 *= 199;
    group2 += (*input)[2];

    *((uint64_t *)((*output) + 5)) |= (group2 << 6);
    *input += 3;
    uint64_t group3 = 0;
    group3 *= 199;
    group3 += (*input)[0];

    group3 *= 199;
    group3 += (*input)[1];

    group3 *= 199;
    group3 += (*input)[2];

    *((uint64_t *)((*output) + 8)) |= (group3 << 5);
    *input += 3;
    uint64_t group4 = 0;
    group4 *= 199;
    group4 += (*input)[0];

    group4 *= 199;
    group4 += (*input)[1];

    group4 *= 199;
    group4 += (*input)[2];

    *((uint64_t *)((*output) + 11)) |= (group4 << 4);
    *input += 3;
    uint64_t group5 = 0;
    group5 *= 199;
    group5 += (*input)[0];

    group5 *= 199;
    group5 += (*input)[1];

    group5 *= 199;
    group5 += (*input)[2];

    *((uint64_t *)((*output) + 14)) |= (group5 << 3);
    *input += 3;
    uint64_t group6 = 0;
    group6 *= 199;
    group6 += (*input)[0];

    group6 *= 199;
    group6 += (*input)[1];

    group6 *= 199;
    group6 += (*input)[2];

    *((uint64_t *)((*output) + 17)) |= (group6 << 2);
    *input += 3;
    uint64_t group7 = 0;
    group7 *= 199;
    group7 += (*input)[0];

    group7 *= 199;
    group7 += (*input)[1];

    group7 *= 199;
    group7 += (*input)[2];

    *((uint64_t *)((*output) + 20)) |= (group7 << 1);
    *input += 3;
    *output += 23;
}

// Pack 8 groups using 23 bytes (24 values total)
void Ultrapack_Compress200(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 200;
    group0 += (*input)[0];

    group0 *= 200;
    group0 += (*input)[1];

    group0 *= 200;
    group0 += (*input)[2];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 3;
    uint64_t group1 = 0;
    group1 *= 200;
    group1 += (*input)[0];

    group1 *= 200;
    group1 += (*input)[1];

    group1 *= 200;
    group1 += (*input)[2];

    *((uint64_t *)((*output) + 2)) |= (group1 << 7);
    *input += 3;
    uint64_t group2 = 0;
    group2 *= 200;
    group2 += (*input)[0];

    group2 *= 200;
    group2 += (*input)[1];

    group2 *= 200;
    group2 += (*input)[2];

    *((uint64_t *)((*output) + 5)) |= (group2 << 6);
    *input += 3;
    uint64_t group3 = 0;
    group3 *= 200;
    group3 += (*input)[0];

    group3 *= 200;
    group3 += (*input)[1];

    group3 *= 200;
    group3 += (*input)[2];

    *((uint64_t *)((*output) + 8)) |= (group3 << 5);
    *input += 3;
    uint64_t group4 = 0;
    group4 *= 200;
    group4 += (*input)[0];

    group4 *= 200;
    group4 += (*input)[1];

    group4 *= 200;
    group4 += (*input)[2];

    *((uint64_t *)((*output) + 11)) |= (group4 << 4);
    *input += 3;
    uint64_t group5 = 0;
    group5 *= 200;
    group5 += (*input)[0];

    group5 *= 200;
    group5 += (*input)[1];

    group5 *= 200;
    group5 += (*input)[2];

    *((uint64_t *)((*output) + 14)) |= (group5 << 3);
    *input += 3;
    uint64_t group6 = 0;
    group6 *= 200;
    group6 += (*input)[0];

    group6 *= 200;
    group6 += (*input)[1];

    group6 *= 200;
    group6 += (*input)[2];

    *((uint64_t *)((*output) + 17)) |= (group6 << 2);
    *input += 3;
    uint64_t group7 = 0;
    group7 *= 200;
    group7 += (*input)[0];

    group7 *= 200;
    group7 += (*input)[1];

    group7 *= 200;
    group7 += (*input)[2];

    *((uint64_t *)((*output) + 20)) |= (group7 << 1);
    *input += 3;
    *output += 23;
}

// Pack 8 groups using 23 bytes (24 values total)
void Ultrapack_Compress201(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 201;
    group0 += (*input)[0];

    group0 *= 201;
    group0 += (*input)[1];

    group0 *= 201;
    group0 += (*input)[2];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 3;
    uint64_t group1 = 0;
    group1 *= 201;
    group1 += (*input)[0];

    group1 *= 201;
    group1 += (*input)[1];

    group1 *= 201;
    group1 += (*input)[2];

    *((uint64_t *)((*output) + 2)) |= (group1 << 7);
    *input += 3;
    uint64_t group2 = 0;
    group2 *= 201;
    group2 += (*input)[0];

    group2 *= 201;
    group2 += (*input)[1];

    group2 *= 201;
    group2 += (*input)[2];

    *((uint64_t *)((*output) + 5)) |= (group2 << 6);
    *input += 3;
    uint64_t group3 = 0;
    group3 *= 201;
    group3 += (*input)[0];

    group3 *= 201;
    group3 += (*input)[1];

    group3 *= 201;
    group3 += (*input)[2];

    *((uint64_t *)((*output) + 8)) |= (group3 << 5);
    *input += 3;
    uint64_t group4 = 0;
    group4 *= 201;
    group4 += (*input)[0];

    group4 *= 201;
    group4 += (*input)[1];

    group4 *= 201;
    group4 += (*input)[2];

    *((uint64_t *)((*output) + 11)) |= (group4 << 4);
    *input += 3;
    uint64_t group5 = 0;
    group5 *= 201;
    group5 += (*input)[0];

    group5 *= 201;
    group5 += (*input)[1];

    group5 *= 201;
    group5 += (*input)[2];

    *((uint64_t *)((*output) + 14)) |= (group5 << 3);
    *input += 3;
    uint64_t group6 = 0;
    group6 *= 201;
    group6 += (*input)[0];

    group6 *= 201;
    group6 += (*input)[1];

    group6 *= 201;
    group6 += (*input)[2];

    *((uint64_t *)((*output) + 17)) |= (group6 << 2);
    *input += 3;
    uint64_t group7 = 0;
    group7 *= 201;
    group7 += (*input)[0];

    group7 *= 201;
    group7 += (*input)[1];

    group7 *= 201;
    group7 += (*input)[2];

    *((uint64_t *)((*output) + 20)) |= (group7 << 1);
    *input += 3;
    *output += 23;
}

// Pack 8 groups using 23 bytes (24 values total)
void Ultrapack_Compress202(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 202;
    group0 += (*input)[0];

    group0 *= 202;
    group0 += (*input)[1];

    group0 *= 202;
    group0 += (*input)[2];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 3;
    uint64_t group1 = 0;
    group1 *= 202;
    group1 += (*input)[0];

    group1 *= 202;
    group1 += (*input)[1];

    group1 *= 202;
    group1 += (*input)[2];

    *((uint64_t *)((*output) + 2)) |= (group1 << 7);
    *input += 3;
    uint64_t group2 = 0;
    group2 *= 202;
    group2 += (*input)[0];

    group2 *= 202;
    group2 += (*input)[1];

    group2 *= 202;
    group2 += (*input)[2];

    *((uint64_t *)((*output) + 5)) |= (group2 << 6);
    *input += 3;
    uint64_t group3 = 0;
    group3 *= 202;
    group3 += (*input)[0];

    group3 *= 202;
    group3 += (*input)[1];

    group3 *= 202;
    group3 += (*input)[2];

    *((uint64_t *)((*output) + 8)) |= (group3 << 5);
    *input += 3;
    uint64_t group4 = 0;
    group4 *= 202;
    group4 += (*input)[0];

    group4 *= 202;
    group4 += (*input)[1];

    group4 *= 202;
    group4 += (*input)[2];

    *((uint64_t *)((*output) + 11)) |= (group4 << 4);
    *input += 3;
    uint64_t group5 = 0;
    group5 *= 202;
    group5 += (*input)[0];

    group5 *= 202;
    group5 += (*input)[1];

    group5 *= 202;
    group5 += (*input)[2];

    *((uint64_t *)((*output) + 14)) |= (group5 << 3);
    *input += 3;
    uint64_t group6 = 0;
    group6 *= 202;
    group6 += (*input)[0];

    group6 *= 202;
    group6 += (*input)[1];

    group6 *= 202;
    group6 += (*input)[2];

    *((uint64_t *)((*output) + 17)) |= (group6 << 2);
    *input += 3;
    uint64_t group7 = 0;
    group7 *= 202;
    group7 += (*input)[0];

    group7 *= 202;
    group7 += (*input)[1];

    group7 *= 202;
    group7 += (*input)[2];

    *((uint64_t *)((*output) + 20)) |= (group7 << 1);
    *input += 3;
    *output += 23;
}

// Pack 8 groups using 23 bytes (24 values total)
void Ultrapack_Compress203(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 203;
    group0 += (*input)[0];

    group0 *= 203;
    group0 += (*input)[1];

    group0 *= 203;
    group0 += (*input)[2];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 3;
    uint64_t group1 = 0;
    group1 *= 203;
    group1 += (*input)[0];

    group1 *= 203;
    group1 += (*input)[1];

    group1 *= 203;
    group1 += (*input)[2];

    *((uint64_t *)((*output) + 2)) |= (group1 << 7);
    *input += 3;
    uint64_t group2 = 0;
    group2 *= 203;
    group2 += (*input)[0];

    group2 *= 203;
    group2 += (*input)[1];

    group2 *= 203;
    group2 += (*input)[2];

    *((uint64_t *)((*output) + 5)) |= (group2 << 6);
    *input += 3;
    uint64_t group3 = 0;
    group3 *= 203;
    group3 += (*input)[0];

    group3 *= 203;
    group3 += (*input)[1];

    group3 *= 203;
    group3 += (*input)[2];

    *((uint64_t *)((*output) + 8)) |= (group3 << 5);
    *input += 3;
    uint64_t group4 = 0;
    group4 *= 203;
    group4 += (*input)[0];

    group4 *= 203;
    group4 += (*input)[1];

    group4 *= 203;
    group4 += (*input)[2];

    *((uint64_t *)((*output) + 11)) |= (group4 << 4);
    *input += 3;
    uint64_t group5 = 0;
    group5 *= 203;
    group5 += (*input)[0];

    group5 *= 203;
    group5 += (*input)[1];

    group5 *= 203;
    group5 += (*input)[2];

    *((uint64_t *)((*output) + 14)) |= (group5 << 3);
    *input += 3;
    uint64_t group6 = 0;
    group6 *= 203;
    group6 += (*input)[0];

    group6 *= 203;
    group6 += (*input)[1];

    group6 *= 203;
    group6 += (*input)[2];

    *((uint64_t *)((*output) + 17)) |= (group6 << 2);
    *input += 3;
    uint64_t group7 = 0;
    group7 *= 203;
    group7 += (*input)[0];

    group7 *= 203;
    group7 += (*input)[1];

    group7 *= 203;
    group7 += (*input)[2];

    *((uint64_t *)((*output) + 20)) |= (group7 << 1);
    *input += 3;
    *output += 23;
}

// Pack 8 groups using 31 bytes (32 values total)
void Ultrapack_Compress204(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 204;
    group0 += (*input)[0];

    group0 *= 204;
    group0 += (*input)[1];

    group0 *= 204;
    group0 += (*input)[2];

    group0 *= 204;
    group0 += (*input)[3];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 4;
    uint64_t group1 = 0;
    group1 *= 204;
    group1 += (*input)[0];

    group1 *= 204;
    group1 += (*input)[1];

    group1 *= 204;
    group1 += (*input)[2];

    group1 *= 204;
    group1 += (*input)[3];

    *((uint64_t *)((*output) + 3)) |= (group1 << 7);
    *input += 4;
    uint64_t group2 = 0;
    group2 *= 204;
    group2 += (*input)[0];

    group2 *= 204;
    group2 += (*input)[1];

    group2 *= 204;
    group2 += (*input)[2];

    group2 *= 204;
    group2 += (*input)[3];

    *((uint64_t *)((*output) + 7)) |= (group2 << 6);
    *input += 4;
    uint64_t group3 = 0;
    group3 *= 204;
    group3 += (*input)[0];

    group3 *= 204;
    group3 += (*input)[1];

    group3 *= 204;
    group3 += (*input)[2];

    group3 *= 204;
    group3 += (*input)[3];

    *((uint64_t *)((*output) + 11)) |= (group3 << 5);
    *input += 4;
    uint64_t group4 = 0;
    group4 *= 204;
    group4 += (*input)[0];

    group4 *= 204;
    group4 += (*input)[1];

    group4 *= 204;
    group4 += (*input)[2];

    group4 *= 204;
    group4 += (*input)[3];

    *((uint64_t *)((*output) + 15)) |= (group4 << 4);
    *input += 4;
    uint64_t group5 = 0;
    group5 *= 204;
    group5 += (*input)[0];

    group5 *= 204;
    group5 += (*input)[1];

    group5 *= 204;
    group5 += (*input)[2];

    group5 *= 204;
    group5 += (*input)[3];

    *((uint64_t *)((*output) + 19)) |= (group5 << 3);
    *input += 4;
    uint64_t group6 = 0;
    group6 *= 204;
    group6 += (*input)[0];

    group6 *= 204;
    group6 += (*input)[1];

    group6 *= 204;
    group6 += (*input)[2];

    group6 *= 204;
    group6 += (*input)[3];

    *((uint64_t *)((*output) + 23)) |= (group6 << 2);
    *input += 4;
    uint64_t group7 = 0;
    group7 *= 204;
    group7 += (*input)[0];

    group7 *= 204;
    group7 += (*input)[1];

    group7 *= 204;
    group7 += (*input)[2];

    group7 *= 204;
    group7 += (*input)[3];

    *((uint64_t *)((*output) + 27)) |= (group7 << 1);
    *input += 4;
    *output += 31;
}

// Pack 8 groups using 31 bytes (32 values total)
void Ultrapack_Compress205(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 205;
    group0 += (*input)[0];

    group0 *= 205;
    group0 += (*input)[1];

    group0 *= 205;
    group0 += (*input)[2];

    group0 *= 205;
    group0 += (*input)[3];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 4;
    uint64_t group1 = 0;
    group1 *= 205;
    group1 += (*input)[0];

    group1 *= 205;
    group1 += (*input)[1];

    group1 *= 205;
    group1 += (*input)[2];

    group1 *= 205;
    group1 += (*input)[3];

    *((uint64_t *)((*output) + 3)) |= (group1 << 7);
    *input += 4;
    uint64_t group2 = 0;
    group2 *= 205;
    group2 += (*input)[0];

    group2 *= 205;
    group2 += (*input)[1];

    group2 *= 205;
    group2 += (*input)[2];

    group2 *= 205;
    group2 += (*input)[3];

    *((uint64_t *)((*output) + 7)) |= (group2 << 6);
    *input += 4;
    uint64_t group3 = 0;
    group3 *= 205;
    group3 += (*input)[0];

    group3 *= 205;
    group3 += (*input)[1];

    group3 *= 205;
    group3 += (*input)[2];

    group3 *= 205;
    group3 += (*input)[3];

    *((uint64_t *)((*output) + 11)) |= (group3 << 5);
    *input += 4;
    uint64_t group4 = 0;
    group4 *= 205;
    group4 += (*input)[0];

    group4 *= 205;
    group4 += (*input)[1];

    group4 *= 205;
    group4 += (*input)[2];

    group4 *= 205;
    group4 += (*input)[3];

    *((uint64_t *)((*output) + 15)) |= (group4 << 4);
    *input += 4;
    uint64_t group5 = 0;
    group5 *= 205;
    group5 += (*input)[0];

    group5 *= 205;
    group5 += (*input)[1];

    group5 *= 205;
    group5 += (*input)[2];

    group5 *= 205;
    group5 += (*input)[3];

    *((uint64_t *)((*output) + 19)) |= (group5 << 3);
    *input += 4;
    uint64_t group6 = 0;
    group6 *= 205;
    group6 += (*input)[0];

    group6 *= 205;
    group6 += (*input)[1];

    group6 *= 205;
    group6 += (*input)[2];

    group6 *= 205;
    group6 += (*input)[3];

    *((uint64_t *)((*output) + 23)) |= (group6 << 2);
    *input += 4;
    uint64_t group7 = 0;
    group7 *= 205;
    group7 += (*input)[0];

    group7 *= 205;
    group7 += (*input)[1];

    group7 *= 205;
    group7 += (*input)[2];

    group7 *= 205;
    group7 += (*input)[3];

    *((uint64_t *)((*output) + 27)) |= (group7 << 1);
    *input += 4;
    *output += 31;
}

// Pack 8 groups using 31 bytes (32 values total)
void Ultrapack_Compress206(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 206;
    group0 += (*input)[0];

    group0 *= 206;
    group0 += (*input)[1];

    group0 *= 206;
    group0 += (*input)[2];

    group0 *= 206;
    group0 += (*input)[3];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 4;
    uint64_t group1 = 0;
    group1 *= 206;
    group1 += (*input)[0];

    group1 *= 206;
    group1 += (*input)[1];

    group1 *= 206;
    group1 += (*input)[2];

    group1 *= 206;
    group1 += (*input)[3];

    *((uint64_t *)((*output) + 3)) |= (group1 << 7);
    *input += 4;
    uint64_t group2 = 0;
    group2 *= 206;
    group2 += (*input)[0];

    group2 *= 206;
    group2 += (*input)[1];

    group2 *= 206;
    group2 += (*input)[2];

    group2 *= 206;
    group2 += (*input)[3];

    *((uint64_t *)((*output) + 7)) |= (group2 << 6);
    *input += 4;
    uint64_t group3 = 0;
    group3 *= 206;
    group3 += (*input)[0];

    group3 *= 206;
    group3 += (*input)[1];

    group3 *= 206;
    group3 += (*input)[2];

    group3 *= 206;
    group3 += (*input)[3];

    *((uint64_t *)((*output) + 11)) |= (group3 << 5);
    *input += 4;
    uint64_t group4 = 0;
    group4 *= 206;
    group4 += (*input)[0];

    group4 *= 206;
    group4 += (*input)[1];

    group4 *= 206;
    group4 += (*input)[2];

    group4 *= 206;
    group4 += (*input)[3];

    *((uint64_t *)((*output) + 15)) |= (group4 << 4);
    *input += 4;
    uint64_t group5 = 0;
    group5 *= 206;
    group5 += (*input)[0];

    group5 *= 206;
    group5 += (*input)[1];

    group5 *= 206;
    group5 += (*input)[2];

    group5 *= 206;
    group5 += (*input)[3];

    *((uint64_t *)((*output) + 19)) |= (group5 << 3);
    *input += 4;
    uint64_t group6 = 0;
    group6 *= 206;
    group6 += (*input)[0];

    group6 *= 206;
    group6 += (*input)[1];

    group6 *= 206;
    group6 += (*input)[2];

    group6 *= 206;
    group6 += (*input)[3];

    *((uint64_t *)((*output) + 23)) |= (group6 << 2);
    *input += 4;
    uint64_t group7 = 0;
    group7 *= 206;
    group7 += (*input)[0];

    group7 *= 206;
    group7 += (*input)[1];

    group7 *= 206;
    group7 += (*input)[2];

    group7 *= 206;
    group7 += (*input)[3];

    *((uint64_t *)((*output) + 27)) |= (group7 << 1);
    *input += 4;
    *output += 31;
}

// Pack 8 groups using 31 bytes (32 values total)
void Ultrapack_Compress207(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 207;
    group0 += (*input)[0];

    group0 *= 207;
    group0 += (*input)[1];

    group0 *= 207;
    group0 += (*input)[2];

    group0 *= 207;
    group0 += (*input)[3];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 4;
    uint64_t group1 = 0;
    group1 *= 207;
    group1 += (*input)[0];

    group1 *= 207;
    group1 += (*input)[1];

    group1 *= 207;
    group1 += (*input)[2];

    group1 *= 207;
    group1 += (*input)[3];

    *((uint64_t *)((*output) + 3)) |= (group1 << 7);
    *input += 4;
    uint64_t group2 = 0;
    group2 *= 207;
    group2 += (*input)[0];

    group2 *= 207;
    group2 += (*input)[1];

    group2 *= 207;
    group2 += (*input)[2];

    group2 *= 207;
    group2 += (*input)[3];

    *((uint64_t *)((*output) + 7)) |= (group2 << 6);
    *input += 4;
    uint64_t group3 = 0;
    group3 *= 207;
    group3 += (*input)[0];

    group3 *= 207;
    group3 += (*input)[1];

    group3 *= 207;
    group3 += (*input)[2];

    group3 *= 207;
    group3 += (*input)[3];

    *((uint64_t *)((*output) + 11)) |= (group3 << 5);
    *input += 4;
    uint64_t group4 = 0;
    group4 *= 207;
    group4 += (*input)[0];

    group4 *= 207;
    group4 += (*input)[1];

    group4 *= 207;
    group4 += (*input)[2];

    group4 *= 207;
    group4 += (*input)[3];

    *((uint64_t *)((*output) + 15)) |= (group4 << 4);
    *input += 4;
    uint64_t group5 = 0;
    group5 *= 207;
    group5 += (*input)[0];

    group5 *= 207;
    group5 += (*input)[1];

    group5 *= 207;
    group5 += (*input)[2];

    group5 *= 207;
    group5 += (*input)[3];

    *((uint64_t *)((*output) + 19)) |= (group5 << 3);
    *input += 4;
    uint64_t group6 = 0;
    group6 *= 207;
    group6 += (*input)[0];

    group6 *= 207;
    group6 += (*input)[1];

    group6 *= 207;
    group6 += (*input)[2];

    group6 *= 207;
    group6 += (*input)[3];

    *((uint64_t *)((*output) + 23)) |= (group6 << 2);
    *input += 4;
    uint64_t group7 = 0;
    group7 *= 207;
    group7 += (*input)[0];

    group7 *= 207;
    group7 += (*input)[1];

    group7 *= 207;
    group7 += (*input)[2];

    group7 *= 207;
    group7 += (*input)[3];

    *((uint64_t *)((*output) + 27)) |= (group7 << 1);
    *input += 4;
    *output += 31;
}

// Pack 8 groups using 31 bytes (32 values total)
void Ultrapack_Compress208(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 208;
    group0 += (*input)[0];

    group0 *= 208;
    group0 += (*input)[1];

    group0 *= 208;
    group0 += (*input)[2];

    group0 *= 208;
    group0 += (*input)[3];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 4;
    uint64_t group1 = 0;
    group1 *= 208;
    group1 += (*input)[0];

    group1 *= 208;
    group1 += (*input)[1];

    group1 *= 208;
    group1 += (*input)[2];

    group1 *= 208;
    group1 += (*input)[3];

    *((uint64_t *)((*output) + 3)) |= (group1 << 7);
    *input += 4;
    uint64_t group2 = 0;
    group2 *= 208;
    group2 += (*input)[0];

    group2 *= 208;
    group2 += (*input)[1];

    group2 *= 208;
    group2 += (*input)[2];

    group2 *= 208;
    group2 += (*input)[3];

    *((uint64_t *)((*output) + 7)) |= (group2 << 6);
    *input += 4;
    uint64_t group3 = 0;
    group3 *= 208;
    group3 += (*input)[0];

    group3 *= 208;
    group3 += (*input)[1];

    group3 *= 208;
    group3 += (*input)[2];

    group3 *= 208;
    group3 += (*input)[3];

    *((uint64_t *)((*output) + 11)) |= (group3 << 5);
    *input += 4;
    uint64_t group4 = 0;
    group4 *= 208;
    group4 += (*input)[0];

    group4 *= 208;
    group4 += (*input)[1];

    group4 *= 208;
    group4 += (*input)[2];

    group4 *= 208;
    group4 += (*input)[3];

    *((uint64_t *)((*output) + 15)) |= (group4 << 4);
    *input += 4;
    uint64_t group5 = 0;
    group5 *= 208;
    group5 += (*input)[0];

    group5 *= 208;
    group5 += (*input)[1];

    group5 *= 208;
    group5 += (*input)[2];

    group5 *= 208;
    group5 += (*input)[3];

    *((uint64_t *)((*output) + 19)) |= (group5 << 3);
    *input += 4;
    uint64_t group6 = 0;
    group6 *= 208;
    group6 += (*input)[0];

    group6 *= 208;
    group6 += (*input)[1];

    group6 *= 208;
    group6 += (*input)[2];

    group6 *= 208;
    group6 += (*input)[3];

    *((uint64_t *)((*output) + 23)) |= (group6 << 2);
    *input += 4;
    uint64_t group7 = 0;
    group7 *= 208;
    group7 += (*input)[0];

    group7 *= 208;
    group7 += (*input)[1];

    group7 *= 208;
    group7 += (*input)[2];

    group7 *= 208;
    group7 += (*input)[3];

    *((uint64_t *)((*output) + 27)) |= (group7 << 1);
    *input += 4;
    *output += 31;
}

// Pack 8 groups using 31 bytes (32 values total)
void Ultrapack_Compress209(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 209;
    group0 += (*input)[0];

    group0 *= 209;
    group0 += (*input)[1];

    group0 *= 209;
    group0 += (*input)[2];

    group0 *= 209;
    group0 += (*input)[3];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 4;
    uint64_t group1 = 0;
    group1 *= 209;
    group1 += (*input)[0];

    group1 *= 209;
    group1 += (*input)[1];

    group1 *= 209;
    group1 += (*input)[2];

    group1 *= 209;
    group1 += (*input)[3];

    *((uint64_t *)((*output) + 3)) |= (group1 << 7);
    *input += 4;
    uint64_t group2 = 0;
    group2 *= 209;
    group2 += (*input)[0];

    group2 *= 209;
    group2 += (*input)[1];

    group2 *= 209;
    group2 += (*input)[2];

    group2 *= 209;
    group2 += (*input)[3];

    *((uint64_t *)((*output) + 7)) |= (group2 << 6);
    *input += 4;
    uint64_t group3 = 0;
    group3 *= 209;
    group3 += (*input)[0];

    group3 *= 209;
    group3 += (*input)[1];

    group3 *= 209;
    group3 += (*input)[2];

    group3 *= 209;
    group3 += (*input)[3];

    *((uint64_t *)((*output) + 11)) |= (group3 << 5);
    *input += 4;
    uint64_t group4 = 0;
    group4 *= 209;
    group4 += (*input)[0];

    group4 *= 209;
    group4 += (*input)[1];

    group4 *= 209;
    group4 += (*input)[2];

    group4 *= 209;
    group4 += (*input)[3];

    *((uint64_t *)((*output) + 15)) |= (group4 << 4);
    *input += 4;
    uint64_t group5 = 0;
    group5 *= 209;
    group5 += (*input)[0];

    group5 *= 209;
    group5 += (*input)[1];

    group5 *= 209;
    group5 += (*input)[2];

    group5 *= 209;
    group5 += (*input)[3];

    *((uint64_t *)((*output) + 19)) |= (group5 << 3);
    *input += 4;
    uint64_t group6 = 0;
    group6 *= 209;
    group6 += (*input)[0];

    group6 *= 209;
    group6 += (*input)[1];

    group6 *= 209;
    group6 += (*input)[2];

    group6 *= 209;
    group6 += (*input)[3];

    *((uint64_t *)((*output) + 23)) |= (group6 << 2);
    *input += 4;
    uint64_t group7 = 0;
    group7 *= 209;
    group7 += (*input)[0];

    group7 *= 209;
    group7 += (*input)[1];

    group7 *= 209;
    group7 += (*input)[2];

    group7 *= 209;
    group7 += (*input)[3];

    *((uint64_t *)((*output) + 27)) |= (group7 << 1);
    *input += 4;
    *output += 31;
}

// Pack 8 groups using 31 bytes (32 values total)
void Ultrapack_Compress210(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 210;
    group0 += (*input)[0];

    group0 *= 210;
    group0 += (*input)[1];

    group0 *= 210;
    group0 += (*input)[2];

    group0 *= 210;
    group0 += (*input)[3];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 4;
    uint64_t group1 = 0;
    group1 *= 210;
    group1 += (*input)[0];

    group1 *= 210;
    group1 += (*input)[1];

    group1 *= 210;
    group1 += (*input)[2];

    group1 *= 210;
    group1 += (*input)[3];

    *((uint64_t *)((*output) + 3)) |= (group1 << 7);
    *input += 4;
    uint64_t group2 = 0;
    group2 *= 210;
    group2 += (*input)[0];

    group2 *= 210;
    group2 += (*input)[1];

    group2 *= 210;
    group2 += (*input)[2];

    group2 *= 210;
    group2 += (*input)[3];

    *((uint64_t *)((*output) + 7)) |= (group2 << 6);
    *input += 4;
    uint64_t group3 = 0;
    group3 *= 210;
    group3 += (*input)[0];

    group3 *= 210;
    group3 += (*input)[1];

    group3 *= 210;
    group3 += (*input)[2];

    group3 *= 210;
    group3 += (*input)[3];

    *((uint64_t *)((*output) + 11)) |= (group3 << 5);
    *input += 4;
    uint64_t group4 = 0;
    group4 *= 210;
    group4 += (*input)[0];

    group4 *= 210;
    group4 += (*input)[1];

    group4 *= 210;
    group4 += (*input)[2];

    group4 *= 210;
    group4 += (*input)[3];

    *((uint64_t *)((*output) + 15)) |= (group4 << 4);
    *input += 4;
    uint64_t group5 = 0;
    group5 *= 210;
    group5 += (*input)[0];

    group5 *= 210;
    group5 += (*input)[1];

    group5 *= 210;
    group5 += (*input)[2];

    group5 *= 210;
    group5 += (*input)[3];

    *((uint64_t *)((*output) + 19)) |= (group5 << 3);
    *input += 4;
    uint64_t group6 = 0;
    group6 *= 210;
    group6 += (*input)[0];

    group6 *= 210;
    group6 += (*input)[1];

    group6 *= 210;
    group6 += (*input)[2];

    group6 *= 210;
    group6 += (*input)[3];

    *((uint64_t *)((*output) + 23)) |= (group6 << 2);
    *input += 4;
    uint64_t group7 = 0;
    group7 *= 210;
    group7 += (*input)[0];

    group7 *= 210;
    group7 += (*input)[1];

    group7 *= 210;
    group7 += (*input)[2];

    group7 *= 210;
    group7 += (*input)[3];

    *((uint64_t *)((*output) + 27)) |= (group7 << 1);
    *input += 4;
    *output += 31;
}

// Pack 8 groups using 31 bytes (32 values total)
void Ultrapack_Compress211(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 211;
    group0 += (*input)[0];

    group0 *= 211;
    group0 += (*input)[1];

    group0 *= 211;
    group0 += (*input)[2];

    group0 *= 211;
    group0 += (*input)[3];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 4;
    uint64_t group1 = 0;
    group1 *= 211;
    group1 += (*input)[0];

    group1 *= 211;
    group1 += (*input)[1];

    group1 *= 211;
    group1 += (*input)[2];

    group1 *= 211;
    group1 += (*input)[3];

    *((uint64_t *)((*output) + 3)) |= (group1 << 7);
    *input += 4;
    uint64_t group2 = 0;
    group2 *= 211;
    group2 += (*input)[0];

    group2 *= 211;
    group2 += (*input)[1];

    group2 *= 211;
    group2 += (*input)[2];

    group2 *= 211;
    group2 += (*input)[3];

    *((uint64_t *)((*output) + 7)) |= (group2 << 6);
    *input += 4;
    uint64_t group3 = 0;
    group3 *= 211;
    group3 += (*input)[0];

    group3 *= 211;
    group3 += (*input)[1];

    group3 *= 211;
    group3 += (*input)[2];

    group3 *= 211;
    group3 += (*input)[3];

    *((uint64_t *)((*output) + 11)) |= (group3 << 5);
    *input += 4;
    uint64_t group4 = 0;
    group4 *= 211;
    group4 += (*input)[0];

    group4 *= 211;
    group4 += (*input)[1];

    group4 *= 211;
    group4 += (*input)[2];

    group4 *= 211;
    group4 += (*input)[3];

    *((uint64_t *)((*output) + 15)) |= (group4 << 4);
    *input += 4;
    uint64_t group5 = 0;
    group5 *= 211;
    group5 += (*input)[0];

    group5 *= 211;
    group5 += (*input)[1];

    group5 *= 211;
    group5 += (*input)[2];

    group5 *= 211;
    group5 += (*input)[3];

    *((uint64_t *)((*output) + 19)) |= (group5 << 3);
    *input += 4;
    uint64_t group6 = 0;
    group6 *= 211;
    group6 += (*input)[0];

    group6 *= 211;
    group6 += (*input)[1];

    group6 *= 211;
    group6 += (*input)[2];

    group6 *= 211;
    group6 += (*input)[3];

    *((uint64_t *)((*output) + 23)) |= (group6 << 2);
    *input += 4;
    uint64_t group7 = 0;
    group7 *= 211;
    group7 += (*input)[0];

    group7 *= 211;
    group7 += (*input)[1];

    group7 *= 211;
    group7 += (*input)[2];

    group7 *= 211;
    group7 += (*input)[3];

    *((uint64_t *)((*output) + 27)) |= (group7 << 1);
    *input += 4;
    *output += 31;
}

// Pack 8 groups using 31 bytes (32 values total)
void Ultrapack_Compress212(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 212;
    group0 += (*input)[0];

    group0 *= 212;
    group0 += (*input)[1];

    group0 *= 212;
    group0 += (*input)[2];

    group0 *= 212;
    group0 += (*input)[3];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 4;
    uint64_t group1 = 0;
    group1 *= 212;
    group1 += (*input)[0];

    group1 *= 212;
    group1 += (*input)[1];

    group1 *= 212;
    group1 += (*input)[2];

    group1 *= 212;
    group1 += (*input)[3];

    *((uint64_t *)((*output) + 3)) |= (group1 << 7);
    *input += 4;
    uint64_t group2 = 0;
    group2 *= 212;
    group2 += (*input)[0];

    group2 *= 212;
    group2 += (*input)[1];

    group2 *= 212;
    group2 += (*input)[2];

    group2 *= 212;
    group2 += (*input)[3];

    *((uint64_t *)((*output) + 7)) |= (group2 << 6);
    *input += 4;
    uint64_t group3 = 0;
    group3 *= 212;
    group3 += (*input)[0];

    group3 *= 212;
    group3 += (*input)[1];

    group3 *= 212;
    group3 += (*input)[2];

    group3 *= 212;
    group3 += (*input)[3];

    *((uint64_t *)((*output) + 11)) |= (group3 << 5);
    *input += 4;
    uint64_t group4 = 0;
    group4 *= 212;
    group4 += (*input)[0];

    group4 *= 212;
    group4 += (*input)[1];

    group4 *= 212;
    group4 += (*input)[2];

    group4 *= 212;
    group4 += (*input)[3];

    *((uint64_t *)((*output) + 15)) |= (group4 << 4);
    *input += 4;
    uint64_t group5 = 0;
    group5 *= 212;
    group5 += (*input)[0];

    group5 *= 212;
    group5 += (*input)[1];

    group5 *= 212;
    group5 += (*input)[2];

    group5 *= 212;
    group5 += (*input)[3];

    *((uint64_t *)((*output) + 19)) |= (group5 << 3);
    *input += 4;
    uint64_t group6 = 0;
    group6 *= 212;
    group6 += (*input)[0];

    group6 *= 212;
    group6 += (*input)[1];

    group6 *= 212;
    group6 += (*input)[2];

    group6 *= 212;
    group6 += (*input)[3];

    *((uint64_t *)((*output) + 23)) |= (group6 << 2);
    *input += 4;
    uint64_t group7 = 0;
    group7 *= 212;
    group7 += (*input)[0];

    group7 *= 212;
    group7 += (*input)[1];

    group7 *= 212;
    group7 += (*input)[2];

    group7 *= 212;
    group7 += (*input)[3];

    *((uint64_t *)((*output) + 27)) |= (group7 << 1);
    *input += 4;
    *output += 31;
}

// Pack 8 groups using 31 bytes (32 values total)
void Ultrapack_Compress213(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 213;
    group0 += (*input)[0];

    group0 *= 213;
    group0 += (*input)[1];

    group0 *= 213;
    group0 += (*input)[2];

    group0 *= 213;
    group0 += (*input)[3];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 4;
    uint64_t group1 = 0;
    group1 *= 213;
    group1 += (*input)[0];

    group1 *= 213;
    group1 += (*input)[1];

    group1 *= 213;
    group1 += (*input)[2];

    group1 *= 213;
    group1 += (*input)[3];

    *((uint64_t *)((*output) + 3)) |= (group1 << 7);
    *input += 4;
    uint64_t group2 = 0;
    group2 *= 213;
    group2 += (*input)[0];

    group2 *= 213;
    group2 += (*input)[1];

    group2 *= 213;
    group2 += (*input)[2];

    group2 *= 213;
    group2 += (*input)[3];

    *((uint64_t *)((*output) + 7)) |= (group2 << 6);
    *input += 4;
    uint64_t group3 = 0;
    group3 *= 213;
    group3 += (*input)[0];

    group3 *= 213;
    group3 += (*input)[1];

    group3 *= 213;
    group3 += (*input)[2];

    group3 *= 213;
    group3 += (*input)[3];

    *((uint64_t *)((*output) + 11)) |= (group3 << 5);
    *input += 4;
    uint64_t group4 = 0;
    group4 *= 213;
    group4 += (*input)[0];

    group4 *= 213;
    group4 += (*input)[1];

    group4 *= 213;
    group4 += (*input)[2];

    group4 *= 213;
    group4 += (*input)[3];

    *((uint64_t *)((*output) + 15)) |= (group4 << 4);
    *input += 4;
    uint64_t group5 = 0;
    group5 *= 213;
    group5 += (*input)[0];

    group5 *= 213;
    group5 += (*input)[1];

    group5 *= 213;
    group5 += (*input)[2];

    group5 *= 213;
    group5 += (*input)[3];

    *((uint64_t *)((*output) + 19)) |= (group5 << 3);
    *input += 4;
    uint64_t group6 = 0;
    group6 *= 213;
    group6 += (*input)[0];

    group6 *= 213;
    group6 += (*input)[1];

    group6 *= 213;
    group6 += (*input)[2];

    group6 *= 213;
    group6 += (*input)[3];

    *((uint64_t *)((*output) + 23)) |= (group6 << 2);
    *input += 4;
    uint64_t group7 = 0;
    group7 *= 213;
    group7 += (*input)[0];

    group7 *= 213;
    group7 += (*input)[1];

    group7 *= 213;
    group7 += (*input)[2];

    group7 *= 213;
    group7 += (*input)[3];

    *((uint64_t *)((*output) + 27)) |= (group7 << 1);
    *input += 4;
    *output += 31;
}

// Pack 8 groups using 31 bytes (32 values total)
void Ultrapack_Compress214(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 214;
    group0 += (*input)[0];

    group0 *= 214;
    group0 += (*input)[1];

    group0 *= 214;
    group0 += (*input)[2];

    group0 *= 214;
    group0 += (*input)[3];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 4;
    uint64_t group1 = 0;
    group1 *= 214;
    group1 += (*input)[0];

    group1 *= 214;
    group1 += (*input)[1];

    group1 *= 214;
    group1 += (*input)[2];

    group1 *= 214;
    group1 += (*input)[3];

    *((uint64_t *)((*output) + 3)) |= (group1 << 7);
    *input += 4;
    uint64_t group2 = 0;
    group2 *= 214;
    group2 += (*input)[0];

    group2 *= 214;
    group2 += (*input)[1];

    group2 *= 214;
    group2 += (*input)[2];

    group2 *= 214;
    group2 += (*input)[3];

    *((uint64_t *)((*output) + 7)) |= (group2 << 6);
    *input += 4;
    uint64_t group3 = 0;
    group3 *= 214;
    group3 += (*input)[0];

    group3 *= 214;
    group3 += (*input)[1];

    group3 *= 214;
    group3 += (*input)[2];

    group3 *= 214;
    group3 += (*input)[3];

    *((uint64_t *)((*output) + 11)) |= (group3 << 5);
    *input += 4;
    uint64_t group4 = 0;
    group4 *= 214;
    group4 += (*input)[0];

    group4 *= 214;
    group4 += (*input)[1];

    group4 *= 214;
    group4 += (*input)[2];

    group4 *= 214;
    group4 += (*input)[3];

    *((uint64_t *)((*output) + 15)) |= (group4 << 4);
    *input += 4;
    uint64_t group5 = 0;
    group5 *= 214;
    group5 += (*input)[0];

    group5 *= 214;
    group5 += (*input)[1];

    group5 *= 214;
    group5 += (*input)[2];

    group5 *= 214;
    group5 += (*input)[3];

    *((uint64_t *)((*output) + 19)) |= (group5 << 3);
    *input += 4;
    uint64_t group6 = 0;
    group6 *= 214;
    group6 += (*input)[0];

    group6 *= 214;
    group6 += (*input)[1];

    group6 *= 214;
    group6 += (*input)[2];

    group6 *= 214;
    group6 += (*input)[3];

    *((uint64_t *)((*output) + 23)) |= (group6 << 2);
    *input += 4;
    uint64_t group7 = 0;
    group7 *= 214;
    group7 += (*input)[0];

    group7 *= 214;
    group7 += (*input)[1];

    group7 *= 214;
    group7 += (*input)[2];

    group7 *= 214;
    group7 += (*input)[3];

    *((uint64_t *)((*output) + 27)) |= (group7 << 1);
    *input += 4;
    *output += 31;
}

// Pack 8 groups using 31 bytes (32 values total)
void Ultrapack_Compress215(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 215;
    group0 += (*input)[0];

    group0 *= 215;
    group0 += (*input)[1];

    group0 *= 215;
    group0 += (*input)[2];

    group0 *= 215;
    group0 += (*input)[3];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 4;
    uint64_t group1 = 0;
    group1 *= 215;
    group1 += (*input)[0];

    group1 *= 215;
    group1 += (*input)[1];

    group1 *= 215;
    group1 += (*input)[2];

    group1 *= 215;
    group1 += (*input)[3];

    *((uint64_t *)((*output) + 3)) |= (group1 << 7);
    *input += 4;
    uint64_t group2 = 0;
    group2 *= 215;
    group2 += (*input)[0];

    group2 *= 215;
    group2 += (*input)[1];

    group2 *= 215;
    group2 += (*input)[2];

    group2 *= 215;
    group2 += (*input)[3];

    *((uint64_t *)((*output) + 7)) |= (group2 << 6);
    *input += 4;
    uint64_t group3 = 0;
    group3 *= 215;
    group3 += (*input)[0];

    group3 *= 215;
    group3 += (*input)[1];

    group3 *= 215;
    group3 += (*input)[2];

    group3 *= 215;
    group3 += (*input)[3];

    *((uint64_t *)((*output) + 11)) |= (group3 << 5);
    *input += 4;
    uint64_t group4 = 0;
    group4 *= 215;
    group4 += (*input)[0];

    group4 *= 215;
    group4 += (*input)[1];

    group4 *= 215;
    group4 += (*input)[2];

    group4 *= 215;
    group4 += (*input)[3];

    *((uint64_t *)((*output) + 15)) |= (group4 << 4);
    *input += 4;
    uint64_t group5 = 0;
    group5 *= 215;
    group5 += (*input)[0];

    group5 *= 215;
    group5 += (*input)[1];

    group5 *= 215;
    group5 += (*input)[2];

    group5 *= 215;
    group5 += (*input)[3];

    *((uint64_t *)((*output) + 19)) |= (group5 << 3);
    *input += 4;
    uint64_t group6 = 0;
    group6 *= 215;
    group6 += (*input)[0];

    group6 *= 215;
    group6 += (*input)[1];

    group6 *= 215;
    group6 += (*input)[2];

    group6 *= 215;
    group6 += (*input)[3];

    *((uint64_t *)((*output) + 23)) |= (group6 << 2);
    *input += 4;
    uint64_t group7 = 0;
    group7 *= 215;
    group7 += (*input)[0];

    group7 *= 215;
    group7 += (*input)[1];

    group7 *= 215;
    group7 += (*input)[2];

    group7 *= 215;
    group7 += (*input)[3];

    *((uint64_t *)((*output) + 27)) |= (group7 << 1);
    *input += 4;
    *output += 31;
}

// Pack 8 groups using 39 bytes (40 values total)
void Ultrapack_Compress216(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 216;
    group0 += (*input)[0];

    group0 *= 216;
    group0 += (*input)[1];

    group0 *= 216;
    group0 += (*input)[2];

    group0 *= 216;
    group0 += (*input)[3];

    group0 *= 216;
    group0 += (*input)[4];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 5;
    uint64_t group1 = 0;
    group1 *= 216;
    group1 += (*input)[0];

    group1 *= 216;
    group1 += (*input)[1];

    group1 *= 216;
    group1 += (*input)[2];

    group1 *= 216;
    group1 += (*input)[3];

    group1 *= 216;
    group1 += (*input)[4];

    *((uint64_t *)((*output) + 4)) |= (group1 << 7);
    *input += 5;
    uint64_t group2 = 0;
    group2 *= 216;
    group2 += (*input)[0];

    group2 *= 216;
    group2 += (*input)[1];

    group2 *= 216;
    group2 += (*input)[2];

    group2 *= 216;
    group2 += (*input)[3];

    group2 *= 216;
    group2 += (*input)[4];

    *((uint64_t *)((*output) + 9)) |= (group2 << 6);
    *input += 5;
    uint64_t group3 = 0;
    group3 *= 216;
    group3 += (*input)[0];

    group3 *= 216;
    group3 += (*input)[1];

    group3 *= 216;
    group3 += (*input)[2];

    group3 *= 216;
    group3 += (*input)[3];

    group3 *= 216;
    group3 += (*input)[4];

    *((uint64_t *)((*output) + 14)) |= (group3 << 5);
    *input += 5;
    uint64_t group4 = 0;
    group4 *= 216;
    group4 += (*input)[0];

    group4 *= 216;
    group4 += (*input)[1];

    group4 *= 216;
    group4 += (*input)[2];

    group4 *= 216;
    group4 += (*input)[3];

    group4 *= 216;
    group4 += (*input)[4];

    *((uint64_t *)((*output) + 19)) |= (group4 << 4);
    *input += 5;
    uint64_t group5 = 0;
    group5 *= 216;
    group5 += (*input)[0];

    group5 *= 216;
    group5 += (*input)[1];

    group5 *= 216;
    group5 += (*input)[2];

    group5 *= 216;
    group5 += (*input)[3];

    group5 *= 216;
    group5 += (*input)[4];

    *((uint64_t *)((*output) + 24)) |= (group5 << 3);
    *input += 5;
    uint64_t group6 = 0;
    group6 *= 216;
    group6 += (*input)[0];

    group6 *= 216;
    group6 += (*input)[1];

    group6 *= 216;
    group6 += (*input)[2];

    group6 *= 216;
    group6 += (*input)[3];

    group6 *= 216;
    group6 += (*input)[4];

    *((uint64_t *)((*output) + 29)) |= (group6 << 2);
    *input += 5;
    uint64_t group7 = 0;
    group7 *= 216;
    group7 += (*input)[0];

    group7 *= 216;
    group7 += (*input)[1];

    group7 *= 216;
    group7 += (*input)[2];

    group7 *= 216;
    group7 += (*input)[3];

    group7 *= 216;
    group7 += (*input)[4];

    *((uint64_t *)((*output) + 34)) |= (group7 << 1);
    *input += 5;
    *output += 39;
}

// Pack 8 groups using 39 bytes (40 values total)
void Ultrapack_Compress217(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 217;
    group0 += (*input)[0];

    group0 *= 217;
    group0 += (*input)[1];

    group0 *= 217;
    group0 += (*input)[2];

    group0 *= 217;
    group0 += (*input)[3];

    group0 *= 217;
    group0 += (*input)[4];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 5;
    uint64_t group1 = 0;
    group1 *= 217;
    group1 += (*input)[0];

    group1 *= 217;
    group1 += (*input)[1];

    group1 *= 217;
    group1 += (*input)[2];

    group1 *= 217;
    group1 += (*input)[3];

    group1 *= 217;
    group1 += (*input)[4];

    *((uint64_t *)((*output) + 4)) |= (group1 << 7);
    *input += 5;
    uint64_t group2 = 0;
    group2 *= 217;
    group2 += (*input)[0];

    group2 *= 217;
    group2 += (*input)[1];

    group2 *= 217;
    group2 += (*input)[2];

    group2 *= 217;
    group2 += (*input)[3];

    group2 *= 217;
    group2 += (*input)[4];

    *((uint64_t *)((*output) + 9)) |= (group2 << 6);
    *input += 5;
    uint64_t group3 = 0;
    group3 *= 217;
    group3 += (*input)[0];

    group3 *= 217;
    group3 += (*input)[1];

    group3 *= 217;
    group3 += (*input)[2];

    group3 *= 217;
    group3 += (*input)[3];

    group3 *= 217;
    group3 += (*input)[4];

    *((uint64_t *)((*output) + 14)) |= (group3 << 5);
    *input += 5;
    uint64_t group4 = 0;
    group4 *= 217;
    group4 += (*input)[0];

    group4 *= 217;
    group4 += (*input)[1];

    group4 *= 217;
    group4 += (*input)[2];

    group4 *= 217;
    group4 += (*input)[3];

    group4 *= 217;
    group4 += (*input)[4];

    *((uint64_t *)((*output) + 19)) |= (group4 << 4);
    *input += 5;
    uint64_t group5 = 0;
    group5 *= 217;
    group5 += (*input)[0];

    group5 *= 217;
    group5 += (*input)[1];

    group5 *= 217;
    group5 += (*input)[2];

    group5 *= 217;
    group5 += (*input)[3];

    group5 *= 217;
    group5 += (*input)[4];

    *((uint64_t *)((*output) + 24)) |= (group5 << 3);
    *input += 5;
    uint64_t group6 = 0;
    group6 *= 217;
    group6 += (*input)[0];

    group6 *= 217;
    group6 += (*input)[1];

    group6 *= 217;
    group6 += (*input)[2];

    group6 *= 217;
    group6 += (*input)[3];

    group6 *= 217;
    group6 += (*input)[4];

    *((uint64_t *)((*output) + 29)) |= (group6 << 2);
    *input += 5;
    uint64_t group7 = 0;
    group7 *= 217;
    group7 += (*input)[0];

    group7 *= 217;
    group7 += (*input)[1];

    group7 *= 217;
    group7 += (*input)[2];

    group7 *= 217;
    group7 += (*input)[3];

    group7 *= 217;
    group7 += (*input)[4];

    *((uint64_t *)((*output) + 34)) |= (group7 << 1);
    *input += 5;
    *output += 39;
}

// Pack 8 groups using 39 bytes (40 values total)
void Ultrapack_Compress218(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 218;
    group0 += (*input)[0];

    group0 *= 218;
    group0 += (*input)[1];

    group0 *= 218;
    group0 += (*input)[2];

    group0 *= 218;
    group0 += (*input)[3];

    group0 *= 218;
    group0 += (*input)[4];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 5;
    uint64_t group1 = 0;
    group1 *= 218;
    group1 += (*input)[0];

    group1 *= 218;
    group1 += (*input)[1];

    group1 *= 218;
    group1 += (*input)[2];

    group1 *= 218;
    group1 += (*input)[3];

    group1 *= 218;
    group1 += (*input)[4];

    *((uint64_t *)((*output) + 4)) |= (group1 << 7);
    *input += 5;
    uint64_t group2 = 0;
    group2 *= 218;
    group2 += (*input)[0];

    group2 *= 218;
    group2 += (*input)[1];

    group2 *= 218;
    group2 += (*input)[2];

    group2 *= 218;
    group2 += (*input)[3];

    group2 *= 218;
    group2 += (*input)[4];

    *((uint64_t *)((*output) + 9)) |= (group2 << 6);
    *input += 5;
    uint64_t group3 = 0;
    group3 *= 218;
    group3 += (*input)[0];

    group3 *= 218;
    group3 += (*input)[1];

    group3 *= 218;
    group3 += (*input)[2];

    group3 *= 218;
    group3 += (*input)[3];

    group3 *= 218;
    group3 += (*input)[4];

    *((uint64_t *)((*output) + 14)) |= (group3 << 5);
    *input += 5;
    uint64_t group4 = 0;
    group4 *= 218;
    group4 += (*input)[0];

    group4 *= 218;
    group4 += (*input)[1];

    group4 *= 218;
    group4 += (*input)[2];

    group4 *= 218;
    group4 += (*input)[3];

    group4 *= 218;
    group4 += (*input)[4];

    *((uint64_t *)((*output) + 19)) |= (group4 << 4);
    *input += 5;
    uint64_t group5 = 0;
    group5 *= 218;
    group5 += (*input)[0];

    group5 *= 218;
    group5 += (*input)[1];

    group5 *= 218;
    group5 += (*input)[2];

    group5 *= 218;
    group5 += (*input)[3];

    group5 *= 218;
    group5 += (*input)[4];

    *((uint64_t *)((*output) + 24)) |= (group5 << 3);
    *input += 5;
    uint64_t group6 = 0;
    group6 *= 218;
    group6 += (*input)[0];

    group6 *= 218;
    group6 += (*input)[1];

    group6 *= 218;
    group6 += (*input)[2];

    group6 *= 218;
    group6 += (*input)[3];

    group6 *= 218;
    group6 += (*input)[4];

    *((uint64_t *)((*output) + 29)) |= (group6 << 2);
    *input += 5;
    uint64_t group7 = 0;
    group7 *= 218;
    group7 += (*input)[0];

    group7 *= 218;
    group7 += (*input)[1];

    group7 *= 218;
    group7 += (*input)[2];

    group7 *= 218;
    group7 += (*input)[3];

    group7 *= 218;
    group7 += (*input)[4];

    *((uint64_t *)((*output) + 34)) |= (group7 << 1);
    *input += 5;
    *output += 39;
}

// Pack 8 groups using 39 bytes (40 values total)
void Ultrapack_Compress219(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 219;
    group0 += (*input)[0];

    group0 *= 219;
    group0 += (*input)[1];

    group0 *= 219;
    group0 += (*input)[2];

    group0 *= 219;
    group0 += (*input)[3];

    group0 *= 219;
    group0 += (*input)[4];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 5;
    uint64_t group1 = 0;
    group1 *= 219;
    group1 += (*input)[0];

    group1 *= 219;
    group1 += (*input)[1];

    group1 *= 219;
    group1 += (*input)[2];

    group1 *= 219;
    group1 += (*input)[3];

    group1 *= 219;
    group1 += (*input)[4];

    *((uint64_t *)((*output) + 4)) |= (group1 << 7);
    *input += 5;
    uint64_t group2 = 0;
    group2 *= 219;
    group2 += (*input)[0];

    group2 *= 219;
    group2 += (*input)[1];

    group2 *= 219;
    group2 += (*input)[2];

    group2 *= 219;
    group2 += (*input)[3];

    group2 *= 219;
    group2 += (*input)[4];

    *((uint64_t *)((*output) + 9)) |= (group2 << 6);
    *input += 5;
    uint64_t group3 = 0;
    group3 *= 219;
    group3 += (*input)[0];

    group3 *= 219;
    group3 += (*input)[1];

    group3 *= 219;
    group3 += (*input)[2];

    group3 *= 219;
    group3 += (*input)[3];

    group3 *= 219;
    group3 += (*input)[4];

    *((uint64_t *)((*output) + 14)) |= (group3 << 5);
    *input += 5;
    uint64_t group4 = 0;
    group4 *= 219;
    group4 += (*input)[0];

    group4 *= 219;
    group4 += (*input)[1];

    group4 *= 219;
    group4 += (*input)[2];

    group4 *= 219;
    group4 += (*input)[3];

    group4 *= 219;
    group4 += (*input)[4];

    *((uint64_t *)((*output) + 19)) |= (group4 << 4);
    *input += 5;
    uint64_t group5 = 0;
    group5 *= 219;
    group5 += (*input)[0];

    group5 *= 219;
    group5 += (*input)[1];

    group5 *= 219;
    group5 += (*input)[2];

    group5 *= 219;
    group5 += (*input)[3];

    group5 *= 219;
    group5 += (*input)[4];

    *((uint64_t *)((*output) + 24)) |= (group5 << 3);
    *input += 5;
    uint64_t group6 = 0;
    group6 *= 219;
    group6 += (*input)[0];

    group6 *= 219;
    group6 += (*input)[1];

    group6 *= 219;
    group6 += (*input)[2];

    group6 *= 219;
    group6 += (*input)[3];

    group6 *= 219;
    group6 += (*input)[4];

    *((uint64_t *)((*output) + 29)) |= (group6 << 2);
    *input += 5;
    uint64_t group7 = 0;
    group7 *= 219;
    group7 += (*input)[0];

    group7 *= 219;
    group7 += (*input)[1];

    group7 *= 219;
    group7 += (*input)[2];

    group7 *= 219;
    group7 += (*input)[3];

    group7 *= 219;
    group7 += (*input)[4];

    *((uint64_t *)((*output) + 34)) |= (group7 << 1);
    *input += 5;
    *output += 39;
}

// Pack 8 groups using 39 bytes (40 values total)
void Ultrapack_Compress220(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 220;
    group0 += (*input)[0];

    group0 *= 220;
    group0 += (*input)[1];

    group0 *= 220;
    group0 += (*input)[2];

    group0 *= 220;
    group0 += (*input)[3];

    group0 *= 220;
    group0 += (*input)[4];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 5;
    uint64_t group1 = 0;
    group1 *= 220;
    group1 += (*input)[0];

    group1 *= 220;
    group1 += (*input)[1];

    group1 *= 220;
    group1 += (*input)[2];

    group1 *= 220;
    group1 += (*input)[3];

    group1 *= 220;
    group1 += (*input)[4];

    *((uint64_t *)((*output) + 4)) |= (group1 << 7);
    *input += 5;
    uint64_t group2 = 0;
    group2 *= 220;
    group2 += (*input)[0];

    group2 *= 220;
    group2 += (*input)[1];

    group2 *= 220;
    group2 += (*input)[2];

    group2 *= 220;
    group2 += (*input)[3];

    group2 *= 220;
    group2 += (*input)[4];

    *((uint64_t *)((*output) + 9)) |= (group2 << 6);
    *input += 5;
    uint64_t group3 = 0;
    group3 *= 220;
    group3 += (*input)[0];

    group3 *= 220;
    group3 += (*input)[1];

    group3 *= 220;
    group3 += (*input)[2];

    group3 *= 220;
    group3 += (*input)[3];

    group3 *= 220;
    group3 += (*input)[4];

    *((uint64_t *)((*output) + 14)) |= (group3 << 5);
    *input += 5;
    uint64_t group4 = 0;
    group4 *= 220;
    group4 += (*input)[0];

    group4 *= 220;
    group4 += (*input)[1];

    group4 *= 220;
    group4 += (*input)[2];

    group4 *= 220;
    group4 += (*input)[3];

    group4 *= 220;
    group4 += (*input)[4];

    *((uint64_t *)((*output) + 19)) |= (group4 << 4);
    *input += 5;
    uint64_t group5 = 0;
    group5 *= 220;
    group5 += (*input)[0];

    group5 *= 220;
    group5 += (*input)[1];

    group5 *= 220;
    group5 += (*input)[2];

    group5 *= 220;
    group5 += (*input)[3];

    group5 *= 220;
    group5 += (*input)[4];

    *((uint64_t *)((*output) + 24)) |= (group5 << 3);
    *input += 5;
    uint64_t group6 = 0;
    group6 *= 220;
    group6 += (*input)[0];

    group6 *= 220;
    group6 += (*input)[1];

    group6 *= 220;
    group6 += (*input)[2];

    group6 *= 220;
    group6 += (*input)[3];

    group6 *= 220;
    group6 += (*input)[4];

    *((uint64_t *)((*output) + 29)) |= (group6 << 2);
    *input += 5;
    uint64_t group7 = 0;
    group7 *= 220;
    group7 += (*input)[0];

    group7 *= 220;
    group7 += (*input)[1];

    group7 *= 220;
    group7 += (*input)[2];

    group7 *= 220;
    group7 += (*input)[3];

    group7 *= 220;
    group7 += (*input)[4];

    *((uint64_t *)((*output) + 34)) |= (group7 << 1);
    *input += 5;
    *output += 39;
}

// Pack 8 groups using 39 bytes (40 values total)
void Ultrapack_Compress221(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 221;
    group0 += (*input)[0];

    group0 *= 221;
    group0 += (*input)[1];

    group0 *= 221;
    group0 += (*input)[2];

    group0 *= 221;
    group0 += (*input)[3];

    group0 *= 221;
    group0 += (*input)[4];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 5;
    uint64_t group1 = 0;
    group1 *= 221;
    group1 += (*input)[0];

    group1 *= 221;
    group1 += (*input)[1];

    group1 *= 221;
    group1 += (*input)[2];

    group1 *= 221;
    group1 += (*input)[3];

    group1 *= 221;
    group1 += (*input)[4];

    *((uint64_t *)((*output) + 4)) |= (group1 << 7);
    *input += 5;
    uint64_t group2 = 0;
    group2 *= 221;
    group2 += (*input)[0];

    group2 *= 221;
    group2 += (*input)[1];

    group2 *= 221;
    group2 += (*input)[2];

    group2 *= 221;
    group2 += (*input)[3];

    group2 *= 221;
    group2 += (*input)[4];

    *((uint64_t *)((*output) + 9)) |= (group2 << 6);
    *input += 5;
    uint64_t group3 = 0;
    group3 *= 221;
    group3 += (*input)[0];

    group3 *= 221;
    group3 += (*input)[1];

    group3 *= 221;
    group3 += (*input)[2];

    group3 *= 221;
    group3 += (*input)[3];

    group3 *= 221;
    group3 += (*input)[4];

    *((uint64_t *)((*output) + 14)) |= (group3 << 5);
    *input += 5;
    uint64_t group4 = 0;
    group4 *= 221;
    group4 += (*input)[0];

    group4 *= 221;
    group4 += (*input)[1];

    group4 *= 221;
    group4 += (*input)[2];

    group4 *= 221;
    group4 += (*input)[3];

    group4 *= 221;
    group4 += (*input)[4];

    *((uint64_t *)((*output) + 19)) |= (group4 << 4);
    *input += 5;
    uint64_t group5 = 0;
    group5 *= 221;
    group5 += (*input)[0];

    group5 *= 221;
    group5 += (*input)[1];

    group5 *= 221;
    group5 += (*input)[2];

    group5 *= 221;
    group5 += (*input)[3];

    group5 *= 221;
    group5 += (*input)[4];

    *((uint64_t *)((*output) + 24)) |= (group5 << 3);
    *input += 5;
    uint64_t group6 = 0;
    group6 *= 221;
    group6 += (*input)[0];

    group6 *= 221;
    group6 += (*input)[1];

    group6 *= 221;
    group6 += (*input)[2];

    group6 *= 221;
    group6 += (*input)[3];

    group6 *= 221;
    group6 += (*input)[4];

    *((uint64_t *)((*output) + 29)) |= (group6 << 2);
    *input += 5;
    uint64_t group7 = 0;
    group7 *= 221;
    group7 += (*input)[0];

    group7 *= 221;
    group7 += (*input)[1];

    group7 *= 221;
    group7 += (*input)[2];

    group7 *= 221;
    group7 += (*input)[3];

    group7 *= 221;
    group7 += (*input)[4];

    *((uint64_t *)((*output) + 34)) |= (group7 << 1);
    *input += 5;
    *output += 39;
}

// Pack 8 groups using 39 bytes (40 values total)
void Ultrapack_Compress222(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 222;
    group0 += (*input)[0];

    group0 *= 222;
    group0 += (*input)[1];

    group0 *= 222;
    group0 += (*input)[2];

    group0 *= 222;
    group0 += (*input)[3];

    group0 *= 222;
    group0 += (*input)[4];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 5;
    uint64_t group1 = 0;
    group1 *= 222;
    group1 += (*input)[0];

    group1 *= 222;
    group1 += (*input)[1];

    group1 *= 222;
    group1 += (*input)[2];

    group1 *= 222;
    group1 += (*input)[3];

    group1 *= 222;
    group1 += (*input)[4];

    *((uint64_t *)((*output) + 4)) |= (group1 << 7);
    *input += 5;
    uint64_t group2 = 0;
    group2 *= 222;
    group2 += (*input)[0];

    group2 *= 222;
    group2 += (*input)[1];

    group2 *= 222;
    group2 += (*input)[2];

    group2 *= 222;
    group2 += (*input)[3];

    group2 *= 222;
    group2 += (*input)[4];

    *((uint64_t *)((*output) + 9)) |= (group2 << 6);
    *input += 5;
    uint64_t group3 = 0;
    group3 *= 222;
    group3 += (*input)[0];

    group3 *= 222;
    group3 += (*input)[1];

    group3 *= 222;
    group3 += (*input)[2];

    group3 *= 222;
    group3 += (*input)[3];

    group3 *= 222;
    group3 += (*input)[4];

    *((uint64_t *)((*output) + 14)) |= (group3 << 5);
    *input += 5;
    uint64_t group4 = 0;
    group4 *= 222;
    group4 += (*input)[0];

    group4 *= 222;
    group4 += (*input)[1];

    group4 *= 222;
    group4 += (*input)[2];

    group4 *= 222;
    group4 += (*input)[3];

    group4 *= 222;
    group4 += (*input)[4];

    *((uint64_t *)((*output) + 19)) |= (group4 << 4);
    *input += 5;
    uint64_t group5 = 0;
    group5 *= 222;
    group5 += (*input)[0];

    group5 *= 222;
    group5 += (*input)[1];

    group5 *= 222;
    group5 += (*input)[2];

    group5 *= 222;
    group5 += (*input)[3];

    group5 *= 222;
    group5 += (*input)[4];

    *((uint64_t *)((*output) + 24)) |= (group5 << 3);
    *input += 5;
    uint64_t group6 = 0;
    group6 *= 222;
    group6 += (*input)[0];

    group6 *= 222;
    group6 += (*input)[1];

    group6 *= 222;
    group6 += (*input)[2];

    group6 *= 222;
    group6 += (*input)[3];

    group6 *= 222;
    group6 += (*input)[4];

    *((uint64_t *)((*output) + 29)) |= (group6 << 2);
    *input += 5;
    uint64_t group7 = 0;
    group7 *= 222;
    group7 += (*input)[0];

    group7 *= 222;
    group7 += (*input)[1];

    group7 *= 222;
    group7 += (*input)[2];

    group7 *= 222;
    group7 += (*input)[3];

    group7 *= 222;
    group7 += (*input)[4];

    *((uint64_t *)((*output) + 34)) |= (group7 << 1);
    *input += 5;
    *output += 39;
}

// Pack 8 groups using 47 bytes (48 values total)
void Ultrapack_Compress223(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 223;
    group0 += (*input)[0];

    group0 *= 223;
    group0 += (*input)[1];

    group0 *= 223;
    group0 += (*input)[2];

    group0 *= 223;
    group0 += (*input)[3];

    group0 *= 223;
    group0 += (*input)[4];

    group0 *= 223;
    group0 += (*input)[5];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 6;
    uint64_t group1 = 0;
    group1 *= 223;
    group1 += (*input)[0];

    group1 *= 223;
    group1 += (*input)[1];

    group1 *= 223;
    group1 += (*input)[2];

    group1 *= 223;
    group1 += (*input)[3];

    group1 *= 223;
    group1 += (*input)[4];

    group1 *= 223;
    group1 += (*input)[5];

    *((uint64_t *)((*output) + 5)) |= (group1 << 7);
    *input += 6;
    uint64_t group2 = 0;
    group2 *= 223;
    group2 += (*input)[0];

    group2 *= 223;
    group2 += (*input)[1];

    group2 *= 223;
    group2 += (*input)[2];

    group2 *= 223;
    group2 += (*input)[3];

    group2 *= 223;
    group2 += (*input)[4];

    group2 *= 223;
    group2 += (*input)[5];

    *((uint64_t *)((*output) + 11)) |= (group2 << 6);
    *input += 6;
    uint64_t group3 = 0;
    group3 *= 223;
    group3 += (*input)[0];

    group3 *= 223;
    group3 += (*input)[1];

    group3 *= 223;
    group3 += (*input)[2];

    group3 *= 223;
    group3 += (*input)[3];

    group3 *= 223;
    group3 += (*input)[4];

    group3 *= 223;
    group3 += (*input)[5];

    *((uint64_t *)((*output) + 17)) |= (group3 << 5);
    *input += 6;
    uint64_t group4 = 0;
    group4 *= 223;
    group4 += (*input)[0];

    group4 *= 223;
    group4 += (*input)[1];

    group4 *= 223;
    group4 += (*input)[2];

    group4 *= 223;
    group4 += (*input)[3];

    group4 *= 223;
    group4 += (*input)[4];

    group4 *= 223;
    group4 += (*input)[5];

    *((uint64_t *)((*output) + 23)) |= (group4 << 4);
    *input += 6;
    uint64_t group5 = 0;
    group5 *= 223;
    group5 += (*input)[0];

    group5 *= 223;
    group5 += (*input)[1];

    group5 *= 223;
    group5 += (*input)[2];

    group5 *= 223;
    group5 += (*input)[3];

    group5 *= 223;
    group5 += (*input)[4];

    group5 *= 223;
    group5 += (*input)[5];

    *((uint64_t *)((*output) + 29)) |= (group5 << 3);
    *input += 6;
    uint64_t group6 = 0;
    group6 *= 223;
    group6 += (*input)[0];

    group6 *= 223;
    group6 += (*input)[1];

    group6 *= 223;
    group6 += (*input)[2];

    group6 *= 223;
    group6 += (*input)[3];

    group6 *= 223;
    group6 += (*input)[4];

    group6 *= 223;
    group6 += (*input)[5];

    *((uint64_t *)((*output) + 35)) |= (group6 << 2);
    *input += 6;
    uint64_t group7 = 0;
    group7 *= 223;
    group7 += (*input)[0];

    group7 *= 223;
    group7 += (*input)[1];

    group7 *= 223;
    group7 += (*input)[2];

    group7 *= 223;
    group7 += (*input)[3];

    group7 *= 223;
    group7 += (*input)[4];

    group7 *= 223;
    group7 += (*input)[5];

    *((uint64_t *)((*output) + 41)) |= (group7 << 1);
    *input += 6;
    *output += 47;
}

// Pack 8 groups using 47 bytes (48 values total)
void Ultrapack_Compress224(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 224;
    group0 += (*input)[0];

    group0 *= 224;
    group0 += (*input)[1];

    group0 *= 224;
    group0 += (*input)[2];

    group0 *= 224;
    group0 += (*input)[3];

    group0 *= 224;
    group0 += (*input)[4];

    group0 *= 224;
    group0 += (*input)[5];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 6;
    uint64_t group1 = 0;
    group1 *= 224;
    group1 += (*input)[0];

    group1 *= 224;
    group1 += (*input)[1];

    group1 *= 224;
    group1 += (*input)[2];

    group1 *= 224;
    group1 += (*input)[3];

    group1 *= 224;
    group1 += (*input)[4];

    group1 *= 224;
    group1 += (*input)[5];

    *((uint64_t *)((*output) + 5)) |= (group1 << 7);
    *input += 6;
    uint64_t group2 = 0;
    group2 *= 224;
    group2 += (*input)[0];

    group2 *= 224;
    group2 += (*input)[1];

    group2 *= 224;
    group2 += (*input)[2];

    group2 *= 224;
    group2 += (*input)[3];

    group2 *= 224;
    group2 += (*input)[4];

    group2 *= 224;
    group2 += (*input)[5];

    *((uint64_t *)((*output) + 11)) |= (group2 << 6);
    *input += 6;
    uint64_t group3 = 0;
    group3 *= 224;
    group3 += (*input)[0];

    group3 *= 224;
    group3 += (*input)[1];

    group3 *= 224;
    group3 += (*input)[2];

    group3 *= 224;
    group3 += (*input)[3];

    group3 *= 224;
    group3 += (*input)[4];

    group3 *= 224;
    group3 += (*input)[5];

    *((uint64_t *)((*output) + 17)) |= (group3 << 5);
    *input += 6;
    uint64_t group4 = 0;
    group4 *= 224;
    group4 += (*input)[0];

    group4 *= 224;
    group4 += (*input)[1];

    group4 *= 224;
    group4 += (*input)[2];

    group4 *= 224;
    group4 += (*input)[3];

    group4 *= 224;
    group4 += (*input)[4];

    group4 *= 224;
    group4 += (*input)[5];

    *((uint64_t *)((*output) + 23)) |= (group4 << 4);
    *input += 6;
    uint64_t group5 = 0;
    group5 *= 224;
    group5 += (*input)[0];

    group5 *= 224;
    group5 += (*input)[1];

    group5 *= 224;
    group5 += (*input)[2];

    group5 *= 224;
    group5 += (*input)[3];

    group5 *= 224;
    group5 += (*input)[4];

    group5 *= 224;
    group5 += (*input)[5];

    *((uint64_t *)((*output) + 29)) |= (group5 << 3);
    *input += 6;
    uint64_t group6 = 0;
    group6 *= 224;
    group6 += (*input)[0];

    group6 *= 224;
    group6 += (*input)[1];

    group6 *= 224;
    group6 += (*input)[2];

    group6 *= 224;
    group6 += (*input)[3];

    group6 *= 224;
    group6 += (*input)[4];

    group6 *= 224;
    group6 += (*input)[5];

    *((uint64_t *)((*output) + 35)) |= (group6 << 2);
    *input += 6;
    uint64_t group7 = 0;
    group7 *= 224;
    group7 += (*input)[0];

    group7 *= 224;
    group7 += (*input)[1];

    group7 *= 224;
    group7 += (*input)[2];

    group7 *= 224;
    group7 += (*input)[3];

    group7 *= 224;
    group7 += (*input)[4];

    group7 *= 224;
    group7 += (*input)[5];

    *((uint64_t *)((*output) + 41)) |= (group7 << 1);
    *input += 6;
    *output += 47;
}

// Pack 8 groups using 47 bytes (48 values total)
void Ultrapack_Compress225(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 225;
    group0 += (*input)[0];

    group0 *= 225;
    group0 += (*input)[1];

    group0 *= 225;
    group0 += (*input)[2];

    group0 *= 225;
    group0 += (*input)[3];

    group0 *= 225;
    group0 += (*input)[4];

    group0 *= 225;
    group0 += (*input)[5];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 6;
    uint64_t group1 = 0;
    group1 *= 225;
    group1 += (*input)[0];

    group1 *= 225;
    group1 += (*input)[1];

    group1 *= 225;
    group1 += (*input)[2];

    group1 *= 225;
    group1 += (*input)[3];

    group1 *= 225;
    group1 += (*input)[4];

    group1 *= 225;
    group1 += (*input)[5];

    *((uint64_t *)((*output) + 5)) |= (group1 << 7);
    *input += 6;
    uint64_t group2 = 0;
    group2 *= 225;
    group2 += (*input)[0];

    group2 *= 225;
    group2 += (*input)[1];

    group2 *= 225;
    group2 += (*input)[2];

    group2 *= 225;
    group2 += (*input)[3];

    group2 *= 225;
    group2 += (*input)[4];

    group2 *= 225;
    group2 += (*input)[5];

    *((uint64_t *)((*output) + 11)) |= (group2 << 6);
    *input += 6;
    uint64_t group3 = 0;
    group3 *= 225;
    group3 += (*input)[0];

    group3 *= 225;
    group3 += (*input)[1];

    group3 *= 225;
    group3 += (*input)[2];

    group3 *= 225;
    group3 += (*input)[3];

    group3 *= 225;
    group3 += (*input)[4];

    group3 *= 225;
    group3 += (*input)[5];

    *((uint64_t *)((*output) + 17)) |= (group3 << 5);
    *input += 6;
    uint64_t group4 = 0;
    group4 *= 225;
    group4 += (*input)[0];

    group4 *= 225;
    group4 += (*input)[1];

    group4 *= 225;
    group4 += (*input)[2];

    group4 *= 225;
    group4 += (*input)[3];

    group4 *= 225;
    group4 += (*input)[4];

    group4 *= 225;
    group4 += (*input)[5];

    *((uint64_t *)((*output) + 23)) |= (group4 << 4);
    *input += 6;
    uint64_t group5 = 0;
    group5 *= 225;
    group5 += (*input)[0];

    group5 *= 225;
    group5 += (*input)[1];

    group5 *= 225;
    group5 += (*input)[2];

    group5 *= 225;
    group5 += (*input)[3];

    group5 *= 225;
    group5 += (*input)[4];

    group5 *= 225;
    group5 += (*input)[5];

    *((uint64_t *)((*output) + 29)) |= (group5 << 3);
    *input += 6;
    uint64_t group6 = 0;
    group6 *= 225;
    group6 += (*input)[0];

    group6 *= 225;
    group6 += (*input)[1];

    group6 *= 225;
    group6 += (*input)[2];

    group6 *= 225;
    group6 += (*input)[3];

    group6 *= 225;
    group6 += (*input)[4];

    group6 *= 225;
    group6 += (*input)[5];

    *((uint64_t *)((*output) + 35)) |= (group6 << 2);
    *input += 6;
    uint64_t group7 = 0;
    group7 *= 225;
    group7 += (*input)[0];

    group7 *= 225;
    group7 += (*input)[1];

    group7 *= 225;
    group7 += (*input)[2];

    group7 *= 225;
    group7 += (*input)[3];

    group7 *= 225;
    group7 += (*input)[4];

    group7 *= 225;
    group7 += (*input)[5];

    *((uint64_t *)((*output) + 41)) |= (group7 << 1);
    *input += 6;
    *output += 47;
}

// Pack 8 groups using 47 bytes (48 values total)
void Ultrapack_Compress226(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 226;
    group0 += (*input)[0];

    group0 *= 226;
    group0 += (*input)[1];

    group0 *= 226;
    group0 += (*input)[2];

    group0 *= 226;
    group0 += (*input)[3];

    group0 *= 226;
    group0 += (*input)[4];

    group0 *= 226;
    group0 += (*input)[5];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 6;
    uint64_t group1 = 0;
    group1 *= 226;
    group1 += (*input)[0];

    group1 *= 226;
    group1 += (*input)[1];

    group1 *= 226;
    group1 += (*input)[2];

    group1 *= 226;
    group1 += (*input)[3];

    group1 *= 226;
    group1 += (*input)[4];

    group1 *= 226;
    group1 += (*input)[5];

    *((uint64_t *)((*output) + 5)) |= (group1 << 7);
    *input += 6;
    uint64_t group2 = 0;
    group2 *= 226;
    group2 += (*input)[0];

    group2 *= 226;
    group2 += (*input)[1];

    group2 *= 226;
    group2 += (*input)[2];

    group2 *= 226;
    group2 += (*input)[3];

    group2 *= 226;
    group2 += (*input)[4];

    group2 *= 226;
    group2 += (*input)[5];

    *((uint64_t *)((*output) + 11)) |= (group2 << 6);
    *input += 6;
    uint64_t group3 = 0;
    group3 *= 226;
    group3 += (*input)[0];

    group3 *= 226;
    group3 += (*input)[1];

    group3 *= 226;
    group3 += (*input)[2];

    group3 *= 226;
    group3 += (*input)[3];

    group3 *= 226;
    group3 += (*input)[4];

    group3 *= 226;
    group3 += (*input)[5];

    *((uint64_t *)((*output) + 17)) |= (group3 << 5);
    *input += 6;
    uint64_t group4 = 0;
    group4 *= 226;
    group4 += (*input)[0];

    group4 *= 226;
    group4 += (*input)[1];

    group4 *= 226;
    group4 += (*input)[2];

    group4 *= 226;
    group4 += (*input)[3];

    group4 *= 226;
    group4 += (*input)[4];

    group4 *= 226;
    group4 += (*input)[5];

    *((uint64_t *)((*output) + 23)) |= (group4 << 4);
    *input += 6;
    uint64_t group5 = 0;
    group5 *= 226;
    group5 += (*input)[0];

    group5 *= 226;
    group5 += (*input)[1];

    group5 *= 226;
    group5 += (*input)[2];

    group5 *= 226;
    group5 += (*input)[3];

    group5 *= 226;
    group5 += (*input)[4];

    group5 *= 226;
    group5 += (*input)[5];

    *((uint64_t *)((*output) + 29)) |= (group5 << 3);
    *input += 6;
    uint64_t group6 = 0;
    group6 *= 226;
    group6 += (*input)[0];

    group6 *= 226;
    group6 += (*input)[1];

    group6 *= 226;
    group6 += (*input)[2];

    group6 *= 226;
    group6 += (*input)[3];

    group6 *= 226;
    group6 += (*input)[4];

    group6 *= 226;
    group6 += (*input)[5];

    *((uint64_t *)((*output) + 35)) |= (group6 << 2);
    *input += 6;
    uint64_t group7 = 0;
    group7 *= 226;
    group7 += (*input)[0];

    group7 *= 226;
    group7 += (*input)[1];

    group7 *= 226;
    group7 += (*input)[2];

    group7 *= 226;
    group7 += (*input)[3];

    group7 *= 226;
    group7 += (*input)[4];

    group7 *= 226;
    group7 += (*input)[5];

    *((uint64_t *)((*output) + 41)) |= (group7 << 1);
    *input += 6;
    *output += 47;
}

// Pack 8 groups using 47 bytes (48 values total)
void Ultrapack_Compress227(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 227;
    group0 += (*input)[0];

    group0 *= 227;
    group0 += (*input)[1];

    group0 *= 227;
    group0 += (*input)[2];

    group0 *= 227;
    group0 += (*input)[3];

    group0 *= 227;
    group0 += (*input)[4];

    group0 *= 227;
    group0 += (*input)[5];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 6;
    uint64_t group1 = 0;
    group1 *= 227;
    group1 += (*input)[0];

    group1 *= 227;
    group1 += (*input)[1];

    group1 *= 227;
    group1 += (*input)[2];

    group1 *= 227;
    group1 += (*input)[3];

    group1 *= 227;
    group1 += (*input)[4];

    group1 *= 227;
    group1 += (*input)[5];

    *((uint64_t *)((*output) + 5)) |= (group1 << 7);
    *input += 6;
    uint64_t group2 = 0;
    group2 *= 227;
    group2 += (*input)[0];

    group2 *= 227;
    group2 += (*input)[1];

    group2 *= 227;
    group2 += (*input)[2];

    group2 *= 227;
    group2 += (*input)[3];

    group2 *= 227;
    group2 += (*input)[4];

    group2 *= 227;
    group2 += (*input)[5];

    *((uint64_t *)((*output) + 11)) |= (group2 << 6);
    *input += 6;
    uint64_t group3 = 0;
    group3 *= 227;
    group3 += (*input)[0];

    group3 *= 227;
    group3 += (*input)[1];

    group3 *= 227;
    group3 += (*input)[2];

    group3 *= 227;
    group3 += (*input)[3];

    group3 *= 227;
    group3 += (*input)[4];

    group3 *= 227;
    group3 += (*input)[5];

    *((uint64_t *)((*output) + 17)) |= (group3 << 5);
    *input += 6;
    uint64_t group4 = 0;
    group4 *= 227;
    group4 += (*input)[0];

    group4 *= 227;
    group4 += (*input)[1];

    group4 *= 227;
    group4 += (*input)[2];

    group4 *= 227;
    group4 += (*input)[3];

    group4 *= 227;
    group4 += (*input)[4];

    group4 *= 227;
    group4 += (*input)[5];

    *((uint64_t *)((*output) + 23)) |= (group4 << 4);
    *input += 6;
    uint64_t group5 = 0;
    group5 *= 227;
    group5 += (*input)[0];

    group5 *= 227;
    group5 += (*input)[1];

    group5 *= 227;
    group5 += (*input)[2];

    group5 *= 227;
    group5 += (*input)[3];

    group5 *= 227;
    group5 += (*input)[4];

    group5 *= 227;
    group5 += (*input)[5];

    *((uint64_t *)((*output) + 29)) |= (group5 << 3);
    *input += 6;
    uint64_t group6 = 0;
    group6 *= 227;
    group6 += (*input)[0];

    group6 *= 227;
    group6 += (*input)[1];

    group6 *= 227;
    group6 += (*input)[2];

    group6 *= 227;
    group6 += (*input)[3];

    group6 *= 227;
    group6 += (*input)[4];

    group6 *= 227;
    group6 += (*input)[5];

    *((uint64_t *)((*output) + 35)) |= (group6 << 2);
    *input += 6;
    uint64_t group7 = 0;
    group7 *= 227;
    group7 += (*input)[0];

    group7 *= 227;
    group7 += (*input)[1];

    group7 *= 227;
    group7 += (*input)[2];

    group7 *= 227;
    group7 += (*input)[3];

    group7 *= 227;
    group7 += (*input)[4];

    group7 *= 227;
    group7 += (*input)[5];

    *((uint64_t *)((*output) + 41)) |= (group7 << 1);
    *input += 6;
    *output += 47;
}

// Pack 8 groups using 47 bytes (48 values total)
void Ultrapack_Compress228(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 228;
    group0 += (*input)[0];

    group0 *= 228;
    group0 += (*input)[1];

    group0 *= 228;
    group0 += (*input)[2];

    group0 *= 228;
    group0 += (*input)[3];

    group0 *= 228;
    group0 += (*input)[4];

    group0 *= 228;
    group0 += (*input)[5];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 6;
    uint64_t group1 = 0;
    group1 *= 228;
    group1 += (*input)[0];

    group1 *= 228;
    group1 += (*input)[1];

    group1 *= 228;
    group1 += (*input)[2];

    group1 *= 228;
    group1 += (*input)[3];

    group1 *= 228;
    group1 += (*input)[4];

    group1 *= 228;
    group1 += (*input)[5];

    *((uint64_t *)((*output) + 5)) |= (group1 << 7);
    *input += 6;
    uint64_t group2 = 0;
    group2 *= 228;
    group2 += (*input)[0];

    group2 *= 228;
    group2 += (*input)[1];

    group2 *= 228;
    group2 += (*input)[2];

    group2 *= 228;
    group2 += (*input)[3];

    group2 *= 228;
    group2 += (*input)[4];

    group2 *= 228;
    group2 += (*input)[5];

    *((uint64_t *)((*output) + 11)) |= (group2 << 6);
    *input += 6;
    uint64_t group3 = 0;
    group3 *= 228;
    group3 += (*input)[0];

    group3 *= 228;
    group3 += (*input)[1];

    group3 *= 228;
    group3 += (*input)[2];

    group3 *= 228;
    group3 += (*input)[3];

    group3 *= 228;
    group3 += (*input)[4];

    group3 *= 228;
    group3 += (*input)[5];

    *((uint64_t *)((*output) + 17)) |= (group3 << 5);
    *input += 6;
    uint64_t group4 = 0;
    group4 *= 228;
    group4 += (*input)[0];

    group4 *= 228;
    group4 += (*input)[1];

    group4 *= 228;
    group4 += (*input)[2];

    group4 *= 228;
    group4 += (*input)[3];

    group4 *= 228;
    group4 += (*input)[4];

    group4 *= 228;
    group4 += (*input)[5];

    *((uint64_t *)((*output) + 23)) |= (group4 << 4);
    *input += 6;
    uint64_t group5 = 0;
    group5 *= 228;
    group5 += (*input)[0];

    group5 *= 228;
    group5 += (*input)[1];

    group5 *= 228;
    group5 += (*input)[2];

    group5 *= 228;
    group5 += (*input)[3];

    group5 *= 228;
    group5 += (*input)[4];

    group5 *= 228;
    group5 += (*input)[5];

    *((uint64_t *)((*output) + 29)) |= (group5 << 3);
    *input += 6;
    uint64_t group6 = 0;
    group6 *= 228;
    group6 += (*input)[0];

    group6 *= 228;
    group6 += (*input)[1];

    group6 *= 228;
    group6 += (*input)[2];

    group6 *= 228;
    group6 += (*input)[3];

    group6 *= 228;
    group6 += (*input)[4];

    group6 *= 228;
    group6 += (*input)[5];

    *((uint64_t *)((*output) + 35)) |= (group6 << 2);
    *input += 6;
    uint64_t group7 = 0;
    group7 *= 228;
    group7 += (*input)[0];

    group7 *= 228;
    group7 += (*input)[1];

    group7 *= 228;
    group7 += (*input)[2];

    group7 *= 228;
    group7 += (*input)[3];

    group7 *= 228;
    group7 += (*input)[4];

    group7 *= 228;
    group7 += (*input)[5];

    *((uint64_t *)((*output) + 41)) |= (group7 << 1);
    *input += 6;
    *output += 47;
}

// Pack 8 groups using 55 bytes (56 values total)
void Ultrapack_Compress229(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 229;
    group0 += (*input)[0];

    group0 *= 229;
    group0 += (*input)[1];

    group0 *= 229;
    group0 += (*input)[2];

    group0 *= 229;
    group0 += (*input)[3];

    group0 *= 229;
    group0 += (*input)[4];

    group0 *= 229;
    group0 += (*input)[5];

    group0 *= 229;
    group0 += (*input)[6];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 7;
    uint64_t group1 = 0;
    group1 *= 229;
    group1 += (*input)[0];

    group1 *= 229;
    group1 += (*input)[1];

    group1 *= 229;
    group1 += (*input)[2];

    group1 *= 229;
    group1 += (*input)[3];

    group1 *= 229;
    group1 += (*input)[4];

    group1 *= 229;
    group1 += (*input)[5];

    group1 *= 229;
    group1 += (*input)[6];

    *((uint64_t *)((*output) + 6)) |= (group1 << 7);
    *input += 7;
    uint64_t group2 = 0;
    group2 *= 229;
    group2 += (*input)[0];

    group2 *= 229;
    group2 += (*input)[1];

    group2 *= 229;
    group2 += (*input)[2];

    group2 *= 229;
    group2 += (*input)[3];

    group2 *= 229;
    group2 += (*input)[4];

    group2 *= 229;
    group2 += (*input)[5];

    group2 *= 229;
    group2 += (*input)[6];

    *((uint64_t *)((*output) + 13)) |= (group2 << 6);
    *input += 7;
    uint64_t group3 = 0;
    group3 *= 229;
    group3 += (*input)[0];

    group3 *= 229;
    group3 += (*input)[1];

    group3 *= 229;
    group3 += (*input)[2];

    group3 *= 229;
    group3 += (*input)[3];

    group3 *= 229;
    group3 += (*input)[4];

    group3 *= 229;
    group3 += (*input)[5];

    group3 *= 229;
    group3 += (*input)[6];

    *((uint64_t *)((*output) + 20)) |= (group3 << 5);
    *input += 7;
    uint64_t group4 = 0;
    group4 *= 229;
    group4 += (*input)[0];

    group4 *= 229;
    group4 += (*input)[1];

    group4 *= 229;
    group4 += (*input)[2];

    group4 *= 229;
    group4 += (*input)[3];

    group4 *= 229;
    group4 += (*input)[4];

    group4 *= 229;
    group4 += (*input)[5];

    group4 *= 229;
    group4 += (*input)[6];

    *((uint64_t *)((*output) + 27)) |= (group4 << 4);
    *input += 7;
    uint64_t group5 = 0;
    group5 *= 229;
    group5 += (*input)[0];

    group5 *= 229;
    group5 += (*input)[1];

    group5 *= 229;
    group5 += (*input)[2];

    group5 *= 229;
    group5 += (*input)[3];

    group5 *= 229;
    group5 += (*input)[4];

    group5 *= 229;
    group5 += (*input)[5];

    group5 *= 229;
    group5 += (*input)[6];

    *((uint64_t *)((*output) + 34)) |= (group5 << 3);
    *input += 7;
    uint64_t group6 = 0;
    group6 *= 229;
    group6 += (*input)[0];

    group6 *= 229;
    group6 += (*input)[1];

    group6 *= 229;
    group6 += (*input)[2];

    group6 *= 229;
    group6 += (*input)[3];

    group6 *= 229;
    group6 += (*input)[4];

    group6 *= 229;
    group6 += (*input)[5];

    group6 *= 229;
    group6 += (*input)[6];

    *((uint64_t *)((*output) + 41)) |= (group6 << 2);
    *input += 7;
    uint64_t group7 = 0;
    group7 *= 229;
    group7 += (*input)[0];

    group7 *= 229;
    group7 += (*input)[1];

    group7 *= 229;
    group7 += (*input)[2];

    group7 *= 229;
    group7 += (*input)[3];

    group7 *= 229;
    group7 += (*input)[4];

    group7 *= 229;
    group7 += (*input)[5];

    group7 *= 229;
    group7 += (*input)[6];

    *((uint64_t *)((*output) + 48)) |= (group7 << 1);
    *input += 7;
    *output += 55;
}

// Pack 8 groups using 55 bytes (56 values total)
void Ultrapack_Compress230(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 230;
    group0 += (*input)[0];

    group0 *= 230;
    group0 += (*input)[1];

    group0 *= 230;
    group0 += (*input)[2];

    group0 *= 230;
    group0 += (*input)[3];

    group0 *= 230;
    group0 += (*input)[4];

    group0 *= 230;
    group0 += (*input)[5];

    group0 *= 230;
    group0 += (*input)[6];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 7;
    uint64_t group1 = 0;
    group1 *= 230;
    group1 += (*input)[0];

    group1 *= 230;
    group1 += (*input)[1];

    group1 *= 230;
    group1 += (*input)[2];

    group1 *= 230;
    group1 += (*input)[3];

    group1 *= 230;
    group1 += (*input)[4];

    group1 *= 230;
    group1 += (*input)[5];

    group1 *= 230;
    group1 += (*input)[6];

    *((uint64_t *)((*output) + 6)) |= (group1 << 7);
    *input += 7;
    uint64_t group2 = 0;
    group2 *= 230;
    group2 += (*input)[0];

    group2 *= 230;
    group2 += (*input)[1];

    group2 *= 230;
    group2 += (*input)[2];

    group2 *= 230;
    group2 += (*input)[3];

    group2 *= 230;
    group2 += (*input)[4];

    group2 *= 230;
    group2 += (*input)[5];

    group2 *= 230;
    group2 += (*input)[6];

    *((uint64_t *)((*output) + 13)) |= (group2 << 6);
    *input += 7;
    uint64_t group3 = 0;
    group3 *= 230;
    group3 += (*input)[0];

    group3 *= 230;
    group3 += (*input)[1];

    group3 *= 230;
    group3 += (*input)[2];

    group3 *= 230;
    group3 += (*input)[3];

    group3 *= 230;
    group3 += (*input)[4];

    group3 *= 230;
    group3 += (*input)[5];

    group3 *= 230;
    group3 += (*input)[6];

    *((uint64_t *)((*output) + 20)) |= (group3 << 5);
    *input += 7;
    uint64_t group4 = 0;
    group4 *= 230;
    group4 += (*input)[0];

    group4 *= 230;
    group4 += (*input)[1];

    group4 *= 230;
    group4 += (*input)[2];

    group4 *= 230;
    group4 += (*input)[3];

    group4 *= 230;
    group4 += (*input)[4];

    group4 *= 230;
    group4 += (*input)[5];

    group4 *= 230;
    group4 += (*input)[6];

    *((uint64_t *)((*output) + 27)) |= (group4 << 4);
    *input += 7;
    uint64_t group5 = 0;
    group5 *= 230;
    group5 += (*input)[0];

    group5 *= 230;
    group5 += (*input)[1];

    group5 *= 230;
    group5 += (*input)[2];

    group5 *= 230;
    group5 += (*input)[3];

    group5 *= 230;
    group5 += (*input)[4];

    group5 *= 230;
    group5 += (*input)[5];

    group5 *= 230;
    group5 += (*input)[6];

    *((uint64_t *)((*output) + 34)) |= (group5 << 3);
    *input += 7;
    uint64_t group6 = 0;
    group6 *= 230;
    group6 += (*input)[0];

    group6 *= 230;
    group6 += (*input)[1];

    group6 *= 230;
    group6 += (*input)[2];

    group6 *= 230;
    group6 += (*input)[3];

    group6 *= 230;
    group6 += (*input)[4];

    group6 *= 230;
    group6 += (*input)[5];

    group6 *= 230;
    group6 += (*input)[6];

    *((uint64_t *)((*output) + 41)) |= (group6 << 2);
    *input += 7;
    uint64_t group7 = 0;
    group7 *= 230;
    group7 += (*input)[0];

    group7 *= 230;
    group7 += (*input)[1];

    group7 *= 230;
    group7 += (*input)[2];

    group7 *= 230;
    group7 += (*input)[3];

    group7 *= 230;
    group7 += (*input)[4];

    group7 *= 230;
    group7 += (*input)[5];

    group7 *= 230;
    group7 += (*input)[6];

    *((uint64_t *)((*output) + 48)) |= (group7 << 1);
    *input += 7;
    *output += 55;
}

// Pack 8 groups using 55 bytes (56 values total)
void Ultrapack_Compress231(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 231;
    group0 += (*input)[0];

    group0 *= 231;
    group0 += (*input)[1];

    group0 *= 231;
    group0 += (*input)[2];

    group0 *= 231;
    group0 += (*input)[3];

    group0 *= 231;
    group0 += (*input)[4];

    group0 *= 231;
    group0 += (*input)[5];

    group0 *= 231;
    group0 += (*input)[6];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 7;
    uint64_t group1 = 0;
    group1 *= 231;
    group1 += (*input)[0];

    group1 *= 231;
    group1 += (*input)[1];

    group1 *= 231;
    group1 += (*input)[2];

    group1 *= 231;
    group1 += (*input)[3];

    group1 *= 231;
    group1 += (*input)[4];

    group1 *= 231;
    group1 += (*input)[5];

    group1 *= 231;
    group1 += (*input)[6];

    *((uint64_t *)((*output) + 6)) |= (group1 << 7);
    *input += 7;
    uint64_t group2 = 0;
    group2 *= 231;
    group2 += (*input)[0];

    group2 *= 231;
    group2 += (*input)[1];

    group2 *= 231;
    group2 += (*input)[2];

    group2 *= 231;
    group2 += (*input)[3];

    group2 *= 231;
    group2 += (*input)[4];

    group2 *= 231;
    group2 += (*input)[5];

    group2 *= 231;
    group2 += (*input)[6];

    *((uint64_t *)((*output) + 13)) |= (group2 << 6);
    *input += 7;
    uint64_t group3 = 0;
    group3 *= 231;
    group3 += (*input)[0];

    group3 *= 231;
    group3 += (*input)[1];

    group3 *= 231;
    group3 += (*input)[2];

    group3 *= 231;
    group3 += (*input)[3];

    group3 *= 231;
    group3 += (*input)[4];

    group3 *= 231;
    group3 += (*input)[5];

    group3 *= 231;
    group3 += (*input)[6];

    *((uint64_t *)((*output) + 20)) |= (group3 << 5);
    *input += 7;
    uint64_t group4 = 0;
    group4 *= 231;
    group4 += (*input)[0];

    group4 *= 231;
    group4 += (*input)[1];

    group4 *= 231;
    group4 += (*input)[2];

    group4 *= 231;
    group4 += (*input)[3];

    group4 *= 231;
    group4 += (*input)[4];

    group4 *= 231;
    group4 += (*input)[5];

    group4 *= 231;
    group4 += (*input)[6];

    *((uint64_t *)((*output) + 27)) |= (group4 << 4);
    *input += 7;
    uint64_t group5 = 0;
    group5 *= 231;
    group5 += (*input)[0];

    group5 *= 231;
    group5 += (*input)[1];

    group5 *= 231;
    group5 += (*input)[2];

    group5 *= 231;
    group5 += (*input)[3];

    group5 *= 231;
    group5 += (*input)[4];

    group5 *= 231;
    group5 += (*input)[5];

    group5 *= 231;
    group5 += (*input)[6];

    *((uint64_t *)((*output) + 34)) |= (group5 << 3);
    *input += 7;
    uint64_t group6 = 0;
    group6 *= 231;
    group6 += (*input)[0];

    group6 *= 231;
    group6 += (*input)[1];

    group6 *= 231;
    group6 += (*input)[2];

    group6 *= 231;
    group6 += (*input)[3];

    group6 *= 231;
    group6 += (*input)[4];

    group6 *= 231;
    group6 += (*input)[5];

    group6 *= 231;
    group6 += (*input)[6];

    *((uint64_t *)((*output) + 41)) |= (group6 << 2);
    *input += 7;
    uint64_t group7 = 0;
    group7 *= 231;
    group7 += (*input)[0];

    group7 *= 231;
    group7 += (*input)[1];

    group7 *= 231;
    group7 += (*input)[2];

    group7 *= 231;
    group7 += (*input)[3];

    group7 *= 231;
    group7 += (*input)[4];

    group7 *= 231;
    group7 += (*input)[5];

    group7 *= 231;
    group7 += (*input)[6];

    *((uint64_t *)((*output) + 48)) |= (group7 << 1);
    *input += 7;
    *output += 55;
}

// Pack 1 groups using 1 bytes (1 values total)
void Ultrapack_Compress232(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 232;
    group0 += (*input)[0];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 1;
    *output += 1;
}

// Pack 1 groups using 1 bytes (1 values total)
void Ultrapack_Compress233(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 233;
    group0 += (*input)[0];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 1;
    *output += 1;
}

// Pack 1 groups using 1 bytes (1 values total)
void Ultrapack_Compress234(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 234;
    group0 += (*input)[0];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 1;
    *output += 1;
}

// Pack 1 groups using 1 bytes (1 values total)
void Ultrapack_Compress235(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 235;
    group0 += (*input)[0];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 1;
    *output += 1;
}

// Pack 1 groups using 1 bytes (1 values total)
void Ultrapack_Compress236(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 236;
    group0 += (*input)[0];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 1;
    *output += 1;
}

// Pack 1 groups using 1 bytes (1 values total)
void Ultrapack_Compress237(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 237;
    group0 += (*input)[0];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 1;
    *output += 1;
}

// Pack 1 groups using 1 bytes (1 values total)
void Ultrapack_Compress238(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 238;
    group0 += (*input)[0];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 1;
    *output += 1;
}

// Pack 1 groups using 1 bytes (1 values total)
void Ultrapack_Compress239(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 239;
    group0 += (*input)[0];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 1;
    *output += 1;
}

// Pack 1 groups using 1 bytes (1 values total)
void Ultrapack_Compress240(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 240;
    group0 += (*input)[0];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 1;
    *output += 1;
}

// Pack 1 groups using 1 bytes (1 values total)
void Ultrapack_Compress241(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 241;
    group0 += (*input)[0];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 1;
    *output += 1;
}

// Pack 1 groups using 1 bytes (1 values total)
void Ultrapack_Compress242(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 242;
    group0 += (*input)[0];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 1;
    *output += 1;
}

// Pack 1 groups using 1 bytes (1 values total)
void Ultrapack_Compress243(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 243;
    group0 += (*input)[0];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 1;
    *output += 1;
}

// Pack 1 groups using 1 bytes (1 values total)
void Ultrapack_Compress244(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 244;
    group0 += (*input)[0];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 1;
    *output += 1;
}

// Pack 1 groups using 1 bytes (1 values total)
void Ultrapack_Compress245(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 245;
    group0 += (*input)[0];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 1;
    *output += 1;
}

// Pack 1 groups using 1 bytes (1 values total)
void Ultrapack_Compress246(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 246;
    group0 += (*input)[0];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 1;
    *output += 1;
}

// Pack 1 groups using 1 bytes (1 values total)
void Ultrapack_Compress247(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 247;
    group0 += (*input)[0];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 1;
    *output += 1;
}

// Pack 1 groups using 1 bytes (1 values total)
void Ultrapack_Compress248(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 248;
    group0 += (*input)[0];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 1;
    *output += 1;
}

// Pack 1 groups using 1 bytes (1 values total)
void Ultrapack_Compress249(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 249;
    group0 += (*input)[0];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 1;
    *output += 1;
}

// Pack 1 groups using 1 bytes (1 values total)
void Ultrapack_Compress250(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 250;
    group0 += (*input)[0];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 1;
    *output += 1;
}

// Pack 1 groups using 1 bytes (1 values total)
void Ultrapack_Compress251(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 251;
    group0 += (*input)[0];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 1;
    *output += 1;
}

// Pack 1 groups using 1 bytes (1 values total)
void Ultrapack_Compress252(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 252;
    group0 += (*input)[0];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 1;
    *output += 1;
}

// Pack 1 groups using 1 bytes (1 values total)
void Ultrapack_Compress253(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 253;
    group0 += (*input)[0];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 1;
    *output += 1;
}

// Pack 1 groups using 1 bytes (1 values total)
void Ultrapack_Compress254(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 254;
    group0 += (*input)[0];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 1;
    *output += 1;
}

// Pack 1 groups using 1 bytes (1 values total)
void Ultrapack_Compress255(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 255;
    group0 += (*input)[0];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 1;
    *output += 1;
}

// Pack 1 groups using 1 bytes (1 values total)
void Ultrapack_Compress256(const uint32_t **input, uint8_t **output)
{
    uint64_t group0 = 0;
    group0 *= 256;
    group0 += (*input)[0];

    *((uint64_t *)((*output) + 0)) |= (group0 << 0);
    *input += 1;
    *output += 1;
}


typedef void (*CompressFn)(const uint32_t **, uint8_t **);
CompressFn UltrapackCompress[] =
{
    0,
    0,
    Ultrapack_Compress2,
    Ultrapack_Compress3,
    Ultrapack_Compress4,
    Ultrapack_Compress5,
    Ultrapack_Compress6,
    Ultrapack_Compress7,
    Ultrapack_Compress8,
    Ultrapack_Compress9,
    Ultrapack_Compress10,
    Ultrapack_Compress11,
    Ultrapack_Compress12,
    Ultrapack_Compress13,
    Ultrapack_Compress14,
    Ultrapack_Compress15,
    Ultrapack_Compress16,
    Ultrapack_Compress17,
    Ultrapack_Compress18,
    Ultrapack_Compress19,
    Ultrapack_Compress20,
    Ultrapack_Compress21,
    Ultrapack_Compress22,
    Ultrapack_Compress23,
    Ultrapack_Compress24,
    Ultrapack_Compress25,
    Ultrapack_Compress26,
    Ultrapack_Compress27,
    Ultrapack_Compress28,
    Ultrapack_Compress29,
    Ultrapack_Compress30,
    Ultrapack_Compress31,
    Ultrapack_Compress32,
    Ultrapack_Compress33,
    Ultrapack_Compress34,
    Ultrapack_Compress35,
    Ultrapack_Compress36,
    Ultrapack_Compress37,
    Ultrapack_Compress38,
    Ultrapack_Compress39,
    Ultrapack_Compress40,
    Ultrapack_Compress41,
    Ultrapack_Compress42,
    Ultrapack_Compress43,
    Ultrapack_Compress44,
    Ultrapack_Compress45,
    Ultrapack_Compress46,
    Ultrapack_Compress47,
    Ultrapack_Compress48,
    Ultrapack_Compress49,
    Ultrapack_Compress50,
    Ultrapack_Compress51,
    Ultrapack_Compress52,
    Ultrapack_Compress53,
    Ultrapack_Compress54,
    Ultrapack_Compress55,
    Ultrapack_Compress56,
    Ultrapack_Compress57,
    Ultrapack_Compress58,
    Ultrapack_Compress59,
    Ultrapack_Compress60,
    Ultrapack_Compress61,
    Ultrapack_Compress62,
    Ultrapack_Compress63,
    Ultrapack_Compress64,
    Ultrapack_Compress65,
    Ultrapack_Compress66,
    Ultrapack_Compress67,
    Ultrapack_Compress68,
    Ultrapack_Compress69,
    Ultrapack_Compress70,
    Ultrapack_Compress71,
    Ultrapack_Compress72,
    Ultrapack_Compress73,
    Ultrapack_Compress74,
    Ultrapack_Compress75,
    Ultrapack_Compress76,
    Ultrapack_Compress77,
    Ultrapack_Compress78,
    Ultrapack_Compress79,
    Ultrapack_Compress80,
    Ultrapack_Compress81,
    Ultrapack_Compress82,
    Ultrapack_Compress83,
    Ultrapack_Compress84,
    Ultrapack_Compress85,
    Ultrapack_Compress86,
    Ultrapack_Compress87,
    Ultrapack_Compress88,
    Ultrapack_Compress89,
    Ultrapack_Compress90,
    Ultrapack_Compress91,
    Ultrapack_Compress92,
    Ultrapack_Compress93,
    Ultrapack_Compress94,
    Ultrapack_Compress95,
    Ultrapack_Compress96,
    Ultrapack_Compress97,
    Ultrapack_Compress98,
    Ultrapack_Compress99,
    Ultrapack_Compress100,
    Ultrapack_Compress101,
    Ultrapack_Compress102,
    Ultrapack_Compress103,
    Ultrapack_Compress104,
    Ultrapack_Compress105,
    Ultrapack_Compress106,
    Ultrapack_Compress107,
    Ultrapack_Compress108,
    Ultrapack_Compress109,
    Ultrapack_Compress110,
    Ultrapack_Compress111,
    Ultrapack_Compress112,
    Ultrapack_Compress113,
    Ultrapack_Compress114,
    Ultrapack_Compress115,
    Ultrapack_Compress116,
    Ultrapack_Compress117,
    Ultrapack_Compress118,
    Ultrapack_Compress119,
    Ultrapack_Compress120,
    Ultrapack_Compress121,
    Ultrapack_Compress122,
    Ultrapack_Compress123,
    Ultrapack_Compress124,
    Ultrapack_Compress125,
    Ultrapack_Compress126,
    Ultrapack_Compress127,
    Ultrapack_Compress128,
    Ultrapack_Compress129,
    Ultrapack_Compress130,
    Ultrapack_Compress131,
    Ultrapack_Compress132,
    Ultrapack_Compress133,
    Ultrapack_Compress134,
    Ultrapack_Compress135,
    Ultrapack_Compress136,
    Ultrapack_Compress137,
    Ultrapack_Compress138,
    Ultrapack_Compress139,
    Ultrapack_Compress140,
    Ultrapack_Compress141,
    Ultrapack_Compress142,
    Ultrapack_Compress143,
    Ultrapack_Compress144,
    Ultrapack_Compress145,
    Ultrapack_Compress146,
    Ultrapack_Compress147,
    Ultrapack_Compress148,
    Ultrapack_Compress149,
    Ultrapack_Compress150,
    Ultrapack_Compress151,
    Ultrapack_Compress152,
    Ultrapack_Compress153,
    Ultrapack_Compress154,
    Ultrapack_Compress155,
    Ultrapack_Compress156,
    Ultrapack_Compress157,
    Ultrapack_Compress158,
    Ultrapack_Compress159,
    Ultrapack_Compress160,
    Ultrapack_Compress161,
    Ultrapack_Compress162,
    Ultrapack_Compress163,
    Ultrapack_Compress164,
    Ultrapack_Compress165,
    Ultrapack_Compress166,
    Ultrapack_Compress167,
    Ultrapack_Compress168,
    Ultrapack_Compress169,
    Ultrapack_Compress170,
    Ultrapack_Compress171,
    Ultrapack_Compress172,
    Ultrapack_Compress173,
    Ultrapack_Compress174,
    Ultrapack_Compress175,
    Ultrapack_Compress176,
    Ultrapack_Compress177,
    Ultrapack_Compress178,
    Ultrapack_Compress179,
    Ultrapack_Compress180,
    Ultrapack_Compress181,
    Ultrapack_Compress182,
    Ultrapack_Compress183,
    Ultrapack_Compress184,
    Ultrapack_Compress185,
    Ultrapack_Compress186,
    Ultrapack_Compress187,
    Ultrapack_Compress188,
    Ultrapack_Compress189,
    Ultrapack_Compress190,
    Ultrapack_Compress191,
    Ultrapack_Compress192,
    Ultrapack_Compress193,
    Ultrapack_Compress194,
    Ultrapack_Compress195,
    Ultrapack_Compress196,
    Ultrapack_Compress197,
    Ultrapack_Compress198,
    Ultrapack_Compress199,
    Ultrapack_Compress200,
    Ultrapack_Compress201,
    Ultrapack_Compress202,
    Ultrapack_Compress203,
    Ultrapack_Compress204,
    Ultrapack_Compress205,
    Ultrapack_Compress206,
    Ultrapack_Compress207,
    Ultrapack_Compress208,
    Ultrapack_Compress209,
    Ultrapack_Compress210,
    Ultrapack_Compress211,
    Ultrapack_Compress212,
    Ultrapack_Compress213,
    Ultrapack_Compress214,
    Ultrapack_Compress215,
    Ultrapack_Compress216,
    Ultrapack_Compress217,
    Ultrapack_Compress218,
    Ultrapack_Compress219,
    Ultrapack_Compress220,
    Ultrapack_Compress221,
    Ultrapack_Compress222,
    Ultrapack_Compress223,
    Ultrapack_Compress224,
    Ultrapack_Compress225,
    Ultrapack_Compress226,
    Ultrapack_Compress227,
    Ultrapack_Compress228,
    Ultrapack_Compress229,
    Ultrapack_Compress230,
    Ultrapack_Compress231,
    Ultrapack_Compress232,
    Ultrapack_Compress233,
    Ultrapack_Compress234,
    Ultrapack_Compress235,
    Ultrapack_Compress236,
    Ultrapack_Compress237,
    Ultrapack_Compress238,
    Ultrapack_Compress239,
    Ultrapack_Compress240,
    Ultrapack_Compress241,
    Ultrapack_Compress242,
    Ultrapack_Compress243,
    Ultrapack_Compress244,
    Ultrapack_Compress245,
    Ultrapack_Compress246,
    Ultrapack_Compress247,
    Ultrapack_Compress248,
    Ultrapack_Compress249,
    Ultrapack_Compress250,
    Ultrapack_Compress251,
    Ultrapack_Compress252,
    Ultrapack_Compress253,
    Ultrapack_Compress254,
    Ultrapack_Compress255,
    Ultrapack_Compress256,
};
// Unpack 1 bytes into 8 values
void Ultrapack_Decompress2(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 1) - 1;
    (*output)[0] = (uint32_t)(group0 % 2);
    group0 /= 2;
    *output += 1;

    uint64_t group1 = (*(uint64_t *)((*input) + 0)) >> 1;    group1 &= (1ull << 1) - 1;
    (*output)[0] = (uint32_t)(group1 % 2);
    group1 /= 2;
    *output += 1;

    uint64_t group2 = (*(uint64_t *)((*input) + 0)) >> 2;    group2 &= (1ull << 1) - 1;
    (*output)[0] = (uint32_t)(group2 % 2);
    group2 /= 2;
    *output += 1;

    uint64_t group3 = (*(uint64_t *)((*input) + 0)) >> 3;    group3 &= (1ull << 1) - 1;
    (*output)[0] = (uint32_t)(group3 % 2);
    group3 /= 2;
    *output += 1;

    uint64_t group4 = (*(uint64_t *)((*input) + 0)) >> 4;    group4 &= (1ull << 1) - 1;
    (*output)[0] = (uint32_t)(group4 % 2);
    group4 /= 2;
    *output += 1;

    uint64_t group5 = (*(uint64_t *)((*input) + 0)) >> 5;    group5 &= (1ull << 1) - 1;
    (*output)[0] = (uint32_t)(group5 % 2);
    group5 /= 2;
    *output += 1;

    uint64_t group6 = (*(uint64_t *)((*input) + 0)) >> 6;    group6 &= (1ull << 1) - 1;
    (*output)[0] = (uint32_t)(group6 % 2);
    group6 /= 2;
    *output += 1;

    uint64_t group7 = (*(uint64_t *)((*input) + 0)) >> 7;    group7 &= (1ull << 1) - 1;
    (*output)[0] = (uint32_t)(group7 % 2);
    group7 /= 2;
    *output += 1;


    *input += 1;
}

// Unpack 1 bytes into 5 values
void Ultrapack_Decompress3(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 8) - 1;
    (*output)[4] = (uint32_t)(group0 % 3);
    group0 /= 3;

    (*output)[3] = (uint32_t)(group0 % 3);
    group0 /= 3;

    (*output)[2] = (uint32_t)(group0 % 3);
    group0 /= 3;

    (*output)[1] = (uint32_t)(group0 % 3);
    group0 /= 3;

    (*output)[0] = (uint32_t)(group0 % 3);
    group0 /= 3;
    *output += 5;


    *input += 1;
}

// Unpack 1 bytes into 4 values
void Ultrapack_Decompress4(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 2) - 1;
    (*output)[0] = (uint32_t)(group0 % 4);
    group0 /= 4;
    *output += 1;

    uint64_t group1 = (*(uint64_t *)((*input) + 0)) >> 2;    group1 &= (1ull << 2) - 1;
    (*output)[0] = (uint32_t)(group1 % 4);
    group1 /= 4;
    *output += 1;

    uint64_t group2 = (*(uint64_t *)((*input) + 0)) >> 4;    group2 &= (1ull << 2) - 1;
    (*output)[0] = (uint32_t)(group2 % 4);
    group2 /= 4;
    *output += 1;

    uint64_t group3 = (*(uint64_t *)((*input) + 0)) >> 6;    group3 &= (1ull << 2) - 1;
    (*output)[0] = (uint32_t)(group3 % 4);
    group3 /= 4;
    *output += 1;


    *input += 1;
}

// Unpack 7 bytes into 24 values
void Ultrapack_Decompress5(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 7) - 1;
    (*output)[2] = (uint32_t)(group0 % 5);
    group0 /= 5;

    (*output)[1] = (uint32_t)(group0 % 5);
    group0 /= 5;

    (*output)[0] = (uint32_t)(group0 % 5);
    group0 /= 5;
    *output += 3;

    uint64_t group1 = (*(uint64_t *)((*input) + 0)) >> 7;    group1 &= (1ull << 7) - 1;
    (*output)[2] = (uint32_t)(group1 % 5);
    group1 /= 5;

    (*output)[1] = (uint32_t)(group1 % 5);
    group1 /= 5;

    (*output)[0] = (uint32_t)(group1 % 5);
    group1 /= 5;
    *output += 3;

    uint64_t group2 = (*(uint64_t *)((*input) + 1)) >> 6;    group2 &= (1ull << 7) - 1;
    (*output)[2] = (uint32_t)(group2 % 5);
    group2 /= 5;

    (*output)[1] = (uint32_t)(group2 % 5);
    group2 /= 5;

    (*output)[0] = (uint32_t)(group2 % 5);
    group2 /= 5;
    *output += 3;

    uint64_t group3 = (*(uint64_t *)((*input) + 2)) >> 5;    group3 &= (1ull << 7) - 1;
    (*output)[2] = (uint32_t)(group3 % 5);
    group3 /= 5;

    (*output)[1] = (uint32_t)(group3 % 5);
    group3 /= 5;

    (*output)[0] = (uint32_t)(group3 % 5);
    group3 /= 5;
    *output += 3;

    uint64_t group4 = (*(uint64_t *)((*input) + 3)) >> 4;    group4 &= (1ull << 7) - 1;
    (*output)[2] = (uint32_t)(group4 % 5);
    group4 /= 5;

    (*output)[1] = (uint32_t)(group4 % 5);
    group4 /= 5;

    (*output)[0] = (uint32_t)(group4 % 5);
    group4 /= 5;
    *output += 3;

    uint64_t group5 = (*(uint64_t *)((*input) + 4)) >> 3;    group5 &= (1ull << 7) - 1;
    (*output)[2] = (uint32_t)(group5 % 5);
    group5 /= 5;

    (*output)[1] = (uint32_t)(group5 % 5);
    group5 /= 5;

    (*output)[0] = (uint32_t)(group5 % 5);
    group5 /= 5;
    *output += 3;

    uint64_t group6 = (*(uint64_t *)((*input) + 5)) >> 2;    group6 &= (1ull << 7) - 1;
    (*output)[2] = (uint32_t)(group6 % 5);
    group6 /= 5;

    (*output)[1] = (uint32_t)(group6 % 5);
    group6 /= 5;

    (*output)[0] = (uint32_t)(group6 % 5);
    group6 /= 5;
    *output += 3;

    uint64_t group7 = (*(uint64_t *)((*input) + 6)) >> 1;    group7 &= (1ull << 7) - 1;
    (*output)[2] = (uint32_t)(group7 % 5);
    group7 /= 5;

    (*output)[1] = (uint32_t)(group7 % 5);
    group7 /= 5;

    (*output)[0] = (uint32_t)(group7 % 5);
    group7 /= 5;
    *output += 3;


    *input += 7;
}

// Unpack 13 bytes into 40 values
void Ultrapack_Decompress6(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 13) - 1;
    (*output)[4] = (uint32_t)(group0 % 6);
    group0 /= 6;

    (*output)[3] = (uint32_t)(group0 % 6);
    group0 /= 6;

    (*output)[2] = (uint32_t)(group0 % 6);
    group0 /= 6;

    (*output)[1] = (uint32_t)(group0 % 6);
    group0 /= 6;

    (*output)[0] = (uint32_t)(group0 % 6);
    group0 /= 6;
    *output += 5;

    uint64_t group1 = (*(uint64_t *)((*input) + 1)) >> 5;    group1 &= (1ull << 13) - 1;
    (*output)[4] = (uint32_t)(group1 % 6);
    group1 /= 6;

    (*output)[3] = (uint32_t)(group1 % 6);
    group1 /= 6;

    (*output)[2] = (uint32_t)(group1 % 6);
    group1 /= 6;

    (*output)[1] = (uint32_t)(group1 % 6);
    group1 /= 6;

    (*output)[0] = (uint32_t)(group1 % 6);
    group1 /= 6;
    *output += 5;

    uint64_t group2 = (*(uint64_t *)((*input) + 3)) >> 2;    group2 &= (1ull << 13) - 1;
    (*output)[4] = (uint32_t)(group2 % 6);
    group2 /= 6;

    (*output)[3] = (uint32_t)(group2 % 6);
    group2 /= 6;

    (*output)[2] = (uint32_t)(group2 % 6);
    group2 /= 6;

    (*output)[1] = (uint32_t)(group2 % 6);
    group2 /= 6;

    (*output)[0] = (uint32_t)(group2 % 6);
    group2 /= 6;
    *output += 5;

    uint64_t group3 = (*(uint64_t *)((*input) + 4)) >> 7;    group3 &= (1ull << 13) - 1;
    (*output)[4] = (uint32_t)(group3 % 6);
    group3 /= 6;

    (*output)[3] = (uint32_t)(group3 % 6);
    group3 /= 6;

    (*output)[2] = (uint32_t)(group3 % 6);
    group3 /= 6;

    (*output)[1] = (uint32_t)(group3 % 6);
    group3 /= 6;

    (*output)[0] = (uint32_t)(group3 % 6);
    group3 /= 6;
    *output += 5;

    uint64_t group4 = (*(uint64_t *)((*input) + 6)) >> 4;    group4 &= (1ull << 13) - 1;
    (*output)[4] = (uint32_t)(group4 % 6);
    group4 /= 6;

    (*output)[3] = (uint32_t)(group4 % 6);
    group4 /= 6;

    (*output)[2] = (uint32_t)(group4 % 6);
    group4 /= 6;

    (*output)[1] = (uint32_t)(group4 % 6);
    group4 /= 6;

    (*output)[0] = (uint32_t)(group4 % 6);
    group4 /= 6;
    *output += 5;

    uint64_t group5 = (*(uint64_t *)((*input) + 8)) >> 1;    group5 &= (1ull << 13) - 1;
    (*output)[4] = (uint32_t)(group5 % 6);
    group5 /= 6;

    (*output)[3] = (uint32_t)(group5 % 6);
    group5 /= 6;

    (*output)[2] = (uint32_t)(group5 % 6);
    group5 /= 6;

    (*output)[1] = (uint32_t)(group5 % 6);
    group5 /= 6;

    (*output)[0] = (uint32_t)(group5 % 6);
    group5 /= 6;
    *output += 5;

    uint64_t group6 = (*(uint64_t *)((*input) + 9)) >> 6;    group6 &= (1ull << 13) - 1;
    (*output)[4] = (uint32_t)(group6 % 6);
    group6 /= 6;

    (*output)[3] = (uint32_t)(group6 % 6);
    group6 /= 6;

    (*output)[2] = (uint32_t)(group6 % 6);
    group6 /= 6;

    (*output)[1] = (uint32_t)(group6 % 6);
    group6 /= 6;

    (*output)[0] = (uint32_t)(group6 % 6);
    group6 /= 6;
    *output += 5;

    uint64_t group7 = (*(uint64_t *)((*input) + 11)) >> 3;    group7 &= (1ull << 13) - 1;
    (*output)[4] = (uint32_t)(group7 % 6);
    group7 /= 6;

    (*output)[3] = (uint32_t)(group7 % 6);
    group7 /= 6;

    (*output)[2] = (uint32_t)(group7 % 6);
    group7 /= 6;

    (*output)[1] = (uint32_t)(group7 % 6);
    group7 /= 6;

    (*output)[0] = (uint32_t)(group7 % 6);
    group7 /= 6;
    *output += 5;


    *input += 13;
}

// Unpack 17 bytes into 48 values
void Ultrapack_Decompress7(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 17) - 1;
    (*output)[5] = (uint32_t)(group0 % 7);
    group0 /= 7;

    (*output)[4] = (uint32_t)(group0 % 7);
    group0 /= 7;

    (*output)[3] = (uint32_t)(group0 % 7);
    group0 /= 7;

    (*output)[2] = (uint32_t)(group0 % 7);
    group0 /= 7;

    (*output)[1] = (uint32_t)(group0 % 7);
    group0 /= 7;

    (*output)[0] = (uint32_t)(group0 % 7);
    group0 /= 7;
    *output += 6;

    uint64_t group1 = (*(uint64_t *)((*input) + 2)) >> 1;    group1 &= (1ull << 17) - 1;
    (*output)[5] = (uint32_t)(group1 % 7);
    group1 /= 7;

    (*output)[4] = (uint32_t)(group1 % 7);
    group1 /= 7;

    (*output)[3] = (uint32_t)(group1 % 7);
    group1 /= 7;

    (*output)[2] = (uint32_t)(group1 % 7);
    group1 /= 7;

    (*output)[1] = (uint32_t)(group1 % 7);
    group1 /= 7;

    (*output)[0] = (uint32_t)(group1 % 7);
    group1 /= 7;
    *output += 6;

    uint64_t group2 = (*(uint64_t *)((*input) + 4)) >> 2;    group2 &= (1ull << 17) - 1;
    (*output)[5] = (uint32_t)(group2 % 7);
    group2 /= 7;

    (*output)[4] = (uint32_t)(group2 % 7);
    group2 /= 7;

    (*output)[3] = (uint32_t)(group2 % 7);
    group2 /= 7;

    (*output)[2] = (uint32_t)(group2 % 7);
    group2 /= 7;

    (*output)[1] = (uint32_t)(group2 % 7);
    group2 /= 7;

    (*output)[0] = (uint32_t)(group2 % 7);
    group2 /= 7;
    *output += 6;

    uint64_t group3 = (*(uint64_t *)((*input) + 6)) >> 3;    group3 &= (1ull << 17) - 1;
    (*output)[5] = (uint32_t)(group3 % 7);
    group3 /= 7;

    (*output)[4] = (uint32_t)(group3 % 7);
    group3 /= 7;

    (*output)[3] = (uint32_t)(group3 % 7);
    group3 /= 7;

    (*output)[2] = (uint32_t)(group3 % 7);
    group3 /= 7;

    (*output)[1] = (uint32_t)(group3 % 7);
    group3 /= 7;

    (*output)[0] = (uint32_t)(group3 % 7);
    group3 /= 7;
    *output += 6;

    uint64_t group4 = (*(uint64_t *)((*input) + 8)) >> 4;    group4 &= (1ull << 17) - 1;
    (*output)[5] = (uint32_t)(group4 % 7);
    group4 /= 7;

    (*output)[4] = (uint32_t)(group4 % 7);
    group4 /= 7;

    (*output)[3] = (uint32_t)(group4 % 7);
    group4 /= 7;

    (*output)[2] = (uint32_t)(group4 % 7);
    group4 /= 7;

    (*output)[1] = (uint32_t)(group4 % 7);
    group4 /= 7;

    (*output)[0] = (uint32_t)(group4 % 7);
    group4 /= 7;
    *output += 6;

    uint64_t group5 = (*(uint64_t *)((*input) + 10)) >> 5;    group5 &= (1ull << 17) - 1;
    (*output)[5] = (uint32_t)(group5 % 7);
    group5 /= 7;

    (*output)[4] = (uint32_t)(group5 % 7);
    group5 /= 7;

    (*output)[3] = (uint32_t)(group5 % 7);
    group5 /= 7;

    (*output)[2] = (uint32_t)(group5 % 7);
    group5 /= 7;

    (*output)[1] = (uint32_t)(group5 % 7);
    group5 /= 7;

    (*output)[0] = (uint32_t)(group5 % 7);
    group5 /= 7;
    *output += 6;

    uint64_t group6 = (*(uint64_t *)((*input) + 12)) >> 6;    group6 &= (1ull << 17) - 1;
    (*output)[5] = (uint32_t)(group6 % 7);
    group6 /= 7;

    (*output)[4] = (uint32_t)(group6 % 7);
    group6 /= 7;

    (*output)[3] = (uint32_t)(group6 % 7);
    group6 /= 7;

    (*output)[2] = (uint32_t)(group6 % 7);
    group6 /= 7;

    (*output)[1] = (uint32_t)(group6 % 7);
    group6 /= 7;

    (*output)[0] = (uint32_t)(group6 % 7);
    group6 /= 7;
    *output += 6;

    uint64_t group7 = (*(uint64_t *)((*input) + 14)) >> 7;    group7 &= (1ull << 17) - 1;
    (*output)[5] = (uint32_t)(group7 % 7);
    group7 /= 7;

    (*output)[4] = (uint32_t)(group7 % 7);
    group7 /= 7;

    (*output)[3] = (uint32_t)(group7 % 7);
    group7 /= 7;

    (*output)[2] = (uint32_t)(group7 % 7);
    group7 /= 7;

    (*output)[1] = (uint32_t)(group7 % 7);
    group7 /= 7;

    (*output)[0] = (uint32_t)(group7 % 7);
    group7 /= 7;
    *output += 6;


    *input += 17;
}

// Unpack 3 bytes into 8 values
void Ultrapack_Decompress8(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 3) - 1;
    (*output)[0] = (uint32_t)(group0 % 8);
    group0 /= 8;
    *output += 1;

    uint64_t group1 = (*(uint64_t *)((*input) + 0)) >> 3;    group1 &= (1ull << 3) - 1;
    (*output)[0] = (uint32_t)(group1 % 8);
    group1 /= 8;
    *output += 1;

    uint64_t group2 = (*(uint64_t *)((*input) + 0)) >> 6;    group2 &= (1ull << 3) - 1;
    (*output)[0] = (uint32_t)(group2 % 8);
    group2 /= 8;
    *output += 1;

    uint64_t group3 = (*(uint64_t *)((*input) + 1)) >> 1;    group3 &= (1ull << 3) - 1;
    (*output)[0] = (uint32_t)(group3 % 8);
    group3 /= 8;
    *output += 1;

    uint64_t group4 = (*(uint64_t *)((*input) + 1)) >> 4;    group4 &= (1ull << 3) - 1;
    (*output)[0] = (uint32_t)(group4 % 8);
    group4 /= 8;
    *output += 1;

    uint64_t group5 = (*(uint64_t *)((*input) + 1)) >> 7;    group5 &= (1ull << 3) - 1;
    (*output)[0] = (uint32_t)(group5 % 8);
    group5 /= 8;
    *output += 1;

    uint64_t group6 = (*(uint64_t *)((*input) + 2)) >> 2;    group6 &= (1ull << 3) - 1;
    (*output)[0] = (uint32_t)(group6 % 8);
    group6 /= 8;
    *output += 1;

    uint64_t group7 = (*(uint64_t *)((*input) + 2)) >> 5;    group7 &= (1ull << 3) - 1;
    (*output)[0] = (uint32_t)(group7 % 8);
    group7 /= 8;
    *output += 1;


    *input += 3;
}

// Unpack 35 bytes into 88 values
void Ultrapack_Decompress9(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 35) - 1;
    (*output)[10] = (uint32_t)(group0 % 9);
    group0 /= 9;

    (*output)[9] = (uint32_t)(group0 % 9);
    group0 /= 9;

    (*output)[8] = (uint32_t)(group0 % 9);
    group0 /= 9;

    (*output)[7] = (uint32_t)(group0 % 9);
    group0 /= 9;

    (*output)[6] = (uint32_t)(group0 % 9);
    group0 /= 9;

    (*output)[5] = (uint32_t)(group0 % 9);
    group0 /= 9;

    (*output)[4] = (uint32_t)(group0 % 9);
    group0 /= 9;

    (*output)[3] = (uint32_t)(group0 % 9);
    group0 /= 9;

    (*output)[2] = (uint32_t)(group0 % 9);
    group0 /= 9;

    (*output)[1] = (uint32_t)(group0 % 9);
    group0 /= 9;

    (*output)[0] = (uint32_t)(group0 % 9);
    group0 /= 9;
    *output += 11;

    uint64_t group1 = (*(uint64_t *)((*input) + 4)) >> 3;    group1 &= (1ull << 35) - 1;
    (*output)[10] = (uint32_t)(group1 % 9);
    group1 /= 9;

    (*output)[9] = (uint32_t)(group1 % 9);
    group1 /= 9;

    (*output)[8] = (uint32_t)(group1 % 9);
    group1 /= 9;

    (*output)[7] = (uint32_t)(group1 % 9);
    group1 /= 9;

    (*output)[6] = (uint32_t)(group1 % 9);
    group1 /= 9;

    (*output)[5] = (uint32_t)(group1 % 9);
    group1 /= 9;

    (*output)[4] = (uint32_t)(group1 % 9);
    group1 /= 9;

    (*output)[3] = (uint32_t)(group1 % 9);
    group1 /= 9;

    (*output)[2] = (uint32_t)(group1 % 9);
    group1 /= 9;

    (*output)[1] = (uint32_t)(group1 % 9);
    group1 /= 9;

    (*output)[0] = (uint32_t)(group1 % 9);
    group1 /= 9;
    *output += 11;

    uint64_t group2 = (*(uint64_t *)((*input) + 8)) >> 6;    group2 &= (1ull << 35) - 1;
    (*output)[10] = (uint32_t)(group2 % 9);
    group2 /= 9;

    (*output)[9] = (uint32_t)(group2 % 9);
    group2 /= 9;

    (*output)[8] = (uint32_t)(group2 % 9);
    group2 /= 9;

    (*output)[7] = (uint32_t)(group2 % 9);
    group2 /= 9;

    (*output)[6] = (uint32_t)(group2 % 9);
    group2 /= 9;

    (*output)[5] = (uint32_t)(group2 % 9);
    group2 /= 9;

    (*output)[4] = (uint32_t)(group2 % 9);
    group2 /= 9;

    (*output)[3] = (uint32_t)(group2 % 9);
    group2 /= 9;

    (*output)[2] = (uint32_t)(group2 % 9);
    group2 /= 9;

    (*output)[1] = (uint32_t)(group2 % 9);
    group2 /= 9;

    (*output)[0] = (uint32_t)(group2 % 9);
    group2 /= 9;
    *output += 11;

    uint64_t group3 = (*(uint64_t *)((*input) + 13)) >> 1;    group3 &= (1ull << 35) - 1;
    (*output)[10] = (uint32_t)(group3 % 9);
    group3 /= 9;

    (*output)[9] = (uint32_t)(group3 % 9);
    group3 /= 9;

    (*output)[8] = (uint32_t)(group3 % 9);
    group3 /= 9;

    (*output)[7] = (uint32_t)(group3 % 9);
    group3 /= 9;

    (*output)[6] = (uint32_t)(group3 % 9);
    group3 /= 9;

    (*output)[5] = (uint32_t)(group3 % 9);
    group3 /= 9;

    (*output)[4] = (uint32_t)(group3 % 9);
    group3 /= 9;

    (*output)[3] = (uint32_t)(group3 % 9);
    group3 /= 9;

    (*output)[2] = (uint32_t)(group3 % 9);
    group3 /= 9;

    (*output)[1] = (uint32_t)(group3 % 9);
    group3 /= 9;

    (*output)[0] = (uint32_t)(group3 % 9);
    group3 /= 9;
    *output += 11;

    uint64_t group4 = (*(uint64_t *)((*input) + 17)) >> 4;    group4 &= (1ull << 35) - 1;
    (*output)[10] = (uint32_t)(group4 % 9);
    group4 /= 9;

    (*output)[9] = (uint32_t)(group4 % 9);
    group4 /= 9;

    (*output)[8] = (uint32_t)(group4 % 9);
    group4 /= 9;

    (*output)[7] = (uint32_t)(group4 % 9);
    group4 /= 9;

    (*output)[6] = (uint32_t)(group4 % 9);
    group4 /= 9;

    (*output)[5] = (uint32_t)(group4 % 9);
    group4 /= 9;

    (*output)[4] = (uint32_t)(group4 % 9);
    group4 /= 9;

    (*output)[3] = (uint32_t)(group4 % 9);
    group4 /= 9;

    (*output)[2] = (uint32_t)(group4 % 9);
    group4 /= 9;

    (*output)[1] = (uint32_t)(group4 % 9);
    group4 /= 9;

    (*output)[0] = (uint32_t)(group4 % 9);
    group4 /= 9;
    *output += 11;

    uint64_t group5 = (*(uint64_t *)((*input) + 21)) >> 7;    group5 &= (1ull << 35) - 1;
    (*output)[10] = (uint32_t)(group5 % 9);
    group5 /= 9;

    (*output)[9] = (uint32_t)(group5 % 9);
    group5 /= 9;

    (*output)[8] = (uint32_t)(group5 % 9);
    group5 /= 9;

    (*output)[7] = (uint32_t)(group5 % 9);
    group5 /= 9;

    (*output)[6] = (uint32_t)(group5 % 9);
    group5 /= 9;

    (*output)[5] = (uint32_t)(group5 % 9);
    group5 /= 9;

    (*output)[4] = (uint32_t)(group5 % 9);
    group5 /= 9;

    (*output)[3] = (uint32_t)(group5 % 9);
    group5 /= 9;

    (*output)[2] = (uint32_t)(group5 % 9);
    group5 /= 9;

    (*output)[1] = (uint32_t)(group5 % 9);
    group5 /= 9;

    (*output)[0] = (uint32_t)(group5 % 9);
    group5 /= 9;
    *output += 11;

    uint64_t group6 = (*(uint64_t *)((*input) + 26)) >> 2;    group6 &= (1ull << 35) - 1;
    (*output)[10] = (uint32_t)(group6 % 9);
    group6 /= 9;

    (*output)[9] = (uint32_t)(group6 % 9);
    group6 /= 9;

    (*output)[8] = (uint32_t)(group6 % 9);
    group6 /= 9;

    (*output)[7] = (uint32_t)(group6 % 9);
    group6 /= 9;

    (*output)[6] = (uint32_t)(group6 % 9);
    group6 /= 9;

    (*output)[5] = (uint32_t)(group6 % 9);
    group6 /= 9;

    (*output)[4] = (uint32_t)(group6 % 9);
    group6 /= 9;

    (*output)[3] = (uint32_t)(group6 % 9);
    group6 /= 9;

    (*output)[2] = (uint32_t)(group6 % 9);
    group6 /= 9;

    (*output)[1] = (uint32_t)(group6 % 9);
    group6 /= 9;

    (*output)[0] = (uint32_t)(group6 % 9);
    group6 /= 9;
    *output += 11;

    uint64_t group7 = (*(uint64_t *)((*input) + 30)) >> 5;    group7 &= (1ull << 35) - 1;
    (*output)[10] = (uint32_t)(group7 % 9);
    group7 /= 9;

    (*output)[9] = (uint32_t)(group7 % 9);
    group7 /= 9;

    (*output)[8] = (uint32_t)(group7 % 9);
    group7 /= 9;

    (*output)[7] = (uint32_t)(group7 % 9);
    group7 /= 9;

    (*output)[6] = (uint32_t)(group7 % 9);
    group7 /= 9;

    (*output)[5] = (uint32_t)(group7 % 9);
    group7 /= 9;

    (*output)[4] = (uint32_t)(group7 % 9);
    group7 /= 9;

    (*output)[3] = (uint32_t)(group7 % 9);
    group7 /= 9;

    (*output)[2] = (uint32_t)(group7 % 9);
    group7 /= 9;

    (*output)[1] = (uint32_t)(group7 % 9);
    group7 /= 9;

    (*output)[0] = (uint32_t)(group7 % 9);
    group7 /= 9;
    *output += 11;


    *input += 35;
}

// Unpack 5 bytes into 12 values
void Ultrapack_Decompress10(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 10) - 1;
    (*output)[2] = (uint32_t)(group0 % 10);
    group0 /= 10;

    (*output)[1] = (uint32_t)(group0 % 10);
    group0 /= 10;

    (*output)[0] = (uint32_t)(group0 % 10);
    group0 /= 10;
    *output += 3;

    uint64_t group1 = (*(uint64_t *)((*input) + 1)) >> 2;    group1 &= (1ull << 10) - 1;
    (*output)[2] = (uint32_t)(group1 % 10);
    group1 /= 10;

    (*output)[1] = (uint32_t)(group1 % 10);
    group1 /= 10;

    (*output)[0] = (uint32_t)(group1 % 10);
    group1 /= 10;
    *output += 3;

    uint64_t group2 = (*(uint64_t *)((*input) + 2)) >> 4;    group2 &= (1ull << 10) - 1;
    (*output)[2] = (uint32_t)(group2 % 10);
    group2 /= 10;

    (*output)[1] = (uint32_t)(group2 % 10);
    group2 /= 10;

    (*output)[0] = (uint32_t)(group2 % 10);
    group2 /= 10;
    *output += 3;

    uint64_t group3 = (*(uint64_t *)((*input) + 3)) >> 6;    group3 &= (1ull << 10) - 1;
    (*output)[2] = (uint32_t)(group3 % 10);
    group3 /= 10;

    (*output)[1] = (uint32_t)(group3 % 10);
    group3 /= 10;

    (*output)[0] = (uint32_t)(group3 % 10);
    group3 /= 10;
    *output += 3;


    *input += 5;
}

// Unpack 7 bytes into 16 values
void Ultrapack_Decompress11(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 7) - 1;
    (*output)[1] = (uint32_t)(group0 % 11);
    group0 /= 11;

    (*output)[0] = (uint32_t)(group0 % 11);
    group0 /= 11;
    *output += 2;

    uint64_t group1 = (*(uint64_t *)((*input) + 0)) >> 7;    group1 &= (1ull << 7) - 1;
    (*output)[1] = (uint32_t)(group1 % 11);
    group1 /= 11;

    (*output)[0] = (uint32_t)(group1 % 11);
    group1 /= 11;
    *output += 2;

    uint64_t group2 = (*(uint64_t *)((*input) + 1)) >> 6;    group2 &= (1ull << 7) - 1;
    (*output)[1] = (uint32_t)(group2 % 11);
    group2 /= 11;

    (*output)[0] = (uint32_t)(group2 % 11);
    group2 /= 11;
    *output += 2;

    uint64_t group3 = (*(uint64_t *)((*input) + 2)) >> 5;    group3 &= (1ull << 7) - 1;
    (*output)[1] = (uint32_t)(group3 % 11);
    group3 /= 11;

    (*output)[0] = (uint32_t)(group3 % 11);
    group3 /= 11;
    *output += 2;

    uint64_t group4 = (*(uint64_t *)((*input) + 3)) >> 4;    group4 &= (1ull << 7) - 1;
    (*output)[1] = (uint32_t)(group4 % 11);
    group4 /= 11;

    (*output)[0] = (uint32_t)(group4 % 11);
    group4 /= 11;
    *output += 2;

    uint64_t group5 = (*(uint64_t *)((*input) + 4)) >> 3;    group5 &= (1ull << 7) - 1;
    (*output)[1] = (uint32_t)(group5 % 11);
    group5 /= 11;

    (*output)[0] = (uint32_t)(group5 % 11);
    group5 /= 11;
    *output += 2;

    uint64_t group6 = (*(uint64_t *)((*input) + 5)) >> 2;    group6 &= (1ull << 7) - 1;
    (*output)[1] = (uint32_t)(group6 % 11);
    group6 /= 11;

    (*output)[0] = (uint32_t)(group6 % 11);
    group6 /= 11;
    *output += 2;

    uint64_t group7 = (*(uint64_t *)((*input) + 6)) >> 1;    group7 &= (1ull << 7) - 1;
    (*output)[1] = (uint32_t)(group7 % 11);
    group7 /= 11;

    (*output)[0] = (uint32_t)(group7 % 11);
    group7 /= 11;
    *output += 2;


    *input += 7;
}

// Unpack 9 bytes into 20 values
void Ultrapack_Decompress12(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 18) - 1;
    (*output)[4] = (uint32_t)(group0 % 12);
    group0 /= 12;

    (*output)[3] = (uint32_t)(group0 % 12);
    group0 /= 12;

    (*output)[2] = (uint32_t)(group0 % 12);
    group0 /= 12;

    (*output)[1] = (uint32_t)(group0 % 12);
    group0 /= 12;

    (*output)[0] = (uint32_t)(group0 % 12);
    group0 /= 12;
    *output += 5;

    uint64_t group1 = (*(uint64_t *)((*input) + 2)) >> 2;    group1 &= (1ull << 18) - 1;
    (*output)[4] = (uint32_t)(group1 % 12);
    group1 /= 12;

    (*output)[3] = (uint32_t)(group1 % 12);
    group1 /= 12;

    (*output)[2] = (uint32_t)(group1 % 12);
    group1 /= 12;

    (*output)[1] = (uint32_t)(group1 % 12);
    group1 /= 12;

    (*output)[0] = (uint32_t)(group1 % 12);
    group1 /= 12;
    *output += 5;

    uint64_t group2 = (*(uint64_t *)((*input) + 4)) >> 4;    group2 &= (1ull << 18) - 1;
    (*output)[4] = (uint32_t)(group2 % 12);
    group2 /= 12;

    (*output)[3] = (uint32_t)(group2 % 12);
    group2 /= 12;

    (*output)[2] = (uint32_t)(group2 % 12);
    group2 /= 12;

    (*output)[1] = (uint32_t)(group2 % 12);
    group2 /= 12;

    (*output)[0] = (uint32_t)(group2 % 12);
    group2 /= 12;
    *output += 5;

    uint64_t group3 = (*(uint64_t *)((*input) + 6)) >> 6;    group3 &= (1ull << 18) - 1;
    (*output)[4] = (uint32_t)(group3 % 12);
    group3 /= 12;

    (*output)[3] = (uint32_t)(group3 % 12);
    group3 /= 12;

    (*output)[2] = (uint32_t)(group3 % 12);
    group3 /= 12;

    (*output)[1] = (uint32_t)(group3 % 12);
    group3 /= 12;

    (*output)[0] = (uint32_t)(group3 % 12);
    group3 /= 12;
    *output += 5;


    *input += 9;
}

// Unpack 15 bytes into 32 values
void Ultrapack_Decompress13(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 15) - 1;
    (*output)[3] = (uint32_t)(group0 % 13);
    group0 /= 13;

    (*output)[2] = (uint32_t)(group0 % 13);
    group0 /= 13;

    (*output)[1] = (uint32_t)(group0 % 13);
    group0 /= 13;

    (*output)[0] = (uint32_t)(group0 % 13);
    group0 /= 13;
    *output += 4;

    uint64_t group1 = (*(uint64_t *)((*input) + 1)) >> 7;    group1 &= (1ull << 15) - 1;
    (*output)[3] = (uint32_t)(group1 % 13);
    group1 /= 13;

    (*output)[2] = (uint32_t)(group1 % 13);
    group1 /= 13;

    (*output)[1] = (uint32_t)(group1 % 13);
    group1 /= 13;

    (*output)[0] = (uint32_t)(group1 % 13);
    group1 /= 13;
    *output += 4;

    uint64_t group2 = (*(uint64_t *)((*input) + 3)) >> 6;    group2 &= (1ull << 15) - 1;
    (*output)[3] = (uint32_t)(group2 % 13);
    group2 /= 13;

    (*output)[2] = (uint32_t)(group2 % 13);
    group2 /= 13;

    (*output)[1] = (uint32_t)(group2 % 13);
    group2 /= 13;

    (*output)[0] = (uint32_t)(group2 % 13);
    group2 /= 13;
    *output += 4;

    uint64_t group3 = (*(uint64_t *)((*input) + 5)) >> 5;    group3 &= (1ull << 15) - 1;
    (*output)[3] = (uint32_t)(group3 % 13);
    group3 /= 13;

    (*output)[2] = (uint32_t)(group3 % 13);
    group3 /= 13;

    (*output)[1] = (uint32_t)(group3 % 13);
    group3 /= 13;

    (*output)[0] = (uint32_t)(group3 % 13);
    group3 /= 13;
    *output += 4;

    uint64_t group4 = (*(uint64_t *)((*input) + 7)) >> 4;    group4 &= (1ull << 15) - 1;
    (*output)[3] = (uint32_t)(group4 % 13);
    group4 /= 13;

    (*output)[2] = (uint32_t)(group4 % 13);
    group4 /= 13;

    (*output)[1] = (uint32_t)(group4 % 13);
    group4 /= 13;

    (*output)[0] = (uint32_t)(group4 % 13);
    group4 /= 13;
    *output += 4;

    uint64_t group5 = (*(uint64_t *)((*input) + 9)) >> 3;    group5 &= (1ull << 15) - 1;
    (*output)[3] = (uint32_t)(group5 % 13);
    group5 /= 13;

    (*output)[2] = (uint32_t)(group5 % 13);
    group5 /= 13;

    (*output)[1] = (uint32_t)(group5 % 13);
    group5 /= 13;

    (*output)[0] = (uint32_t)(group5 % 13);
    group5 /= 13;
    *output += 4;

    uint64_t group6 = (*(uint64_t *)((*input) + 11)) >> 2;    group6 &= (1ull << 15) - 1;
    (*output)[3] = (uint32_t)(group6 % 13);
    group6 /= 13;

    (*output)[2] = (uint32_t)(group6 % 13);
    group6 /= 13;

    (*output)[1] = (uint32_t)(group6 % 13);
    group6 /= 13;

    (*output)[0] = (uint32_t)(group6 % 13);
    group6 /= 13;
    *output += 4;

    uint64_t group7 = (*(uint64_t *)((*input) + 13)) >> 1;    group7 &= (1ull << 15) - 1;
    (*output)[3] = (uint32_t)(group7 % 13);
    group7 /= 13;

    (*output)[2] = (uint32_t)(group7 % 13);
    group7 /= 13;

    (*output)[1] = (uint32_t)(group7 % 13);
    group7 /= 13;

    (*output)[0] = (uint32_t)(group7 % 13);
    group7 /= 13;
    *output += 4;


    *input += 15;
}

// Unpack 23 bytes into 48 values
void Ultrapack_Decompress14(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 23) - 1;
    (*output)[5] = (uint32_t)(group0 % 14);
    group0 /= 14;

    (*output)[4] = (uint32_t)(group0 % 14);
    group0 /= 14;

    (*output)[3] = (uint32_t)(group0 % 14);
    group0 /= 14;

    (*output)[2] = (uint32_t)(group0 % 14);
    group0 /= 14;

    (*output)[1] = (uint32_t)(group0 % 14);
    group0 /= 14;

    (*output)[0] = (uint32_t)(group0 % 14);
    group0 /= 14;
    *output += 6;

    uint64_t group1 = (*(uint64_t *)((*input) + 2)) >> 7;    group1 &= (1ull << 23) - 1;
    (*output)[5] = (uint32_t)(group1 % 14);
    group1 /= 14;

    (*output)[4] = (uint32_t)(group1 % 14);
    group1 /= 14;

    (*output)[3] = (uint32_t)(group1 % 14);
    group1 /= 14;

    (*output)[2] = (uint32_t)(group1 % 14);
    group1 /= 14;

    (*output)[1] = (uint32_t)(group1 % 14);
    group1 /= 14;

    (*output)[0] = (uint32_t)(group1 % 14);
    group1 /= 14;
    *output += 6;

    uint64_t group2 = (*(uint64_t *)((*input) + 5)) >> 6;    group2 &= (1ull << 23) - 1;
    (*output)[5] = (uint32_t)(group2 % 14);
    group2 /= 14;

    (*output)[4] = (uint32_t)(group2 % 14);
    group2 /= 14;

    (*output)[3] = (uint32_t)(group2 % 14);
    group2 /= 14;

    (*output)[2] = (uint32_t)(group2 % 14);
    group2 /= 14;

    (*output)[1] = (uint32_t)(group2 % 14);
    group2 /= 14;

    (*output)[0] = (uint32_t)(group2 % 14);
    group2 /= 14;
    *output += 6;

    uint64_t group3 = (*(uint64_t *)((*input) + 8)) >> 5;    group3 &= (1ull << 23) - 1;
    (*output)[5] = (uint32_t)(group3 % 14);
    group3 /= 14;

    (*output)[4] = (uint32_t)(group3 % 14);
    group3 /= 14;

    (*output)[3] = (uint32_t)(group3 % 14);
    group3 /= 14;

    (*output)[2] = (uint32_t)(group3 % 14);
    group3 /= 14;

    (*output)[1] = (uint32_t)(group3 % 14);
    group3 /= 14;

    (*output)[0] = (uint32_t)(group3 % 14);
    group3 /= 14;
    *output += 6;

    uint64_t group4 = (*(uint64_t *)((*input) + 11)) >> 4;    group4 &= (1ull << 23) - 1;
    (*output)[5] = (uint32_t)(group4 % 14);
    group4 /= 14;

    (*output)[4] = (uint32_t)(group4 % 14);
    group4 /= 14;

    (*output)[3] = (uint32_t)(group4 % 14);
    group4 /= 14;

    (*output)[2] = (uint32_t)(group4 % 14);
    group4 /= 14;

    (*output)[1] = (uint32_t)(group4 % 14);
    group4 /= 14;

    (*output)[0] = (uint32_t)(group4 % 14);
    group4 /= 14;
    *output += 6;

    uint64_t group5 = (*(uint64_t *)((*input) + 14)) >> 3;    group5 &= (1ull << 23) - 1;
    (*output)[5] = (uint32_t)(group5 % 14);
    group5 /= 14;

    (*output)[4] = (uint32_t)(group5 % 14);
    group5 /= 14;

    (*output)[3] = (uint32_t)(group5 % 14);
    group5 /= 14;

    (*output)[2] = (uint32_t)(group5 % 14);
    group5 /= 14;

    (*output)[1] = (uint32_t)(group5 % 14);
    group5 /= 14;

    (*output)[0] = (uint32_t)(group5 % 14);
    group5 /= 14;
    *output += 6;

    uint64_t group6 = (*(uint64_t *)((*input) + 17)) >> 2;    group6 &= (1ull << 23) - 1;
    (*output)[5] = (uint32_t)(group6 % 14);
    group6 /= 14;

    (*output)[4] = (uint32_t)(group6 % 14);
    group6 /= 14;

    (*output)[3] = (uint32_t)(group6 % 14);
    group6 /= 14;

    (*output)[2] = (uint32_t)(group6 % 14);
    group6 /= 14;

    (*output)[1] = (uint32_t)(group6 % 14);
    group6 /= 14;

    (*output)[0] = (uint32_t)(group6 % 14);
    group6 /= 14;
    *output += 6;

    uint64_t group7 = (*(uint64_t *)((*input) + 20)) >> 1;    group7 &= (1ull << 23) - 1;
    (*output)[5] = (uint32_t)(group7 % 14);
    group7 /= 14;

    (*output)[4] = (uint32_t)(group7 % 14);
    group7 /= 14;

    (*output)[3] = (uint32_t)(group7 % 14);
    group7 /= 14;

    (*output)[2] = (uint32_t)(group7 % 14);
    group7 /= 14;

    (*output)[1] = (uint32_t)(group7 % 14);
    group7 /= 14;

    (*output)[0] = (uint32_t)(group7 % 14);
    group7 /= 14;
    *output += 6;


    *input += 23;
}

// Unpack 43 bytes into 88 values
void Ultrapack_Decompress15(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 43) - 1;
    (*output)[10] = (uint32_t)(group0 % 15);
    group0 /= 15;

    (*output)[9] = (uint32_t)(group0 % 15);
    group0 /= 15;

    (*output)[8] = (uint32_t)(group0 % 15);
    group0 /= 15;

    (*output)[7] = (uint32_t)(group0 % 15);
    group0 /= 15;

    (*output)[6] = (uint32_t)(group0 % 15);
    group0 /= 15;

    (*output)[5] = (uint32_t)(group0 % 15);
    group0 /= 15;

    (*output)[4] = (uint32_t)(group0 % 15);
    group0 /= 15;

    (*output)[3] = (uint32_t)(group0 % 15);
    group0 /= 15;

    (*output)[2] = (uint32_t)(group0 % 15);
    group0 /= 15;

    (*output)[1] = (uint32_t)(group0 % 15);
    group0 /= 15;

    (*output)[0] = (uint32_t)(group0 % 15);
    group0 /= 15;
    *output += 11;

    uint64_t group1 = (*(uint64_t *)((*input) + 5)) >> 3;    group1 &= (1ull << 43) - 1;
    (*output)[10] = (uint32_t)(group1 % 15);
    group1 /= 15;

    (*output)[9] = (uint32_t)(group1 % 15);
    group1 /= 15;

    (*output)[8] = (uint32_t)(group1 % 15);
    group1 /= 15;

    (*output)[7] = (uint32_t)(group1 % 15);
    group1 /= 15;

    (*output)[6] = (uint32_t)(group1 % 15);
    group1 /= 15;

    (*output)[5] = (uint32_t)(group1 % 15);
    group1 /= 15;

    (*output)[4] = (uint32_t)(group1 % 15);
    group1 /= 15;

    (*output)[3] = (uint32_t)(group1 % 15);
    group1 /= 15;

    (*output)[2] = (uint32_t)(group1 % 15);
    group1 /= 15;

    (*output)[1] = (uint32_t)(group1 % 15);
    group1 /= 15;

    (*output)[0] = (uint32_t)(group1 % 15);
    group1 /= 15;
    *output += 11;

    uint64_t group2 = (*(uint64_t *)((*input) + 10)) >> 6;    group2 &= (1ull << 43) - 1;
    (*output)[10] = (uint32_t)(group2 % 15);
    group2 /= 15;

    (*output)[9] = (uint32_t)(group2 % 15);
    group2 /= 15;

    (*output)[8] = (uint32_t)(group2 % 15);
    group2 /= 15;

    (*output)[7] = (uint32_t)(group2 % 15);
    group2 /= 15;

    (*output)[6] = (uint32_t)(group2 % 15);
    group2 /= 15;

    (*output)[5] = (uint32_t)(group2 % 15);
    group2 /= 15;

    (*output)[4] = (uint32_t)(group2 % 15);
    group2 /= 15;

    (*output)[3] = (uint32_t)(group2 % 15);
    group2 /= 15;

    (*output)[2] = (uint32_t)(group2 % 15);
    group2 /= 15;

    (*output)[1] = (uint32_t)(group2 % 15);
    group2 /= 15;

    (*output)[0] = (uint32_t)(group2 % 15);
    group2 /= 15;
    *output += 11;

    uint64_t group3 = (*(uint64_t *)((*input) + 16)) >> 1;    group3 &= (1ull << 43) - 1;
    (*output)[10] = (uint32_t)(group3 % 15);
    group3 /= 15;

    (*output)[9] = (uint32_t)(group3 % 15);
    group3 /= 15;

    (*output)[8] = (uint32_t)(group3 % 15);
    group3 /= 15;

    (*output)[7] = (uint32_t)(group3 % 15);
    group3 /= 15;

    (*output)[6] = (uint32_t)(group3 % 15);
    group3 /= 15;

    (*output)[5] = (uint32_t)(group3 % 15);
    group3 /= 15;

    (*output)[4] = (uint32_t)(group3 % 15);
    group3 /= 15;

    (*output)[3] = (uint32_t)(group3 % 15);
    group3 /= 15;

    (*output)[2] = (uint32_t)(group3 % 15);
    group3 /= 15;

    (*output)[1] = (uint32_t)(group3 % 15);
    group3 /= 15;

    (*output)[0] = (uint32_t)(group3 % 15);
    group3 /= 15;
    *output += 11;

    uint64_t group4 = (*(uint64_t *)((*input) + 21)) >> 4;    group4 &= (1ull << 43) - 1;
    (*output)[10] = (uint32_t)(group4 % 15);
    group4 /= 15;

    (*output)[9] = (uint32_t)(group4 % 15);
    group4 /= 15;

    (*output)[8] = (uint32_t)(group4 % 15);
    group4 /= 15;

    (*output)[7] = (uint32_t)(group4 % 15);
    group4 /= 15;

    (*output)[6] = (uint32_t)(group4 % 15);
    group4 /= 15;

    (*output)[5] = (uint32_t)(group4 % 15);
    group4 /= 15;

    (*output)[4] = (uint32_t)(group4 % 15);
    group4 /= 15;

    (*output)[3] = (uint32_t)(group4 % 15);
    group4 /= 15;

    (*output)[2] = (uint32_t)(group4 % 15);
    group4 /= 15;

    (*output)[1] = (uint32_t)(group4 % 15);
    group4 /= 15;

    (*output)[0] = (uint32_t)(group4 % 15);
    group4 /= 15;
    *output += 11;

    uint64_t group5 = (*(uint64_t *)((*input) + 26)) >> 7;    group5 &= (1ull << 43) - 1;
    (*output)[10] = (uint32_t)(group5 % 15);
    group5 /= 15;

    (*output)[9] = (uint32_t)(group5 % 15);
    group5 /= 15;

    (*output)[8] = (uint32_t)(group5 % 15);
    group5 /= 15;

    (*output)[7] = (uint32_t)(group5 % 15);
    group5 /= 15;

    (*output)[6] = (uint32_t)(group5 % 15);
    group5 /= 15;

    (*output)[5] = (uint32_t)(group5 % 15);
    group5 /= 15;

    (*output)[4] = (uint32_t)(group5 % 15);
    group5 /= 15;

    (*output)[3] = (uint32_t)(group5 % 15);
    group5 /= 15;

    (*output)[2] = (uint32_t)(group5 % 15);
    group5 /= 15;

    (*output)[1] = (uint32_t)(group5 % 15);
    group5 /= 15;

    (*output)[0] = (uint32_t)(group5 % 15);
    group5 /= 15;
    *output += 11;

    uint64_t group6 = (*(uint64_t *)((*input) + 32)) >> 2;    group6 &= (1ull << 43) - 1;
    (*output)[10] = (uint32_t)(group6 % 15);
    group6 /= 15;

    (*output)[9] = (uint32_t)(group6 % 15);
    group6 /= 15;

    (*output)[8] = (uint32_t)(group6 % 15);
    group6 /= 15;

    (*output)[7] = (uint32_t)(group6 % 15);
    group6 /= 15;

    (*output)[6] = (uint32_t)(group6 % 15);
    group6 /= 15;

    (*output)[5] = (uint32_t)(group6 % 15);
    group6 /= 15;

    (*output)[4] = (uint32_t)(group6 % 15);
    group6 /= 15;

    (*output)[3] = (uint32_t)(group6 % 15);
    group6 /= 15;

    (*output)[2] = (uint32_t)(group6 % 15);
    group6 /= 15;

    (*output)[1] = (uint32_t)(group6 % 15);
    group6 /= 15;

    (*output)[0] = (uint32_t)(group6 % 15);
    group6 /= 15;
    *output += 11;

    uint64_t group7 = (*(uint64_t *)((*input) + 37)) >> 5;    group7 &= (1ull << 43) - 1;
    (*output)[10] = (uint32_t)(group7 % 15);
    group7 /= 15;

    (*output)[9] = (uint32_t)(group7 % 15);
    group7 /= 15;

    (*output)[8] = (uint32_t)(group7 % 15);
    group7 /= 15;

    (*output)[7] = (uint32_t)(group7 % 15);
    group7 /= 15;

    (*output)[6] = (uint32_t)(group7 % 15);
    group7 /= 15;

    (*output)[5] = (uint32_t)(group7 % 15);
    group7 /= 15;

    (*output)[4] = (uint32_t)(group7 % 15);
    group7 /= 15;

    (*output)[3] = (uint32_t)(group7 % 15);
    group7 /= 15;

    (*output)[2] = (uint32_t)(group7 % 15);
    group7 /= 15;

    (*output)[1] = (uint32_t)(group7 % 15);
    group7 /= 15;

    (*output)[0] = (uint32_t)(group7 % 15);
    group7 /= 15;
    *output += 11;


    *input += 43;
}

// Unpack 1 bytes into 2 values
void Ultrapack_Decompress16(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 4) - 1;
    (*output)[0] = (uint32_t)(group0 % 16);
    group0 /= 16;
    *output += 1;

    uint64_t group1 = (*(uint64_t *)((*input) + 0)) >> 4;    group1 &= (1ull << 4) - 1;
    (*output)[0] = (uint32_t)(group1 % 16);
    group1 /= 16;
    *output += 1;


    *input += 1;
}

// Unpack 37 bytes into 72 values
void Ultrapack_Decompress17(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 37) - 1;
    (*output)[8] = (uint32_t)(group0 % 17);
    group0 /= 17;

    (*output)[7] = (uint32_t)(group0 % 17);
    group0 /= 17;

    (*output)[6] = (uint32_t)(group0 % 17);
    group0 /= 17;

    (*output)[5] = (uint32_t)(group0 % 17);
    group0 /= 17;

    (*output)[4] = (uint32_t)(group0 % 17);
    group0 /= 17;

    (*output)[3] = (uint32_t)(group0 % 17);
    group0 /= 17;

    (*output)[2] = (uint32_t)(group0 % 17);
    group0 /= 17;

    (*output)[1] = (uint32_t)(group0 % 17);
    group0 /= 17;

    (*output)[0] = (uint32_t)(group0 % 17);
    group0 /= 17;
    *output += 9;

    uint64_t group1 = (*(uint64_t *)((*input) + 4)) >> 5;    group1 &= (1ull << 37) - 1;
    (*output)[8] = (uint32_t)(group1 % 17);
    group1 /= 17;

    (*output)[7] = (uint32_t)(group1 % 17);
    group1 /= 17;

    (*output)[6] = (uint32_t)(group1 % 17);
    group1 /= 17;

    (*output)[5] = (uint32_t)(group1 % 17);
    group1 /= 17;

    (*output)[4] = (uint32_t)(group1 % 17);
    group1 /= 17;

    (*output)[3] = (uint32_t)(group1 % 17);
    group1 /= 17;

    (*output)[2] = (uint32_t)(group1 % 17);
    group1 /= 17;

    (*output)[1] = (uint32_t)(group1 % 17);
    group1 /= 17;

    (*output)[0] = (uint32_t)(group1 % 17);
    group1 /= 17;
    *output += 9;

    uint64_t group2 = (*(uint64_t *)((*input) + 9)) >> 2;    group2 &= (1ull << 37) - 1;
    (*output)[8] = (uint32_t)(group2 % 17);
    group2 /= 17;

    (*output)[7] = (uint32_t)(group2 % 17);
    group2 /= 17;

    (*output)[6] = (uint32_t)(group2 % 17);
    group2 /= 17;

    (*output)[5] = (uint32_t)(group2 % 17);
    group2 /= 17;

    (*output)[4] = (uint32_t)(group2 % 17);
    group2 /= 17;

    (*output)[3] = (uint32_t)(group2 % 17);
    group2 /= 17;

    (*output)[2] = (uint32_t)(group2 % 17);
    group2 /= 17;

    (*output)[1] = (uint32_t)(group2 % 17);
    group2 /= 17;

    (*output)[0] = (uint32_t)(group2 % 17);
    group2 /= 17;
    *output += 9;

    uint64_t group3 = (*(uint64_t *)((*input) + 13)) >> 7;    group3 &= (1ull << 37) - 1;
    (*output)[8] = (uint32_t)(group3 % 17);
    group3 /= 17;

    (*output)[7] = (uint32_t)(group3 % 17);
    group3 /= 17;

    (*output)[6] = (uint32_t)(group3 % 17);
    group3 /= 17;

    (*output)[5] = (uint32_t)(group3 % 17);
    group3 /= 17;

    (*output)[4] = (uint32_t)(group3 % 17);
    group3 /= 17;

    (*output)[3] = (uint32_t)(group3 % 17);
    group3 /= 17;

    (*output)[2] = (uint32_t)(group3 % 17);
    group3 /= 17;

    (*output)[1] = (uint32_t)(group3 % 17);
    group3 /= 17;

    (*output)[0] = (uint32_t)(group3 % 17);
    group3 /= 17;
    *output += 9;

    uint64_t group4 = (*(uint64_t *)((*input) + 18)) >> 4;    group4 &= (1ull << 37) - 1;
    (*output)[8] = (uint32_t)(group4 % 17);
    group4 /= 17;

    (*output)[7] = (uint32_t)(group4 % 17);
    group4 /= 17;

    (*output)[6] = (uint32_t)(group4 % 17);
    group4 /= 17;

    (*output)[5] = (uint32_t)(group4 % 17);
    group4 /= 17;

    (*output)[4] = (uint32_t)(group4 % 17);
    group4 /= 17;

    (*output)[3] = (uint32_t)(group4 % 17);
    group4 /= 17;

    (*output)[2] = (uint32_t)(group4 % 17);
    group4 /= 17;

    (*output)[1] = (uint32_t)(group4 % 17);
    group4 /= 17;

    (*output)[0] = (uint32_t)(group4 % 17);
    group4 /= 17;
    *output += 9;

    uint64_t group5 = (*(uint64_t *)((*input) + 23)) >> 1;    group5 &= (1ull << 37) - 1;
    (*output)[8] = (uint32_t)(group5 % 17);
    group5 /= 17;

    (*output)[7] = (uint32_t)(group5 % 17);
    group5 /= 17;

    (*output)[6] = (uint32_t)(group5 % 17);
    group5 /= 17;

    (*output)[5] = (uint32_t)(group5 % 17);
    group5 /= 17;

    (*output)[4] = (uint32_t)(group5 % 17);
    group5 /= 17;

    (*output)[3] = (uint32_t)(group5 % 17);
    group5 /= 17;

    (*output)[2] = (uint32_t)(group5 % 17);
    group5 /= 17;

    (*output)[1] = (uint32_t)(group5 % 17);
    group5 /= 17;

    (*output)[0] = (uint32_t)(group5 % 17);
    group5 /= 17;
    *output += 9;

    uint64_t group6 = (*(uint64_t *)((*input) + 27)) >> 6;    group6 &= (1ull << 37) - 1;
    (*output)[8] = (uint32_t)(group6 % 17);
    group6 /= 17;

    (*output)[7] = (uint32_t)(group6 % 17);
    group6 /= 17;

    (*output)[6] = (uint32_t)(group6 % 17);
    group6 /= 17;

    (*output)[5] = (uint32_t)(group6 % 17);
    group6 /= 17;

    (*output)[4] = (uint32_t)(group6 % 17);
    group6 /= 17;

    (*output)[3] = (uint32_t)(group6 % 17);
    group6 /= 17;

    (*output)[2] = (uint32_t)(group6 % 17);
    group6 /= 17;

    (*output)[1] = (uint32_t)(group6 % 17);
    group6 /= 17;

    (*output)[0] = (uint32_t)(group6 % 17);
    group6 /= 17;
    *output += 9;

    uint64_t group7 = (*(uint64_t *)((*input) + 32)) >> 3;    group7 &= (1ull << 37) - 1;
    (*output)[8] = (uint32_t)(group7 % 17);
    group7 /= 17;

    (*output)[7] = (uint32_t)(group7 % 17);
    group7 /= 17;

    (*output)[6] = (uint32_t)(group7 % 17);
    group7 /= 17;

    (*output)[5] = (uint32_t)(group7 % 17);
    group7 /= 17;

    (*output)[4] = (uint32_t)(group7 % 17);
    group7 /= 17;

    (*output)[3] = (uint32_t)(group7 % 17);
    group7 /= 17;

    (*output)[2] = (uint32_t)(group7 % 17);
    group7 /= 17;

    (*output)[1] = (uint32_t)(group7 % 17);
    group7 /= 17;

    (*output)[0] = (uint32_t)(group7 % 17);
    group7 /= 17;
    *output += 9;


    *input += 37;
}

// Unpack 23 bytes into 44 values
void Ultrapack_Decompress18(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 46) - 1;
    (*output)[10] = (uint32_t)(group0 % 18);
    group0 /= 18;

    (*output)[9] = (uint32_t)(group0 % 18);
    group0 /= 18;

    (*output)[8] = (uint32_t)(group0 % 18);
    group0 /= 18;

    (*output)[7] = (uint32_t)(group0 % 18);
    group0 /= 18;

    (*output)[6] = (uint32_t)(group0 % 18);
    group0 /= 18;

    (*output)[5] = (uint32_t)(group0 % 18);
    group0 /= 18;

    (*output)[4] = (uint32_t)(group0 % 18);
    group0 /= 18;

    (*output)[3] = (uint32_t)(group0 % 18);
    group0 /= 18;

    (*output)[2] = (uint32_t)(group0 % 18);
    group0 /= 18;

    (*output)[1] = (uint32_t)(group0 % 18);
    group0 /= 18;

    (*output)[0] = (uint32_t)(group0 % 18);
    group0 /= 18;
    *output += 11;

    uint64_t group1 = (*(uint64_t *)((*input) + 5)) >> 6;    group1 &= (1ull << 46) - 1;
    (*output)[10] = (uint32_t)(group1 % 18);
    group1 /= 18;

    (*output)[9] = (uint32_t)(group1 % 18);
    group1 /= 18;

    (*output)[8] = (uint32_t)(group1 % 18);
    group1 /= 18;

    (*output)[7] = (uint32_t)(group1 % 18);
    group1 /= 18;

    (*output)[6] = (uint32_t)(group1 % 18);
    group1 /= 18;

    (*output)[5] = (uint32_t)(group1 % 18);
    group1 /= 18;

    (*output)[4] = (uint32_t)(group1 % 18);
    group1 /= 18;

    (*output)[3] = (uint32_t)(group1 % 18);
    group1 /= 18;

    (*output)[2] = (uint32_t)(group1 % 18);
    group1 /= 18;

    (*output)[1] = (uint32_t)(group1 % 18);
    group1 /= 18;

    (*output)[0] = (uint32_t)(group1 % 18);
    group1 /= 18;
    *output += 11;

    uint64_t group2 = (*(uint64_t *)((*input) + 11)) >> 4;    group2 &= (1ull << 46) - 1;
    (*output)[10] = (uint32_t)(group2 % 18);
    group2 /= 18;

    (*output)[9] = (uint32_t)(group2 % 18);
    group2 /= 18;

    (*output)[8] = (uint32_t)(group2 % 18);
    group2 /= 18;

    (*output)[7] = (uint32_t)(group2 % 18);
    group2 /= 18;

    (*output)[6] = (uint32_t)(group2 % 18);
    group2 /= 18;

    (*output)[5] = (uint32_t)(group2 % 18);
    group2 /= 18;

    (*output)[4] = (uint32_t)(group2 % 18);
    group2 /= 18;

    (*output)[3] = (uint32_t)(group2 % 18);
    group2 /= 18;

    (*output)[2] = (uint32_t)(group2 % 18);
    group2 /= 18;

    (*output)[1] = (uint32_t)(group2 % 18);
    group2 /= 18;

    (*output)[0] = (uint32_t)(group2 % 18);
    group2 /= 18;
    *output += 11;

    uint64_t group3 = (*(uint64_t *)((*input) + 17)) >> 2;    group3 &= (1ull << 46) - 1;
    (*output)[10] = (uint32_t)(group3 % 18);
    group3 /= 18;

    (*output)[9] = (uint32_t)(group3 % 18);
    group3 /= 18;

    (*output)[8] = (uint32_t)(group3 % 18);
    group3 /= 18;

    (*output)[7] = (uint32_t)(group3 % 18);
    group3 /= 18;

    (*output)[6] = (uint32_t)(group3 % 18);
    group3 /= 18;

    (*output)[5] = (uint32_t)(group3 % 18);
    group3 /= 18;

    (*output)[4] = (uint32_t)(group3 % 18);
    group3 /= 18;

    (*output)[3] = (uint32_t)(group3 % 18);
    group3 /= 18;

    (*output)[2] = (uint32_t)(group3 % 18);
    group3 /= 18;

    (*output)[1] = (uint32_t)(group3 % 18);
    group3 /= 18;

    (*output)[0] = (uint32_t)(group3 % 18);
    group3 /= 18;
    *output += 11;


    *input += 23;
}

// Unpack 17 bytes into 32 values
void Ultrapack_Decompress19(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 17) - 1;
    (*output)[3] = (uint32_t)(group0 % 19);
    group0 /= 19;

    (*output)[2] = (uint32_t)(group0 % 19);
    group0 /= 19;

    (*output)[1] = (uint32_t)(group0 % 19);
    group0 /= 19;

    (*output)[0] = (uint32_t)(group0 % 19);
    group0 /= 19;
    *output += 4;

    uint64_t group1 = (*(uint64_t *)((*input) + 2)) >> 1;    group1 &= (1ull << 17) - 1;
    (*output)[3] = (uint32_t)(group1 % 19);
    group1 /= 19;

    (*output)[2] = (uint32_t)(group1 % 19);
    group1 /= 19;

    (*output)[1] = (uint32_t)(group1 % 19);
    group1 /= 19;

    (*output)[0] = (uint32_t)(group1 % 19);
    group1 /= 19;
    *output += 4;

    uint64_t group2 = (*(uint64_t *)((*input) + 4)) >> 2;    group2 &= (1ull << 17) - 1;
    (*output)[3] = (uint32_t)(group2 % 19);
    group2 /= 19;

    (*output)[2] = (uint32_t)(group2 % 19);
    group2 /= 19;

    (*output)[1] = (uint32_t)(group2 % 19);
    group2 /= 19;

    (*output)[0] = (uint32_t)(group2 % 19);
    group2 /= 19;
    *output += 4;

    uint64_t group3 = (*(uint64_t *)((*input) + 6)) >> 3;    group3 &= (1ull << 17) - 1;
    (*output)[3] = (uint32_t)(group3 % 19);
    group3 /= 19;

    (*output)[2] = (uint32_t)(group3 % 19);
    group3 /= 19;

    (*output)[1] = (uint32_t)(group3 % 19);
    group3 /= 19;

    (*output)[0] = (uint32_t)(group3 % 19);
    group3 /= 19;
    *output += 4;

    uint64_t group4 = (*(uint64_t *)((*input) + 8)) >> 4;    group4 &= (1ull << 17) - 1;
    (*output)[3] = (uint32_t)(group4 % 19);
    group4 /= 19;

    (*output)[2] = (uint32_t)(group4 % 19);
    group4 /= 19;

    (*output)[1] = (uint32_t)(group4 % 19);
    group4 /= 19;

    (*output)[0] = (uint32_t)(group4 % 19);
    group4 /= 19;
    *output += 4;

    uint64_t group5 = (*(uint64_t *)((*input) + 10)) >> 5;    group5 &= (1ull << 17) - 1;
    (*output)[3] = (uint32_t)(group5 % 19);
    group5 /= 19;

    (*output)[2] = (uint32_t)(group5 % 19);
    group5 /= 19;

    (*output)[1] = (uint32_t)(group5 % 19);
    group5 /= 19;

    (*output)[0] = (uint32_t)(group5 % 19);
    group5 /= 19;
    *output += 4;

    uint64_t group6 = (*(uint64_t *)((*input) + 12)) >> 6;    group6 &= (1ull << 17) - 1;
    (*output)[3] = (uint32_t)(group6 % 19);
    group6 /= 19;

    (*output)[2] = (uint32_t)(group6 % 19);
    group6 /= 19;

    (*output)[1] = (uint32_t)(group6 % 19);
    group6 /= 19;

    (*output)[0] = (uint32_t)(group6 % 19);
    group6 /= 19;
    *output += 4;

    uint64_t group7 = (*(uint64_t *)((*input) + 14)) >> 7;    group7 &= (1ull << 17) - 1;
    (*output)[3] = (uint32_t)(group7 % 19);
    group7 /= 19;

    (*output)[2] = (uint32_t)(group7 % 19);
    group7 /= 19;

    (*output)[1] = (uint32_t)(group7 % 19);
    group7 /= 19;

    (*output)[0] = (uint32_t)(group7 % 19);
    group7 /= 19;
    *output += 4;


    *input += 17;
}

// Unpack 13 bytes into 24 values
void Ultrapack_Decompress20(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 13) - 1;
    (*output)[2] = (uint32_t)(group0 % 20);
    group0 /= 20;

    (*output)[1] = (uint32_t)(group0 % 20);
    group0 /= 20;

    (*output)[0] = (uint32_t)(group0 % 20);
    group0 /= 20;
    *output += 3;

    uint64_t group1 = (*(uint64_t *)((*input) + 1)) >> 5;    group1 &= (1ull << 13) - 1;
    (*output)[2] = (uint32_t)(group1 % 20);
    group1 /= 20;

    (*output)[1] = (uint32_t)(group1 % 20);
    group1 /= 20;

    (*output)[0] = (uint32_t)(group1 % 20);
    group1 /= 20;
    *output += 3;

    uint64_t group2 = (*(uint64_t *)((*input) + 3)) >> 2;    group2 &= (1ull << 13) - 1;
    (*output)[2] = (uint32_t)(group2 % 20);
    group2 /= 20;

    (*output)[1] = (uint32_t)(group2 % 20);
    group2 /= 20;

    (*output)[0] = (uint32_t)(group2 % 20);
    group2 /= 20;
    *output += 3;

    uint64_t group3 = (*(uint64_t *)((*input) + 4)) >> 7;    group3 &= (1ull << 13) - 1;
    (*output)[2] = (uint32_t)(group3 % 20);
    group3 /= 20;

    (*output)[1] = (uint32_t)(group3 % 20);
    group3 /= 20;

    (*output)[0] = (uint32_t)(group3 % 20);
    group3 /= 20;
    *output += 3;

    uint64_t group4 = (*(uint64_t *)((*input) + 6)) >> 4;    group4 &= (1ull << 13) - 1;
    (*output)[2] = (uint32_t)(group4 % 20);
    group4 /= 20;

    (*output)[1] = (uint32_t)(group4 % 20);
    group4 /= 20;

    (*output)[0] = (uint32_t)(group4 % 20);
    group4 /= 20;
    *output += 3;

    uint64_t group5 = (*(uint64_t *)((*input) + 8)) >> 1;    group5 &= (1ull << 13) - 1;
    (*output)[2] = (uint32_t)(group5 % 20);
    group5 /= 20;

    (*output)[1] = (uint32_t)(group5 % 20);
    group5 /= 20;

    (*output)[0] = (uint32_t)(group5 % 20);
    group5 /= 20;
    *output += 3;

    uint64_t group6 = (*(uint64_t *)((*input) + 9)) >> 6;    group6 &= (1ull << 13) - 1;
    (*output)[2] = (uint32_t)(group6 % 20);
    group6 /= 20;

    (*output)[1] = (uint32_t)(group6 % 20);
    group6 /= 20;

    (*output)[0] = (uint32_t)(group6 % 20);
    group6 /= 20;
    *output += 3;

    uint64_t group7 = (*(uint64_t *)((*input) + 11)) >> 3;    group7 &= (1ull << 13) - 1;
    (*output)[2] = (uint32_t)(group7 % 20);
    group7 /= 20;

    (*output)[1] = (uint32_t)(group7 % 20);
    group7 /= 20;

    (*output)[0] = (uint32_t)(group7 % 20);
    group7 /= 20;
    *output += 3;


    *input += 13;
}

// Unpack 11 bytes into 20 values
void Ultrapack_Decompress21(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 22) - 1;
    (*output)[4] = (uint32_t)(group0 % 21);
    group0 /= 21;

    (*output)[3] = (uint32_t)(group0 % 21);
    group0 /= 21;

    (*output)[2] = (uint32_t)(group0 % 21);
    group0 /= 21;

    (*output)[1] = (uint32_t)(group0 % 21);
    group0 /= 21;

    (*output)[0] = (uint32_t)(group0 % 21);
    group0 /= 21;
    *output += 5;

    uint64_t group1 = (*(uint64_t *)((*input) + 2)) >> 6;    group1 &= (1ull << 22) - 1;
    (*output)[4] = (uint32_t)(group1 % 21);
    group1 /= 21;

    (*output)[3] = (uint32_t)(group1 % 21);
    group1 /= 21;

    (*output)[2] = (uint32_t)(group1 % 21);
    group1 /= 21;

    (*output)[1] = (uint32_t)(group1 % 21);
    group1 /= 21;

    (*output)[0] = (uint32_t)(group1 % 21);
    group1 /= 21;
    *output += 5;

    uint64_t group2 = (*(uint64_t *)((*input) + 5)) >> 4;    group2 &= (1ull << 22) - 1;
    (*output)[4] = (uint32_t)(group2 % 21);
    group2 /= 21;

    (*output)[3] = (uint32_t)(group2 % 21);
    group2 /= 21;

    (*output)[2] = (uint32_t)(group2 % 21);
    group2 /= 21;

    (*output)[1] = (uint32_t)(group2 % 21);
    group2 /= 21;

    (*output)[0] = (uint32_t)(group2 % 21);
    group2 /= 21;
    *output += 5;

    uint64_t group3 = (*(uint64_t *)((*input) + 8)) >> 2;    group3 &= (1ull << 22) - 1;
    (*output)[4] = (uint32_t)(group3 % 21);
    group3 /= 21;

    (*output)[3] = (uint32_t)(group3 % 21);
    group3 /= 21;

    (*output)[2] = (uint32_t)(group3 % 21);
    group3 /= 21;

    (*output)[1] = (uint32_t)(group3 % 21);
    group3 /= 21;

    (*output)[0] = (uint32_t)(group3 % 21);
    group3 /= 21;
    *output += 5;


    *input += 11;
}

// Unpack 9 bytes into 16 values
void Ultrapack_Decompress22(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 9) - 1;
    (*output)[1] = (uint32_t)(group0 % 22);
    group0 /= 22;

    (*output)[0] = (uint32_t)(group0 % 22);
    group0 /= 22;
    *output += 2;

    uint64_t group1 = (*(uint64_t *)((*input) + 1)) >> 1;    group1 &= (1ull << 9) - 1;
    (*output)[1] = (uint32_t)(group1 % 22);
    group1 /= 22;

    (*output)[0] = (uint32_t)(group1 % 22);
    group1 /= 22;
    *output += 2;

    uint64_t group2 = (*(uint64_t *)((*input) + 2)) >> 2;    group2 &= (1ull << 9) - 1;
    (*output)[1] = (uint32_t)(group2 % 22);
    group2 /= 22;

    (*output)[0] = (uint32_t)(group2 % 22);
    group2 /= 22;
    *output += 2;

    uint64_t group3 = (*(uint64_t *)((*input) + 3)) >> 3;    group3 &= (1ull << 9) - 1;
    (*output)[1] = (uint32_t)(group3 % 22);
    group3 /= 22;

    (*output)[0] = (uint32_t)(group3 % 22);
    group3 /= 22;
    *output += 2;

    uint64_t group4 = (*(uint64_t *)((*input) + 4)) >> 4;    group4 &= (1ull << 9) - 1;
    (*output)[1] = (uint32_t)(group4 % 22);
    group4 /= 22;

    (*output)[0] = (uint32_t)(group4 % 22);
    group4 /= 22;
    *output += 2;

    uint64_t group5 = (*(uint64_t *)((*input) + 5)) >> 5;    group5 &= (1ull << 9) - 1;
    (*output)[1] = (uint32_t)(group5 % 22);
    group5 /= 22;

    (*output)[0] = (uint32_t)(group5 % 22);
    group5 /= 22;
    *output += 2;

    uint64_t group6 = (*(uint64_t *)((*input) + 6)) >> 6;    group6 &= (1ull << 9) - 1;
    (*output)[1] = (uint32_t)(group6 % 22);
    group6 /= 22;

    (*output)[0] = (uint32_t)(group6 % 22);
    group6 /= 22;
    *output += 2;

    uint64_t group7 = (*(uint64_t *)((*input) + 7)) >> 7;    group7 &= (1ull << 9) - 1;
    (*output)[1] = (uint32_t)(group7 % 22);
    group7 /= 22;

    (*output)[0] = (uint32_t)(group7 % 22);
    group7 /= 22;
    *output += 2;


    *input += 9;
}

// Unpack 25 bytes into 44 values
void Ultrapack_Decompress23(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 50) - 1;
    (*output)[10] = (uint32_t)(group0 % 23);
    group0 /= 23;

    (*output)[9] = (uint32_t)(group0 % 23);
    group0 /= 23;

    (*output)[8] = (uint32_t)(group0 % 23);
    group0 /= 23;

    (*output)[7] = (uint32_t)(group0 % 23);
    group0 /= 23;

    (*output)[6] = (uint32_t)(group0 % 23);
    group0 /= 23;

    (*output)[5] = (uint32_t)(group0 % 23);
    group0 /= 23;

    (*output)[4] = (uint32_t)(group0 % 23);
    group0 /= 23;

    (*output)[3] = (uint32_t)(group0 % 23);
    group0 /= 23;

    (*output)[2] = (uint32_t)(group0 % 23);
    group0 /= 23;

    (*output)[1] = (uint32_t)(group0 % 23);
    group0 /= 23;

    (*output)[0] = (uint32_t)(group0 % 23);
    group0 /= 23;
    *output += 11;

    uint64_t group1 = (*(uint64_t *)((*input) + 6)) >> 2;    group1 &= (1ull << 50) - 1;
    (*output)[10] = (uint32_t)(group1 % 23);
    group1 /= 23;

    (*output)[9] = (uint32_t)(group1 % 23);
    group1 /= 23;

    (*output)[8] = (uint32_t)(group1 % 23);
    group1 /= 23;

    (*output)[7] = (uint32_t)(group1 % 23);
    group1 /= 23;

    (*output)[6] = (uint32_t)(group1 % 23);
    group1 /= 23;

    (*output)[5] = (uint32_t)(group1 % 23);
    group1 /= 23;

    (*output)[4] = (uint32_t)(group1 % 23);
    group1 /= 23;

    (*output)[3] = (uint32_t)(group1 % 23);
    group1 /= 23;

    (*output)[2] = (uint32_t)(group1 % 23);
    group1 /= 23;

    (*output)[1] = (uint32_t)(group1 % 23);
    group1 /= 23;

    (*output)[0] = (uint32_t)(group1 % 23);
    group1 /= 23;
    *output += 11;

    uint64_t group2 = (*(uint64_t *)((*input) + 12)) >> 4;    group2 &= (1ull << 50) - 1;
    (*output)[10] = (uint32_t)(group2 % 23);
    group2 /= 23;

    (*output)[9] = (uint32_t)(group2 % 23);
    group2 /= 23;

    (*output)[8] = (uint32_t)(group2 % 23);
    group2 /= 23;

    (*output)[7] = (uint32_t)(group2 % 23);
    group2 /= 23;

    (*output)[6] = (uint32_t)(group2 % 23);
    group2 /= 23;

    (*output)[5] = (uint32_t)(group2 % 23);
    group2 /= 23;

    (*output)[4] = (uint32_t)(group2 % 23);
    group2 /= 23;

    (*output)[3] = (uint32_t)(group2 % 23);
    group2 /= 23;

    (*output)[2] = (uint32_t)(group2 % 23);
    group2 /= 23;

    (*output)[1] = (uint32_t)(group2 % 23);
    group2 /= 23;

    (*output)[0] = (uint32_t)(group2 % 23);
    group2 /= 23;
    *output += 11;

    uint64_t group3 = (*(uint64_t *)((*input) + 18)) >> 6;    group3 &= (1ull << 50) - 1;
    (*output)[10] = (uint32_t)(group3 % 23);
    group3 /= 23;

    (*output)[9] = (uint32_t)(group3 % 23);
    group3 /= 23;

    (*output)[8] = (uint32_t)(group3 % 23);
    group3 /= 23;

    (*output)[7] = (uint32_t)(group3 % 23);
    group3 /= 23;

    (*output)[6] = (uint32_t)(group3 % 23);
    group3 /= 23;

    (*output)[5] = (uint32_t)(group3 % 23);
    group3 /= 23;

    (*output)[4] = (uint32_t)(group3 % 23);
    group3 /= 23;

    (*output)[3] = (uint32_t)(group3 % 23);
    group3 /= 23;

    (*output)[2] = (uint32_t)(group3 % 23);
    group3 /= 23;

    (*output)[1] = (uint32_t)(group3 % 23);
    group3 /= 23;

    (*output)[0] = (uint32_t)(group3 % 23);
    group3 /= 23;
    *output += 11;


    *input += 25;
}

// Unpack 23 bytes into 40 values
void Ultrapack_Decompress24(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 23) - 1;
    (*output)[4] = (uint32_t)(group0 % 24);
    group0 /= 24;

    (*output)[3] = (uint32_t)(group0 % 24);
    group0 /= 24;

    (*output)[2] = (uint32_t)(group0 % 24);
    group0 /= 24;

    (*output)[1] = (uint32_t)(group0 % 24);
    group0 /= 24;

    (*output)[0] = (uint32_t)(group0 % 24);
    group0 /= 24;
    *output += 5;

    uint64_t group1 = (*(uint64_t *)((*input) + 2)) >> 7;    group1 &= (1ull << 23) - 1;
    (*output)[4] = (uint32_t)(group1 % 24);
    group1 /= 24;

    (*output)[3] = (uint32_t)(group1 % 24);
    group1 /= 24;

    (*output)[2] = (uint32_t)(group1 % 24);
    group1 /= 24;

    (*output)[1] = (uint32_t)(group1 % 24);
    group1 /= 24;

    (*output)[0] = (uint32_t)(group1 % 24);
    group1 /= 24;
    *output += 5;

    uint64_t group2 = (*(uint64_t *)((*input) + 5)) >> 6;    group2 &= (1ull << 23) - 1;
    (*output)[4] = (uint32_t)(group2 % 24);
    group2 /= 24;

    (*output)[3] = (uint32_t)(group2 % 24);
    group2 /= 24;

    (*output)[2] = (uint32_t)(group2 % 24);
    group2 /= 24;

    (*output)[1] = (uint32_t)(group2 % 24);
    group2 /= 24;

    (*output)[0] = (uint32_t)(group2 % 24);
    group2 /= 24;
    *output += 5;

    uint64_t group3 = (*(uint64_t *)((*input) + 8)) >> 5;    group3 &= (1ull << 23) - 1;
    (*output)[4] = (uint32_t)(group3 % 24);
    group3 /= 24;

    (*output)[3] = (uint32_t)(group3 % 24);
    group3 /= 24;

    (*output)[2] = (uint32_t)(group3 % 24);
    group3 /= 24;

    (*output)[1] = (uint32_t)(group3 % 24);
    group3 /= 24;

    (*output)[0] = (uint32_t)(group3 % 24);
    group3 /= 24;
    *output += 5;

    uint64_t group4 = (*(uint64_t *)((*input) + 11)) >> 4;    group4 &= (1ull << 23) - 1;
    (*output)[4] = (uint32_t)(group4 % 24);
    group4 /= 24;

    (*output)[3] = (uint32_t)(group4 % 24);
    group4 /= 24;

    (*output)[2] = (uint32_t)(group4 % 24);
    group4 /= 24;

    (*output)[1] = (uint32_t)(group4 % 24);
    group4 /= 24;

    (*output)[0] = (uint32_t)(group4 % 24);
    group4 /= 24;
    *output += 5;

    uint64_t group5 = (*(uint64_t *)((*input) + 14)) >> 3;    group5 &= (1ull << 23) - 1;
    (*output)[4] = (uint32_t)(group5 % 24);
    group5 /= 24;

    (*output)[3] = (uint32_t)(group5 % 24);
    group5 /= 24;

    (*output)[2] = (uint32_t)(group5 % 24);
    group5 /= 24;

    (*output)[1] = (uint32_t)(group5 % 24);
    group5 /= 24;

    (*output)[0] = (uint32_t)(group5 % 24);
    group5 /= 24;
    *output += 5;

    uint64_t group6 = (*(uint64_t *)((*input) + 17)) >> 2;    group6 &= (1ull << 23) - 1;
    (*output)[4] = (uint32_t)(group6 % 24);
    group6 /= 24;

    (*output)[3] = (uint32_t)(group6 % 24);
    group6 /= 24;

    (*output)[2] = (uint32_t)(group6 % 24);
    group6 /= 24;

    (*output)[1] = (uint32_t)(group6 % 24);
    group6 /= 24;

    (*output)[0] = (uint32_t)(group6 % 24);
    group6 /= 24;
    *output += 5;

    uint64_t group7 = (*(uint64_t *)((*input) + 20)) >> 1;    group7 &= (1ull << 23) - 1;
    (*output)[4] = (uint32_t)(group7 % 24);
    group7 /= 24;

    (*output)[3] = (uint32_t)(group7 % 24);
    group7 /= 24;

    (*output)[2] = (uint32_t)(group7 % 24);
    group7 /= 24;

    (*output)[1] = (uint32_t)(group7 % 24);
    group7 /= 24;

    (*output)[0] = (uint32_t)(group7 % 24);
    group7 /= 24;
    *output += 5;


    *input += 23;
}

// Unpack 7 bytes into 12 values
void Ultrapack_Decompress25(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 14) - 1;
    (*output)[2] = (uint32_t)(group0 % 25);
    group0 /= 25;

    (*output)[1] = (uint32_t)(group0 % 25);
    group0 /= 25;

    (*output)[0] = (uint32_t)(group0 % 25);
    group0 /= 25;
    *output += 3;

    uint64_t group1 = (*(uint64_t *)((*input) + 1)) >> 6;    group1 &= (1ull << 14) - 1;
    (*output)[2] = (uint32_t)(group1 % 25);
    group1 /= 25;

    (*output)[1] = (uint32_t)(group1 % 25);
    group1 /= 25;

    (*output)[0] = (uint32_t)(group1 % 25);
    group1 /= 25;
    *output += 3;

    uint64_t group2 = (*(uint64_t *)((*input) + 3)) >> 4;    group2 &= (1ull << 14) - 1;
    (*output)[2] = (uint32_t)(group2 % 25);
    group2 /= 25;

    (*output)[1] = (uint32_t)(group2 % 25);
    group2 /= 25;

    (*output)[0] = (uint32_t)(group2 % 25);
    group2 /= 25;
    *output += 3;

    uint64_t group3 = (*(uint64_t *)((*input) + 5)) >> 2;    group3 &= (1ull << 14) - 1;
    (*output)[2] = (uint32_t)(group3 % 25);
    group3 /= 25;

    (*output)[1] = (uint32_t)(group3 % 25);
    group3 /= 25;

    (*output)[0] = (uint32_t)(group3 % 25);
    group3 /= 25;
    *output += 3;


    *input += 7;
}

// Unpack 19 bytes into 32 values
void Ultrapack_Decompress26(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 19) - 1;
    (*output)[3] = (uint32_t)(group0 % 26);
    group0 /= 26;

    (*output)[2] = (uint32_t)(group0 % 26);
    group0 /= 26;

    (*output)[1] = (uint32_t)(group0 % 26);
    group0 /= 26;

    (*output)[0] = (uint32_t)(group0 % 26);
    group0 /= 26;
    *output += 4;

    uint64_t group1 = (*(uint64_t *)((*input) + 2)) >> 3;    group1 &= (1ull << 19) - 1;
    (*output)[3] = (uint32_t)(group1 % 26);
    group1 /= 26;

    (*output)[2] = (uint32_t)(group1 % 26);
    group1 /= 26;

    (*output)[1] = (uint32_t)(group1 % 26);
    group1 /= 26;

    (*output)[0] = (uint32_t)(group1 % 26);
    group1 /= 26;
    *output += 4;

    uint64_t group2 = (*(uint64_t *)((*input) + 4)) >> 6;    group2 &= (1ull << 19) - 1;
    (*output)[3] = (uint32_t)(group2 % 26);
    group2 /= 26;

    (*output)[2] = (uint32_t)(group2 % 26);
    group2 /= 26;

    (*output)[1] = (uint32_t)(group2 % 26);
    group2 /= 26;

    (*output)[0] = (uint32_t)(group2 % 26);
    group2 /= 26;
    *output += 4;

    uint64_t group3 = (*(uint64_t *)((*input) + 7)) >> 1;    group3 &= (1ull << 19) - 1;
    (*output)[3] = (uint32_t)(group3 % 26);
    group3 /= 26;

    (*output)[2] = (uint32_t)(group3 % 26);
    group3 /= 26;

    (*output)[1] = (uint32_t)(group3 % 26);
    group3 /= 26;

    (*output)[0] = (uint32_t)(group3 % 26);
    group3 /= 26;
    *output += 4;

    uint64_t group4 = (*(uint64_t *)((*input) + 9)) >> 4;    group4 &= (1ull << 19) - 1;
    (*output)[3] = (uint32_t)(group4 % 26);
    group4 /= 26;

    (*output)[2] = (uint32_t)(group4 % 26);
    group4 /= 26;

    (*output)[1] = (uint32_t)(group4 % 26);
    group4 /= 26;

    (*output)[0] = (uint32_t)(group4 % 26);
    group4 /= 26;
    *output += 4;

    uint64_t group5 = (*(uint64_t *)((*input) + 11)) >> 7;    group5 &= (1ull << 19) - 1;
    (*output)[3] = (uint32_t)(group5 % 26);
    group5 /= 26;

    (*output)[2] = (uint32_t)(group5 % 26);
    group5 /= 26;

    (*output)[1] = (uint32_t)(group5 % 26);
    group5 /= 26;

    (*output)[0] = (uint32_t)(group5 % 26);
    group5 /= 26;
    *output += 4;

    uint64_t group6 = (*(uint64_t *)((*input) + 14)) >> 2;    group6 &= (1ull << 19) - 1;
    (*output)[3] = (uint32_t)(group6 % 26);
    group6 /= 26;

    (*output)[2] = (uint32_t)(group6 % 26);
    group6 /= 26;

    (*output)[1] = (uint32_t)(group6 % 26);
    group6 /= 26;

    (*output)[0] = (uint32_t)(group6 % 26);
    group6 /= 26;
    *output += 4;

    uint64_t group7 = (*(uint64_t *)((*input) + 16)) >> 5;    group7 &= (1ull << 19) - 1;
    (*output)[3] = (uint32_t)(group7 % 26);
    group7 /= 26;

    (*output)[2] = (uint32_t)(group7 % 26);
    group7 /= 26;

    (*output)[1] = (uint32_t)(group7 % 26);
    group7 /= 26;

    (*output)[0] = (uint32_t)(group7 % 26);
    group7 /= 26;
    *output += 4;


    *input += 19;
}

// Unpack 3 bytes into 5 values
void Ultrapack_Decompress27(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 24) - 1;
    (*output)[4] = (uint32_t)(group0 % 27);
    group0 /= 27;

    (*output)[3] = (uint32_t)(group0 % 27);
    group0 /= 27;

    (*output)[2] = (uint32_t)(group0 % 27);
    group0 /= 27;

    (*output)[1] = (uint32_t)(group0 % 27);
    group0 /= 27;

    (*output)[0] = (uint32_t)(group0 % 27);
    group0 /= 27;
    *output += 5;


    *input += 3;
}

// Unpack 29 bytes into 48 values
void Ultrapack_Decompress28(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 29) - 1;
    (*output)[5] = (uint32_t)(group0 % 28);
    group0 /= 28;

    (*output)[4] = (uint32_t)(group0 % 28);
    group0 /= 28;

    (*output)[3] = (uint32_t)(group0 % 28);
    group0 /= 28;

    (*output)[2] = (uint32_t)(group0 % 28);
    group0 /= 28;

    (*output)[1] = (uint32_t)(group0 % 28);
    group0 /= 28;

    (*output)[0] = (uint32_t)(group0 % 28);
    group0 /= 28;
    *output += 6;

    uint64_t group1 = (*(uint64_t *)((*input) + 3)) >> 5;    group1 &= (1ull << 29) - 1;
    (*output)[5] = (uint32_t)(group1 % 28);
    group1 /= 28;

    (*output)[4] = (uint32_t)(group1 % 28);
    group1 /= 28;

    (*output)[3] = (uint32_t)(group1 % 28);
    group1 /= 28;

    (*output)[2] = (uint32_t)(group1 % 28);
    group1 /= 28;

    (*output)[1] = (uint32_t)(group1 % 28);
    group1 /= 28;

    (*output)[0] = (uint32_t)(group1 % 28);
    group1 /= 28;
    *output += 6;

    uint64_t group2 = (*(uint64_t *)((*input) + 7)) >> 2;    group2 &= (1ull << 29) - 1;
    (*output)[5] = (uint32_t)(group2 % 28);
    group2 /= 28;

    (*output)[4] = (uint32_t)(group2 % 28);
    group2 /= 28;

    (*output)[3] = (uint32_t)(group2 % 28);
    group2 /= 28;

    (*output)[2] = (uint32_t)(group2 % 28);
    group2 /= 28;

    (*output)[1] = (uint32_t)(group2 % 28);
    group2 /= 28;

    (*output)[0] = (uint32_t)(group2 % 28);
    group2 /= 28;
    *output += 6;

    uint64_t group3 = (*(uint64_t *)((*input) + 10)) >> 7;    group3 &= (1ull << 29) - 1;
    (*output)[5] = (uint32_t)(group3 % 28);
    group3 /= 28;

    (*output)[4] = (uint32_t)(group3 % 28);
    group3 /= 28;

    (*output)[3] = (uint32_t)(group3 % 28);
    group3 /= 28;

    (*output)[2] = (uint32_t)(group3 % 28);
    group3 /= 28;

    (*output)[1] = (uint32_t)(group3 % 28);
    group3 /= 28;

    (*output)[0] = (uint32_t)(group3 % 28);
    group3 /= 28;
    *output += 6;

    uint64_t group4 = (*(uint64_t *)((*input) + 14)) >> 4;    group4 &= (1ull << 29) - 1;
    (*output)[5] = (uint32_t)(group4 % 28);
    group4 /= 28;

    (*output)[4] = (uint32_t)(group4 % 28);
    group4 /= 28;

    (*output)[3] = (uint32_t)(group4 % 28);
    group4 /= 28;

    (*output)[2] = (uint32_t)(group4 % 28);
    group4 /= 28;

    (*output)[1] = (uint32_t)(group4 % 28);
    group4 /= 28;

    (*output)[0] = (uint32_t)(group4 % 28);
    group4 /= 28;
    *output += 6;

    uint64_t group5 = (*(uint64_t *)((*input) + 18)) >> 1;    group5 &= (1ull << 29) - 1;
    (*output)[5] = (uint32_t)(group5 % 28);
    group5 /= 28;

    (*output)[4] = (uint32_t)(group5 % 28);
    group5 /= 28;

    (*output)[3] = (uint32_t)(group5 % 28);
    group5 /= 28;

    (*output)[2] = (uint32_t)(group5 % 28);
    group5 /= 28;

    (*output)[1] = (uint32_t)(group5 % 28);
    group5 /= 28;

    (*output)[0] = (uint32_t)(group5 % 28);
    group5 /= 28;
    *output += 6;

    uint64_t group6 = (*(uint64_t *)((*input) + 21)) >> 6;    group6 &= (1ull << 29) - 1;
    (*output)[5] = (uint32_t)(group6 % 28);
    group6 /= 28;

    (*output)[4] = (uint32_t)(group6 % 28);
    group6 /= 28;

    (*output)[3] = (uint32_t)(group6 % 28);
    group6 /= 28;

    (*output)[2] = (uint32_t)(group6 % 28);
    group6 /= 28;

    (*output)[1] = (uint32_t)(group6 % 28);
    group6 /= 28;

    (*output)[0] = (uint32_t)(group6 % 28);
    group6 /= 28;
    *output += 6;

    uint64_t group7 = (*(uint64_t *)((*input) + 25)) >> 3;    group7 &= (1ull << 29) - 1;
    (*output)[5] = (uint32_t)(group7 % 28);
    group7 /= 28;

    (*output)[4] = (uint32_t)(group7 % 28);
    group7 /= 28;

    (*output)[3] = (uint32_t)(group7 % 28);
    group7 /= 28;

    (*output)[2] = (uint32_t)(group7 % 28);
    group7 /= 28;

    (*output)[1] = (uint32_t)(group7 % 28);
    group7 /= 28;

    (*output)[0] = (uint32_t)(group7 % 28);
    group7 /= 28;
    *output += 6;


    *input += 29;
}

// Unpack 39 bytes into 64 values
void Ultrapack_Decompress29(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 39) - 1;
    (*output)[7] = (uint32_t)(group0 % 29);
    group0 /= 29;

    (*output)[6] = (uint32_t)(group0 % 29);
    group0 /= 29;

    (*output)[5] = (uint32_t)(group0 % 29);
    group0 /= 29;

    (*output)[4] = (uint32_t)(group0 % 29);
    group0 /= 29;

    (*output)[3] = (uint32_t)(group0 % 29);
    group0 /= 29;

    (*output)[2] = (uint32_t)(group0 % 29);
    group0 /= 29;

    (*output)[1] = (uint32_t)(group0 % 29);
    group0 /= 29;

    (*output)[0] = (uint32_t)(group0 % 29);
    group0 /= 29;
    *output += 8;

    uint64_t group1 = (*(uint64_t *)((*input) + 4)) >> 7;    group1 &= (1ull << 39) - 1;
    (*output)[7] = (uint32_t)(group1 % 29);
    group1 /= 29;

    (*output)[6] = (uint32_t)(group1 % 29);
    group1 /= 29;

    (*output)[5] = (uint32_t)(group1 % 29);
    group1 /= 29;

    (*output)[4] = (uint32_t)(group1 % 29);
    group1 /= 29;

    (*output)[3] = (uint32_t)(group1 % 29);
    group1 /= 29;

    (*output)[2] = (uint32_t)(group1 % 29);
    group1 /= 29;

    (*output)[1] = (uint32_t)(group1 % 29);
    group1 /= 29;

    (*output)[0] = (uint32_t)(group1 % 29);
    group1 /= 29;
    *output += 8;

    uint64_t group2 = (*(uint64_t *)((*input) + 9)) >> 6;    group2 &= (1ull << 39) - 1;
    (*output)[7] = (uint32_t)(group2 % 29);
    group2 /= 29;

    (*output)[6] = (uint32_t)(group2 % 29);
    group2 /= 29;

    (*output)[5] = (uint32_t)(group2 % 29);
    group2 /= 29;

    (*output)[4] = (uint32_t)(group2 % 29);
    group2 /= 29;

    (*output)[3] = (uint32_t)(group2 % 29);
    group2 /= 29;

    (*output)[2] = (uint32_t)(group2 % 29);
    group2 /= 29;

    (*output)[1] = (uint32_t)(group2 % 29);
    group2 /= 29;

    (*output)[0] = (uint32_t)(group2 % 29);
    group2 /= 29;
    *output += 8;

    uint64_t group3 = (*(uint64_t *)((*input) + 14)) >> 5;    group3 &= (1ull << 39) - 1;
    (*output)[7] = (uint32_t)(group3 % 29);
    group3 /= 29;

    (*output)[6] = (uint32_t)(group3 % 29);
    group3 /= 29;

    (*output)[5] = (uint32_t)(group3 % 29);
    group3 /= 29;

    (*output)[4] = (uint32_t)(group3 % 29);
    group3 /= 29;

    (*output)[3] = (uint32_t)(group3 % 29);
    group3 /= 29;

    (*output)[2] = (uint32_t)(group3 % 29);
    group3 /= 29;

    (*output)[1] = (uint32_t)(group3 % 29);
    group3 /= 29;

    (*output)[0] = (uint32_t)(group3 % 29);
    group3 /= 29;
    *output += 8;

    uint64_t group4 = (*(uint64_t *)((*input) + 19)) >> 4;    group4 &= (1ull << 39) - 1;
    (*output)[7] = (uint32_t)(group4 % 29);
    group4 /= 29;

    (*output)[6] = (uint32_t)(group4 % 29);
    group4 /= 29;

    (*output)[5] = (uint32_t)(group4 % 29);
    group4 /= 29;

    (*output)[4] = (uint32_t)(group4 % 29);
    group4 /= 29;

    (*output)[3] = (uint32_t)(group4 % 29);
    group4 /= 29;

    (*output)[2] = (uint32_t)(group4 % 29);
    group4 /= 29;

    (*output)[1] = (uint32_t)(group4 % 29);
    group4 /= 29;

    (*output)[0] = (uint32_t)(group4 % 29);
    group4 /= 29;
    *output += 8;

    uint64_t group5 = (*(uint64_t *)((*input) + 24)) >> 3;    group5 &= (1ull << 39) - 1;
    (*output)[7] = (uint32_t)(group5 % 29);
    group5 /= 29;

    (*output)[6] = (uint32_t)(group5 % 29);
    group5 /= 29;

    (*output)[5] = (uint32_t)(group5 % 29);
    group5 /= 29;

    (*output)[4] = (uint32_t)(group5 % 29);
    group5 /= 29;

    (*output)[3] = (uint32_t)(group5 % 29);
    group5 /= 29;

    (*output)[2] = (uint32_t)(group5 % 29);
    group5 /= 29;

    (*output)[1] = (uint32_t)(group5 % 29);
    group5 /= 29;

    (*output)[0] = (uint32_t)(group5 % 29);
    group5 /= 29;
    *output += 8;

    uint64_t group6 = (*(uint64_t *)((*input) + 29)) >> 2;    group6 &= (1ull << 39) - 1;
    (*output)[7] = (uint32_t)(group6 % 29);
    group6 /= 29;

    (*output)[6] = (uint32_t)(group6 % 29);
    group6 /= 29;

    (*output)[5] = (uint32_t)(group6 % 29);
    group6 /= 29;

    (*output)[4] = (uint32_t)(group6 % 29);
    group6 /= 29;

    (*output)[3] = (uint32_t)(group6 % 29);
    group6 /= 29;

    (*output)[2] = (uint32_t)(group6 % 29);
    group6 /= 29;

    (*output)[1] = (uint32_t)(group6 % 29);
    group6 /= 29;

    (*output)[0] = (uint32_t)(group6 % 29);
    group6 /= 29;
    *output += 8;

    uint64_t group7 = (*(uint64_t *)((*input) + 34)) >> 1;    group7 &= (1ull << 39) - 1;
    (*output)[7] = (uint32_t)(group7 % 29);
    group7 /= 29;

    (*output)[6] = (uint32_t)(group7 % 29);
    group7 /= 29;

    (*output)[5] = (uint32_t)(group7 % 29);
    group7 /= 29;

    (*output)[4] = (uint32_t)(group7 % 29);
    group7 /= 29;

    (*output)[3] = (uint32_t)(group7 % 29);
    group7 /= 29;

    (*output)[2] = (uint32_t)(group7 % 29);
    group7 /= 29;

    (*output)[1] = (uint32_t)(group7 % 29);
    group7 /= 29;

    (*output)[0] = (uint32_t)(group7 % 29);
    group7 /= 29;
    *output += 8;


    *input += 39;
}

// Unpack 27 bytes into 44 values
void Ultrapack_Decompress30(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 54) - 1;
    (*output)[10] = (uint32_t)(group0 % 30);
    group0 /= 30;

    (*output)[9] = (uint32_t)(group0 % 30);
    group0 /= 30;

    (*output)[8] = (uint32_t)(group0 % 30);
    group0 /= 30;

    (*output)[7] = (uint32_t)(group0 % 30);
    group0 /= 30;

    (*output)[6] = (uint32_t)(group0 % 30);
    group0 /= 30;

    (*output)[5] = (uint32_t)(group0 % 30);
    group0 /= 30;

    (*output)[4] = (uint32_t)(group0 % 30);
    group0 /= 30;

    (*output)[3] = (uint32_t)(group0 % 30);
    group0 /= 30;

    (*output)[2] = (uint32_t)(group0 % 30);
    group0 /= 30;

    (*output)[1] = (uint32_t)(group0 % 30);
    group0 /= 30;

    (*output)[0] = (uint32_t)(group0 % 30);
    group0 /= 30;
    *output += 11;

    uint64_t group1 = (*(uint64_t *)((*input) + 6)) >> 6;    group1 &= (1ull << 54) - 1;
    (*output)[10] = (uint32_t)(group1 % 30);
    group1 /= 30;

    (*output)[9] = (uint32_t)(group1 % 30);
    group1 /= 30;

    (*output)[8] = (uint32_t)(group1 % 30);
    group1 /= 30;

    (*output)[7] = (uint32_t)(group1 % 30);
    group1 /= 30;

    (*output)[6] = (uint32_t)(group1 % 30);
    group1 /= 30;

    (*output)[5] = (uint32_t)(group1 % 30);
    group1 /= 30;

    (*output)[4] = (uint32_t)(group1 % 30);
    group1 /= 30;

    (*output)[3] = (uint32_t)(group1 % 30);
    group1 /= 30;

    (*output)[2] = (uint32_t)(group1 % 30);
    group1 /= 30;

    (*output)[1] = (uint32_t)(group1 % 30);
    group1 /= 30;

    (*output)[0] = (uint32_t)(group1 % 30);
    group1 /= 30;
    *output += 11;

    uint64_t group2 = (*(uint64_t *)((*input) + 13)) >> 4;    group2 &= (1ull << 54) - 1;
    (*output)[10] = (uint32_t)(group2 % 30);
    group2 /= 30;

    (*output)[9] = (uint32_t)(group2 % 30);
    group2 /= 30;

    (*output)[8] = (uint32_t)(group2 % 30);
    group2 /= 30;

    (*output)[7] = (uint32_t)(group2 % 30);
    group2 /= 30;

    (*output)[6] = (uint32_t)(group2 % 30);
    group2 /= 30;

    (*output)[5] = (uint32_t)(group2 % 30);
    group2 /= 30;

    (*output)[4] = (uint32_t)(group2 % 30);
    group2 /= 30;

    (*output)[3] = (uint32_t)(group2 % 30);
    group2 /= 30;

    (*output)[2] = (uint32_t)(group2 % 30);
    group2 /= 30;

    (*output)[1] = (uint32_t)(group2 % 30);
    group2 /= 30;

    (*output)[0] = (uint32_t)(group2 % 30);
    group2 /= 30;
    *output += 11;

    uint64_t group3 = (*(uint64_t *)((*input) + 20)) >> 2;    group3 &= (1ull << 54) - 1;
    (*output)[10] = (uint32_t)(group3 % 30);
    group3 /= 30;

    (*output)[9] = (uint32_t)(group3 % 30);
    group3 /= 30;

    (*output)[8] = (uint32_t)(group3 % 30);
    group3 /= 30;

    (*output)[7] = (uint32_t)(group3 % 30);
    group3 /= 30;

    (*output)[6] = (uint32_t)(group3 % 30);
    group3 /= 30;

    (*output)[5] = (uint32_t)(group3 % 30);
    group3 /= 30;

    (*output)[4] = (uint32_t)(group3 % 30);
    group3 /= 30;

    (*output)[3] = (uint32_t)(group3 % 30);
    group3 /= 30;

    (*output)[2] = (uint32_t)(group3 % 30);
    group3 /= 30;

    (*output)[1] = (uint32_t)(group3 % 30);
    group3 /= 30;

    (*output)[0] = (uint32_t)(group3 % 30);
    group3 /= 30;
    *output += 11;


    *input += 27;
}

// Unpack 5 bytes into 8 values
void Ultrapack_Decompress31(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 5) - 1;
    (*output)[0] = (uint32_t)(group0 % 31);
    group0 /= 31;
    *output += 1;

    uint64_t group1 = (*(uint64_t *)((*input) + 0)) >> 5;    group1 &= (1ull << 5) - 1;
    (*output)[0] = (uint32_t)(group1 % 31);
    group1 /= 31;
    *output += 1;

    uint64_t group2 = (*(uint64_t *)((*input) + 1)) >> 2;    group2 &= (1ull << 5) - 1;
    (*output)[0] = (uint32_t)(group2 % 31);
    group2 /= 31;
    *output += 1;

    uint64_t group3 = (*(uint64_t *)((*input) + 1)) >> 7;    group3 &= (1ull << 5) - 1;
    (*output)[0] = (uint32_t)(group3 % 31);
    group3 /= 31;
    *output += 1;

    uint64_t group4 = (*(uint64_t *)((*input) + 2)) >> 4;    group4 &= (1ull << 5) - 1;
    (*output)[0] = (uint32_t)(group4 % 31);
    group4 /= 31;
    *output += 1;

    uint64_t group5 = (*(uint64_t *)((*input) + 3)) >> 1;    group5 &= (1ull << 5) - 1;
    (*output)[0] = (uint32_t)(group5 % 31);
    group5 /= 31;
    *output += 1;

    uint64_t group6 = (*(uint64_t *)((*input) + 3)) >> 6;    group6 &= (1ull << 5) - 1;
    (*output)[0] = (uint32_t)(group6 % 31);
    group6 /= 31;
    *output += 1;

    uint64_t group7 = (*(uint64_t *)((*input) + 4)) >> 3;    group7 &= (1ull << 5) - 1;
    (*output)[0] = (uint32_t)(group7 % 31);
    group7 /= 31;
    *output += 1;


    *input += 5;
}

// Unpack 5 bytes into 8 values
void Ultrapack_Decompress32(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 5) - 1;
    (*output)[0] = (uint32_t)(group0 % 32);
    group0 /= 32;
    *output += 1;

    uint64_t group1 = (*(uint64_t *)((*input) + 0)) >> 5;    group1 &= (1ull << 5) - 1;
    (*output)[0] = (uint32_t)(group1 % 32);
    group1 /= 32;
    *output += 1;

    uint64_t group2 = (*(uint64_t *)((*input) + 1)) >> 2;    group2 &= (1ull << 5) - 1;
    (*output)[0] = (uint32_t)(group2 % 32);
    group2 /= 32;
    *output += 1;

    uint64_t group3 = (*(uint64_t *)((*input) + 1)) >> 7;    group3 &= (1ull << 5) - 1;
    (*output)[0] = (uint32_t)(group3 % 32);
    group3 /= 32;
    *output += 1;

    uint64_t group4 = (*(uint64_t *)((*input) + 2)) >> 4;    group4 &= (1ull << 5) - 1;
    (*output)[0] = (uint32_t)(group4 % 32);
    group4 /= 32;
    *output += 1;

    uint64_t group5 = (*(uint64_t *)((*input) + 3)) >> 1;    group5 &= (1ull << 5) - 1;
    (*output)[0] = (uint32_t)(group5 % 32);
    group5 /= 32;
    *output += 1;

    uint64_t group6 = (*(uint64_t *)((*input) + 3)) >> 6;    group6 &= (1ull << 5) - 1;
    (*output)[0] = (uint32_t)(group6 % 32);
    group6 /= 32;
    *output += 1;

    uint64_t group7 = (*(uint64_t *)((*input) + 4)) >> 3;    group7 &= (1ull << 5) - 1;
    (*output)[0] = (uint32_t)(group7 % 32);
    group7 /= 32;
    *output += 1;


    *input += 5;
}

// Unpack 23 bytes into 36 values
void Ultrapack_Decompress33(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 46) - 1;
    (*output)[8] = (uint32_t)(group0 % 33);
    group0 /= 33;

    (*output)[7] = (uint32_t)(group0 % 33);
    group0 /= 33;

    (*output)[6] = (uint32_t)(group0 % 33);
    group0 /= 33;

    (*output)[5] = (uint32_t)(group0 % 33);
    group0 /= 33;

    (*output)[4] = (uint32_t)(group0 % 33);
    group0 /= 33;

    (*output)[3] = (uint32_t)(group0 % 33);
    group0 /= 33;

    (*output)[2] = (uint32_t)(group0 % 33);
    group0 /= 33;

    (*output)[1] = (uint32_t)(group0 % 33);
    group0 /= 33;

    (*output)[0] = (uint32_t)(group0 % 33);
    group0 /= 33;
    *output += 9;

    uint64_t group1 = (*(uint64_t *)((*input) + 5)) >> 6;    group1 &= (1ull << 46) - 1;
    (*output)[8] = (uint32_t)(group1 % 33);
    group1 /= 33;

    (*output)[7] = (uint32_t)(group1 % 33);
    group1 /= 33;

    (*output)[6] = (uint32_t)(group1 % 33);
    group1 /= 33;

    (*output)[5] = (uint32_t)(group1 % 33);
    group1 /= 33;

    (*output)[4] = (uint32_t)(group1 % 33);
    group1 /= 33;

    (*output)[3] = (uint32_t)(group1 % 33);
    group1 /= 33;

    (*output)[2] = (uint32_t)(group1 % 33);
    group1 /= 33;

    (*output)[1] = (uint32_t)(group1 % 33);
    group1 /= 33;

    (*output)[0] = (uint32_t)(group1 % 33);
    group1 /= 33;
    *output += 9;

    uint64_t group2 = (*(uint64_t *)((*input) + 11)) >> 4;    group2 &= (1ull << 46) - 1;
    (*output)[8] = (uint32_t)(group2 % 33);
    group2 /= 33;

    (*output)[7] = (uint32_t)(group2 % 33);
    group2 /= 33;

    (*output)[6] = (uint32_t)(group2 % 33);
    group2 /= 33;

    (*output)[5] = (uint32_t)(group2 % 33);
    group2 /= 33;

    (*output)[4] = (uint32_t)(group2 % 33);
    group2 /= 33;

    (*output)[3] = (uint32_t)(group2 % 33);
    group2 /= 33;

    (*output)[2] = (uint32_t)(group2 % 33);
    group2 /= 33;

    (*output)[1] = (uint32_t)(group2 % 33);
    group2 /= 33;

    (*output)[0] = (uint32_t)(group2 % 33);
    group2 /= 33;
    *output += 9;

    uint64_t group3 = (*(uint64_t *)((*input) + 17)) >> 2;    group3 &= (1ull << 46) - 1;
    (*output)[8] = (uint32_t)(group3 % 33);
    group3 /= 33;

    (*output)[7] = (uint32_t)(group3 % 33);
    group3 /= 33;

    (*output)[6] = (uint32_t)(group3 % 33);
    group3 /= 33;

    (*output)[5] = (uint32_t)(group3 % 33);
    group3 /= 33;

    (*output)[4] = (uint32_t)(group3 % 33);
    group3 /= 33;

    (*output)[3] = (uint32_t)(group3 % 33);
    group3 /= 33;

    (*output)[2] = (uint32_t)(group3 % 33);
    group3 /= 33;

    (*output)[1] = (uint32_t)(group3 % 33);
    group3 /= 33;

    (*output)[0] = (uint32_t)(group3 % 33);
    group3 /= 33;
    *output += 9;


    *input += 23;
}

// Unpack 23 bytes into 36 values
void Ultrapack_Decompress34(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 46) - 1;
    (*output)[8] = (uint32_t)(group0 % 34);
    group0 /= 34;

    (*output)[7] = (uint32_t)(group0 % 34);
    group0 /= 34;

    (*output)[6] = (uint32_t)(group0 % 34);
    group0 /= 34;

    (*output)[5] = (uint32_t)(group0 % 34);
    group0 /= 34;

    (*output)[4] = (uint32_t)(group0 % 34);
    group0 /= 34;

    (*output)[3] = (uint32_t)(group0 % 34);
    group0 /= 34;

    (*output)[2] = (uint32_t)(group0 % 34);
    group0 /= 34;

    (*output)[1] = (uint32_t)(group0 % 34);
    group0 /= 34;

    (*output)[0] = (uint32_t)(group0 % 34);
    group0 /= 34;
    *output += 9;

    uint64_t group1 = (*(uint64_t *)((*input) + 5)) >> 6;    group1 &= (1ull << 46) - 1;
    (*output)[8] = (uint32_t)(group1 % 34);
    group1 /= 34;

    (*output)[7] = (uint32_t)(group1 % 34);
    group1 /= 34;

    (*output)[6] = (uint32_t)(group1 % 34);
    group1 /= 34;

    (*output)[5] = (uint32_t)(group1 % 34);
    group1 /= 34;

    (*output)[4] = (uint32_t)(group1 % 34);
    group1 /= 34;

    (*output)[3] = (uint32_t)(group1 % 34);
    group1 /= 34;

    (*output)[2] = (uint32_t)(group1 % 34);
    group1 /= 34;

    (*output)[1] = (uint32_t)(group1 % 34);
    group1 /= 34;

    (*output)[0] = (uint32_t)(group1 % 34);
    group1 /= 34;
    *output += 9;

    uint64_t group2 = (*(uint64_t *)((*input) + 11)) >> 4;    group2 &= (1ull << 46) - 1;
    (*output)[8] = (uint32_t)(group2 % 34);
    group2 /= 34;

    (*output)[7] = (uint32_t)(group2 % 34);
    group2 /= 34;

    (*output)[6] = (uint32_t)(group2 % 34);
    group2 /= 34;

    (*output)[5] = (uint32_t)(group2 % 34);
    group2 /= 34;

    (*output)[4] = (uint32_t)(group2 % 34);
    group2 /= 34;

    (*output)[3] = (uint32_t)(group2 % 34);
    group2 /= 34;

    (*output)[2] = (uint32_t)(group2 % 34);
    group2 /= 34;

    (*output)[1] = (uint32_t)(group2 % 34);
    group2 /= 34;

    (*output)[0] = (uint32_t)(group2 % 34);
    group2 /= 34;
    *output += 9;

    uint64_t group3 = (*(uint64_t *)((*input) + 17)) >> 2;    group3 &= (1ull << 46) - 1;
    (*output)[8] = (uint32_t)(group3 % 34);
    group3 /= 34;

    (*output)[7] = (uint32_t)(group3 % 34);
    group3 /= 34;

    (*output)[6] = (uint32_t)(group3 % 34);
    group3 /= 34;

    (*output)[5] = (uint32_t)(group3 % 34);
    group3 /= 34;

    (*output)[4] = (uint32_t)(group3 % 34);
    group3 /= 34;

    (*output)[3] = (uint32_t)(group3 % 34);
    group3 /= 34;

    (*output)[2] = (uint32_t)(group3 % 34);
    group3 /= 34;

    (*output)[1] = (uint32_t)(group3 % 34);
    group3 /= 34;

    (*output)[0] = (uint32_t)(group3 % 34);
    group3 /= 34;
    *output += 9;


    *input += 23;
}

// Unpack 31 bytes into 48 values
void Ultrapack_Decompress35(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 31) - 1;
    (*output)[5] = (uint32_t)(group0 % 35);
    group0 /= 35;

    (*output)[4] = (uint32_t)(group0 % 35);
    group0 /= 35;

    (*output)[3] = (uint32_t)(group0 % 35);
    group0 /= 35;

    (*output)[2] = (uint32_t)(group0 % 35);
    group0 /= 35;

    (*output)[1] = (uint32_t)(group0 % 35);
    group0 /= 35;

    (*output)[0] = (uint32_t)(group0 % 35);
    group0 /= 35;
    *output += 6;

    uint64_t group1 = (*(uint64_t *)((*input) + 3)) >> 7;    group1 &= (1ull << 31) - 1;
    (*output)[5] = (uint32_t)(group1 % 35);
    group1 /= 35;

    (*output)[4] = (uint32_t)(group1 % 35);
    group1 /= 35;

    (*output)[3] = (uint32_t)(group1 % 35);
    group1 /= 35;

    (*output)[2] = (uint32_t)(group1 % 35);
    group1 /= 35;

    (*output)[1] = (uint32_t)(group1 % 35);
    group1 /= 35;

    (*output)[0] = (uint32_t)(group1 % 35);
    group1 /= 35;
    *output += 6;

    uint64_t group2 = (*(uint64_t *)((*input) + 7)) >> 6;    group2 &= (1ull << 31) - 1;
    (*output)[5] = (uint32_t)(group2 % 35);
    group2 /= 35;

    (*output)[4] = (uint32_t)(group2 % 35);
    group2 /= 35;

    (*output)[3] = (uint32_t)(group2 % 35);
    group2 /= 35;

    (*output)[2] = (uint32_t)(group2 % 35);
    group2 /= 35;

    (*output)[1] = (uint32_t)(group2 % 35);
    group2 /= 35;

    (*output)[0] = (uint32_t)(group2 % 35);
    group2 /= 35;
    *output += 6;

    uint64_t group3 = (*(uint64_t *)((*input) + 11)) >> 5;    group3 &= (1ull << 31) - 1;
    (*output)[5] = (uint32_t)(group3 % 35);
    group3 /= 35;

    (*output)[4] = (uint32_t)(group3 % 35);
    group3 /= 35;

    (*output)[3] = (uint32_t)(group3 % 35);
    group3 /= 35;

    (*output)[2] = (uint32_t)(group3 % 35);
    group3 /= 35;

    (*output)[1] = (uint32_t)(group3 % 35);
    group3 /= 35;

    (*output)[0] = (uint32_t)(group3 % 35);
    group3 /= 35;
    *output += 6;

    uint64_t group4 = (*(uint64_t *)((*input) + 15)) >> 4;    group4 &= (1ull << 31) - 1;
    (*output)[5] = (uint32_t)(group4 % 35);
    group4 /= 35;

    (*output)[4] = (uint32_t)(group4 % 35);
    group4 /= 35;

    (*output)[3] = (uint32_t)(group4 % 35);
    group4 /= 35;

    (*output)[2] = (uint32_t)(group4 % 35);
    group4 /= 35;

    (*output)[1] = (uint32_t)(group4 % 35);
    group4 /= 35;

    (*output)[0] = (uint32_t)(group4 % 35);
    group4 /= 35;
    *output += 6;

    uint64_t group5 = (*(uint64_t *)((*input) + 19)) >> 3;    group5 &= (1ull << 31) - 1;
    (*output)[5] = (uint32_t)(group5 % 35);
    group5 /= 35;

    (*output)[4] = (uint32_t)(group5 % 35);
    group5 /= 35;

    (*output)[3] = (uint32_t)(group5 % 35);
    group5 /= 35;

    (*output)[2] = (uint32_t)(group5 % 35);
    group5 /= 35;

    (*output)[1] = (uint32_t)(group5 % 35);
    group5 /= 35;

    (*output)[0] = (uint32_t)(group5 % 35);
    group5 /= 35;
    *output += 6;

    uint64_t group6 = (*(uint64_t *)((*input) + 23)) >> 2;    group6 &= (1ull << 31) - 1;
    (*output)[5] = (uint32_t)(group6 % 35);
    group6 /= 35;

    (*output)[4] = (uint32_t)(group6 % 35);
    group6 /= 35;

    (*output)[3] = (uint32_t)(group6 % 35);
    group6 /= 35;

    (*output)[2] = (uint32_t)(group6 % 35);
    group6 /= 35;

    (*output)[1] = (uint32_t)(group6 % 35);
    group6 /= 35;

    (*output)[0] = (uint32_t)(group6 % 35);
    group6 /= 35;
    *output += 6;

    uint64_t group7 = (*(uint64_t *)((*input) + 27)) >> 1;    group7 &= (1ull << 31) - 1;
    (*output)[5] = (uint32_t)(group7 % 35);
    group7 /= 35;

    (*output)[4] = (uint32_t)(group7 % 35);
    group7 /= 35;

    (*output)[3] = (uint32_t)(group7 % 35);
    group7 /= 35;

    (*output)[2] = (uint32_t)(group7 % 35);
    group7 /= 35;

    (*output)[1] = (uint32_t)(group7 % 35);
    group7 /= 35;

    (*output)[0] = (uint32_t)(group7 % 35);
    group7 /= 35;
    *output += 6;


    *input += 31;
}

// Unpack 21 bytes into 32 values
void Ultrapack_Decompress36(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 21) - 1;
    (*output)[3] = (uint32_t)(group0 % 36);
    group0 /= 36;

    (*output)[2] = (uint32_t)(group0 % 36);
    group0 /= 36;

    (*output)[1] = (uint32_t)(group0 % 36);
    group0 /= 36;

    (*output)[0] = (uint32_t)(group0 % 36);
    group0 /= 36;
    *output += 4;

    uint64_t group1 = (*(uint64_t *)((*input) + 2)) >> 5;    group1 &= (1ull << 21) - 1;
    (*output)[3] = (uint32_t)(group1 % 36);
    group1 /= 36;

    (*output)[2] = (uint32_t)(group1 % 36);
    group1 /= 36;

    (*output)[1] = (uint32_t)(group1 % 36);
    group1 /= 36;

    (*output)[0] = (uint32_t)(group1 % 36);
    group1 /= 36;
    *output += 4;

    uint64_t group2 = (*(uint64_t *)((*input) + 5)) >> 2;    group2 &= (1ull << 21) - 1;
    (*output)[3] = (uint32_t)(group2 % 36);
    group2 /= 36;

    (*output)[2] = (uint32_t)(group2 % 36);
    group2 /= 36;

    (*output)[1] = (uint32_t)(group2 % 36);
    group2 /= 36;

    (*output)[0] = (uint32_t)(group2 % 36);
    group2 /= 36;
    *output += 4;

    uint64_t group3 = (*(uint64_t *)((*input) + 7)) >> 7;    group3 &= (1ull << 21) - 1;
    (*output)[3] = (uint32_t)(group3 % 36);
    group3 /= 36;

    (*output)[2] = (uint32_t)(group3 % 36);
    group3 /= 36;

    (*output)[1] = (uint32_t)(group3 % 36);
    group3 /= 36;

    (*output)[0] = (uint32_t)(group3 % 36);
    group3 /= 36;
    *output += 4;

    uint64_t group4 = (*(uint64_t *)((*input) + 10)) >> 4;    group4 &= (1ull << 21) - 1;
    (*output)[3] = (uint32_t)(group4 % 36);
    group4 /= 36;

    (*output)[2] = (uint32_t)(group4 % 36);
    group4 /= 36;

    (*output)[1] = (uint32_t)(group4 % 36);
    group4 /= 36;

    (*output)[0] = (uint32_t)(group4 % 36);
    group4 /= 36;
    *output += 4;

    uint64_t group5 = (*(uint64_t *)((*input) + 13)) >> 1;    group5 &= (1ull << 21) - 1;
    (*output)[3] = (uint32_t)(group5 % 36);
    group5 /= 36;

    (*output)[2] = (uint32_t)(group5 % 36);
    group5 /= 36;

    (*output)[1] = (uint32_t)(group5 % 36);
    group5 /= 36;

    (*output)[0] = (uint32_t)(group5 % 36);
    group5 /= 36;
    *output += 4;

    uint64_t group6 = (*(uint64_t *)((*input) + 15)) >> 6;    group6 &= (1ull << 21) - 1;
    (*output)[3] = (uint32_t)(group6 % 36);
    group6 /= 36;

    (*output)[2] = (uint32_t)(group6 % 36);
    group6 /= 36;

    (*output)[1] = (uint32_t)(group6 % 36);
    group6 /= 36;

    (*output)[0] = (uint32_t)(group6 % 36);
    group6 /= 36;
    *output += 4;

    uint64_t group7 = (*(uint64_t *)((*input) + 18)) >> 3;    group7 &= (1ull << 21) - 1;
    (*output)[3] = (uint32_t)(group7 % 36);
    group7 /= 36;

    (*output)[2] = (uint32_t)(group7 % 36);
    group7 /= 36;

    (*output)[1] = (uint32_t)(group7 % 36);
    group7 /= 36;

    (*output)[0] = (uint32_t)(group7 % 36);
    group7 /= 36;
    *output += 4;


    *input += 21;
}

// Unpack 21 bytes into 32 values
void Ultrapack_Decompress37(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 21) - 1;
    (*output)[3] = (uint32_t)(group0 % 37);
    group0 /= 37;

    (*output)[2] = (uint32_t)(group0 % 37);
    group0 /= 37;

    (*output)[1] = (uint32_t)(group0 % 37);
    group0 /= 37;

    (*output)[0] = (uint32_t)(group0 % 37);
    group0 /= 37;
    *output += 4;

    uint64_t group1 = (*(uint64_t *)((*input) + 2)) >> 5;    group1 &= (1ull << 21) - 1;
    (*output)[3] = (uint32_t)(group1 % 37);
    group1 /= 37;

    (*output)[2] = (uint32_t)(group1 % 37);
    group1 /= 37;

    (*output)[1] = (uint32_t)(group1 % 37);
    group1 /= 37;

    (*output)[0] = (uint32_t)(group1 % 37);
    group1 /= 37;
    *output += 4;

    uint64_t group2 = (*(uint64_t *)((*input) + 5)) >> 2;    group2 &= (1ull << 21) - 1;
    (*output)[3] = (uint32_t)(group2 % 37);
    group2 /= 37;

    (*output)[2] = (uint32_t)(group2 % 37);
    group2 /= 37;

    (*output)[1] = (uint32_t)(group2 % 37);
    group2 /= 37;

    (*output)[0] = (uint32_t)(group2 % 37);
    group2 /= 37;
    *output += 4;

    uint64_t group3 = (*(uint64_t *)((*input) + 7)) >> 7;    group3 &= (1ull << 21) - 1;
    (*output)[3] = (uint32_t)(group3 % 37);
    group3 /= 37;

    (*output)[2] = (uint32_t)(group3 % 37);
    group3 /= 37;

    (*output)[1] = (uint32_t)(group3 % 37);
    group3 /= 37;

    (*output)[0] = (uint32_t)(group3 % 37);
    group3 /= 37;
    *output += 4;

    uint64_t group4 = (*(uint64_t *)((*input) + 10)) >> 4;    group4 &= (1ull << 21) - 1;
    (*output)[3] = (uint32_t)(group4 % 37);
    group4 /= 37;

    (*output)[2] = (uint32_t)(group4 % 37);
    group4 /= 37;

    (*output)[1] = (uint32_t)(group4 % 37);
    group4 /= 37;

    (*output)[0] = (uint32_t)(group4 % 37);
    group4 /= 37;
    *output += 4;

    uint64_t group5 = (*(uint64_t *)((*input) + 13)) >> 1;    group5 &= (1ull << 21) - 1;
    (*output)[3] = (uint32_t)(group5 % 37);
    group5 /= 37;

    (*output)[2] = (uint32_t)(group5 % 37);
    group5 /= 37;

    (*output)[1] = (uint32_t)(group5 % 37);
    group5 /= 37;

    (*output)[0] = (uint32_t)(group5 % 37);
    group5 /= 37;
    *output += 4;

    uint64_t group6 = (*(uint64_t *)((*input) + 15)) >> 6;    group6 &= (1ull << 21) - 1;
    (*output)[3] = (uint32_t)(group6 % 37);
    group6 /= 37;

    (*output)[2] = (uint32_t)(group6 % 37);
    group6 /= 37;

    (*output)[1] = (uint32_t)(group6 % 37);
    group6 /= 37;

    (*output)[0] = (uint32_t)(group6 % 37);
    group6 /= 37;
    *output += 4;

    uint64_t group7 = (*(uint64_t *)((*input) + 18)) >> 3;    group7 &= (1ull << 21) - 1;
    (*output)[3] = (uint32_t)(group7 % 37);
    group7 /= 37;

    (*output)[2] = (uint32_t)(group7 % 37);
    group7 /= 37;

    (*output)[1] = (uint32_t)(group7 % 37);
    group7 /= 37;

    (*output)[0] = (uint32_t)(group7 % 37);
    group7 /= 37;
    *output += 4;


    *input += 21;
}

// Unpack 21 bytes into 32 values
void Ultrapack_Decompress38(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 21) - 1;
    (*output)[3] = (uint32_t)(group0 % 38);
    group0 /= 38;

    (*output)[2] = (uint32_t)(group0 % 38);
    group0 /= 38;

    (*output)[1] = (uint32_t)(group0 % 38);
    group0 /= 38;

    (*output)[0] = (uint32_t)(group0 % 38);
    group0 /= 38;
    *output += 4;

    uint64_t group1 = (*(uint64_t *)((*input) + 2)) >> 5;    group1 &= (1ull << 21) - 1;
    (*output)[3] = (uint32_t)(group1 % 38);
    group1 /= 38;

    (*output)[2] = (uint32_t)(group1 % 38);
    group1 /= 38;

    (*output)[1] = (uint32_t)(group1 % 38);
    group1 /= 38;

    (*output)[0] = (uint32_t)(group1 % 38);
    group1 /= 38;
    *output += 4;

    uint64_t group2 = (*(uint64_t *)((*input) + 5)) >> 2;    group2 &= (1ull << 21) - 1;
    (*output)[3] = (uint32_t)(group2 % 38);
    group2 /= 38;

    (*output)[2] = (uint32_t)(group2 % 38);
    group2 /= 38;

    (*output)[1] = (uint32_t)(group2 % 38);
    group2 /= 38;

    (*output)[0] = (uint32_t)(group2 % 38);
    group2 /= 38;
    *output += 4;

    uint64_t group3 = (*(uint64_t *)((*input) + 7)) >> 7;    group3 &= (1ull << 21) - 1;
    (*output)[3] = (uint32_t)(group3 % 38);
    group3 /= 38;

    (*output)[2] = (uint32_t)(group3 % 38);
    group3 /= 38;

    (*output)[1] = (uint32_t)(group3 % 38);
    group3 /= 38;

    (*output)[0] = (uint32_t)(group3 % 38);
    group3 /= 38;
    *output += 4;

    uint64_t group4 = (*(uint64_t *)((*input) + 10)) >> 4;    group4 &= (1ull << 21) - 1;
    (*output)[3] = (uint32_t)(group4 % 38);
    group4 /= 38;

    (*output)[2] = (uint32_t)(group4 % 38);
    group4 /= 38;

    (*output)[1] = (uint32_t)(group4 % 38);
    group4 /= 38;

    (*output)[0] = (uint32_t)(group4 % 38);
    group4 /= 38;
    *output += 4;

    uint64_t group5 = (*(uint64_t *)((*input) + 13)) >> 1;    group5 &= (1ull << 21) - 1;
    (*output)[3] = (uint32_t)(group5 % 38);
    group5 /= 38;

    (*output)[2] = (uint32_t)(group5 % 38);
    group5 /= 38;

    (*output)[1] = (uint32_t)(group5 % 38);
    group5 /= 38;

    (*output)[0] = (uint32_t)(group5 % 38);
    group5 /= 38;
    *output += 4;

    uint64_t group6 = (*(uint64_t *)((*input) + 15)) >> 6;    group6 &= (1ull << 21) - 1;
    (*output)[3] = (uint32_t)(group6 % 38);
    group6 /= 38;

    (*output)[2] = (uint32_t)(group6 % 38);
    group6 /= 38;

    (*output)[1] = (uint32_t)(group6 % 38);
    group6 /= 38;

    (*output)[0] = (uint32_t)(group6 % 38);
    group6 /= 38;
    *output += 4;

    uint64_t group7 = (*(uint64_t *)((*input) + 18)) >> 3;    group7 &= (1ull << 21) - 1;
    (*output)[3] = (uint32_t)(group7 % 38);
    group7 /= 38;

    (*output)[2] = (uint32_t)(group7 % 38);
    group7 /= 38;

    (*output)[1] = (uint32_t)(group7 % 38);
    group7 /= 38;

    (*output)[0] = (uint32_t)(group7 % 38);
    group7 /= 38;
    *output += 4;


    *input += 21;
}

// Unpack 2 bytes into 3 values
void Ultrapack_Decompress39(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 16) - 1;
    (*output)[2] = (uint32_t)(group0 % 39);
    group0 /= 39;

    (*output)[1] = (uint32_t)(group0 % 39);
    group0 /= 39;

    (*output)[0] = (uint32_t)(group0 % 39);
    group0 /= 39;
    *output += 3;


    *input += 2;
}

// Unpack 2 bytes into 3 values
void Ultrapack_Decompress40(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 16) - 1;
    (*output)[2] = (uint32_t)(group0 % 40);
    group0 /= 40;

    (*output)[1] = (uint32_t)(group0 % 40);
    group0 /= 40;

    (*output)[0] = (uint32_t)(group0 % 40);
    group0 /= 40;
    *output += 3;


    *input += 2;
}

// Unpack 27 bytes into 40 values
void Ultrapack_Decompress41(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 27) - 1;
    (*output)[4] = (uint32_t)(group0 % 41);
    group0 /= 41;

    (*output)[3] = (uint32_t)(group0 % 41);
    group0 /= 41;

    (*output)[2] = (uint32_t)(group0 % 41);
    group0 /= 41;

    (*output)[1] = (uint32_t)(group0 % 41);
    group0 /= 41;

    (*output)[0] = (uint32_t)(group0 % 41);
    group0 /= 41;
    *output += 5;

    uint64_t group1 = (*(uint64_t *)((*input) + 3)) >> 3;    group1 &= (1ull << 27) - 1;
    (*output)[4] = (uint32_t)(group1 % 41);
    group1 /= 41;

    (*output)[3] = (uint32_t)(group1 % 41);
    group1 /= 41;

    (*output)[2] = (uint32_t)(group1 % 41);
    group1 /= 41;

    (*output)[1] = (uint32_t)(group1 % 41);
    group1 /= 41;

    (*output)[0] = (uint32_t)(group1 % 41);
    group1 /= 41;
    *output += 5;

    uint64_t group2 = (*(uint64_t *)((*input) + 6)) >> 6;    group2 &= (1ull << 27) - 1;
    (*output)[4] = (uint32_t)(group2 % 41);
    group2 /= 41;

    (*output)[3] = (uint32_t)(group2 % 41);
    group2 /= 41;

    (*output)[2] = (uint32_t)(group2 % 41);
    group2 /= 41;

    (*output)[1] = (uint32_t)(group2 % 41);
    group2 /= 41;

    (*output)[0] = (uint32_t)(group2 % 41);
    group2 /= 41;
    *output += 5;

    uint64_t group3 = (*(uint64_t *)((*input) + 10)) >> 1;    group3 &= (1ull << 27) - 1;
    (*output)[4] = (uint32_t)(group3 % 41);
    group3 /= 41;

    (*output)[3] = (uint32_t)(group3 % 41);
    group3 /= 41;

    (*output)[2] = (uint32_t)(group3 % 41);
    group3 /= 41;

    (*output)[1] = (uint32_t)(group3 % 41);
    group3 /= 41;

    (*output)[0] = (uint32_t)(group3 % 41);
    group3 /= 41;
    *output += 5;

    uint64_t group4 = (*(uint64_t *)((*input) + 13)) >> 4;    group4 &= (1ull << 27) - 1;
    (*output)[4] = (uint32_t)(group4 % 41);
    group4 /= 41;

    (*output)[3] = (uint32_t)(group4 % 41);
    group4 /= 41;

    (*output)[2] = (uint32_t)(group4 % 41);
    group4 /= 41;

    (*output)[1] = (uint32_t)(group4 % 41);
    group4 /= 41;

    (*output)[0] = (uint32_t)(group4 % 41);
    group4 /= 41;
    *output += 5;

    uint64_t group5 = (*(uint64_t *)((*input) + 16)) >> 7;    group5 &= (1ull << 27) - 1;
    (*output)[4] = (uint32_t)(group5 % 41);
    group5 /= 41;

    (*output)[3] = (uint32_t)(group5 % 41);
    group5 /= 41;

    (*output)[2] = (uint32_t)(group5 % 41);
    group5 /= 41;

    (*output)[1] = (uint32_t)(group5 % 41);
    group5 /= 41;

    (*output)[0] = (uint32_t)(group5 % 41);
    group5 /= 41;
    *output += 5;

    uint64_t group6 = (*(uint64_t *)((*input) + 20)) >> 2;    group6 &= (1ull << 27) - 1;
    (*output)[4] = (uint32_t)(group6 % 41);
    group6 /= 41;

    (*output)[3] = (uint32_t)(group6 % 41);
    group6 /= 41;

    (*output)[2] = (uint32_t)(group6 % 41);
    group6 /= 41;

    (*output)[1] = (uint32_t)(group6 % 41);
    group6 /= 41;

    (*output)[0] = (uint32_t)(group6 % 41);
    group6 /= 41;
    *output += 5;

    uint64_t group7 = (*(uint64_t *)((*input) + 23)) >> 5;    group7 &= (1ull << 27) - 1;
    (*output)[4] = (uint32_t)(group7 % 41);
    group7 /= 41;

    (*output)[3] = (uint32_t)(group7 % 41);
    group7 /= 41;

    (*output)[2] = (uint32_t)(group7 % 41);
    group7 /= 41;

    (*output)[1] = (uint32_t)(group7 % 41);
    group7 /= 41;

    (*output)[0] = (uint32_t)(group7 % 41);
    group7 /= 41;
    *output += 5;


    *input += 27;
}

// Unpack 27 bytes into 40 values
void Ultrapack_Decompress42(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 27) - 1;
    (*output)[4] = (uint32_t)(group0 % 42);
    group0 /= 42;

    (*output)[3] = (uint32_t)(group0 % 42);
    group0 /= 42;

    (*output)[2] = (uint32_t)(group0 % 42);
    group0 /= 42;

    (*output)[1] = (uint32_t)(group0 % 42);
    group0 /= 42;

    (*output)[0] = (uint32_t)(group0 % 42);
    group0 /= 42;
    *output += 5;

    uint64_t group1 = (*(uint64_t *)((*input) + 3)) >> 3;    group1 &= (1ull << 27) - 1;
    (*output)[4] = (uint32_t)(group1 % 42);
    group1 /= 42;

    (*output)[3] = (uint32_t)(group1 % 42);
    group1 /= 42;

    (*output)[2] = (uint32_t)(group1 % 42);
    group1 /= 42;

    (*output)[1] = (uint32_t)(group1 % 42);
    group1 /= 42;

    (*output)[0] = (uint32_t)(group1 % 42);
    group1 /= 42;
    *output += 5;

    uint64_t group2 = (*(uint64_t *)((*input) + 6)) >> 6;    group2 &= (1ull << 27) - 1;
    (*output)[4] = (uint32_t)(group2 % 42);
    group2 /= 42;

    (*output)[3] = (uint32_t)(group2 % 42);
    group2 /= 42;

    (*output)[2] = (uint32_t)(group2 % 42);
    group2 /= 42;

    (*output)[1] = (uint32_t)(group2 % 42);
    group2 /= 42;

    (*output)[0] = (uint32_t)(group2 % 42);
    group2 /= 42;
    *output += 5;

    uint64_t group3 = (*(uint64_t *)((*input) + 10)) >> 1;    group3 &= (1ull << 27) - 1;
    (*output)[4] = (uint32_t)(group3 % 42);
    group3 /= 42;

    (*output)[3] = (uint32_t)(group3 % 42);
    group3 /= 42;

    (*output)[2] = (uint32_t)(group3 % 42);
    group3 /= 42;

    (*output)[1] = (uint32_t)(group3 % 42);
    group3 /= 42;

    (*output)[0] = (uint32_t)(group3 % 42);
    group3 /= 42;
    *output += 5;

    uint64_t group4 = (*(uint64_t *)((*input) + 13)) >> 4;    group4 &= (1ull << 27) - 1;
    (*output)[4] = (uint32_t)(group4 % 42);
    group4 /= 42;

    (*output)[3] = (uint32_t)(group4 % 42);
    group4 /= 42;

    (*output)[2] = (uint32_t)(group4 % 42);
    group4 /= 42;

    (*output)[1] = (uint32_t)(group4 % 42);
    group4 /= 42;

    (*output)[0] = (uint32_t)(group4 % 42);
    group4 /= 42;
    *output += 5;

    uint64_t group5 = (*(uint64_t *)((*input) + 16)) >> 7;    group5 &= (1ull << 27) - 1;
    (*output)[4] = (uint32_t)(group5 % 42);
    group5 /= 42;

    (*output)[3] = (uint32_t)(group5 % 42);
    group5 /= 42;

    (*output)[2] = (uint32_t)(group5 % 42);
    group5 /= 42;

    (*output)[1] = (uint32_t)(group5 % 42);
    group5 /= 42;

    (*output)[0] = (uint32_t)(group5 % 42);
    group5 /= 42;
    *output += 5;

    uint64_t group6 = (*(uint64_t *)((*input) + 20)) >> 2;    group6 &= (1ull << 27) - 1;
    (*output)[4] = (uint32_t)(group6 % 42);
    group6 /= 42;

    (*output)[3] = (uint32_t)(group6 % 42);
    group6 /= 42;

    (*output)[2] = (uint32_t)(group6 % 42);
    group6 /= 42;

    (*output)[1] = (uint32_t)(group6 % 42);
    group6 /= 42;

    (*output)[0] = (uint32_t)(group6 % 42);
    group6 /= 42;
    *output += 5;

    uint64_t group7 = (*(uint64_t *)((*input) + 23)) >> 5;    group7 &= (1ull << 27) - 1;
    (*output)[4] = (uint32_t)(group7 % 42);
    group7 /= 42;

    (*output)[3] = (uint32_t)(group7 % 42);
    group7 /= 42;

    (*output)[2] = (uint32_t)(group7 % 42);
    group7 /= 42;

    (*output)[1] = (uint32_t)(group7 % 42);
    group7 /= 42;

    (*output)[0] = (uint32_t)(group7 % 42);
    group7 /= 42;
    *output += 5;


    *input += 27;
}

// Unpack 19 bytes into 28 values
void Ultrapack_Decompress43(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 38) - 1;
    (*output)[6] = (uint32_t)(group0 % 43);
    group0 /= 43;

    (*output)[5] = (uint32_t)(group0 % 43);
    group0 /= 43;

    (*output)[4] = (uint32_t)(group0 % 43);
    group0 /= 43;

    (*output)[3] = (uint32_t)(group0 % 43);
    group0 /= 43;

    (*output)[2] = (uint32_t)(group0 % 43);
    group0 /= 43;

    (*output)[1] = (uint32_t)(group0 % 43);
    group0 /= 43;

    (*output)[0] = (uint32_t)(group0 % 43);
    group0 /= 43;
    *output += 7;

    uint64_t group1 = (*(uint64_t *)((*input) + 4)) >> 6;    group1 &= (1ull << 38) - 1;
    (*output)[6] = (uint32_t)(group1 % 43);
    group1 /= 43;

    (*output)[5] = (uint32_t)(group1 % 43);
    group1 /= 43;

    (*output)[4] = (uint32_t)(group1 % 43);
    group1 /= 43;

    (*output)[3] = (uint32_t)(group1 % 43);
    group1 /= 43;

    (*output)[2] = (uint32_t)(group1 % 43);
    group1 /= 43;

    (*output)[1] = (uint32_t)(group1 % 43);
    group1 /= 43;

    (*output)[0] = (uint32_t)(group1 % 43);
    group1 /= 43;
    *output += 7;

    uint64_t group2 = (*(uint64_t *)((*input) + 9)) >> 4;    group2 &= (1ull << 38) - 1;
    (*output)[6] = (uint32_t)(group2 % 43);
    group2 /= 43;

    (*output)[5] = (uint32_t)(group2 % 43);
    group2 /= 43;

    (*output)[4] = (uint32_t)(group2 % 43);
    group2 /= 43;

    (*output)[3] = (uint32_t)(group2 % 43);
    group2 /= 43;

    (*output)[2] = (uint32_t)(group2 % 43);
    group2 /= 43;

    (*output)[1] = (uint32_t)(group2 % 43);
    group2 /= 43;

    (*output)[0] = (uint32_t)(group2 % 43);
    group2 /= 43;
    *output += 7;

    uint64_t group3 = (*(uint64_t *)((*input) + 14)) >> 2;    group3 &= (1ull << 38) - 1;
    (*output)[6] = (uint32_t)(group3 % 43);
    group3 /= 43;

    (*output)[5] = (uint32_t)(group3 % 43);
    group3 /= 43;

    (*output)[4] = (uint32_t)(group3 % 43);
    group3 /= 43;

    (*output)[3] = (uint32_t)(group3 % 43);
    group3 /= 43;

    (*output)[2] = (uint32_t)(group3 % 43);
    group3 /= 43;

    (*output)[1] = (uint32_t)(group3 % 43);
    group3 /= 43;

    (*output)[0] = (uint32_t)(group3 % 43);
    group3 /= 43;
    *output += 7;


    *input += 19;
}

// Unpack 11 bytes into 16 values
void Ultrapack_Decompress44(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 11) - 1;
    (*output)[1] = (uint32_t)(group0 % 44);
    group0 /= 44;

    (*output)[0] = (uint32_t)(group0 % 44);
    group0 /= 44;
    *output += 2;

    uint64_t group1 = (*(uint64_t *)((*input) + 1)) >> 3;    group1 &= (1ull << 11) - 1;
    (*output)[1] = (uint32_t)(group1 % 44);
    group1 /= 44;

    (*output)[0] = (uint32_t)(group1 % 44);
    group1 /= 44;
    *output += 2;

    uint64_t group2 = (*(uint64_t *)((*input) + 2)) >> 6;    group2 &= (1ull << 11) - 1;
    (*output)[1] = (uint32_t)(group2 % 44);
    group2 /= 44;

    (*output)[0] = (uint32_t)(group2 % 44);
    group2 /= 44;
    *output += 2;

    uint64_t group3 = (*(uint64_t *)((*input) + 4)) >> 1;    group3 &= (1ull << 11) - 1;
    (*output)[1] = (uint32_t)(group3 % 44);
    group3 /= 44;

    (*output)[0] = (uint32_t)(group3 % 44);
    group3 /= 44;
    *output += 2;

    uint64_t group4 = (*(uint64_t *)((*input) + 5)) >> 4;    group4 &= (1ull << 11) - 1;
    (*output)[1] = (uint32_t)(group4 % 44);
    group4 /= 44;

    (*output)[0] = (uint32_t)(group4 % 44);
    group4 /= 44;
    *output += 2;

    uint64_t group5 = (*(uint64_t *)((*input) + 6)) >> 7;    group5 &= (1ull << 11) - 1;
    (*output)[1] = (uint32_t)(group5 % 44);
    group5 /= 44;

    (*output)[0] = (uint32_t)(group5 % 44);
    group5 /= 44;
    *output += 2;

    uint64_t group6 = (*(uint64_t *)((*input) + 8)) >> 2;    group6 &= (1ull << 11) - 1;
    (*output)[1] = (uint32_t)(group6 % 44);
    group6 /= 44;

    (*output)[0] = (uint32_t)(group6 % 44);
    group6 /= 44;
    *output += 2;

    uint64_t group7 = (*(uint64_t *)((*input) + 9)) >> 5;    group7 &= (1ull << 11) - 1;
    (*output)[1] = (uint32_t)(group7 % 44);
    group7 /= 44;

    (*output)[0] = (uint32_t)(group7 % 44);
    group7 /= 44;
    *output += 2;


    *input += 11;
}

// Unpack 11 bytes into 16 values
void Ultrapack_Decompress45(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 11) - 1;
    (*output)[1] = (uint32_t)(group0 % 45);
    group0 /= 45;

    (*output)[0] = (uint32_t)(group0 % 45);
    group0 /= 45;
    *output += 2;

    uint64_t group1 = (*(uint64_t *)((*input) + 1)) >> 3;    group1 &= (1ull << 11) - 1;
    (*output)[1] = (uint32_t)(group1 % 45);
    group1 /= 45;

    (*output)[0] = (uint32_t)(group1 % 45);
    group1 /= 45;
    *output += 2;

    uint64_t group2 = (*(uint64_t *)((*input) + 2)) >> 6;    group2 &= (1ull << 11) - 1;
    (*output)[1] = (uint32_t)(group2 % 45);
    group2 /= 45;

    (*output)[0] = (uint32_t)(group2 % 45);
    group2 /= 45;
    *output += 2;

    uint64_t group3 = (*(uint64_t *)((*input) + 4)) >> 1;    group3 &= (1ull << 11) - 1;
    (*output)[1] = (uint32_t)(group3 % 45);
    group3 /= 45;

    (*output)[0] = (uint32_t)(group3 % 45);
    group3 /= 45;
    *output += 2;

    uint64_t group4 = (*(uint64_t *)((*input) + 5)) >> 4;    group4 &= (1ull << 11) - 1;
    (*output)[1] = (uint32_t)(group4 % 45);
    group4 /= 45;

    (*output)[0] = (uint32_t)(group4 % 45);
    group4 /= 45;
    *output += 2;

    uint64_t group5 = (*(uint64_t *)((*input) + 6)) >> 7;    group5 &= (1ull << 11) - 1;
    (*output)[1] = (uint32_t)(group5 % 45);
    group5 /= 45;

    (*output)[0] = (uint32_t)(group5 % 45);
    group5 /= 45;
    *output += 2;

    uint64_t group6 = (*(uint64_t *)((*input) + 8)) >> 2;    group6 &= (1ull << 11) - 1;
    (*output)[1] = (uint32_t)(group6 % 45);
    group6 /= 45;

    (*output)[0] = (uint32_t)(group6 % 45);
    group6 /= 45;
    *output += 2;

    uint64_t group7 = (*(uint64_t *)((*input) + 9)) >> 5;    group7 &= (1ull << 11) - 1;
    (*output)[1] = (uint32_t)(group7 % 45);
    group7 /= 45;

    (*output)[0] = (uint32_t)(group7 % 45);
    group7 /= 45;
    *output += 2;


    *input += 11;
}

// Unpack 7 bytes into 10 values
void Ultrapack_Decompress46(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 28) - 1;
    (*output)[4] = (uint32_t)(group0 % 46);
    group0 /= 46;

    (*output)[3] = (uint32_t)(group0 % 46);
    group0 /= 46;

    (*output)[2] = (uint32_t)(group0 % 46);
    group0 /= 46;

    (*output)[1] = (uint32_t)(group0 % 46);
    group0 /= 46;

    (*output)[0] = (uint32_t)(group0 % 46);
    group0 /= 46;
    *output += 5;

    uint64_t group1 = (*(uint64_t *)((*input) + 3)) >> 4;    group1 &= (1ull << 28) - 1;
    (*output)[4] = (uint32_t)(group1 % 46);
    group1 /= 46;

    (*output)[3] = (uint32_t)(group1 % 46);
    group1 /= 46;

    (*output)[2] = (uint32_t)(group1 % 46);
    group1 /= 46;

    (*output)[1] = (uint32_t)(group1 % 46);
    group1 /= 46;

    (*output)[0] = (uint32_t)(group1 % 46);
    group1 /= 46;
    *output += 5;


    *input += 7;
}

// Unpack 7 bytes into 10 values
void Ultrapack_Decompress47(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 28) - 1;
    (*output)[4] = (uint32_t)(group0 % 47);
    group0 /= 47;

    (*output)[3] = (uint32_t)(group0 % 47);
    group0 /= 47;

    (*output)[2] = (uint32_t)(group0 % 47);
    group0 /= 47;

    (*output)[1] = (uint32_t)(group0 % 47);
    group0 /= 47;

    (*output)[0] = (uint32_t)(group0 % 47);
    group0 /= 47;
    *output += 5;

    uint64_t group1 = (*(uint64_t *)((*input) + 3)) >> 4;    group1 &= (1ull << 28) - 1;
    (*output)[4] = (uint32_t)(group1 % 47);
    group1 /= 47;

    (*output)[3] = (uint32_t)(group1 % 47);
    group1 /= 47;

    (*output)[2] = (uint32_t)(group1 % 47);
    group1 /= 47;

    (*output)[1] = (uint32_t)(group1 % 47);
    group1 /= 47;

    (*output)[0] = (uint32_t)(group1 % 47);
    group1 /= 47;
    *output += 5;


    *input += 7;
}

// Unpack 7 bytes into 10 values
void Ultrapack_Decompress48(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 28) - 1;
    (*output)[4] = (uint32_t)(group0 % 48);
    group0 /= 48;

    (*output)[3] = (uint32_t)(group0 % 48);
    group0 /= 48;

    (*output)[2] = (uint32_t)(group0 % 48);
    group0 /= 48;

    (*output)[1] = (uint32_t)(group0 % 48);
    group0 /= 48;

    (*output)[0] = (uint32_t)(group0 % 48);
    group0 /= 48;
    *output += 5;

    uint64_t group1 = (*(uint64_t *)((*input) + 3)) >> 4;    group1 &= (1ull << 28) - 1;
    (*output)[4] = (uint32_t)(group1 % 48);
    group1 /= 48;

    (*output)[3] = (uint32_t)(group1 % 48);
    group1 /= 48;

    (*output)[2] = (uint32_t)(group1 % 48);
    group1 /= 48;

    (*output)[1] = (uint32_t)(group1 % 48);
    group1 /= 48;

    (*output)[0] = (uint32_t)(group1 % 48);
    group1 /= 48;
    *output += 5;


    *input += 7;
}

// Unpack 17 bytes into 24 values
void Ultrapack_Decompress49(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 17) - 1;
    (*output)[2] = (uint32_t)(group0 % 49);
    group0 /= 49;

    (*output)[1] = (uint32_t)(group0 % 49);
    group0 /= 49;

    (*output)[0] = (uint32_t)(group0 % 49);
    group0 /= 49;
    *output += 3;

    uint64_t group1 = (*(uint64_t *)((*input) + 2)) >> 1;    group1 &= (1ull << 17) - 1;
    (*output)[2] = (uint32_t)(group1 % 49);
    group1 /= 49;

    (*output)[1] = (uint32_t)(group1 % 49);
    group1 /= 49;

    (*output)[0] = (uint32_t)(group1 % 49);
    group1 /= 49;
    *output += 3;

    uint64_t group2 = (*(uint64_t *)((*input) + 4)) >> 2;    group2 &= (1ull << 17) - 1;
    (*output)[2] = (uint32_t)(group2 % 49);
    group2 /= 49;

    (*output)[1] = (uint32_t)(group2 % 49);
    group2 /= 49;

    (*output)[0] = (uint32_t)(group2 % 49);
    group2 /= 49;
    *output += 3;

    uint64_t group3 = (*(uint64_t *)((*input) + 6)) >> 3;    group3 &= (1ull << 17) - 1;
    (*output)[2] = (uint32_t)(group3 % 49);
    group3 /= 49;

    (*output)[1] = (uint32_t)(group3 % 49);
    group3 /= 49;

    (*output)[0] = (uint32_t)(group3 % 49);
    group3 /= 49;
    *output += 3;

    uint64_t group4 = (*(uint64_t *)((*input) + 8)) >> 4;    group4 &= (1ull << 17) - 1;
    (*output)[2] = (uint32_t)(group4 % 49);
    group4 /= 49;

    (*output)[1] = (uint32_t)(group4 % 49);
    group4 /= 49;

    (*output)[0] = (uint32_t)(group4 % 49);
    group4 /= 49;
    *output += 3;

    uint64_t group5 = (*(uint64_t *)((*input) + 10)) >> 5;    group5 &= (1ull << 17) - 1;
    (*output)[2] = (uint32_t)(group5 % 49);
    group5 /= 49;

    (*output)[1] = (uint32_t)(group5 % 49);
    group5 /= 49;

    (*output)[0] = (uint32_t)(group5 % 49);
    group5 /= 49;
    *output += 3;

    uint64_t group6 = (*(uint64_t *)((*input) + 12)) >> 6;    group6 &= (1ull << 17) - 1;
    (*output)[2] = (uint32_t)(group6 % 49);
    group6 /= 49;

    (*output)[1] = (uint32_t)(group6 % 49);
    group6 /= 49;

    (*output)[0] = (uint32_t)(group6 % 49);
    group6 /= 49;
    *output += 3;

    uint64_t group7 = (*(uint64_t *)((*input) + 14)) >> 7;    group7 &= (1ull << 17) - 1;
    (*output)[2] = (uint32_t)(group7 % 49);
    group7 /= 49;

    (*output)[1] = (uint32_t)(group7 % 49);
    group7 /= 49;

    (*output)[0] = (uint32_t)(group7 % 49);
    group7 /= 49;
    *output += 3;


    *input += 17;
}

// Unpack 17 bytes into 24 values
void Ultrapack_Decompress50(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 17) - 1;
    (*output)[2] = (uint32_t)(group0 % 50);
    group0 /= 50;

    (*output)[1] = (uint32_t)(group0 % 50);
    group0 /= 50;

    (*output)[0] = (uint32_t)(group0 % 50);
    group0 /= 50;
    *output += 3;

    uint64_t group1 = (*(uint64_t *)((*input) + 2)) >> 1;    group1 &= (1ull << 17) - 1;
    (*output)[2] = (uint32_t)(group1 % 50);
    group1 /= 50;

    (*output)[1] = (uint32_t)(group1 % 50);
    group1 /= 50;

    (*output)[0] = (uint32_t)(group1 % 50);
    group1 /= 50;
    *output += 3;

    uint64_t group2 = (*(uint64_t *)((*input) + 4)) >> 2;    group2 &= (1ull << 17) - 1;
    (*output)[2] = (uint32_t)(group2 % 50);
    group2 /= 50;

    (*output)[1] = (uint32_t)(group2 % 50);
    group2 /= 50;

    (*output)[0] = (uint32_t)(group2 % 50);
    group2 /= 50;
    *output += 3;

    uint64_t group3 = (*(uint64_t *)((*input) + 6)) >> 3;    group3 &= (1ull << 17) - 1;
    (*output)[2] = (uint32_t)(group3 % 50);
    group3 /= 50;

    (*output)[1] = (uint32_t)(group3 % 50);
    group3 /= 50;

    (*output)[0] = (uint32_t)(group3 % 50);
    group3 /= 50;
    *output += 3;

    uint64_t group4 = (*(uint64_t *)((*input) + 8)) >> 4;    group4 &= (1ull << 17) - 1;
    (*output)[2] = (uint32_t)(group4 % 50);
    group4 /= 50;

    (*output)[1] = (uint32_t)(group4 % 50);
    group4 /= 50;

    (*output)[0] = (uint32_t)(group4 % 50);
    group4 /= 50;
    *output += 3;

    uint64_t group5 = (*(uint64_t *)((*input) + 10)) >> 5;    group5 &= (1ull << 17) - 1;
    (*output)[2] = (uint32_t)(group5 % 50);
    group5 /= 50;

    (*output)[1] = (uint32_t)(group5 % 50);
    group5 /= 50;

    (*output)[0] = (uint32_t)(group5 % 50);
    group5 /= 50;
    *output += 3;

    uint64_t group6 = (*(uint64_t *)((*input) + 12)) >> 6;    group6 &= (1ull << 17) - 1;
    (*output)[2] = (uint32_t)(group6 % 50);
    group6 /= 50;

    (*output)[1] = (uint32_t)(group6 % 50);
    group6 /= 50;

    (*output)[0] = (uint32_t)(group6 % 50);
    group6 /= 50;
    *output += 3;

    uint64_t group7 = (*(uint64_t *)((*input) + 14)) >> 7;    group7 &= (1ull << 17) - 1;
    (*output)[2] = (uint32_t)(group7 % 50);
    group7 /= 50;

    (*output)[1] = (uint32_t)(group7 % 50);
    group7 /= 50;

    (*output)[0] = (uint32_t)(group7 % 50);
    group7 /= 50;
    *output += 3;


    *input += 17;
}

// Unpack 23 bytes into 32 values
void Ultrapack_Decompress51(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 23) - 1;
    (*output)[3] = (uint32_t)(group0 % 51);
    group0 /= 51;

    (*output)[2] = (uint32_t)(group0 % 51);
    group0 /= 51;

    (*output)[1] = (uint32_t)(group0 % 51);
    group0 /= 51;

    (*output)[0] = (uint32_t)(group0 % 51);
    group0 /= 51;
    *output += 4;

    uint64_t group1 = (*(uint64_t *)((*input) + 2)) >> 7;    group1 &= (1ull << 23) - 1;
    (*output)[3] = (uint32_t)(group1 % 51);
    group1 /= 51;

    (*output)[2] = (uint32_t)(group1 % 51);
    group1 /= 51;

    (*output)[1] = (uint32_t)(group1 % 51);
    group1 /= 51;

    (*output)[0] = (uint32_t)(group1 % 51);
    group1 /= 51;
    *output += 4;

    uint64_t group2 = (*(uint64_t *)((*input) + 5)) >> 6;    group2 &= (1ull << 23) - 1;
    (*output)[3] = (uint32_t)(group2 % 51);
    group2 /= 51;

    (*output)[2] = (uint32_t)(group2 % 51);
    group2 /= 51;

    (*output)[1] = (uint32_t)(group2 % 51);
    group2 /= 51;

    (*output)[0] = (uint32_t)(group2 % 51);
    group2 /= 51;
    *output += 4;

    uint64_t group3 = (*(uint64_t *)((*input) + 8)) >> 5;    group3 &= (1ull << 23) - 1;
    (*output)[3] = (uint32_t)(group3 % 51);
    group3 /= 51;

    (*output)[2] = (uint32_t)(group3 % 51);
    group3 /= 51;

    (*output)[1] = (uint32_t)(group3 % 51);
    group3 /= 51;

    (*output)[0] = (uint32_t)(group3 % 51);
    group3 /= 51;
    *output += 4;

    uint64_t group4 = (*(uint64_t *)((*input) + 11)) >> 4;    group4 &= (1ull << 23) - 1;
    (*output)[3] = (uint32_t)(group4 % 51);
    group4 /= 51;

    (*output)[2] = (uint32_t)(group4 % 51);
    group4 /= 51;

    (*output)[1] = (uint32_t)(group4 % 51);
    group4 /= 51;

    (*output)[0] = (uint32_t)(group4 % 51);
    group4 /= 51;
    *output += 4;

    uint64_t group5 = (*(uint64_t *)((*input) + 14)) >> 3;    group5 &= (1ull << 23) - 1;
    (*output)[3] = (uint32_t)(group5 % 51);
    group5 /= 51;

    (*output)[2] = (uint32_t)(group5 % 51);
    group5 /= 51;

    (*output)[1] = (uint32_t)(group5 % 51);
    group5 /= 51;

    (*output)[0] = (uint32_t)(group5 % 51);
    group5 /= 51;
    *output += 4;

    uint64_t group6 = (*(uint64_t *)((*input) + 17)) >> 2;    group6 &= (1ull << 23) - 1;
    (*output)[3] = (uint32_t)(group6 % 51);
    group6 /= 51;

    (*output)[2] = (uint32_t)(group6 % 51);
    group6 /= 51;

    (*output)[1] = (uint32_t)(group6 % 51);
    group6 /= 51;

    (*output)[0] = (uint32_t)(group6 % 51);
    group6 /= 51;
    *output += 4;

    uint64_t group7 = (*(uint64_t *)((*input) + 20)) >> 1;    group7 &= (1ull << 23) - 1;
    (*output)[3] = (uint32_t)(group7 % 51);
    group7 /= 51;

    (*output)[2] = (uint32_t)(group7 % 51);
    group7 /= 51;

    (*output)[1] = (uint32_t)(group7 % 51);
    group7 /= 51;

    (*output)[0] = (uint32_t)(group7 % 51);
    group7 /= 51;
    *output += 4;


    *input += 23;
}

// Unpack 23 bytes into 32 values
void Ultrapack_Decompress52(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 23) - 1;
    (*output)[3] = (uint32_t)(group0 % 52);
    group0 /= 52;

    (*output)[2] = (uint32_t)(group0 % 52);
    group0 /= 52;

    (*output)[1] = (uint32_t)(group0 % 52);
    group0 /= 52;

    (*output)[0] = (uint32_t)(group0 % 52);
    group0 /= 52;
    *output += 4;

    uint64_t group1 = (*(uint64_t *)((*input) + 2)) >> 7;    group1 &= (1ull << 23) - 1;
    (*output)[3] = (uint32_t)(group1 % 52);
    group1 /= 52;

    (*output)[2] = (uint32_t)(group1 % 52);
    group1 /= 52;

    (*output)[1] = (uint32_t)(group1 % 52);
    group1 /= 52;

    (*output)[0] = (uint32_t)(group1 % 52);
    group1 /= 52;
    *output += 4;

    uint64_t group2 = (*(uint64_t *)((*input) + 5)) >> 6;    group2 &= (1ull << 23) - 1;
    (*output)[3] = (uint32_t)(group2 % 52);
    group2 /= 52;

    (*output)[2] = (uint32_t)(group2 % 52);
    group2 /= 52;

    (*output)[1] = (uint32_t)(group2 % 52);
    group2 /= 52;

    (*output)[0] = (uint32_t)(group2 % 52);
    group2 /= 52;
    *output += 4;

    uint64_t group3 = (*(uint64_t *)((*input) + 8)) >> 5;    group3 &= (1ull << 23) - 1;
    (*output)[3] = (uint32_t)(group3 % 52);
    group3 /= 52;

    (*output)[2] = (uint32_t)(group3 % 52);
    group3 /= 52;

    (*output)[1] = (uint32_t)(group3 % 52);
    group3 /= 52;

    (*output)[0] = (uint32_t)(group3 % 52);
    group3 /= 52;
    *output += 4;

    uint64_t group4 = (*(uint64_t *)((*input) + 11)) >> 4;    group4 &= (1ull << 23) - 1;
    (*output)[3] = (uint32_t)(group4 % 52);
    group4 /= 52;

    (*output)[2] = (uint32_t)(group4 % 52);
    group4 /= 52;

    (*output)[1] = (uint32_t)(group4 % 52);
    group4 /= 52;

    (*output)[0] = (uint32_t)(group4 % 52);
    group4 /= 52;
    *output += 4;

    uint64_t group5 = (*(uint64_t *)((*input) + 14)) >> 3;    group5 &= (1ull << 23) - 1;
    (*output)[3] = (uint32_t)(group5 % 52);
    group5 /= 52;

    (*output)[2] = (uint32_t)(group5 % 52);
    group5 /= 52;

    (*output)[1] = (uint32_t)(group5 % 52);
    group5 /= 52;

    (*output)[0] = (uint32_t)(group5 % 52);
    group5 /= 52;
    *output += 4;

    uint64_t group6 = (*(uint64_t *)((*input) + 17)) >> 2;    group6 &= (1ull << 23) - 1;
    (*output)[3] = (uint32_t)(group6 % 52);
    group6 /= 52;

    (*output)[2] = (uint32_t)(group6 % 52);
    group6 /= 52;

    (*output)[1] = (uint32_t)(group6 % 52);
    group6 /= 52;

    (*output)[0] = (uint32_t)(group6 % 52);
    group6 /= 52;
    *output += 4;

    uint64_t group7 = (*(uint64_t *)((*input) + 20)) >> 1;    group7 &= (1ull << 23) - 1;
    (*output)[3] = (uint32_t)(group7 % 52);
    group7 /= 52;

    (*output)[2] = (uint32_t)(group7 % 52);
    group7 /= 52;

    (*output)[1] = (uint32_t)(group7 % 52);
    group7 /= 52;

    (*output)[0] = (uint32_t)(group7 % 52);
    group7 /= 52;
    *output += 4;


    *input += 23;
}

// Unpack 23 bytes into 32 values
void Ultrapack_Decompress53(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 23) - 1;
    (*output)[3] = (uint32_t)(group0 % 53);
    group0 /= 53;

    (*output)[2] = (uint32_t)(group0 % 53);
    group0 /= 53;

    (*output)[1] = (uint32_t)(group0 % 53);
    group0 /= 53;

    (*output)[0] = (uint32_t)(group0 % 53);
    group0 /= 53;
    *output += 4;

    uint64_t group1 = (*(uint64_t *)((*input) + 2)) >> 7;    group1 &= (1ull << 23) - 1;
    (*output)[3] = (uint32_t)(group1 % 53);
    group1 /= 53;

    (*output)[2] = (uint32_t)(group1 % 53);
    group1 /= 53;

    (*output)[1] = (uint32_t)(group1 % 53);
    group1 /= 53;

    (*output)[0] = (uint32_t)(group1 % 53);
    group1 /= 53;
    *output += 4;

    uint64_t group2 = (*(uint64_t *)((*input) + 5)) >> 6;    group2 &= (1ull << 23) - 1;
    (*output)[3] = (uint32_t)(group2 % 53);
    group2 /= 53;

    (*output)[2] = (uint32_t)(group2 % 53);
    group2 /= 53;

    (*output)[1] = (uint32_t)(group2 % 53);
    group2 /= 53;

    (*output)[0] = (uint32_t)(group2 % 53);
    group2 /= 53;
    *output += 4;

    uint64_t group3 = (*(uint64_t *)((*input) + 8)) >> 5;    group3 &= (1ull << 23) - 1;
    (*output)[3] = (uint32_t)(group3 % 53);
    group3 /= 53;

    (*output)[2] = (uint32_t)(group3 % 53);
    group3 /= 53;

    (*output)[1] = (uint32_t)(group3 % 53);
    group3 /= 53;

    (*output)[0] = (uint32_t)(group3 % 53);
    group3 /= 53;
    *output += 4;

    uint64_t group4 = (*(uint64_t *)((*input) + 11)) >> 4;    group4 &= (1ull << 23) - 1;
    (*output)[3] = (uint32_t)(group4 % 53);
    group4 /= 53;

    (*output)[2] = (uint32_t)(group4 % 53);
    group4 /= 53;

    (*output)[1] = (uint32_t)(group4 % 53);
    group4 /= 53;

    (*output)[0] = (uint32_t)(group4 % 53);
    group4 /= 53;
    *output += 4;

    uint64_t group5 = (*(uint64_t *)((*input) + 14)) >> 3;    group5 &= (1ull << 23) - 1;
    (*output)[3] = (uint32_t)(group5 % 53);
    group5 /= 53;

    (*output)[2] = (uint32_t)(group5 % 53);
    group5 /= 53;

    (*output)[1] = (uint32_t)(group5 % 53);
    group5 /= 53;

    (*output)[0] = (uint32_t)(group5 % 53);
    group5 /= 53;
    *output += 4;

    uint64_t group6 = (*(uint64_t *)((*input) + 17)) >> 2;    group6 &= (1ull << 23) - 1;
    (*output)[3] = (uint32_t)(group6 % 53);
    group6 /= 53;

    (*output)[2] = (uint32_t)(group6 % 53);
    group6 /= 53;

    (*output)[1] = (uint32_t)(group6 % 53);
    group6 /= 53;

    (*output)[0] = (uint32_t)(group6 % 53);
    group6 /= 53;
    *output += 4;

    uint64_t group7 = (*(uint64_t *)((*input) + 20)) >> 1;    group7 &= (1ull << 23) - 1;
    (*output)[3] = (uint32_t)(group7 % 53);
    group7 /= 53;

    (*output)[2] = (uint32_t)(group7 % 53);
    group7 /= 53;

    (*output)[1] = (uint32_t)(group7 % 53);
    group7 /= 53;

    (*output)[0] = (uint32_t)(group7 % 53);
    group7 /= 53;
    *output += 4;


    *input += 23;
}

// Unpack 29 bytes into 40 values
void Ultrapack_Decompress54(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 29) - 1;
    (*output)[4] = (uint32_t)(group0 % 54);
    group0 /= 54;

    (*output)[3] = (uint32_t)(group0 % 54);
    group0 /= 54;

    (*output)[2] = (uint32_t)(group0 % 54);
    group0 /= 54;

    (*output)[1] = (uint32_t)(group0 % 54);
    group0 /= 54;

    (*output)[0] = (uint32_t)(group0 % 54);
    group0 /= 54;
    *output += 5;

    uint64_t group1 = (*(uint64_t *)((*input) + 3)) >> 5;    group1 &= (1ull << 29) - 1;
    (*output)[4] = (uint32_t)(group1 % 54);
    group1 /= 54;

    (*output)[3] = (uint32_t)(group1 % 54);
    group1 /= 54;

    (*output)[2] = (uint32_t)(group1 % 54);
    group1 /= 54;

    (*output)[1] = (uint32_t)(group1 % 54);
    group1 /= 54;

    (*output)[0] = (uint32_t)(group1 % 54);
    group1 /= 54;
    *output += 5;

    uint64_t group2 = (*(uint64_t *)((*input) + 7)) >> 2;    group2 &= (1ull << 29) - 1;
    (*output)[4] = (uint32_t)(group2 % 54);
    group2 /= 54;

    (*output)[3] = (uint32_t)(group2 % 54);
    group2 /= 54;

    (*output)[2] = (uint32_t)(group2 % 54);
    group2 /= 54;

    (*output)[1] = (uint32_t)(group2 % 54);
    group2 /= 54;

    (*output)[0] = (uint32_t)(group2 % 54);
    group2 /= 54;
    *output += 5;

    uint64_t group3 = (*(uint64_t *)((*input) + 10)) >> 7;    group3 &= (1ull << 29) - 1;
    (*output)[4] = (uint32_t)(group3 % 54);
    group3 /= 54;

    (*output)[3] = (uint32_t)(group3 % 54);
    group3 /= 54;

    (*output)[2] = (uint32_t)(group3 % 54);
    group3 /= 54;

    (*output)[1] = (uint32_t)(group3 % 54);
    group3 /= 54;

    (*output)[0] = (uint32_t)(group3 % 54);
    group3 /= 54;
    *output += 5;

    uint64_t group4 = (*(uint64_t *)((*input) + 14)) >> 4;    group4 &= (1ull << 29) - 1;
    (*output)[4] = (uint32_t)(group4 % 54);
    group4 /= 54;

    (*output)[3] = (uint32_t)(group4 % 54);
    group4 /= 54;

    (*output)[2] = (uint32_t)(group4 % 54);
    group4 /= 54;

    (*output)[1] = (uint32_t)(group4 % 54);
    group4 /= 54;

    (*output)[0] = (uint32_t)(group4 % 54);
    group4 /= 54;
    *output += 5;

    uint64_t group5 = (*(uint64_t *)((*input) + 18)) >> 1;    group5 &= (1ull << 29) - 1;
    (*output)[4] = (uint32_t)(group5 % 54);
    group5 /= 54;

    (*output)[3] = (uint32_t)(group5 % 54);
    group5 /= 54;

    (*output)[2] = (uint32_t)(group5 % 54);
    group5 /= 54;

    (*output)[1] = (uint32_t)(group5 % 54);
    group5 /= 54;

    (*output)[0] = (uint32_t)(group5 % 54);
    group5 /= 54;
    *output += 5;

    uint64_t group6 = (*(uint64_t *)((*input) + 21)) >> 6;    group6 &= (1ull << 29) - 1;
    (*output)[4] = (uint32_t)(group6 % 54);
    group6 /= 54;

    (*output)[3] = (uint32_t)(group6 % 54);
    group6 /= 54;

    (*output)[2] = (uint32_t)(group6 % 54);
    group6 /= 54;

    (*output)[1] = (uint32_t)(group6 % 54);
    group6 /= 54;

    (*output)[0] = (uint32_t)(group6 % 54);
    group6 /= 54;
    *output += 5;

    uint64_t group7 = (*(uint64_t *)((*input) + 25)) >> 3;    group7 &= (1ull << 29) - 1;
    (*output)[4] = (uint32_t)(group7 % 54);
    group7 /= 54;

    (*output)[3] = (uint32_t)(group7 % 54);
    group7 /= 54;

    (*output)[2] = (uint32_t)(group7 % 54);
    group7 /= 54;

    (*output)[1] = (uint32_t)(group7 % 54);
    group7 /= 54;

    (*output)[0] = (uint32_t)(group7 % 54);
    group7 /= 54;
    *output += 5;


    *input += 29;
}

// Unpack 29 bytes into 40 values
void Ultrapack_Decompress55(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 29) - 1;
    (*output)[4] = (uint32_t)(group0 % 55);
    group0 /= 55;

    (*output)[3] = (uint32_t)(group0 % 55);
    group0 /= 55;

    (*output)[2] = (uint32_t)(group0 % 55);
    group0 /= 55;

    (*output)[1] = (uint32_t)(group0 % 55);
    group0 /= 55;

    (*output)[0] = (uint32_t)(group0 % 55);
    group0 /= 55;
    *output += 5;

    uint64_t group1 = (*(uint64_t *)((*input) + 3)) >> 5;    group1 &= (1ull << 29) - 1;
    (*output)[4] = (uint32_t)(group1 % 55);
    group1 /= 55;

    (*output)[3] = (uint32_t)(group1 % 55);
    group1 /= 55;

    (*output)[2] = (uint32_t)(group1 % 55);
    group1 /= 55;

    (*output)[1] = (uint32_t)(group1 % 55);
    group1 /= 55;

    (*output)[0] = (uint32_t)(group1 % 55);
    group1 /= 55;
    *output += 5;

    uint64_t group2 = (*(uint64_t *)((*input) + 7)) >> 2;    group2 &= (1ull << 29) - 1;
    (*output)[4] = (uint32_t)(group2 % 55);
    group2 /= 55;

    (*output)[3] = (uint32_t)(group2 % 55);
    group2 /= 55;

    (*output)[2] = (uint32_t)(group2 % 55);
    group2 /= 55;

    (*output)[1] = (uint32_t)(group2 % 55);
    group2 /= 55;

    (*output)[0] = (uint32_t)(group2 % 55);
    group2 /= 55;
    *output += 5;

    uint64_t group3 = (*(uint64_t *)((*input) + 10)) >> 7;    group3 &= (1ull << 29) - 1;
    (*output)[4] = (uint32_t)(group3 % 55);
    group3 /= 55;

    (*output)[3] = (uint32_t)(group3 % 55);
    group3 /= 55;

    (*output)[2] = (uint32_t)(group3 % 55);
    group3 /= 55;

    (*output)[1] = (uint32_t)(group3 % 55);
    group3 /= 55;

    (*output)[0] = (uint32_t)(group3 % 55);
    group3 /= 55;
    *output += 5;

    uint64_t group4 = (*(uint64_t *)((*input) + 14)) >> 4;    group4 &= (1ull << 29) - 1;
    (*output)[4] = (uint32_t)(group4 % 55);
    group4 /= 55;

    (*output)[3] = (uint32_t)(group4 % 55);
    group4 /= 55;

    (*output)[2] = (uint32_t)(group4 % 55);
    group4 /= 55;

    (*output)[1] = (uint32_t)(group4 % 55);
    group4 /= 55;

    (*output)[0] = (uint32_t)(group4 % 55);
    group4 /= 55;
    *output += 5;

    uint64_t group5 = (*(uint64_t *)((*input) + 18)) >> 1;    group5 &= (1ull << 29) - 1;
    (*output)[4] = (uint32_t)(group5 % 55);
    group5 /= 55;

    (*output)[3] = (uint32_t)(group5 % 55);
    group5 /= 55;

    (*output)[2] = (uint32_t)(group5 % 55);
    group5 /= 55;

    (*output)[1] = (uint32_t)(group5 % 55);
    group5 /= 55;

    (*output)[0] = (uint32_t)(group5 % 55);
    group5 /= 55;
    *output += 5;

    uint64_t group6 = (*(uint64_t *)((*input) + 21)) >> 6;    group6 &= (1ull << 29) - 1;
    (*output)[4] = (uint32_t)(group6 % 55);
    group6 /= 55;

    (*output)[3] = (uint32_t)(group6 % 55);
    group6 /= 55;

    (*output)[2] = (uint32_t)(group6 % 55);
    group6 /= 55;

    (*output)[1] = (uint32_t)(group6 % 55);
    group6 /= 55;

    (*output)[0] = (uint32_t)(group6 % 55);
    group6 /= 55;
    *output += 5;

    uint64_t group7 = (*(uint64_t *)((*input) + 25)) >> 3;    group7 &= (1ull << 29) - 1;
    (*output)[4] = (uint32_t)(group7 % 55);
    group7 /= 55;

    (*output)[3] = (uint32_t)(group7 % 55);
    group7 /= 55;

    (*output)[2] = (uint32_t)(group7 % 55);
    group7 /= 55;

    (*output)[1] = (uint32_t)(group7 % 55);
    group7 /= 55;

    (*output)[0] = (uint32_t)(group7 % 55);
    group7 /= 55;
    *output += 5;


    *input += 29;
}

// Unpack 35 bytes into 48 values
void Ultrapack_Decompress56(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 35) - 1;
    (*output)[5] = (uint32_t)(group0 % 56);
    group0 /= 56;

    (*output)[4] = (uint32_t)(group0 % 56);
    group0 /= 56;

    (*output)[3] = (uint32_t)(group0 % 56);
    group0 /= 56;

    (*output)[2] = (uint32_t)(group0 % 56);
    group0 /= 56;

    (*output)[1] = (uint32_t)(group0 % 56);
    group0 /= 56;

    (*output)[0] = (uint32_t)(group0 % 56);
    group0 /= 56;
    *output += 6;

    uint64_t group1 = (*(uint64_t *)((*input) + 4)) >> 3;    group1 &= (1ull << 35) - 1;
    (*output)[5] = (uint32_t)(group1 % 56);
    group1 /= 56;

    (*output)[4] = (uint32_t)(group1 % 56);
    group1 /= 56;

    (*output)[3] = (uint32_t)(group1 % 56);
    group1 /= 56;

    (*output)[2] = (uint32_t)(group1 % 56);
    group1 /= 56;

    (*output)[1] = (uint32_t)(group1 % 56);
    group1 /= 56;

    (*output)[0] = (uint32_t)(group1 % 56);
    group1 /= 56;
    *output += 6;

    uint64_t group2 = (*(uint64_t *)((*input) + 8)) >> 6;    group2 &= (1ull << 35) - 1;
    (*output)[5] = (uint32_t)(group2 % 56);
    group2 /= 56;

    (*output)[4] = (uint32_t)(group2 % 56);
    group2 /= 56;

    (*output)[3] = (uint32_t)(group2 % 56);
    group2 /= 56;

    (*output)[2] = (uint32_t)(group2 % 56);
    group2 /= 56;

    (*output)[1] = (uint32_t)(group2 % 56);
    group2 /= 56;

    (*output)[0] = (uint32_t)(group2 % 56);
    group2 /= 56;
    *output += 6;

    uint64_t group3 = (*(uint64_t *)((*input) + 13)) >> 1;    group3 &= (1ull << 35) - 1;
    (*output)[5] = (uint32_t)(group3 % 56);
    group3 /= 56;

    (*output)[4] = (uint32_t)(group3 % 56);
    group3 /= 56;

    (*output)[3] = (uint32_t)(group3 % 56);
    group3 /= 56;

    (*output)[2] = (uint32_t)(group3 % 56);
    group3 /= 56;

    (*output)[1] = (uint32_t)(group3 % 56);
    group3 /= 56;

    (*output)[0] = (uint32_t)(group3 % 56);
    group3 /= 56;
    *output += 6;

    uint64_t group4 = (*(uint64_t *)((*input) + 17)) >> 4;    group4 &= (1ull << 35) - 1;
    (*output)[5] = (uint32_t)(group4 % 56);
    group4 /= 56;

    (*output)[4] = (uint32_t)(group4 % 56);
    group4 /= 56;

    (*output)[3] = (uint32_t)(group4 % 56);
    group4 /= 56;

    (*output)[2] = (uint32_t)(group4 % 56);
    group4 /= 56;

    (*output)[1] = (uint32_t)(group4 % 56);
    group4 /= 56;

    (*output)[0] = (uint32_t)(group4 % 56);
    group4 /= 56;
    *output += 6;

    uint64_t group5 = (*(uint64_t *)((*input) + 21)) >> 7;    group5 &= (1ull << 35) - 1;
    (*output)[5] = (uint32_t)(group5 % 56);
    group5 /= 56;

    (*output)[4] = (uint32_t)(group5 % 56);
    group5 /= 56;

    (*output)[3] = (uint32_t)(group5 % 56);
    group5 /= 56;

    (*output)[2] = (uint32_t)(group5 % 56);
    group5 /= 56;

    (*output)[1] = (uint32_t)(group5 % 56);
    group5 /= 56;

    (*output)[0] = (uint32_t)(group5 % 56);
    group5 /= 56;
    *output += 6;

    uint64_t group6 = (*(uint64_t *)((*input) + 26)) >> 2;    group6 &= (1ull << 35) - 1;
    (*output)[5] = (uint32_t)(group6 % 56);
    group6 /= 56;

    (*output)[4] = (uint32_t)(group6 % 56);
    group6 /= 56;

    (*output)[3] = (uint32_t)(group6 % 56);
    group6 /= 56;

    (*output)[2] = (uint32_t)(group6 % 56);
    group6 /= 56;

    (*output)[1] = (uint32_t)(group6 % 56);
    group6 /= 56;

    (*output)[0] = (uint32_t)(group6 % 56);
    group6 /= 56;
    *output += 6;

    uint64_t group7 = (*(uint64_t *)((*input) + 30)) >> 5;    group7 &= (1ull << 35) - 1;
    (*output)[5] = (uint32_t)(group7 % 56);
    group7 /= 56;

    (*output)[4] = (uint32_t)(group7 % 56);
    group7 /= 56;

    (*output)[3] = (uint32_t)(group7 % 56);
    group7 /= 56;

    (*output)[2] = (uint32_t)(group7 % 56);
    group7 /= 56;

    (*output)[1] = (uint32_t)(group7 % 56);
    group7 /= 56;

    (*output)[0] = (uint32_t)(group7 % 56);
    group7 /= 56;
    *output += 6;


    *input += 35;
}

// Unpack 35 bytes into 48 values
void Ultrapack_Decompress57(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 35) - 1;
    (*output)[5] = (uint32_t)(group0 % 57);
    group0 /= 57;

    (*output)[4] = (uint32_t)(group0 % 57);
    group0 /= 57;

    (*output)[3] = (uint32_t)(group0 % 57);
    group0 /= 57;

    (*output)[2] = (uint32_t)(group0 % 57);
    group0 /= 57;

    (*output)[1] = (uint32_t)(group0 % 57);
    group0 /= 57;

    (*output)[0] = (uint32_t)(group0 % 57);
    group0 /= 57;
    *output += 6;

    uint64_t group1 = (*(uint64_t *)((*input) + 4)) >> 3;    group1 &= (1ull << 35) - 1;
    (*output)[5] = (uint32_t)(group1 % 57);
    group1 /= 57;

    (*output)[4] = (uint32_t)(group1 % 57);
    group1 /= 57;

    (*output)[3] = (uint32_t)(group1 % 57);
    group1 /= 57;

    (*output)[2] = (uint32_t)(group1 % 57);
    group1 /= 57;

    (*output)[1] = (uint32_t)(group1 % 57);
    group1 /= 57;

    (*output)[0] = (uint32_t)(group1 % 57);
    group1 /= 57;
    *output += 6;

    uint64_t group2 = (*(uint64_t *)((*input) + 8)) >> 6;    group2 &= (1ull << 35) - 1;
    (*output)[5] = (uint32_t)(group2 % 57);
    group2 /= 57;

    (*output)[4] = (uint32_t)(group2 % 57);
    group2 /= 57;

    (*output)[3] = (uint32_t)(group2 % 57);
    group2 /= 57;

    (*output)[2] = (uint32_t)(group2 % 57);
    group2 /= 57;

    (*output)[1] = (uint32_t)(group2 % 57);
    group2 /= 57;

    (*output)[0] = (uint32_t)(group2 % 57);
    group2 /= 57;
    *output += 6;

    uint64_t group3 = (*(uint64_t *)((*input) + 13)) >> 1;    group3 &= (1ull << 35) - 1;
    (*output)[5] = (uint32_t)(group3 % 57);
    group3 /= 57;

    (*output)[4] = (uint32_t)(group3 % 57);
    group3 /= 57;

    (*output)[3] = (uint32_t)(group3 % 57);
    group3 /= 57;

    (*output)[2] = (uint32_t)(group3 % 57);
    group3 /= 57;

    (*output)[1] = (uint32_t)(group3 % 57);
    group3 /= 57;

    (*output)[0] = (uint32_t)(group3 % 57);
    group3 /= 57;
    *output += 6;

    uint64_t group4 = (*(uint64_t *)((*input) + 17)) >> 4;    group4 &= (1ull << 35) - 1;
    (*output)[5] = (uint32_t)(group4 % 57);
    group4 /= 57;

    (*output)[4] = (uint32_t)(group4 % 57);
    group4 /= 57;

    (*output)[3] = (uint32_t)(group4 % 57);
    group4 /= 57;

    (*output)[2] = (uint32_t)(group4 % 57);
    group4 /= 57;

    (*output)[1] = (uint32_t)(group4 % 57);
    group4 /= 57;

    (*output)[0] = (uint32_t)(group4 % 57);
    group4 /= 57;
    *output += 6;

    uint64_t group5 = (*(uint64_t *)((*input) + 21)) >> 7;    group5 &= (1ull << 35) - 1;
    (*output)[5] = (uint32_t)(group5 % 57);
    group5 /= 57;

    (*output)[4] = (uint32_t)(group5 % 57);
    group5 /= 57;

    (*output)[3] = (uint32_t)(group5 % 57);
    group5 /= 57;

    (*output)[2] = (uint32_t)(group5 % 57);
    group5 /= 57;

    (*output)[1] = (uint32_t)(group5 % 57);
    group5 /= 57;

    (*output)[0] = (uint32_t)(group5 % 57);
    group5 /= 57;
    *output += 6;

    uint64_t group6 = (*(uint64_t *)((*input) + 26)) >> 2;    group6 &= (1ull << 35) - 1;
    (*output)[5] = (uint32_t)(group6 % 57);
    group6 /= 57;

    (*output)[4] = (uint32_t)(group6 % 57);
    group6 /= 57;

    (*output)[3] = (uint32_t)(group6 % 57);
    group6 /= 57;

    (*output)[2] = (uint32_t)(group6 % 57);
    group6 /= 57;

    (*output)[1] = (uint32_t)(group6 % 57);
    group6 /= 57;

    (*output)[0] = (uint32_t)(group6 % 57);
    group6 /= 57;
    *output += 6;

    uint64_t group7 = (*(uint64_t *)((*input) + 30)) >> 5;    group7 &= (1ull << 35) - 1;
    (*output)[5] = (uint32_t)(group7 % 57);
    group7 /= 57;

    (*output)[4] = (uint32_t)(group7 % 57);
    group7 /= 57;

    (*output)[3] = (uint32_t)(group7 % 57);
    group7 /= 57;

    (*output)[2] = (uint32_t)(group7 % 57);
    group7 /= 57;

    (*output)[1] = (uint32_t)(group7 % 57);
    group7 /= 57;

    (*output)[0] = (uint32_t)(group7 % 57);
    group7 /= 57;
    *output += 6;


    *input += 35;
}

// Unpack 47 bytes into 64 values
void Ultrapack_Decompress58(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 47) - 1;
    (*output)[7] = (uint32_t)(group0 % 58);
    group0 /= 58;

    (*output)[6] = (uint32_t)(group0 % 58);
    group0 /= 58;

    (*output)[5] = (uint32_t)(group0 % 58);
    group0 /= 58;

    (*output)[4] = (uint32_t)(group0 % 58);
    group0 /= 58;

    (*output)[3] = (uint32_t)(group0 % 58);
    group0 /= 58;

    (*output)[2] = (uint32_t)(group0 % 58);
    group0 /= 58;

    (*output)[1] = (uint32_t)(group0 % 58);
    group0 /= 58;

    (*output)[0] = (uint32_t)(group0 % 58);
    group0 /= 58;
    *output += 8;

    uint64_t group1 = (*(uint64_t *)((*input) + 5)) >> 7;    group1 &= (1ull << 47) - 1;
    (*output)[7] = (uint32_t)(group1 % 58);
    group1 /= 58;

    (*output)[6] = (uint32_t)(group1 % 58);
    group1 /= 58;

    (*output)[5] = (uint32_t)(group1 % 58);
    group1 /= 58;

    (*output)[4] = (uint32_t)(group1 % 58);
    group1 /= 58;

    (*output)[3] = (uint32_t)(group1 % 58);
    group1 /= 58;

    (*output)[2] = (uint32_t)(group1 % 58);
    group1 /= 58;

    (*output)[1] = (uint32_t)(group1 % 58);
    group1 /= 58;

    (*output)[0] = (uint32_t)(group1 % 58);
    group1 /= 58;
    *output += 8;

    uint64_t group2 = (*(uint64_t *)((*input) + 11)) >> 6;    group2 &= (1ull << 47) - 1;
    (*output)[7] = (uint32_t)(group2 % 58);
    group2 /= 58;

    (*output)[6] = (uint32_t)(group2 % 58);
    group2 /= 58;

    (*output)[5] = (uint32_t)(group2 % 58);
    group2 /= 58;

    (*output)[4] = (uint32_t)(group2 % 58);
    group2 /= 58;

    (*output)[3] = (uint32_t)(group2 % 58);
    group2 /= 58;

    (*output)[2] = (uint32_t)(group2 % 58);
    group2 /= 58;

    (*output)[1] = (uint32_t)(group2 % 58);
    group2 /= 58;

    (*output)[0] = (uint32_t)(group2 % 58);
    group2 /= 58;
    *output += 8;

    uint64_t group3 = (*(uint64_t *)((*input) + 17)) >> 5;    group3 &= (1ull << 47) - 1;
    (*output)[7] = (uint32_t)(group3 % 58);
    group3 /= 58;

    (*output)[6] = (uint32_t)(group3 % 58);
    group3 /= 58;

    (*output)[5] = (uint32_t)(group3 % 58);
    group3 /= 58;

    (*output)[4] = (uint32_t)(group3 % 58);
    group3 /= 58;

    (*output)[3] = (uint32_t)(group3 % 58);
    group3 /= 58;

    (*output)[2] = (uint32_t)(group3 % 58);
    group3 /= 58;

    (*output)[1] = (uint32_t)(group3 % 58);
    group3 /= 58;

    (*output)[0] = (uint32_t)(group3 % 58);
    group3 /= 58;
    *output += 8;

    uint64_t group4 = (*(uint64_t *)((*input) + 23)) >> 4;    group4 &= (1ull << 47) - 1;
    (*output)[7] = (uint32_t)(group4 % 58);
    group4 /= 58;

    (*output)[6] = (uint32_t)(group4 % 58);
    group4 /= 58;

    (*output)[5] = (uint32_t)(group4 % 58);
    group4 /= 58;

    (*output)[4] = (uint32_t)(group4 % 58);
    group4 /= 58;

    (*output)[3] = (uint32_t)(group4 % 58);
    group4 /= 58;

    (*output)[2] = (uint32_t)(group4 % 58);
    group4 /= 58;

    (*output)[1] = (uint32_t)(group4 % 58);
    group4 /= 58;

    (*output)[0] = (uint32_t)(group4 % 58);
    group4 /= 58;
    *output += 8;

    uint64_t group5 = (*(uint64_t *)((*input) + 29)) >> 3;    group5 &= (1ull << 47) - 1;
    (*output)[7] = (uint32_t)(group5 % 58);
    group5 /= 58;

    (*output)[6] = (uint32_t)(group5 % 58);
    group5 /= 58;

    (*output)[5] = (uint32_t)(group5 % 58);
    group5 /= 58;

    (*output)[4] = (uint32_t)(group5 % 58);
    group5 /= 58;

    (*output)[3] = (uint32_t)(group5 % 58);
    group5 /= 58;

    (*output)[2] = (uint32_t)(group5 % 58);
    group5 /= 58;

    (*output)[1] = (uint32_t)(group5 % 58);
    group5 /= 58;

    (*output)[0] = (uint32_t)(group5 % 58);
    group5 /= 58;
    *output += 8;

    uint64_t group6 = (*(uint64_t *)((*input) + 35)) >> 2;    group6 &= (1ull << 47) - 1;
    (*output)[7] = (uint32_t)(group6 % 58);
    group6 /= 58;

    (*output)[6] = (uint32_t)(group6 % 58);
    group6 /= 58;

    (*output)[5] = (uint32_t)(group6 % 58);
    group6 /= 58;

    (*output)[4] = (uint32_t)(group6 % 58);
    group6 /= 58;

    (*output)[3] = (uint32_t)(group6 % 58);
    group6 /= 58;

    (*output)[2] = (uint32_t)(group6 % 58);
    group6 /= 58;

    (*output)[1] = (uint32_t)(group6 % 58);
    group6 /= 58;

    (*output)[0] = (uint32_t)(group6 % 58);
    group6 /= 58;
    *output += 8;

    uint64_t group7 = (*(uint64_t *)((*input) + 41)) >> 1;    group7 &= (1ull << 47) - 1;
    (*output)[7] = (uint32_t)(group7 % 58);
    group7 /= 58;

    (*output)[6] = (uint32_t)(group7 % 58);
    group7 /= 58;

    (*output)[5] = (uint32_t)(group7 % 58);
    group7 /= 58;

    (*output)[4] = (uint32_t)(group7 % 58);
    group7 /= 58;

    (*output)[3] = (uint32_t)(group7 % 58);
    group7 /= 58;

    (*output)[2] = (uint32_t)(group7 % 58);
    group7 /= 58;

    (*output)[1] = (uint32_t)(group7 % 58);
    group7 /= 58;

    (*output)[0] = (uint32_t)(group7 % 58);
    group7 /= 58;
    *output += 8;


    *input += 47;
}

// Unpack 53 bytes into 72 values
void Ultrapack_Decompress59(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 53) - 1;
    (*output)[8] = (uint32_t)(group0 % 59);
    group0 /= 59;

    (*output)[7] = (uint32_t)(group0 % 59);
    group0 /= 59;

    (*output)[6] = (uint32_t)(group0 % 59);
    group0 /= 59;

    (*output)[5] = (uint32_t)(group0 % 59);
    group0 /= 59;

    (*output)[4] = (uint32_t)(group0 % 59);
    group0 /= 59;

    (*output)[3] = (uint32_t)(group0 % 59);
    group0 /= 59;

    (*output)[2] = (uint32_t)(group0 % 59);
    group0 /= 59;

    (*output)[1] = (uint32_t)(group0 % 59);
    group0 /= 59;

    (*output)[0] = (uint32_t)(group0 % 59);
    group0 /= 59;
    *output += 9;

    uint64_t group1 = (*(uint64_t *)((*input) + 6)) >> 5;    group1 &= (1ull << 53) - 1;
    (*output)[8] = (uint32_t)(group1 % 59);
    group1 /= 59;

    (*output)[7] = (uint32_t)(group1 % 59);
    group1 /= 59;

    (*output)[6] = (uint32_t)(group1 % 59);
    group1 /= 59;

    (*output)[5] = (uint32_t)(group1 % 59);
    group1 /= 59;

    (*output)[4] = (uint32_t)(group1 % 59);
    group1 /= 59;

    (*output)[3] = (uint32_t)(group1 % 59);
    group1 /= 59;

    (*output)[2] = (uint32_t)(group1 % 59);
    group1 /= 59;

    (*output)[1] = (uint32_t)(group1 % 59);
    group1 /= 59;

    (*output)[0] = (uint32_t)(group1 % 59);
    group1 /= 59;
    *output += 9;

    uint64_t group2 = (*(uint64_t *)((*input) + 13)) >> 2;    group2 &= (1ull << 53) - 1;
    (*output)[8] = (uint32_t)(group2 % 59);
    group2 /= 59;

    (*output)[7] = (uint32_t)(group2 % 59);
    group2 /= 59;

    (*output)[6] = (uint32_t)(group2 % 59);
    group2 /= 59;

    (*output)[5] = (uint32_t)(group2 % 59);
    group2 /= 59;

    (*output)[4] = (uint32_t)(group2 % 59);
    group2 /= 59;

    (*output)[3] = (uint32_t)(group2 % 59);
    group2 /= 59;

    (*output)[2] = (uint32_t)(group2 % 59);
    group2 /= 59;

    (*output)[1] = (uint32_t)(group2 % 59);
    group2 /= 59;

    (*output)[0] = (uint32_t)(group2 % 59);
    group2 /= 59;
    *output += 9;

    uint64_t group3 = (*(uint64_t *)((*input) + 19)) >> 7;    group3 &= (1ull << 53) - 1;
    (*output)[8] = (uint32_t)(group3 % 59);
    group3 /= 59;

    (*output)[7] = (uint32_t)(group3 % 59);
    group3 /= 59;

    (*output)[6] = (uint32_t)(group3 % 59);
    group3 /= 59;

    (*output)[5] = (uint32_t)(group3 % 59);
    group3 /= 59;

    (*output)[4] = (uint32_t)(group3 % 59);
    group3 /= 59;

    (*output)[3] = (uint32_t)(group3 % 59);
    group3 /= 59;

    (*output)[2] = (uint32_t)(group3 % 59);
    group3 /= 59;

    (*output)[1] = (uint32_t)(group3 % 59);
    group3 /= 59;

    (*output)[0] = (uint32_t)(group3 % 59);
    group3 /= 59;
    *output += 9;

    uint64_t group4 = (*(uint64_t *)((*input) + 26)) >> 4;    group4 &= (1ull << 53) - 1;
    (*output)[8] = (uint32_t)(group4 % 59);
    group4 /= 59;

    (*output)[7] = (uint32_t)(group4 % 59);
    group4 /= 59;

    (*output)[6] = (uint32_t)(group4 % 59);
    group4 /= 59;

    (*output)[5] = (uint32_t)(group4 % 59);
    group4 /= 59;

    (*output)[4] = (uint32_t)(group4 % 59);
    group4 /= 59;

    (*output)[3] = (uint32_t)(group4 % 59);
    group4 /= 59;

    (*output)[2] = (uint32_t)(group4 % 59);
    group4 /= 59;

    (*output)[1] = (uint32_t)(group4 % 59);
    group4 /= 59;

    (*output)[0] = (uint32_t)(group4 % 59);
    group4 /= 59;
    *output += 9;

    uint64_t group5 = (*(uint64_t *)((*input) + 33)) >> 1;    group5 &= (1ull << 53) - 1;
    (*output)[8] = (uint32_t)(group5 % 59);
    group5 /= 59;

    (*output)[7] = (uint32_t)(group5 % 59);
    group5 /= 59;

    (*output)[6] = (uint32_t)(group5 % 59);
    group5 /= 59;

    (*output)[5] = (uint32_t)(group5 % 59);
    group5 /= 59;

    (*output)[4] = (uint32_t)(group5 % 59);
    group5 /= 59;

    (*output)[3] = (uint32_t)(group5 % 59);
    group5 /= 59;

    (*output)[2] = (uint32_t)(group5 % 59);
    group5 /= 59;

    (*output)[1] = (uint32_t)(group5 % 59);
    group5 /= 59;

    (*output)[0] = (uint32_t)(group5 % 59);
    group5 /= 59;
    *output += 9;

    uint64_t group6 = (*(uint64_t *)((*input) + 39)) >> 6;    group6 &= (1ull << 53) - 1;
    (*output)[8] = (uint32_t)(group6 % 59);
    group6 /= 59;

    (*output)[7] = (uint32_t)(group6 % 59);
    group6 /= 59;

    (*output)[6] = (uint32_t)(group6 % 59);
    group6 /= 59;

    (*output)[5] = (uint32_t)(group6 % 59);
    group6 /= 59;

    (*output)[4] = (uint32_t)(group6 % 59);
    group6 /= 59;

    (*output)[3] = (uint32_t)(group6 % 59);
    group6 /= 59;

    (*output)[2] = (uint32_t)(group6 % 59);
    group6 /= 59;

    (*output)[1] = (uint32_t)(group6 % 59);
    group6 /= 59;

    (*output)[0] = (uint32_t)(group6 % 59);
    group6 /= 59;
    *output += 9;

    uint64_t group7 = (*(uint64_t *)((*input) + 46)) >> 3;    group7 &= (1ull << 53) - 1;
    (*output)[8] = (uint32_t)(group7 % 59);
    group7 /= 59;

    (*output)[7] = (uint32_t)(group7 % 59);
    group7 /= 59;

    (*output)[6] = (uint32_t)(group7 % 59);
    group7 /= 59;

    (*output)[5] = (uint32_t)(group7 % 59);
    group7 /= 59;

    (*output)[4] = (uint32_t)(group7 % 59);
    group7 /= 59;

    (*output)[3] = (uint32_t)(group7 % 59);
    group7 /= 59;

    (*output)[2] = (uint32_t)(group7 % 59);
    group7 /= 59;

    (*output)[1] = (uint32_t)(group7 % 59);
    group7 /= 59;

    (*output)[0] = (uint32_t)(group7 % 59);
    group7 /= 59;
    *output += 9;


    *input += 53;
}

// Unpack 3 bytes into 4 values
void Ultrapack_Decompress60(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 6) - 1;
    (*output)[0] = (uint32_t)(group0 % 60);
    group0 /= 60;
    *output += 1;

    uint64_t group1 = (*(uint64_t *)((*input) + 0)) >> 6;    group1 &= (1ull << 6) - 1;
    (*output)[0] = (uint32_t)(group1 % 60);
    group1 /= 60;
    *output += 1;

    uint64_t group2 = (*(uint64_t *)((*input) + 1)) >> 4;    group2 &= (1ull << 6) - 1;
    (*output)[0] = (uint32_t)(group2 % 60);
    group2 /= 60;
    *output += 1;

    uint64_t group3 = (*(uint64_t *)((*input) + 2)) >> 2;    group3 &= (1ull << 6) - 1;
    (*output)[0] = (uint32_t)(group3 % 60);
    group3 /= 60;
    *output += 1;


    *input += 3;
}

// Unpack 3 bytes into 4 values
void Ultrapack_Decompress61(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 6) - 1;
    (*output)[0] = (uint32_t)(group0 % 61);
    group0 /= 61;
    *output += 1;

    uint64_t group1 = (*(uint64_t *)((*input) + 0)) >> 6;    group1 &= (1ull << 6) - 1;
    (*output)[0] = (uint32_t)(group1 % 61);
    group1 /= 61;
    *output += 1;

    uint64_t group2 = (*(uint64_t *)((*input) + 1)) >> 4;    group2 &= (1ull << 6) - 1;
    (*output)[0] = (uint32_t)(group2 % 61);
    group2 /= 61;
    *output += 1;

    uint64_t group3 = (*(uint64_t *)((*input) + 2)) >> 2;    group3 &= (1ull << 6) - 1;
    (*output)[0] = (uint32_t)(group3 % 61);
    group3 /= 61;
    *output += 1;


    *input += 3;
}

// Unpack 3 bytes into 4 values
void Ultrapack_Decompress62(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 6) - 1;
    (*output)[0] = (uint32_t)(group0 % 62);
    group0 /= 62;
    *output += 1;

    uint64_t group1 = (*(uint64_t *)((*input) + 0)) >> 6;    group1 &= (1ull << 6) - 1;
    (*output)[0] = (uint32_t)(group1 % 62);
    group1 /= 62;
    *output += 1;

    uint64_t group2 = (*(uint64_t *)((*input) + 1)) >> 4;    group2 &= (1ull << 6) - 1;
    (*output)[0] = (uint32_t)(group2 % 62);
    group2 /= 62;
    *output += 1;

    uint64_t group3 = (*(uint64_t *)((*input) + 2)) >> 2;    group3 &= (1ull << 6) - 1;
    (*output)[0] = (uint32_t)(group3 % 62);
    group3 /= 62;
    *output += 1;


    *input += 3;
}

// Unpack 3 bytes into 4 values
void Ultrapack_Decompress63(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 6) - 1;
    (*output)[0] = (uint32_t)(group0 % 63);
    group0 /= 63;
    *output += 1;

    uint64_t group1 = (*(uint64_t *)((*input) + 0)) >> 6;    group1 &= (1ull << 6) - 1;
    (*output)[0] = (uint32_t)(group1 % 63);
    group1 /= 63;
    *output += 1;

    uint64_t group2 = (*(uint64_t *)((*input) + 1)) >> 4;    group2 &= (1ull << 6) - 1;
    (*output)[0] = (uint32_t)(group2 % 63);
    group2 /= 63;
    *output += 1;

    uint64_t group3 = (*(uint64_t *)((*input) + 2)) >> 2;    group3 &= (1ull << 6) - 1;
    (*output)[0] = (uint32_t)(group3 % 63);
    group3 /= 63;
    *output += 1;


    *input += 3;
}

// Unpack 3 bytes into 4 values
void Ultrapack_Decompress64(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 6) - 1;
    (*output)[0] = (uint32_t)(group0 % 64);
    group0 /= 64;
    *output += 1;

    uint64_t group1 = (*(uint64_t *)((*input) + 0)) >> 6;    group1 &= (1ull << 6) - 1;
    (*output)[0] = (uint32_t)(group1 % 64);
    group1 /= 64;
    *output += 1;

    uint64_t group2 = (*(uint64_t *)((*input) + 1)) >> 4;    group2 &= (1ull << 6) - 1;
    (*output)[0] = (uint32_t)(group2 % 64);
    group2 /= 64;
    *output += 1;

    uint64_t group3 = (*(uint64_t *)((*input) + 2)) >> 2;    group3 &= (1ull << 6) - 1;
    (*output)[0] = (uint32_t)(group3 % 64);
    group3 /= 64;
    *output += 1;


    *input += 3;
}

// Unpack 55 bytes into 72 values
void Ultrapack_Decompress65(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 55) - 1;
    (*output)[8] = (uint32_t)(group0 % 65);
    group0 /= 65;

    (*output)[7] = (uint32_t)(group0 % 65);
    group0 /= 65;

    (*output)[6] = (uint32_t)(group0 % 65);
    group0 /= 65;

    (*output)[5] = (uint32_t)(group0 % 65);
    group0 /= 65;

    (*output)[4] = (uint32_t)(group0 % 65);
    group0 /= 65;

    (*output)[3] = (uint32_t)(group0 % 65);
    group0 /= 65;

    (*output)[2] = (uint32_t)(group0 % 65);
    group0 /= 65;

    (*output)[1] = (uint32_t)(group0 % 65);
    group0 /= 65;

    (*output)[0] = (uint32_t)(group0 % 65);
    group0 /= 65;
    *output += 9;

    uint64_t group1 = (*(uint64_t *)((*input) + 6)) >> 7;    group1 &= (1ull << 55) - 1;
    (*output)[8] = (uint32_t)(group1 % 65);
    group1 /= 65;

    (*output)[7] = (uint32_t)(group1 % 65);
    group1 /= 65;

    (*output)[6] = (uint32_t)(group1 % 65);
    group1 /= 65;

    (*output)[5] = (uint32_t)(group1 % 65);
    group1 /= 65;

    (*output)[4] = (uint32_t)(group1 % 65);
    group1 /= 65;

    (*output)[3] = (uint32_t)(group1 % 65);
    group1 /= 65;

    (*output)[2] = (uint32_t)(group1 % 65);
    group1 /= 65;

    (*output)[1] = (uint32_t)(group1 % 65);
    group1 /= 65;

    (*output)[0] = (uint32_t)(group1 % 65);
    group1 /= 65;
    *output += 9;

    uint64_t group2 = (*(uint64_t *)((*input) + 13)) >> 6;    group2 &= (1ull << 55) - 1;
    (*output)[8] = (uint32_t)(group2 % 65);
    group2 /= 65;

    (*output)[7] = (uint32_t)(group2 % 65);
    group2 /= 65;

    (*output)[6] = (uint32_t)(group2 % 65);
    group2 /= 65;

    (*output)[5] = (uint32_t)(group2 % 65);
    group2 /= 65;

    (*output)[4] = (uint32_t)(group2 % 65);
    group2 /= 65;

    (*output)[3] = (uint32_t)(group2 % 65);
    group2 /= 65;

    (*output)[2] = (uint32_t)(group2 % 65);
    group2 /= 65;

    (*output)[1] = (uint32_t)(group2 % 65);
    group2 /= 65;

    (*output)[0] = (uint32_t)(group2 % 65);
    group2 /= 65;
    *output += 9;

    uint64_t group3 = (*(uint64_t *)((*input) + 20)) >> 5;    group3 &= (1ull << 55) - 1;
    (*output)[8] = (uint32_t)(group3 % 65);
    group3 /= 65;

    (*output)[7] = (uint32_t)(group3 % 65);
    group3 /= 65;

    (*output)[6] = (uint32_t)(group3 % 65);
    group3 /= 65;

    (*output)[5] = (uint32_t)(group3 % 65);
    group3 /= 65;

    (*output)[4] = (uint32_t)(group3 % 65);
    group3 /= 65;

    (*output)[3] = (uint32_t)(group3 % 65);
    group3 /= 65;

    (*output)[2] = (uint32_t)(group3 % 65);
    group3 /= 65;

    (*output)[1] = (uint32_t)(group3 % 65);
    group3 /= 65;

    (*output)[0] = (uint32_t)(group3 % 65);
    group3 /= 65;
    *output += 9;

    uint64_t group4 = (*(uint64_t *)((*input) + 27)) >> 4;    group4 &= (1ull << 55) - 1;
    (*output)[8] = (uint32_t)(group4 % 65);
    group4 /= 65;

    (*output)[7] = (uint32_t)(group4 % 65);
    group4 /= 65;

    (*output)[6] = (uint32_t)(group4 % 65);
    group4 /= 65;

    (*output)[5] = (uint32_t)(group4 % 65);
    group4 /= 65;

    (*output)[4] = (uint32_t)(group4 % 65);
    group4 /= 65;

    (*output)[3] = (uint32_t)(group4 % 65);
    group4 /= 65;

    (*output)[2] = (uint32_t)(group4 % 65);
    group4 /= 65;

    (*output)[1] = (uint32_t)(group4 % 65);
    group4 /= 65;

    (*output)[0] = (uint32_t)(group4 % 65);
    group4 /= 65;
    *output += 9;

    uint64_t group5 = (*(uint64_t *)((*input) + 34)) >> 3;    group5 &= (1ull << 55) - 1;
    (*output)[8] = (uint32_t)(group5 % 65);
    group5 /= 65;

    (*output)[7] = (uint32_t)(group5 % 65);
    group5 /= 65;

    (*output)[6] = (uint32_t)(group5 % 65);
    group5 /= 65;

    (*output)[5] = (uint32_t)(group5 % 65);
    group5 /= 65;

    (*output)[4] = (uint32_t)(group5 % 65);
    group5 /= 65;

    (*output)[3] = (uint32_t)(group5 % 65);
    group5 /= 65;

    (*output)[2] = (uint32_t)(group5 % 65);
    group5 /= 65;

    (*output)[1] = (uint32_t)(group5 % 65);
    group5 /= 65;

    (*output)[0] = (uint32_t)(group5 % 65);
    group5 /= 65;
    *output += 9;

    uint64_t group6 = (*(uint64_t *)((*input) + 41)) >> 2;    group6 &= (1ull << 55) - 1;
    (*output)[8] = (uint32_t)(group6 % 65);
    group6 /= 65;

    (*output)[7] = (uint32_t)(group6 % 65);
    group6 /= 65;

    (*output)[6] = (uint32_t)(group6 % 65);
    group6 /= 65;

    (*output)[5] = (uint32_t)(group6 % 65);
    group6 /= 65;

    (*output)[4] = (uint32_t)(group6 % 65);
    group6 /= 65;

    (*output)[3] = (uint32_t)(group6 % 65);
    group6 /= 65;

    (*output)[2] = (uint32_t)(group6 % 65);
    group6 /= 65;

    (*output)[1] = (uint32_t)(group6 % 65);
    group6 /= 65;

    (*output)[0] = (uint32_t)(group6 % 65);
    group6 /= 65;
    *output += 9;

    uint64_t group7 = (*(uint64_t *)((*input) + 48)) >> 1;    group7 &= (1ull << 55) - 1;
    (*output)[8] = (uint32_t)(group7 % 65);
    group7 /= 65;

    (*output)[7] = (uint32_t)(group7 % 65);
    group7 /= 65;

    (*output)[6] = (uint32_t)(group7 % 65);
    group7 /= 65;

    (*output)[5] = (uint32_t)(group7 % 65);
    group7 /= 65;

    (*output)[4] = (uint32_t)(group7 % 65);
    group7 /= 65;

    (*output)[3] = (uint32_t)(group7 % 65);
    group7 /= 65;

    (*output)[2] = (uint32_t)(group7 % 65);
    group7 /= 65;

    (*output)[1] = (uint32_t)(group7 % 65);
    group7 /= 65;

    (*output)[0] = (uint32_t)(group7 % 65);
    group7 /= 65;
    *output += 9;


    *input += 55;
}

// Unpack 55 bytes into 72 values
void Ultrapack_Decompress66(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 55) - 1;
    (*output)[8] = (uint32_t)(group0 % 66);
    group0 /= 66;

    (*output)[7] = (uint32_t)(group0 % 66);
    group0 /= 66;

    (*output)[6] = (uint32_t)(group0 % 66);
    group0 /= 66;

    (*output)[5] = (uint32_t)(group0 % 66);
    group0 /= 66;

    (*output)[4] = (uint32_t)(group0 % 66);
    group0 /= 66;

    (*output)[3] = (uint32_t)(group0 % 66);
    group0 /= 66;

    (*output)[2] = (uint32_t)(group0 % 66);
    group0 /= 66;

    (*output)[1] = (uint32_t)(group0 % 66);
    group0 /= 66;

    (*output)[0] = (uint32_t)(group0 % 66);
    group0 /= 66;
    *output += 9;

    uint64_t group1 = (*(uint64_t *)((*input) + 6)) >> 7;    group1 &= (1ull << 55) - 1;
    (*output)[8] = (uint32_t)(group1 % 66);
    group1 /= 66;

    (*output)[7] = (uint32_t)(group1 % 66);
    group1 /= 66;

    (*output)[6] = (uint32_t)(group1 % 66);
    group1 /= 66;

    (*output)[5] = (uint32_t)(group1 % 66);
    group1 /= 66;

    (*output)[4] = (uint32_t)(group1 % 66);
    group1 /= 66;

    (*output)[3] = (uint32_t)(group1 % 66);
    group1 /= 66;

    (*output)[2] = (uint32_t)(group1 % 66);
    group1 /= 66;

    (*output)[1] = (uint32_t)(group1 % 66);
    group1 /= 66;

    (*output)[0] = (uint32_t)(group1 % 66);
    group1 /= 66;
    *output += 9;

    uint64_t group2 = (*(uint64_t *)((*input) + 13)) >> 6;    group2 &= (1ull << 55) - 1;
    (*output)[8] = (uint32_t)(group2 % 66);
    group2 /= 66;

    (*output)[7] = (uint32_t)(group2 % 66);
    group2 /= 66;

    (*output)[6] = (uint32_t)(group2 % 66);
    group2 /= 66;

    (*output)[5] = (uint32_t)(group2 % 66);
    group2 /= 66;

    (*output)[4] = (uint32_t)(group2 % 66);
    group2 /= 66;

    (*output)[3] = (uint32_t)(group2 % 66);
    group2 /= 66;

    (*output)[2] = (uint32_t)(group2 % 66);
    group2 /= 66;

    (*output)[1] = (uint32_t)(group2 % 66);
    group2 /= 66;

    (*output)[0] = (uint32_t)(group2 % 66);
    group2 /= 66;
    *output += 9;

    uint64_t group3 = (*(uint64_t *)((*input) + 20)) >> 5;    group3 &= (1ull << 55) - 1;
    (*output)[8] = (uint32_t)(group3 % 66);
    group3 /= 66;

    (*output)[7] = (uint32_t)(group3 % 66);
    group3 /= 66;

    (*output)[6] = (uint32_t)(group3 % 66);
    group3 /= 66;

    (*output)[5] = (uint32_t)(group3 % 66);
    group3 /= 66;

    (*output)[4] = (uint32_t)(group3 % 66);
    group3 /= 66;

    (*output)[3] = (uint32_t)(group3 % 66);
    group3 /= 66;

    (*output)[2] = (uint32_t)(group3 % 66);
    group3 /= 66;

    (*output)[1] = (uint32_t)(group3 % 66);
    group3 /= 66;

    (*output)[0] = (uint32_t)(group3 % 66);
    group3 /= 66;
    *output += 9;

    uint64_t group4 = (*(uint64_t *)((*input) + 27)) >> 4;    group4 &= (1ull << 55) - 1;
    (*output)[8] = (uint32_t)(group4 % 66);
    group4 /= 66;

    (*output)[7] = (uint32_t)(group4 % 66);
    group4 /= 66;

    (*output)[6] = (uint32_t)(group4 % 66);
    group4 /= 66;

    (*output)[5] = (uint32_t)(group4 % 66);
    group4 /= 66;

    (*output)[4] = (uint32_t)(group4 % 66);
    group4 /= 66;

    (*output)[3] = (uint32_t)(group4 % 66);
    group4 /= 66;

    (*output)[2] = (uint32_t)(group4 % 66);
    group4 /= 66;

    (*output)[1] = (uint32_t)(group4 % 66);
    group4 /= 66;

    (*output)[0] = (uint32_t)(group4 % 66);
    group4 /= 66;
    *output += 9;

    uint64_t group5 = (*(uint64_t *)((*input) + 34)) >> 3;    group5 &= (1ull << 55) - 1;
    (*output)[8] = (uint32_t)(group5 % 66);
    group5 /= 66;

    (*output)[7] = (uint32_t)(group5 % 66);
    group5 /= 66;

    (*output)[6] = (uint32_t)(group5 % 66);
    group5 /= 66;

    (*output)[5] = (uint32_t)(group5 % 66);
    group5 /= 66;

    (*output)[4] = (uint32_t)(group5 % 66);
    group5 /= 66;

    (*output)[3] = (uint32_t)(group5 % 66);
    group5 /= 66;

    (*output)[2] = (uint32_t)(group5 % 66);
    group5 /= 66;

    (*output)[1] = (uint32_t)(group5 % 66);
    group5 /= 66;

    (*output)[0] = (uint32_t)(group5 % 66);
    group5 /= 66;
    *output += 9;

    uint64_t group6 = (*(uint64_t *)((*input) + 41)) >> 2;    group6 &= (1ull << 55) - 1;
    (*output)[8] = (uint32_t)(group6 % 66);
    group6 /= 66;

    (*output)[7] = (uint32_t)(group6 % 66);
    group6 /= 66;

    (*output)[6] = (uint32_t)(group6 % 66);
    group6 /= 66;

    (*output)[5] = (uint32_t)(group6 % 66);
    group6 /= 66;

    (*output)[4] = (uint32_t)(group6 % 66);
    group6 /= 66;

    (*output)[3] = (uint32_t)(group6 % 66);
    group6 /= 66;

    (*output)[2] = (uint32_t)(group6 % 66);
    group6 /= 66;

    (*output)[1] = (uint32_t)(group6 % 66);
    group6 /= 66;

    (*output)[0] = (uint32_t)(group6 % 66);
    group6 /= 66;
    *output += 9;

    uint64_t group7 = (*(uint64_t *)((*input) + 48)) >> 1;    group7 &= (1ull << 55) - 1;
    (*output)[8] = (uint32_t)(group7 % 66);
    group7 /= 66;

    (*output)[7] = (uint32_t)(group7 % 66);
    group7 /= 66;

    (*output)[6] = (uint32_t)(group7 % 66);
    group7 /= 66;

    (*output)[5] = (uint32_t)(group7 % 66);
    group7 /= 66;

    (*output)[4] = (uint32_t)(group7 % 66);
    group7 /= 66;

    (*output)[3] = (uint32_t)(group7 % 66);
    group7 /= 66;

    (*output)[2] = (uint32_t)(group7 % 66);
    group7 /= 66;

    (*output)[1] = (uint32_t)(group7 % 66);
    group7 /= 66;

    (*output)[0] = (uint32_t)(group7 % 66);
    group7 /= 66;
    *output += 9;


    *input += 55;
}

// Unpack 55 bytes into 72 values
void Ultrapack_Decompress67(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 55) - 1;
    (*output)[8] = (uint32_t)(group0 % 67);
    group0 /= 67;

    (*output)[7] = (uint32_t)(group0 % 67);
    group0 /= 67;

    (*output)[6] = (uint32_t)(group0 % 67);
    group0 /= 67;

    (*output)[5] = (uint32_t)(group0 % 67);
    group0 /= 67;

    (*output)[4] = (uint32_t)(group0 % 67);
    group0 /= 67;

    (*output)[3] = (uint32_t)(group0 % 67);
    group0 /= 67;

    (*output)[2] = (uint32_t)(group0 % 67);
    group0 /= 67;

    (*output)[1] = (uint32_t)(group0 % 67);
    group0 /= 67;

    (*output)[0] = (uint32_t)(group0 % 67);
    group0 /= 67;
    *output += 9;

    uint64_t group1 = (*(uint64_t *)((*input) + 6)) >> 7;    group1 &= (1ull << 55) - 1;
    (*output)[8] = (uint32_t)(group1 % 67);
    group1 /= 67;

    (*output)[7] = (uint32_t)(group1 % 67);
    group1 /= 67;

    (*output)[6] = (uint32_t)(group1 % 67);
    group1 /= 67;

    (*output)[5] = (uint32_t)(group1 % 67);
    group1 /= 67;

    (*output)[4] = (uint32_t)(group1 % 67);
    group1 /= 67;

    (*output)[3] = (uint32_t)(group1 % 67);
    group1 /= 67;

    (*output)[2] = (uint32_t)(group1 % 67);
    group1 /= 67;

    (*output)[1] = (uint32_t)(group1 % 67);
    group1 /= 67;

    (*output)[0] = (uint32_t)(group1 % 67);
    group1 /= 67;
    *output += 9;

    uint64_t group2 = (*(uint64_t *)((*input) + 13)) >> 6;    group2 &= (1ull << 55) - 1;
    (*output)[8] = (uint32_t)(group2 % 67);
    group2 /= 67;

    (*output)[7] = (uint32_t)(group2 % 67);
    group2 /= 67;

    (*output)[6] = (uint32_t)(group2 % 67);
    group2 /= 67;

    (*output)[5] = (uint32_t)(group2 % 67);
    group2 /= 67;

    (*output)[4] = (uint32_t)(group2 % 67);
    group2 /= 67;

    (*output)[3] = (uint32_t)(group2 % 67);
    group2 /= 67;

    (*output)[2] = (uint32_t)(group2 % 67);
    group2 /= 67;

    (*output)[1] = (uint32_t)(group2 % 67);
    group2 /= 67;

    (*output)[0] = (uint32_t)(group2 % 67);
    group2 /= 67;
    *output += 9;

    uint64_t group3 = (*(uint64_t *)((*input) + 20)) >> 5;    group3 &= (1ull << 55) - 1;
    (*output)[8] = (uint32_t)(group3 % 67);
    group3 /= 67;

    (*output)[7] = (uint32_t)(group3 % 67);
    group3 /= 67;

    (*output)[6] = (uint32_t)(group3 % 67);
    group3 /= 67;

    (*output)[5] = (uint32_t)(group3 % 67);
    group3 /= 67;

    (*output)[4] = (uint32_t)(group3 % 67);
    group3 /= 67;

    (*output)[3] = (uint32_t)(group3 % 67);
    group3 /= 67;

    (*output)[2] = (uint32_t)(group3 % 67);
    group3 /= 67;

    (*output)[1] = (uint32_t)(group3 % 67);
    group3 /= 67;

    (*output)[0] = (uint32_t)(group3 % 67);
    group3 /= 67;
    *output += 9;

    uint64_t group4 = (*(uint64_t *)((*input) + 27)) >> 4;    group4 &= (1ull << 55) - 1;
    (*output)[8] = (uint32_t)(group4 % 67);
    group4 /= 67;

    (*output)[7] = (uint32_t)(group4 % 67);
    group4 /= 67;

    (*output)[6] = (uint32_t)(group4 % 67);
    group4 /= 67;

    (*output)[5] = (uint32_t)(group4 % 67);
    group4 /= 67;

    (*output)[4] = (uint32_t)(group4 % 67);
    group4 /= 67;

    (*output)[3] = (uint32_t)(group4 % 67);
    group4 /= 67;

    (*output)[2] = (uint32_t)(group4 % 67);
    group4 /= 67;

    (*output)[1] = (uint32_t)(group4 % 67);
    group4 /= 67;

    (*output)[0] = (uint32_t)(group4 % 67);
    group4 /= 67;
    *output += 9;

    uint64_t group5 = (*(uint64_t *)((*input) + 34)) >> 3;    group5 &= (1ull << 55) - 1;
    (*output)[8] = (uint32_t)(group5 % 67);
    group5 /= 67;

    (*output)[7] = (uint32_t)(group5 % 67);
    group5 /= 67;

    (*output)[6] = (uint32_t)(group5 % 67);
    group5 /= 67;

    (*output)[5] = (uint32_t)(group5 % 67);
    group5 /= 67;

    (*output)[4] = (uint32_t)(group5 % 67);
    group5 /= 67;

    (*output)[3] = (uint32_t)(group5 % 67);
    group5 /= 67;

    (*output)[2] = (uint32_t)(group5 % 67);
    group5 /= 67;

    (*output)[1] = (uint32_t)(group5 % 67);
    group5 /= 67;

    (*output)[0] = (uint32_t)(group5 % 67);
    group5 /= 67;
    *output += 9;

    uint64_t group6 = (*(uint64_t *)((*input) + 41)) >> 2;    group6 &= (1ull << 55) - 1;
    (*output)[8] = (uint32_t)(group6 % 67);
    group6 /= 67;

    (*output)[7] = (uint32_t)(group6 % 67);
    group6 /= 67;

    (*output)[6] = (uint32_t)(group6 % 67);
    group6 /= 67;

    (*output)[5] = (uint32_t)(group6 % 67);
    group6 /= 67;

    (*output)[4] = (uint32_t)(group6 % 67);
    group6 /= 67;

    (*output)[3] = (uint32_t)(group6 % 67);
    group6 /= 67;

    (*output)[2] = (uint32_t)(group6 % 67);
    group6 /= 67;

    (*output)[1] = (uint32_t)(group6 % 67);
    group6 /= 67;

    (*output)[0] = (uint32_t)(group6 % 67);
    group6 /= 67;
    *output += 9;

    uint64_t group7 = (*(uint64_t *)((*input) + 48)) >> 1;    group7 &= (1ull << 55) - 1;
    (*output)[8] = (uint32_t)(group7 % 67);
    group7 /= 67;

    (*output)[7] = (uint32_t)(group7 % 67);
    group7 /= 67;

    (*output)[6] = (uint32_t)(group7 % 67);
    group7 /= 67;

    (*output)[5] = (uint32_t)(group7 % 67);
    group7 /= 67;

    (*output)[4] = (uint32_t)(group7 % 67);
    group7 /= 67;

    (*output)[3] = (uint32_t)(group7 % 67);
    group7 /= 67;

    (*output)[2] = (uint32_t)(group7 % 67);
    group7 /= 67;

    (*output)[1] = (uint32_t)(group7 % 67);
    group7 /= 67;

    (*output)[0] = (uint32_t)(group7 % 67);
    group7 /= 67;
    *output += 9;


    *input += 55;
}

// Unpack 55 bytes into 72 values
void Ultrapack_Decompress68(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 55) - 1;
    (*output)[8] = (uint32_t)(group0 % 68);
    group0 /= 68;

    (*output)[7] = (uint32_t)(group0 % 68);
    group0 /= 68;

    (*output)[6] = (uint32_t)(group0 % 68);
    group0 /= 68;

    (*output)[5] = (uint32_t)(group0 % 68);
    group0 /= 68;

    (*output)[4] = (uint32_t)(group0 % 68);
    group0 /= 68;

    (*output)[3] = (uint32_t)(group0 % 68);
    group0 /= 68;

    (*output)[2] = (uint32_t)(group0 % 68);
    group0 /= 68;

    (*output)[1] = (uint32_t)(group0 % 68);
    group0 /= 68;

    (*output)[0] = (uint32_t)(group0 % 68);
    group0 /= 68;
    *output += 9;

    uint64_t group1 = (*(uint64_t *)((*input) + 6)) >> 7;    group1 &= (1ull << 55) - 1;
    (*output)[8] = (uint32_t)(group1 % 68);
    group1 /= 68;

    (*output)[7] = (uint32_t)(group1 % 68);
    group1 /= 68;

    (*output)[6] = (uint32_t)(group1 % 68);
    group1 /= 68;

    (*output)[5] = (uint32_t)(group1 % 68);
    group1 /= 68;

    (*output)[4] = (uint32_t)(group1 % 68);
    group1 /= 68;

    (*output)[3] = (uint32_t)(group1 % 68);
    group1 /= 68;

    (*output)[2] = (uint32_t)(group1 % 68);
    group1 /= 68;

    (*output)[1] = (uint32_t)(group1 % 68);
    group1 /= 68;

    (*output)[0] = (uint32_t)(group1 % 68);
    group1 /= 68;
    *output += 9;

    uint64_t group2 = (*(uint64_t *)((*input) + 13)) >> 6;    group2 &= (1ull << 55) - 1;
    (*output)[8] = (uint32_t)(group2 % 68);
    group2 /= 68;

    (*output)[7] = (uint32_t)(group2 % 68);
    group2 /= 68;

    (*output)[6] = (uint32_t)(group2 % 68);
    group2 /= 68;

    (*output)[5] = (uint32_t)(group2 % 68);
    group2 /= 68;

    (*output)[4] = (uint32_t)(group2 % 68);
    group2 /= 68;

    (*output)[3] = (uint32_t)(group2 % 68);
    group2 /= 68;

    (*output)[2] = (uint32_t)(group2 % 68);
    group2 /= 68;

    (*output)[1] = (uint32_t)(group2 % 68);
    group2 /= 68;

    (*output)[0] = (uint32_t)(group2 % 68);
    group2 /= 68;
    *output += 9;

    uint64_t group3 = (*(uint64_t *)((*input) + 20)) >> 5;    group3 &= (1ull << 55) - 1;
    (*output)[8] = (uint32_t)(group3 % 68);
    group3 /= 68;

    (*output)[7] = (uint32_t)(group3 % 68);
    group3 /= 68;

    (*output)[6] = (uint32_t)(group3 % 68);
    group3 /= 68;

    (*output)[5] = (uint32_t)(group3 % 68);
    group3 /= 68;

    (*output)[4] = (uint32_t)(group3 % 68);
    group3 /= 68;

    (*output)[3] = (uint32_t)(group3 % 68);
    group3 /= 68;

    (*output)[2] = (uint32_t)(group3 % 68);
    group3 /= 68;

    (*output)[1] = (uint32_t)(group3 % 68);
    group3 /= 68;

    (*output)[0] = (uint32_t)(group3 % 68);
    group3 /= 68;
    *output += 9;

    uint64_t group4 = (*(uint64_t *)((*input) + 27)) >> 4;    group4 &= (1ull << 55) - 1;
    (*output)[8] = (uint32_t)(group4 % 68);
    group4 /= 68;

    (*output)[7] = (uint32_t)(group4 % 68);
    group4 /= 68;

    (*output)[6] = (uint32_t)(group4 % 68);
    group4 /= 68;

    (*output)[5] = (uint32_t)(group4 % 68);
    group4 /= 68;

    (*output)[4] = (uint32_t)(group4 % 68);
    group4 /= 68;

    (*output)[3] = (uint32_t)(group4 % 68);
    group4 /= 68;

    (*output)[2] = (uint32_t)(group4 % 68);
    group4 /= 68;

    (*output)[1] = (uint32_t)(group4 % 68);
    group4 /= 68;

    (*output)[0] = (uint32_t)(group4 % 68);
    group4 /= 68;
    *output += 9;

    uint64_t group5 = (*(uint64_t *)((*input) + 34)) >> 3;    group5 &= (1ull << 55) - 1;
    (*output)[8] = (uint32_t)(group5 % 68);
    group5 /= 68;

    (*output)[7] = (uint32_t)(group5 % 68);
    group5 /= 68;

    (*output)[6] = (uint32_t)(group5 % 68);
    group5 /= 68;

    (*output)[5] = (uint32_t)(group5 % 68);
    group5 /= 68;

    (*output)[4] = (uint32_t)(group5 % 68);
    group5 /= 68;

    (*output)[3] = (uint32_t)(group5 % 68);
    group5 /= 68;

    (*output)[2] = (uint32_t)(group5 % 68);
    group5 /= 68;

    (*output)[1] = (uint32_t)(group5 % 68);
    group5 /= 68;

    (*output)[0] = (uint32_t)(group5 % 68);
    group5 /= 68;
    *output += 9;

    uint64_t group6 = (*(uint64_t *)((*input) + 41)) >> 2;    group6 &= (1ull << 55) - 1;
    (*output)[8] = (uint32_t)(group6 % 68);
    group6 /= 68;

    (*output)[7] = (uint32_t)(group6 % 68);
    group6 /= 68;

    (*output)[6] = (uint32_t)(group6 % 68);
    group6 /= 68;

    (*output)[5] = (uint32_t)(group6 % 68);
    group6 /= 68;

    (*output)[4] = (uint32_t)(group6 % 68);
    group6 /= 68;

    (*output)[3] = (uint32_t)(group6 % 68);
    group6 /= 68;

    (*output)[2] = (uint32_t)(group6 % 68);
    group6 /= 68;

    (*output)[1] = (uint32_t)(group6 % 68);
    group6 /= 68;

    (*output)[0] = (uint32_t)(group6 % 68);
    group6 /= 68;
    *output += 9;

    uint64_t group7 = (*(uint64_t *)((*input) + 48)) >> 1;    group7 &= (1ull << 55) - 1;
    (*output)[8] = (uint32_t)(group7 % 68);
    group7 /= 68;

    (*output)[7] = (uint32_t)(group7 % 68);
    group7 /= 68;

    (*output)[6] = (uint32_t)(group7 % 68);
    group7 /= 68;

    (*output)[5] = (uint32_t)(group7 % 68);
    group7 /= 68;

    (*output)[4] = (uint32_t)(group7 % 68);
    group7 /= 68;

    (*output)[3] = (uint32_t)(group7 % 68);
    group7 /= 68;

    (*output)[2] = (uint32_t)(group7 % 68);
    group7 /= 68;

    (*output)[1] = (uint32_t)(group7 % 68);
    group7 /= 68;

    (*output)[0] = (uint32_t)(group7 % 68);
    group7 /= 68;
    *output += 9;


    *input += 55;
}

// Unpack 55 bytes into 72 values
void Ultrapack_Decompress69(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 55) - 1;
    (*output)[8] = (uint32_t)(group0 % 69);
    group0 /= 69;

    (*output)[7] = (uint32_t)(group0 % 69);
    group0 /= 69;

    (*output)[6] = (uint32_t)(group0 % 69);
    group0 /= 69;

    (*output)[5] = (uint32_t)(group0 % 69);
    group0 /= 69;

    (*output)[4] = (uint32_t)(group0 % 69);
    group0 /= 69;

    (*output)[3] = (uint32_t)(group0 % 69);
    group0 /= 69;

    (*output)[2] = (uint32_t)(group0 % 69);
    group0 /= 69;

    (*output)[1] = (uint32_t)(group0 % 69);
    group0 /= 69;

    (*output)[0] = (uint32_t)(group0 % 69);
    group0 /= 69;
    *output += 9;

    uint64_t group1 = (*(uint64_t *)((*input) + 6)) >> 7;    group1 &= (1ull << 55) - 1;
    (*output)[8] = (uint32_t)(group1 % 69);
    group1 /= 69;

    (*output)[7] = (uint32_t)(group1 % 69);
    group1 /= 69;

    (*output)[6] = (uint32_t)(group1 % 69);
    group1 /= 69;

    (*output)[5] = (uint32_t)(group1 % 69);
    group1 /= 69;

    (*output)[4] = (uint32_t)(group1 % 69);
    group1 /= 69;

    (*output)[3] = (uint32_t)(group1 % 69);
    group1 /= 69;

    (*output)[2] = (uint32_t)(group1 % 69);
    group1 /= 69;

    (*output)[1] = (uint32_t)(group1 % 69);
    group1 /= 69;

    (*output)[0] = (uint32_t)(group1 % 69);
    group1 /= 69;
    *output += 9;

    uint64_t group2 = (*(uint64_t *)((*input) + 13)) >> 6;    group2 &= (1ull << 55) - 1;
    (*output)[8] = (uint32_t)(group2 % 69);
    group2 /= 69;

    (*output)[7] = (uint32_t)(group2 % 69);
    group2 /= 69;

    (*output)[6] = (uint32_t)(group2 % 69);
    group2 /= 69;

    (*output)[5] = (uint32_t)(group2 % 69);
    group2 /= 69;

    (*output)[4] = (uint32_t)(group2 % 69);
    group2 /= 69;

    (*output)[3] = (uint32_t)(group2 % 69);
    group2 /= 69;

    (*output)[2] = (uint32_t)(group2 % 69);
    group2 /= 69;

    (*output)[1] = (uint32_t)(group2 % 69);
    group2 /= 69;

    (*output)[0] = (uint32_t)(group2 % 69);
    group2 /= 69;
    *output += 9;

    uint64_t group3 = (*(uint64_t *)((*input) + 20)) >> 5;    group3 &= (1ull << 55) - 1;
    (*output)[8] = (uint32_t)(group3 % 69);
    group3 /= 69;

    (*output)[7] = (uint32_t)(group3 % 69);
    group3 /= 69;

    (*output)[6] = (uint32_t)(group3 % 69);
    group3 /= 69;

    (*output)[5] = (uint32_t)(group3 % 69);
    group3 /= 69;

    (*output)[4] = (uint32_t)(group3 % 69);
    group3 /= 69;

    (*output)[3] = (uint32_t)(group3 % 69);
    group3 /= 69;

    (*output)[2] = (uint32_t)(group3 % 69);
    group3 /= 69;

    (*output)[1] = (uint32_t)(group3 % 69);
    group3 /= 69;

    (*output)[0] = (uint32_t)(group3 % 69);
    group3 /= 69;
    *output += 9;

    uint64_t group4 = (*(uint64_t *)((*input) + 27)) >> 4;    group4 &= (1ull << 55) - 1;
    (*output)[8] = (uint32_t)(group4 % 69);
    group4 /= 69;

    (*output)[7] = (uint32_t)(group4 % 69);
    group4 /= 69;

    (*output)[6] = (uint32_t)(group4 % 69);
    group4 /= 69;

    (*output)[5] = (uint32_t)(group4 % 69);
    group4 /= 69;

    (*output)[4] = (uint32_t)(group4 % 69);
    group4 /= 69;

    (*output)[3] = (uint32_t)(group4 % 69);
    group4 /= 69;

    (*output)[2] = (uint32_t)(group4 % 69);
    group4 /= 69;

    (*output)[1] = (uint32_t)(group4 % 69);
    group4 /= 69;

    (*output)[0] = (uint32_t)(group4 % 69);
    group4 /= 69;
    *output += 9;

    uint64_t group5 = (*(uint64_t *)((*input) + 34)) >> 3;    group5 &= (1ull << 55) - 1;
    (*output)[8] = (uint32_t)(group5 % 69);
    group5 /= 69;

    (*output)[7] = (uint32_t)(group5 % 69);
    group5 /= 69;

    (*output)[6] = (uint32_t)(group5 % 69);
    group5 /= 69;

    (*output)[5] = (uint32_t)(group5 % 69);
    group5 /= 69;

    (*output)[4] = (uint32_t)(group5 % 69);
    group5 /= 69;

    (*output)[3] = (uint32_t)(group5 % 69);
    group5 /= 69;

    (*output)[2] = (uint32_t)(group5 % 69);
    group5 /= 69;

    (*output)[1] = (uint32_t)(group5 % 69);
    group5 /= 69;

    (*output)[0] = (uint32_t)(group5 % 69);
    group5 /= 69;
    *output += 9;

    uint64_t group6 = (*(uint64_t *)((*input) + 41)) >> 2;    group6 &= (1ull << 55) - 1;
    (*output)[8] = (uint32_t)(group6 % 69);
    group6 /= 69;

    (*output)[7] = (uint32_t)(group6 % 69);
    group6 /= 69;

    (*output)[6] = (uint32_t)(group6 % 69);
    group6 /= 69;

    (*output)[5] = (uint32_t)(group6 % 69);
    group6 /= 69;

    (*output)[4] = (uint32_t)(group6 % 69);
    group6 /= 69;

    (*output)[3] = (uint32_t)(group6 % 69);
    group6 /= 69;

    (*output)[2] = (uint32_t)(group6 % 69);
    group6 /= 69;

    (*output)[1] = (uint32_t)(group6 % 69);
    group6 /= 69;

    (*output)[0] = (uint32_t)(group6 % 69);
    group6 /= 69;
    *output += 9;

    uint64_t group7 = (*(uint64_t *)((*input) + 48)) >> 1;    group7 &= (1ull << 55) - 1;
    (*output)[8] = (uint32_t)(group7 % 69);
    group7 /= 69;

    (*output)[7] = (uint32_t)(group7 % 69);
    group7 /= 69;

    (*output)[6] = (uint32_t)(group7 % 69);
    group7 /= 69;

    (*output)[5] = (uint32_t)(group7 % 69);
    group7 /= 69;

    (*output)[4] = (uint32_t)(group7 % 69);
    group7 /= 69;

    (*output)[3] = (uint32_t)(group7 % 69);
    group7 /= 69;

    (*output)[2] = (uint32_t)(group7 % 69);
    group7 /= 69;

    (*output)[1] = (uint32_t)(group7 % 69);
    group7 /= 69;

    (*output)[0] = (uint32_t)(group7 % 69);
    group7 /= 69;
    *output += 9;


    *input += 55;
}

// Unpack 37 bytes into 48 values
void Ultrapack_Decompress70(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 37) - 1;
    (*output)[5] = (uint32_t)(group0 % 70);
    group0 /= 70;

    (*output)[4] = (uint32_t)(group0 % 70);
    group0 /= 70;

    (*output)[3] = (uint32_t)(group0 % 70);
    group0 /= 70;

    (*output)[2] = (uint32_t)(group0 % 70);
    group0 /= 70;

    (*output)[1] = (uint32_t)(group0 % 70);
    group0 /= 70;

    (*output)[0] = (uint32_t)(group0 % 70);
    group0 /= 70;
    *output += 6;

    uint64_t group1 = (*(uint64_t *)((*input) + 4)) >> 5;    group1 &= (1ull << 37) - 1;
    (*output)[5] = (uint32_t)(group1 % 70);
    group1 /= 70;

    (*output)[4] = (uint32_t)(group1 % 70);
    group1 /= 70;

    (*output)[3] = (uint32_t)(group1 % 70);
    group1 /= 70;

    (*output)[2] = (uint32_t)(group1 % 70);
    group1 /= 70;

    (*output)[1] = (uint32_t)(group1 % 70);
    group1 /= 70;

    (*output)[0] = (uint32_t)(group1 % 70);
    group1 /= 70;
    *output += 6;

    uint64_t group2 = (*(uint64_t *)((*input) + 9)) >> 2;    group2 &= (1ull << 37) - 1;
    (*output)[5] = (uint32_t)(group2 % 70);
    group2 /= 70;

    (*output)[4] = (uint32_t)(group2 % 70);
    group2 /= 70;

    (*output)[3] = (uint32_t)(group2 % 70);
    group2 /= 70;

    (*output)[2] = (uint32_t)(group2 % 70);
    group2 /= 70;

    (*output)[1] = (uint32_t)(group2 % 70);
    group2 /= 70;

    (*output)[0] = (uint32_t)(group2 % 70);
    group2 /= 70;
    *output += 6;

    uint64_t group3 = (*(uint64_t *)((*input) + 13)) >> 7;    group3 &= (1ull << 37) - 1;
    (*output)[5] = (uint32_t)(group3 % 70);
    group3 /= 70;

    (*output)[4] = (uint32_t)(group3 % 70);
    group3 /= 70;

    (*output)[3] = (uint32_t)(group3 % 70);
    group3 /= 70;

    (*output)[2] = (uint32_t)(group3 % 70);
    group3 /= 70;

    (*output)[1] = (uint32_t)(group3 % 70);
    group3 /= 70;

    (*output)[0] = (uint32_t)(group3 % 70);
    group3 /= 70;
    *output += 6;

    uint64_t group4 = (*(uint64_t *)((*input) + 18)) >> 4;    group4 &= (1ull << 37) - 1;
    (*output)[5] = (uint32_t)(group4 % 70);
    group4 /= 70;

    (*output)[4] = (uint32_t)(group4 % 70);
    group4 /= 70;

    (*output)[3] = (uint32_t)(group4 % 70);
    group4 /= 70;

    (*output)[2] = (uint32_t)(group4 % 70);
    group4 /= 70;

    (*output)[1] = (uint32_t)(group4 % 70);
    group4 /= 70;

    (*output)[0] = (uint32_t)(group4 % 70);
    group4 /= 70;
    *output += 6;

    uint64_t group5 = (*(uint64_t *)((*input) + 23)) >> 1;    group5 &= (1ull << 37) - 1;
    (*output)[5] = (uint32_t)(group5 % 70);
    group5 /= 70;

    (*output)[4] = (uint32_t)(group5 % 70);
    group5 /= 70;

    (*output)[3] = (uint32_t)(group5 % 70);
    group5 /= 70;

    (*output)[2] = (uint32_t)(group5 % 70);
    group5 /= 70;

    (*output)[1] = (uint32_t)(group5 % 70);
    group5 /= 70;

    (*output)[0] = (uint32_t)(group5 % 70);
    group5 /= 70;
    *output += 6;

    uint64_t group6 = (*(uint64_t *)((*input) + 27)) >> 6;    group6 &= (1ull << 37) - 1;
    (*output)[5] = (uint32_t)(group6 % 70);
    group6 /= 70;

    (*output)[4] = (uint32_t)(group6 % 70);
    group6 /= 70;

    (*output)[3] = (uint32_t)(group6 % 70);
    group6 /= 70;

    (*output)[2] = (uint32_t)(group6 % 70);
    group6 /= 70;

    (*output)[1] = (uint32_t)(group6 % 70);
    group6 /= 70;

    (*output)[0] = (uint32_t)(group6 % 70);
    group6 /= 70;
    *output += 6;

    uint64_t group7 = (*(uint64_t *)((*input) + 32)) >> 3;    group7 &= (1ull << 37) - 1;
    (*output)[5] = (uint32_t)(group7 % 70);
    group7 /= 70;

    (*output)[4] = (uint32_t)(group7 % 70);
    group7 /= 70;

    (*output)[3] = (uint32_t)(group7 % 70);
    group7 /= 70;

    (*output)[2] = (uint32_t)(group7 % 70);
    group7 /= 70;

    (*output)[1] = (uint32_t)(group7 % 70);
    group7 /= 70;

    (*output)[0] = (uint32_t)(group7 % 70);
    group7 /= 70;
    *output += 6;


    *input += 37;
}

// Unpack 37 bytes into 48 values
void Ultrapack_Decompress71(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 37) - 1;
    (*output)[5] = (uint32_t)(group0 % 71);
    group0 /= 71;

    (*output)[4] = (uint32_t)(group0 % 71);
    group0 /= 71;

    (*output)[3] = (uint32_t)(group0 % 71);
    group0 /= 71;

    (*output)[2] = (uint32_t)(group0 % 71);
    group0 /= 71;

    (*output)[1] = (uint32_t)(group0 % 71);
    group0 /= 71;

    (*output)[0] = (uint32_t)(group0 % 71);
    group0 /= 71;
    *output += 6;

    uint64_t group1 = (*(uint64_t *)((*input) + 4)) >> 5;    group1 &= (1ull << 37) - 1;
    (*output)[5] = (uint32_t)(group1 % 71);
    group1 /= 71;

    (*output)[4] = (uint32_t)(group1 % 71);
    group1 /= 71;

    (*output)[3] = (uint32_t)(group1 % 71);
    group1 /= 71;

    (*output)[2] = (uint32_t)(group1 % 71);
    group1 /= 71;

    (*output)[1] = (uint32_t)(group1 % 71);
    group1 /= 71;

    (*output)[0] = (uint32_t)(group1 % 71);
    group1 /= 71;
    *output += 6;

    uint64_t group2 = (*(uint64_t *)((*input) + 9)) >> 2;    group2 &= (1ull << 37) - 1;
    (*output)[5] = (uint32_t)(group2 % 71);
    group2 /= 71;

    (*output)[4] = (uint32_t)(group2 % 71);
    group2 /= 71;

    (*output)[3] = (uint32_t)(group2 % 71);
    group2 /= 71;

    (*output)[2] = (uint32_t)(group2 % 71);
    group2 /= 71;

    (*output)[1] = (uint32_t)(group2 % 71);
    group2 /= 71;

    (*output)[0] = (uint32_t)(group2 % 71);
    group2 /= 71;
    *output += 6;

    uint64_t group3 = (*(uint64_t *)((*input) + 13)) >> 7;    group3 &= (1ull << 37) - 1;
    (*output)[5] = (uint32_t)(group3 % 71);
    group3 /= 71;

    (*output)[4] = (uint32_t)(group3 % 71);
    group3 /= 71;

    (*output)[3] = (uint32_t)(group3 % 71);
    group3 /= 71;

    (*output)[2] = (uint32_t)(group3 % 71);
    group3 /= 71;

    (*output)[1] = (uint32_t)(group3 % 71);
    group3 /= 71;

    (*output)[0] = (uint32_t)(group3 % 71);
    group3 /= 71;
    *output += 6;

    uint64_t group4 = (*(uint64_t *)((*input) + 18)) >> 4;    group4 &= (1ull << 37) - 1;
    (*output)[5] = (uint32_t)(group4 % 71);
    group4 /= 71;

    (*output)[4] = (uint32_t)(group4 % 71);
    group4 /= 71;

    (*output)[3] = (uint32_t)(group4 % 71);
    group4 /= 71;

    (*output)[2] = (uint32_t)(group4 % 71);
    group4 /= 71;

    (*output)[1] = (uint32_t)(group4 % 71);
    group4 /= 71;

    (*output)[0] = (uint32_t)(group4 % 71);
    group4 /= 71;
    *output += 6;

    uint64_t group5 = (*(uint64_t *)((*input) + 23)) >> 1;    group5 &= (1ull << 37) - 1;
    (*output)[5] = (uint32_t)(group5 % 71);
    group5 /= 71;

    (*output)[4] = (uint32_t)(group5 % 71);
    group5 /= 71;

    (*output)[3] = (uint32_t)(group5 % 71);
    group5 /= 71;

    (*output)[2] = (uint32_t)(group5 % 71);
    group5 /= 71;

    (*output)[1] = (uint32_t)(group5 % 71);
    group5 /= 71;

    (*output)[0] = (uint32_t)(group5 % 71);
    group5 /= 71;
    *output += 6;

    uint64_t group6 = (*(uint64_t *)((*input) + 27)) >> 6;    group6 &= (1ull << 37) - 1;
    (*output)[5] = (uint32_t)(group6 % 71);
    group6 /= 71;

    (*output)[4] = (uint32_t)(group6 % 71);
    group6 /= 71;

    (*output)[3] = (uint32_t)(group6 % 71);
    group6 /= 71;

    (*output)[2] = (uint32_t)(group6 % 71);
    group6 /= 71;

    (*output)[1] = (uint32_t)(group6 % 71);
    group6 /= 71;

    (*output)[0] = (uint32_t)(group6 % 71);
    group6 /= 71;
    *output += 6;

    uint64_t group7 = (*(uint64_t *)((*input) + 32)) >> 3;    group7 &= (1ull << 37) - 1;
    (*output)[5] = (uint32_t)(group7 % 71);
    group7 /= 71;

    (*output)[4] = (uint32_t)(group7 % 71);
    group7 /= 71;

    (*output)[3] = (uint32_t)(group7 % 71);
    group7 /= 71;

    (*output)[2] = (uint32_t)(group7 % 71);
    group7 /= 71;

    (*output)[1] = (uint32_t)(group7 % 71);
    group7 /= 71;

    (*output)[0] = (uint32_t)(group7 % 71);
    group7 /= 71;
    *output += 6;


    *input += 37;
}

// Unpack 25 bytes into 32 values
void Ultrapack_Decompress72(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 25) - 1;
    (*output)[3] = (uint32_t)(group0 % 72);
    group0 /= 72;

    (*output)[2] = (uint32_t)(group0 % 72);
    group0 /= 72;

    (*output)[1] = (uint32_t)(group0 % 72);
    group0 /= 72;

    (*output)[0] = (uint32_t)(group0 % 72);
    group0 /= 72;
    *output += 4;

    uint64_t group1 = (*(uint64_t *)((*input) + 3)) >> 1;    group1 &= (1ull << 25) - 1;
    (*output)[3] = (uint32_t)(group1 % 72);
    group1 /= 72;

    (*output)[2] = (uint32_t)(group1 % 72);
    group1 /= 72;

    (*output)[1] = (uint32_t)(group1 % 72);
    group1 /= 72;

    (*output)[0] = (uint32_t)(group1 % 72);
    group1 /= 72;
    *output += 4;

    uint64_t group2 = (*(uint64_t *)((*input) + 6)) >> 2;    group2 &= (1ull << 25) - 1;
    (*output)[3] = (uint32_t)(group2 % 72);
    group2 /= 72;

    (*output)[2] = (uint32_t)(group2 % 72);
    group2 /= 72;

    (*output)[1] = (uint32_t)(group2 % 72);
    group2 /= 72;

    (*output)[0] = (uint32_t)(group2 % 72);
    group2 /= 72;
    *output += 4;

    uint64_t group3 = (*(uint64_t *)((*input) + 9)) >> 3;    group3 &= (1ull << 25) - 1;
    (*output)[3] = (uint32_t)(group3 % 72);
    group3 /= 72;

    (*output)[2] = (uint32_t)(group3 % 72);
    group3 /= 72;

    (*output)[1] = (uint32_t)(group3 % 72);
    group3 /= 72;

    (*output)[0] = (uint32_t)(group3 % 72);
    group3 /= 72;
    *output += 4;

    uint64_t group4 = (*(uint64_t *)((*input) + 12)) >> 4;    group4 &= (1ull << 25) - 1;
    (*output)[3] = (uint32_t)(group4 % 72);
    group4 /= 72;

    (*output)[2] = (uint32_t)(group4 % 72);
    group4 /= 72;

    (*output)[1] = (uint32_t)(group4 % 72);
    group4 /= 72;

    (*output)[0] = (uint32_t)(group4 % 72);
    group4 /= 72;
    *output += 4;

    uint64_t group5 = (*(uint64_t *)((*input) + 15)) >> 5;    group5 &= (1ull << 25) - 1;
    (*output)[3] = (uint32_t)(group5 % 72);
    group5 /= 72;

    (*output)[2] = (uint32_t)(group5 % 72);
    group5 /= 72;

    (*output)[1] = (uint32_t)(group5 % 72);
    group5 /= 72;

    (*output)[0] = (uint32_t)(group5 % 72);
    group5 /= 72;
    *output += 4;

    uint64_t group6 = (*(uint64_t *)((*input) + 18)) >> 6;    group6 &= (1ull << 25) - 1;
    (*output)[3] = (uint32_t)(group6 % 72);
    group6 /= 72;

    (*output)[2] = (uint32_t)(group6 % 72);
    group6 /= 72;

    (*output)[1] = (uint32_t)(group6 % 72);
    group6 /= 72;

    (*output)[0] = (uint32_t)(group6 % 72);
    group6 /= 72;
    *output += 4;

    uint64_t group7 = (*(uint64_t *)((*input) + 21)) >> 7;    group7 &= (1ull << 25) - 1;
    (*output)[3] = (uint32_t)(group7 % 72);
    group7 /= 72;

    (*output)[2] = (uint32_t)(group7 % 72);
    group7 /= 72;

    (*output)[1] = (uint32_t)(group7 % 72);
    group7 /= 72;

    (*output)[0] = (uint32_t)(group7 % 72);
    group7 /= 72;
    *output += 4;


    *input += 25;
}

// Unpack 25 bytes into 32 values
void Ultrapack_Decompress73(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 25) - 1;
    (*output)[3] = (uint32_t)(group0 % 73);
    group0 /= 73;

    (*output)[2] = (uint32_t)(group0 % 73);
    group0 /= 73;

    (*output)[1] = (uint32_t)(group0 % 73);
    group0 /= 73;

    (*output)[0] = (uint32_t)(group0 % 73);
    group0 /= 73;
    *output += 4;

    uint64_t group1 = (*(uint64_t *)((*input) + 3)) >> 1;    group1 &= (1ull << 25) - 1;
    (*output)[3] = (uint32_t)(group1 % 73);
    group1 /= 73;

    (*output)[2] = (uint32_t)(group1 % 73);
    group1 /= 73;

    (*output)[1] = (uint32_t)(group1 % 73);
    group1 /= 73;

    (*output)[0] = (uint32_t)(group1 % 73);
    group1 /= 73;
    *output += 4;

    uint64_t group2 = (*(uint64_t *)((*input) + 6)) >> 2;    group2 &= (1ull << 25) - 1;
    (*output)[3] = (uint32_t)(group2 % 73);
    group2 /= 73;

    (*output)[2] = (uint32_t)(group2 % 73);
    group2 /= 73;

    (*output)[1] = (uint32_t)(group2 % 73);
    group2 /= 73;

    (*output)[0] = (uint32_t)(group2 % 73);
    group2 /= 73;
    *output += 4;

    uint64_t group3 = (*(uint64_t *)((*input) + 9)) >> 3;    group3 &= (1ull << 25) - 1;
    (*output)[3] = (uint32_t)(group3 % 73);
    group3 /= 73;

    (*output)[2] = (uint32_t)(group3 % 73);
    group3 /= 73;

    (*output)[1] = (uint32_t)(group3 % 73);
    group3 /= 73;

    (*output)[0] = (uint32_t)(group3 % 73);
    group3 /= 73;
    *output += 4;

    uint64_t group4 = (*(uint64_t *)((*input) + 12)) >> 4;    group4 &= (1ull << 25) - 1;
    (*output)[3] = (uint32_t)(group4 % 73);
    group4 /= 73;

    (*output)[2] = (uint32_t)(group4 % 73);
    group4 /= 73;

    (*output)[1] = (uint32_t)(group4 % 73);
    group4 /= 73;

    (*output)[0] = (uint32_t)(group4 % 73);
    group4 /= 73;
    *output += 4;

    uint64_t group5 = (*(uint64_t *)((*input) + 15)) >> 5;    group5 &= (1ull << 25) - 1;
    (*output)[3] = (uint32_t)(group5 % 73);
    group5 /= 73;

    (*output)[2] = (uint32_t)(group5 % 73);
    group5 /= 73;

    (*output)[1] = (uint32_t)(group5 % 73);
    group5 /= 73;

    (*output)[0] = (uint32_t)(group5 % 73);
    group5 /= 73;
    *output += 4;

    uint64_t group6 = (*(uint64_t *)((*input) + 18)) >> 6;    group6 &= (1ull << 25) - 1;
    (*output)[3] = (uint32_t)(group6 % 73);
    group6 /= 73;

    (*output)[2] = (uint32_t)(group6 % 73);
    group6 /= 73;

    (*output)[1] = (uint32_t)(group6 % 73);
    group6 /= 73;

    (*output)[0] = (uint32_t)(group6 % 73);
    group6 /= 73;
    *output += 4;

    uint64_t group7 = (*(uint64_t *)((*input) + 21)) >> 7;    group7 &= (1ull << 25) - 1;
    (*output)[3] = (uint32_t)(group7 % 73);
    group7 /= 73;

    (*output)[2] = (uint32_t)(group7 % 73);
    group7 /= 73;

    (*output)[1] = (uint32_t)(group7 % 73);
    group7 /= 73;

    (*output)[0] = (uint32_t)(group7 % 73);
    group7 /= 73;
    *output += 4;


    *input += 25;
}

// Unpack 25 bytes into 32 values
void Ultrapack_Decompress74(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 25) - 1;
    (*output)[3] = (uint32_t)(group0 % 74);
    group0 /= 74;

    (*output)[2] = (uint32_t)(group0 % 74);
    group0 /= 74;

    (*output)[1] = (uint32_t)(group0 % 74);
    group0 /= 74;

    (*output)[0] = (uint32_t)(group0 % 74);
    group0 /= 74;
    *output += 4;

    uint64_t group1 = (*(uint64_t *)((*input) + 3)) >> 1;    group1 &= (1ull << 25) - 1;
    (*output)[3] = (uint32_t)(group1 % 74);
    group1 /= 74;

    (*output)[2] = (uint32_t)(group1 % 74);
    group1 /= 74;

    (*output)[1] = (uint32_t)(group1 % 74);
    group1 /= 74;

    (*output)[0] = (uint32_t)(group1 % 74);
    group1 /= 74;
    *output += 4;

    uint64_t group2 = (*(uint64_t *)((*input) + 6)) >> 2;    group2 &= (1ull << 25) - 1;
    (*output)[3] = (uint32_t)(group2 % 74);
    group2 /= 74;

    (*output)[2] = (uint32_t)(group2 % 74);
    group2 /= 74;

    (*output)[1] = (uint32_t)(group2 % 74);
    group2 /= 74;

    (*output)[0] = (uint32_t)(group2 % 74);
    group2 /= 74;
    *output += 4;

    uint64_t group3 = (*(uint64_t *)((*input) + 9)) >> 3;    group3 &= (1ull << 25) - 1;
    (*output)[3] = (uint32_t)(group3 % 74);
    group3 /= 74;

    (*output)[2] = (uint32_t)(group3 % 74);
    group3 /= 74;

    (*output)[1] = (uint32_t)(group3 % 74);
    group3 /= 74;

    (*output)[0] = (uint32_t)(group3 % 74);
    group3 /= 74;
    *output += 4;

    uint64_t group4 = (*(uint64_t *)((*input) + 12)) >> 4;    group4 &= (1ull << 25) - 1;
    (*output)[3] = (uint32_t)(group4 % 74);
    group4 /= 74;

    (*output)[2] = (uint32_t)(group4 % 74);
    group4 /= 74;

    (*output)[1] = (uint32_t)(group4 % 74);
    group4 /= 74;

    (*output)[0] = (uint32_t)(group4 % 74);
    group4 /= 74;
    *output += 4;

    uint64_t group5 = (*(uint64_t *)((*input) + 15)) >> 5;    group5 &= (1ull << 25) - 1;
    (*output)[3] = (uint32_t)(group5 % 74);
    group5 /= 74;

    (*output)[2] = (uint32_t)(group5 % 74);
    group5 /= 74;

    (*output)[1] = (uint32_t)(group5 % 74);
    group5 /= 74;

    (*output)[0] = (uint32_t)(group5 % 74);
    group5 /= 74;
    *output += 4;

    uint64_t group6 = (*(uint64_t *)((*input) + 18)) >> 6;    group6 &= (1ull << 25) - 1;
    (*output)[3] = (uint32_t)(group6 % 74);
    group6 /= 74;

    (*output)[2] = (uint32_t)(group6 % 74);
    group6 /= 74;

    (*output)[1] = (uint32_t)(group6 % 74);
    group6 /= 74;

    (*output)[0] = (uint32_t)(group6 % 74);
    group6 /= 74;
    *output += 4;

    uint64_t group7 = (*(uint64_t *)((*input) + 21)) >> 7;    group7 &= (1ull << 25) - 1;
    (*output)[3] = (uint32_t)(group7 % 74);
    group7 /= 74;

    (*output)[2] = (uint32_t)(group7 % 74);
    group7 /= 74;

    (*output)[1] = (uint32_t)(group7 % 74);
    group7 /= 74;

    (*output)[0] = (uint32_t)(group7 % 74);
    group7 /= 74;
    *output += 4;


    *input += 25;
}

// Unpack 25 bytes into 32 values
void Ultrapack_Decompress75(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 25) - 1;
    (*output)[3] = (uint32_t)(group0 % 75);
    group0 /= 75;

    (*output)[2] = (uint32_t)(group0 % 75);
    group0 /= 75;

    (*output)[1] = (uint32_t)(group0 % 75);
    group0 /= 75;

    (*output)[0] = (uint32_t)(group0 % 75);
    group0 /= 75;
    *output += 4;

    uint64_t group1 = (*(uint64_t *)((*input) + 3)) >> 1;    group1 &= (1ull << 25) - 1;
    (*output)[3] = (uint32_t)(group1 % 75);
    group1 /= 75;

    (*output)[2] = (uint32_t)(group1 % 75);
    group1 /= 75;

    (*output)[1] = (uint32_t)(group1 % 75);
    group1 /= 75;

    (*output)[0] = (uint32_t)(group1 % 75);
    group1 /= 75;
    *output += 4;

    uint64_t group2 = (*(uint64_t *)((*input) + 6)) >> 2;    group2 &= (1ull << 25) - 1;
    (*output)[3] = (uint32_t)(group2 % 75);
    group2 /= 75;

    (*output)[2] = (uint32_t)(group2 % 75);
    group2 /= 75;

    (*output)[1] = (uint32_t)(group2 % 75);
    group2 /= 75;

    (*output)[0] = (uint32_t)(group2 % 75);
    group2 /= 75;
    *output += 4;

    uint64_t group3 = (*(uint64_t *)((*input) + 9)) >> 3;    group3 &= (1ull << 25) - 1;
    (*output)[3] = (uint32_t)(group3 % 75);
    group3 /= 75;

    (*output)[2] = (uint32_t)(group3 % 75);
    group3 /= 75;

    (*output)[1] = (uint32_t)(group3 % 75);
    group3 /= 75;

    (*output)[0] = (uint32_t)(group3 % 75);
    group3 /= 75;
    *output += 4;

    uint64_t group4 = (*(uint64_t *)((*input) + 12)) >> 4;    group4 &= (1ull << 25) - 1;
    (*output)[3] = (uint32_t)(group4 % 75);
    group4 /= 75;

    (*output)[2] = (uint32_t)(group4 % 75);
    group4 /= 75;

    (*output)[1] = (uint32_t)(group4 % 75);
    group4 /= 75;

    (*output)[0] = (uint32_t)(group4 % 75);
    group4 /= 75;
    *output += 4;

    uint64_t group5 = (*(uint64_t *)((*input) + 15)) >> 5;    group5 &= (1ull << 25) - 1;
    (*output)[3] = (uint32_t)(group5 % 75);
    group5 /= 75;

    (*output)[2] = (uint32_t)(group5 % 75);
    group5 /= 75;

    (*output)[1] = (uint32_t)(group5 % 75);
    group5 /= 75;

    (*output)[0] = (uint32_t)(group5 % 75);
    group5 /= 75;
    *output += 4;

    uint64_t group6 = (*(uint64_t *)((*input) + 18)) >> 6;    group6 &= (1ull << 25) - 1;
    (*output)[3] = (uint32_t)(group6 % 75);
    group6 /= 75;

    (*output)[2] = (uint32_t)(group6 % 75);
    group6 /= 75;

    (*output)[1] = (uint32_t)(group6 % 75);
    group6 /= 75;

    (*output)[0] = (uint32_t)(group6 % 75);
    group6 /= 75;
    *output += 4;

    uint64_t group7 = (*(uint64_t *)((*input) + 21)) >> 7;    group7 &= (1ull << 25) - 1;
    (*output)[3] = (uint32_t)(group7 % 75);
    group7 /= 75;

    (*output)[2] = (uint32_t)(group7 % 75);
    group7 /= 75;

    (*output)[1] = (uint32_t)(group7 % 75);
    group7 /= 75;

    (*output)[0] = (uint32_t)(group7 % 75);
    group7 /= 75;
    *output += 4;


    *input += 25;
}

// Unpack 25 bytes into 32 values
void Ultrapack_Decompress76(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 25) - 1;
    (*output)[3] = (uint32_t)(group0 % 76);
    group0 /= 76;

    (*output)[2] = (uint32_t)(group0 % 76);
    group0 /= 76;

    (*output)[1] = (uint32_t)(group0 % 76);
    group0 /= 76;

    (*output)[0] = (uint32_t)(group0 % 76);
    group0 /= 76;
    *output += 4;

    uint64_t group1 = (*(uint64_t *)((*input) + 3)) >> 1;    group1 &= (1ull << 25) - 1;
    (*output)[3] = (uint32_t)(group1 % 76);
    group1 /= 76;

    (*output)[2] = (uint32_t)(group1 % 76);
    group1 /= 76;

    (*output)[1] = (uint32_t)(group1 % 76);
    group1 /= 76;

    (*output)[0] = (uint32_t)(group1 % 76);
    group1 /= 76;
    *output += 4;

    uint64_t group2 = (*(uint64_t *)((*input) + 6)) >> 2;    group2 &= (1ull << 25) - 1;
    (*output)[3] = (uint32_t)(group2 % 76);
    group2 /= 76;

    (*output)[2] = (uint32_t)(group2 % 76);
    group2 /= 76;

    (*output)[1] = (uint32_t)(group2 % 76);
    group2 /= 76;

    (*output)[0] = (uint32_t)(group2 % 76);
    group2 /= 76;
    *output += 4;

    uint64_t group3 = (*(uint64_t *)((*input) + 9)) >> 3;    group3 &= (1ull << 25) - 1;
    (*output)[3] = (uint32_t)(group3 % 76);
    group3 /= 76;

    (*output)[2] = (uint32_t)(group3 % 76);
    group3 /= 76;

    (*output)[1] = (uint32_t)(group3 % 76);
    group3 /= 76;

    (*output)[0] = (uint32_t)(group3 % 76);
    group3 /= 76;
    *output += 4;

    uint64_t group4 = (*(uint64_t *)((*input) + 12)) >> 4;    group4 &= (1ull << 25) - 1;
    (*output)[3] = (uint32_t)(group4 % 76);
    group4 /= 76;

    (*output)[2] = (uint32_t)(group4 % 76);
    group4 /= 76;

    (*output)[1] = (uint32_t)(group4 % 76);
    group4 /= 76;

    (*output)[0] = (uint32_t)(group4 % 76);
    group4 /= 76;
    *output += 4;

    uint64_t group5 = (*(uint64_t *)((*input) + 15)) >> 5;    group5 &= (1ull << 25) - 1;
    (*output)[3] = (uint32_t)(group5 % 76);
    group5 /= 76;

    (*output)[2] = (uint32_t)(group5 % 76);
    group5 /= 76;

    (*output)[1] = (uint32_t)(group5 % 76);
    group5 /= 76;

    (*output)[0] = (uint32_t)(group5 % 76);
    group5 /= 76;
    *output += 4;

    uint64_t group6 = (*(uint64_t *)((*input) + 18)) >> 6;    group6 &= (1ull << 25) - 1;
    (*output)[3] = (uint32_t)(group6 % 76);
    group6 /= 76;

    (*output)[2] = (uint32_t)(group6 % 76);
    group6 /= 76;

    (*output)[1] = (uint32_t)(group6 % 76);
    group6 /= 76;

    (*output)[0] = (uint32_t)(group6 % 76);
    group6 /= 76;
    *output += 4;

    uint64_t group7 = (*(uint64_t *)((*input) + 21)) >> 7;    group7 &= (1ull << 25) - 1;
    (*output)[3] = (uint32_t)(group7 % 76);
    group7 /= 76;

    (*output)[2] = (uint32_t)(group7 % 76);
    group7 /= 76;

    (*output)[1] = (uint32_t)(group7 % 76);
    group7 /= 76;

    (*output)[0] = (uint32_t)(group7 % 76);
    group7 /= 76;
    *output += 4;


    *input += 25;
}

// Unpack 19 bytes into 24 values
void Ultrapack_Decompress77(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 19) - 1;
    (*output)[2] = (uint32_t)(group0 % 77);
    group0 /= 77;

    (*output)[1] = (uint32_t)(group0 % 77);
    group0 /= 77;

    (*output)[0] = (uint32_t)(group0 % 77);
    group0 /= 77;
    *output += 3;

    uint64_t group1 = (*(uint64_t *)((*input) + 2)) >> 3;    group1 &= (1ull << 19) - 1;
    (*output)[2] = (uint32_t)(group1 % 77);
    group1 /= 77;

    (*output)[1] = (uint32_t)(group1 % 77);
    group1 /= 77;

    (*output)[0] = (uint32_t)(group1 % 77);
    group1 /= 77;
    *output += 3;

    uint64_t group2 = (*(uint64_t *)((*input) + 4)) >> 6;    group2 &= (1ull << 19) - 1;
    (*output)[2] = (uint32_t)(group2 % 77);
    group2 /= 77;

    (*output)[1] = (uint32_t)(group2 % 77);
    group2 /= 77;

    (*output)[0] = (uint32_t)(group2 % 77);
    group2 /= 77;
    *output += 3;

    uint64_t group3 = (*(uint64_t *)((*input) + 7)) >> 1;    group3 &= (1ull << 19) - 1;
    (*output)[2] = (uint32_t)(group3 % 77);
    group3 /= 77;

    (*output)[1] = (uint32_t)(group3 % 77);
    group3 /= 77;

    (*output)[0] = (uint32_t)(group3 % 77);
    group3 /= 77;
    *output += 3;

    uint64_t group4 = (*(uint64_t *)((*input) + 9)) >> 4;    group4 &= (1ull << 19) - 1;
    (*output)[2] = (uint32_t)(group4 % 77);
    group4 /= 77;

    (*output)[1] = (uint32_t)(group4 % 77);
    group4 /= 77;

    (*output)[0] = (uint32_t)(group4 % 77);
    group4 /= 77;
    *output += 3;

    uint64_t group5 = (*(uint64_t *)((*input) + 11)) >> 7;    group5 &= (1ull << 19) - 1;
    (*output)[2] = (uint32_t)(group5 % 77);
    group5 /= 77;

    (*output)[1] = (uint32_t)(group5 % 77);
    group5 /= 77;

    (*output)[0] = (uint32_t)(group5 % 77);
    group5 /= 77;
    *output += 3;

    uint64_t group6 = (*(uint64_t *)((*input) + 14)) >> 2;    group6 &= (1ull << 19) - 1;
    (*output)[2] = (uint32_t)(group6 % 77);
    group6 /= 77;

    (*output)[1] = (uint32_t)(group6 % 77);
    group6 /= 77;

    (*output)[0] = (uint32_t)(group6 % 77);
    group6 /= 77;
    *output += 3;

    uint64_t group7 = (*(uint64_t *)((*input) + 16)) >> 5;    group7 &= (1ull << 19) - 1;
    (*output)[2] = (uint32_t)(group7 % 77);
    group7 /= 77;

    (*output)[1] = (uint32_t)(group7 % 77);
    group7 /= 77;

    (*output)[0] = (uint32_t)(group7 % 77);
    group7 /= 77;
    *output += 3;


    *input += 19;
}

// Unpack 19 bytes into 24 values
void Ultrapack_Decompress78(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 19) - 1;
    (*output)[2] = (uint32_t)(group0 % 78);
    group0 /= 78;

    (*output)[1] = (uint32_t)(group0 % 78);
    group0 /= 78;

    (*output)[0] = (uint32_t)(group0 % 78);
    group0 /= 78;
    *output += 3;

    uint64_t group1 = (*(uint64_t *)((*input) + 2)) >> 3;    group1 &= (1ull << 19) - 1;
    (*output)[2] = (uint32_t)(group1 % 78);
    group1 /= 78;

    (*output)[1] = (uint32_t)(group1 % 78);
    group1 /= 78;

    (*output)[0] = (uint32_t)(group1 % 78);
    group1 /= 78;
    *output += 3;

    uint64_t group2 = (*(uint64_t *)((*input) + 4)) >> 6;    group2 &= (1ull << 19) - 1;
    (*output)[2] = (uint32_t)(group2 % 78);
    group2 /= 78;

    (*output)[1] = (uint32_t)(group2 % 78);
    group2 /= 78;

    (*output)[0] = (uint32_t)(group2 % 78);
    group2 /= 78;
    *output += 3;

    uint64_t group3 = (*(uint64_t *)((*input) + 7)) >> 1;    group3 &= (1ull << 19) - 1;
    (*output)[2] = (uint32_t)(group3 % 78);
    group3 /= 78;

    (*output)[1] = (uint32_t)(group3 % 78);
    group3 /= 78;

    (*output)[0] = (uint32_t)(group3 % 78);
    group3 /= 78;
    *output += 3;

    uint64_t group4 = (*(uint64_t *)((*input) + 9)) >> 4;    group4 &= (1ull << 19) - 1;
    (*output)[2] = (uint32_t)(group4 % 78);
    group4 /= 78;

    (*output)[1] = (uint32_t)(group4 % 78);
    group4 /= 78;

    (*output)[0] = (uint32_t)(group4 % 78);
    group4 /= 78;
    *output += 3;

    uint64_t group5 = (*(uint64_t *)((*input) + 11)) >> 7;    group5 &= (1ull << 19) - 1;
    (*output)[2] = (uint32_t)(group5 % 78);
    group5 /= 78;

    (*output)[1] = (uint32_t)(group5 % 78);
    group5 /= 78;

    (*output)[0] = (uint32_t)(group5 % 78);
    group5 /= 78;
    *output += 3;

    uint64_t group6 = (*(uint64_t *)((*input) + 14)) >> 2;    group6 &= (1ull << 19) - 1;
    (*output)[2] = (uint32_t)(group6 % 78);
    group6 /= 78;

    (*output)[1] = (uint32_t)(group6 % 78);
    group6 /= 78;

    (*output)[0] = (uint32_t)(group6 % 78);
    group6 /= 78;
    *output += 3;

    uint64_t group7 = (*(uint64_t *)((*input) + 16)) >> 5;    group7 &= (1ull << 19) - 1;
    (*output)[2] = (uint32_t)(group7 % 78);
    group7 /= 78;

    (*output)[1] = (uint32_t)(group7 % 78);
    group7 /= 78;

    (*output)[0] = (uint32_t)(group7 % 78);
    group7 /= 78;
    *output += 3;


    *input += 19;
}

// Unpack 19 bytes into 24 values
void Ultrapack_Decompress79(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 19) - 1;
    (*output)[2] = (uint32_t)(group0 % 79);
    group0 /= 79;

    (*output)[1] = (uint32_t)(group0 % 79);
    group0 /= 79;

    (*output)[0] = (uint32_t)(group0 % 79);
    group0 /= 79;
    *output += 3;

    uint64_t group1 = (*(uint64_t *)((*input) + 2)) >> 3;    group1 &= (1ull << 19) - 1;
    (*output)[2] = (uint32_t)(group1 % 79);
    group1 /= 79;

    (*output)[1] = (uint32_t)(group1 % 79);
    group1 /= 79;

    (*output)[0] = (uint32_t)(group1 % 79);
    group1 /= 79;
    *output += 3;

    uint64_t group2 = (*(uint64_t *)((*input) + 4)) >> 6;    group2 &= (1ull << 19) - 1;
    (*output)[2] = (uint32_t)(group2 % 79);
    group2 /= 79;

    (*output)[1] = (uint32_t)(group2 % 79);
    group2 /= 79;

    (*output)[0] = (uint32_t)(group2 % 79);
    group2 /= 79;
    *output += 3;

    uint64_t group3 = (*(uint64_t *)((*input) + 7)) >> 1;    group3 &= (1ull << 19) - 1;
    (*output)[2] = (uint32_t)(group3 % 79);
    group3 /= 79;

    (*output)[1] = (uint32_t)(group3 % 79);
    group3 /= 79;

    (*output)[0] = (uint32_t)(group3 % 79);
    group3 /= 79;
    *output += 3;

    uint64_t group4 = (*(uint64_t *)((*input) + 9)) >> 4;    group4 &= (1ull << 19) - 1;
    (*output)[2] = (uint32_t)(group4 % 79);
    group4 /= 79;

    (*output)[1] = (uint32_t)(group4 % 79);
    group4 /= 79;

    (*output)[0] = (uint32_t)(group4 % 79);
    group4 /= 79;
    *output += 3;

    uint64_t group5 = (*(uint64_t *)((*input) + 11)) >> 7;    group5 &= (1ull << 19) - 1;
    (*output)[2] = (uint32_t)(group5 % 79);
    group5 /= 79;

    (*output)[1] = (uint32_t)(group5 % 79);
    group5 /= 79;

    (*output)[0] = (uint32_t)(group5 % 79);
    group5 /= 79;
    *output += 3;

    uint64_t group6 = (*(uint64_t *)((*input) + 14)) >> 2;    group6 &= (1ull << 19) - 1;
    (*output)[2] = (uint32_t)(group6 % 79);
    group6 /= 79;

    (*output)[1] = (uint32_t)(group6 % 79);
    group6 /= 79;

    (*output)[0] = (uint32_t)(group6 % 79);
    group6 /= 79;
    *output += 3;

    uint64_t group7 = (*(uint64_t *)((*input) + 16)) >> 5;    group7 &= (1ull << 19) - 1;
    (*output)[2] = (uint32_t)(group7 % 79);
    group7 /= 79;

    (*output)[1] = (uint32_t)(group7 % 79);
    group7 /= 79;

    (*output)[0] = (uint32_t)(group7 % 79);
    group7 /= 79;
    *output += 3;


    *input += 19;
}

// Unpack 19 bytes into 24 values
void Ultrapack_Decompress80(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 19) - 1;
    (*output)[2] = (uint32_t)(group0 % 80);
    group0 /= 80;

    (*output)[1] = (uint32_t)(group0 % 80);
    group0 /= 80;

    (*output)[0] = (uint32_t)(group0 % 80);
    group0 /= 80;
    *output += 3;

    uint64_t group1 = (*(uint64_t *)((*input) + 2)) >> 3;    group1 &= (1ull << 19) - 1;
    (*output)[2] = (uint32_t)(group1 % 80);
    group1 /= 80;

    (*output)[1] = (uint32_t)(group1 % 80);
    group1 /= 80;

    (*output)[0] = (uint32_t)(group1 % 80);
    group1 /= 80;
    *output += 3;

    uint64_t group2 = (*(uint64_t *)((*input) + 4)) >> 6;    group2 &= (1ull << 19) - 1;
    (*output)[2] = (uint32_t)(group2 % 80);
    group2 /= 80;

    (*output)[1] = (uint32_t)(group2 % 80);
    group2 /= 80;

    (*output)[0] = (uint32_t)(group2 % 80);
    group2 /= 80;
    *output += 3;

    uint64_t group3 = (*(uint64_t *)((*input) + 7)) >> 1;    group3 &= (1ull << 19) - 1;
    (*output)[2] = (uint32_t)(group3 % 80);
    group3 /= 80;

    (*output)[1] = (uint32_t)(group3 % 80);
    group3 /= 80;

    (*output)[0] = (uint32_t)(group3 % 80);
    group3 /= 80;
    *output += 3;

    uint64_t group4 = (*(uint64_t *)((*input) + 9)) >> 4;    group4 &= (1ull << 19) - 1;
    (*output)[2] = (uint32_t)(group4 % 80);
    group4 /= 80;

    (*output)[1] = (uint32_t)(group4 % 80);
    group4 /= 80;

    (*output)[0] = (uint32_t)(group4 % 80);
    group4 /= 80;
    *output += 3;

    uint64_t group5 = (*(uint64_t *)((*input) + 11)) >> 7;    group5 &= (1ull << 19) - 1;
    (*output)[2] = (uint32_t)(group5 % 80);
    group5 /= 80;

    (*output)[1] = (uint32_t)(group5 % 80);
    group5 /= 80;

    (*output)[0] = (uint32_t)(group5 % 80);
    group5 /= 80;
    *output += 3;

    uint64_t group6 = (*(uint64_t *)((*input) + 14)) >> 2;    group6 &= (1ull << 19) - 1;
    (*output)[2] = (uint32_t)(group6 % 80);
    group6 /= 80;

    (*output)[1] = (uint32_t)(group6 % 80);
    group6 /= 80;

    (*output)[0] = (uint32_t)(group6 % 80);
    group6 /= 80;
    *output += 3;

    uint64_t group7 = (*(uint64_t *)((*input) + 16)) >> 5;    group7 &= (1ull << 19) - 1;
    (*output)[2] = (uint32_t)(group7 % 80);
    group7 /= 80;

    (*output)[1] = (uint32_t)(group7 % 80);
    group7 /= 80;

    (*output)[0] = (uint32_t)(group7 % 80);
    group7 /= 80;
    *output += 3;


    *input += 19;
}

// Unpack 4 bytes into 5 values
void Ultrapack_Decompress81(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 32) - 1;
    (*output)[4] = (uint32_t)(group0 % 81);
    group0 /= 81;

    (*output)[3] = (uint32_t)(group0 % 81);
    group0 /= 81;

    (*output)[2] = (uint32_t)(group0 % 81);
    group0 /= 81;

    (*output)[1] = (uint32_t)(group0 % 81);
    group0 /= 81;

    (*output)[0] = (uint32_t)(group0 % 81);
    group0 /= 81;
    *output += 5;


    *input += 4;
}

// Unpack 4 bytes into 5 values
void Ultrapack_Decompress82(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 32) - 1;
    (*output)[4] = (uint32_t)(group0 % 82);
    group0 /= 82;

    (*output)[3] = (uint32_t)(group0 % 82);
    group0 /= 82;

    (*output)[2] = (uint32_t)(group0 % 82);
    group0 /= 82;

    (*output)[1] = (uint32_t)(group0 % 82);
    group0 /= 82;

    (*output)[0] = (uint32_t)(group0 % 82);
    group0 /= 82;
    *output += 5;


    *input += 4;
}

// Unpack 4 bytes into 5 values
void Ultrapack_Decompress83(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 32) - 1;
    (*output)[4] = (uint32_t)(group0 % 83);
    group0 /= 83;

    (*output)[3] = (uint32_t)(group0 % 83);
    group0 /= 83;

    (*output)[2] = (uint32_t)(group0 % 83);
    group0 /= 83;

    (*output)[1] = (uint32_t)(group0 % 83);
    group0 /= 83;

    (*output)[0] = (uint32_t)(group0 % 83);
    group0 /= 83;
    *output += 5;


    *input += 4;
}

// Unpack 4 bytes into 5 values
void Ultrapack_Decompress84(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 32) - 1;
    (*output)[4] = (uint32_t)(group0 % 84);
    group0 /= 84;

    (*output)[3] = (uint32_t)(group0 % 84);
    group0 /= 84;

    (*output)[2] = (uint32_t)(group0 % 84);
    group0 /= 84;

    (*output)[1] = (uint32_t)(group0 % 84);
    group0 /= 84;

    (*output)[0] = (uint32_t)(group0 % 84);
    group0 /= 84;
    *output += 5;


    *input += 4;
}

// Unpack 45 bytes into 56 values
void Ultrapack_Decompress85(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 45) - 1;
    (*output)[6] = (uint32_t)(group0 % 85);
    group0 /= 85;

    (*output)[5] = (uint32_t)(group0 % 85);
    group0 /= 85;

    (*output)[4] = (uint32_t)(group0 % 85);
    group0 /= 85;

    (*output)[3] = (uint32_t)(group0 % 85);
    group0 /= 85;

    (*output)[2] = (uint32_t)(group0 % 85);
    group0 /= 85;

    (*output)[1] = (uint32_t)(group0 % 85);
    group0 /= 85;

    (*output)[0] = (uint32_t)(group0 % 85);
    group0 /= 85;
    *output += 7;

    uint64_t group1 = (*(uint64_t *)((*input) + 5)) >> 5;    group1 &= (1ull << 45) - 1;
    (*output)[6] = (uint32_t)(group1 % 85);
    group1 /= 85;

    (*output)[5] = (uint32_t)(group1 % 85);
    group1 /= 85;

    (*output)[4] = (uint32_t)(group1 % 85);
    group1 /= 85;

    (*output)[3] = (uint32_t)(group1 % 85);
    group1 /= 85;

    (*output)[2] = (uint32_t)(group1 % 85);
    group1 /= 85;

    (*output)[1] = (uint32_t)(group1 % 85);
    group1 /= 85;

    (*output)[0] = (uint32_t)(group1 % 85);
    group1 /= 85;
    *output += 7;

    uint64_t group2 = (*(uint64_t *)((*input) + 11)) >> 2;    group2 &= (1ull << 45) - 1;
    (*output)[6] = (uint32_t)(group2 % 85);
    group2 /= 85;

    (*output)[5] = (uint32_t)(group2 % 85);
    group2 /= 85;

    (*output)[4] = (uint32_t)(group2 % 85);
    group2 /= 85;

    (*output)[3] = (uint32_t)(group2 % 85);
    group2 /= 85;

    (*output)[2] = (uint32_t)(group2 % 85);
    group2 /= 85;

    (*output)[1] = (uint32_t)(group2 % 85);
    group2 /= 85;

    (*output)[0] = (uint32_t)(group2 % 85);
    group2 /= 85;
    *output += 7;

    uint64_t group3 = (*(uint64_t *)((*input) + 16)) >> 7;    group3 &= (1ull << 45) - 1;
    (*output)[6] = (uint32_t)(group3 % 85);
    group3 /= 85;

    (*output)[5] = (uint32_t)(group3 % 85);
    group3 /= 85;

    (*output)[4] = (uint32_t)(group3 % 85);
    group3 /= 85;

    (*output)[3] = (uint32_t)(group3 % 85);
    group3 /= 85;

    (*output)[2] = (uint32_t)(group3 % 85);
    group3 /= 85;

    (*output)[1] = (uint32_t)(group3 % 85);
    group3 /= 85;

    (*output)[0] = (uint32_t)(group3 % 85);
    group3 /= 85;
    *output += 7;

    uint64_t group4 = (*(uint64_t *)((*input) + 22)) >> 4;    group4 &= (1ull << 45) - 1;
    (*output)[6] = (uint32_t)(group4 % 85);
    group4 /= 85;

    (*output)[5] = (uint32_t)(group4 % 85);
    group4 /= 85;

    (*output)[4] = (uint32_t)(group4 % 85);
    group4 /= 85;

    (*output)[3] = (uint32_t)(group4 % 85);
    group4 /= 85;

    (*output)[2] = (uint32_t)(group4 % 85);
    group4 /= 85;

    (*output)[1] = (uint32_t)(group4 % 85);
    group4 /= 85;

    (*output)[0] = (uint32_t)(group4 % 85);
    group4 /= 85;
    *output += 7;

    uint64_t group5 = (*(uint64_t *)((*input) + 28)) >> 1;    group5 &= (1ull << 45) - 1;
    (*output)[6] = (uint32_t)(group5 % 85);
    group5 /= 85;

    (*output)[5] = (uint32_t)(group5 % 85);
    group5 /= 85;

    (*output)[4] = (uint32_t)(group5 % 85);
    group5 /= 85;

    (*output)[3] = (uint32_t)(group5 % 85);
    group5 /= 85;

    (*output)[2] = (uint32_t)(group5 % 85);
    group5 /= 85;

    (*output)[1] = (uint32_t)(group5 % 85);
    group5 /= 85;

    (*output)[0] = (uint32_t)(group5 % 85);
    group5 /= 85;
    *output += 7;

    uint64_t group6 = (*(uint64_t *)((*input) + 33)) >> 6;    group6 &= (1ull << 45) - 1;
    (*output)[6] = (uint32_t)(group6 % 85);
    group6 /= 85;

    (*output)[5] = (uint32_t)(group6 % 85);
    group6 /= 85;

    (*output)[4] = (uint32_t)(group6 % 85);
    group6 /= 85;

    (*output)[3] = (uint32_t)(group6 % 85);
    group6 /= 85;

    (*output)[2] = (uint32_t)(group6 % 85);
    group6 /= 85;

    (*output)[1] = (uint32_t)(group6 % 85);
    group6 /= 85;

    (*output)[0] = (uint32_t)(group6 % 85);
    group6 /= 85;
    *output += 7;

    uint64_t group7 = (*(uint64_t *)((*input) + 39)) >> 3;    group7 &= (1ull << 45) - 1;
    (*output)[6] = (uint32_t)(group7 % 85);
    group7 /= 85;

    (*output)[5] = (uint32_t)(group7 % 85);
    group7 /= 85;

    (*output)[4] = (uint32_t)(group7 % 85);
    group7 /= 85;

    (*output)[3] = (uint32_t)(group7 % 85);
    group7 /= 85;

    (*output)[2] = (uint32_t)(group7 % 85);
    group7 /= 85;

    (*output)[1] = (uint32_t)(group7 % 85);
    group7 /= 85;

    (*output)[0] = (uint32_t)(group7 % 85);
    group7 /= 85;
    *output += 7;


    *input += 45;
}

// Unpack 45 bytes into 56 values
void Ultrapack_Decompress86(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 45) - 1;
    (*output)[6] = (uint32_t)(group0 % 86);
    group0 /= 86;

    (*output)[5] = (uint32_t)(group0 % 86);
    group0 /= 86;

    (*output)[4] = (uint32_t)(group0 % 86);
    group0 /= 86;

    (*output)[3] = (uint32_t)(group0 % 86);
    group0 /= 86;

    (*output)[2] = (uint32_t)(group0 % 86);
    group0 /= 86;

    (*output)[1] = (uint32_t)(group0 % 86);
    group0 /= 86;

    (*output)[0] = (uint32_t)(group0 % 86);
    group0 /= 86;
    *output += 7;

    uint64_t group1 = (*(uint64_t *)((*input) + 5)) >> 5;    group1 &= (1ull << 45) - 1;
    (*output)[6] = (uint32_t)(group1 % 86);
    group1 /= 86;

    (*output)[5] = (uint32_t)(group1 % 86);
    group1 /= 86;

    (*output)[4] = (uint32_t)(group1 % 86);
    group1 /= 86;

    (*output)[3] = (uint32_t)(group1 % 86);
    group1 /= 86;

    (*output)[2] = (uint32_t)(group1 % 86);
    group1 /= 86;

    (*output)[1] = (uint32_t)(group1 % 86);
    group1 /= 86;

    (*output)[0] = (uint32_t)(group1 % 86);
    group1 /= 86;
    *output += 7;

    uint64_t group2 = (*(uint64_t *)((*input) + 11)) >> 2;    group2 &= (1ull << 45) - 1;
    (*output)[6] = (uint32_t)(group2 % 86);
    group2 /= 86;

    (*output)[5] = (uint32_t)(group2 % 86);
    group2 /= 86;

    (*output)[4] = (uint32_t)(group2 % 86);
    group2 /= 86;

    (*output)[3] = (uint32_t)(group2 % 86);
    group2 /= 86;

    (*output)[2] = (uint32_t)(group2 % 86);
    group2 /= 86;

    (*output)[1] = (uint32_t)(group2 % 86);
    group2 /= 86;

    (*output)[0] = (uint32_t)(group2 % 86);
    group2 /= 86;
    *output += 7;

    uint64_t group3 = (*(uint64_t *)((*input) + 16)) >> 7;    group3 &= (1ull << 45) - 1;
    (*output)[6] = (uint32_t)(group3 % 86);
    group3 /= 86;

    (*output)[5] = (uint32_t)(group3 % 86);
    group3 /= 86;

    (*output)[4] = (uint32_t)(group3 % 86);
    group3 /= 86;

    (*output)[3] = (uint32_t)(group3 % 86);
    group3 /= 86;

    (*output)[2] = (uint32_t)(group3 % 86);
    group3 /= 86;

    (*output)[1] = (uint32_t)(group3 % 86);
    group3 /= 86;

    (*output)[0] = (uint32_t)(group3 % 86);
    group3 /= 86;
    *output += 7;

    uint64_t group4 = (*(uint64_t *)((*input) + 22)) >> 4;    group4 &= (1ull << 45) - 1;
    (*output)[6] = (uint32_t)(group4 % 86);
    group4 /= 86;

    (*output)[5] = (uint32_t)(group4 % 86);
    group4 /= 86;

    (*output)[4] = (uint32_t)(group4 % 86);
    group4 /= 86;

    (*output)[3] = (uint32_t)(group4 % 86);
    group4 /= 86;

    (*output)[2] = (uint32_t)(group4 % 86);
    group4 /= 86;

    (*output)[1] = (uint32_t)(group4 % 86);
    group4 /= 86;

    (*output)[0] = (uint32_t)(group4 % 86);
    group4 /= 86;
    *output += 7;

    uint64_t group5 = (*(uint64_t *)((*input) + 28)) >> 1;    group5 &= (1ull << 45) - 1;
    (*output)[6] = (uint32_t)(group5 % 86);
    group5 /= 86;

    (*output)[5] = (uint32_t)(group5 % 86);
    group5 /= 86;

    (*output)[4] = (uint32_t)(group5 % 86);
    group5 /= 86;

    (*output)[3] = (uint32_t)(group5 % 86);
    group5 /= 86;

    (*output)[2] = (uint32_t)(group5 % 86);
    group5 /= 86;

    (*output)[1] = (uint32_t)(group5 % 86);
    group5 /= 86;

    (*output)[0] = (uint32_t)(group5 % 86);
    group5 /= 86;
    *output += 7;

    uint64_t group6 = (*(uint64_t *)((*input) + 33)) >> 6;    group6 &= (1ull << 45) - 1;
    (*output)[6] = (uint32_t)(group6 % 86);
    group6 /= 86;

    (*output)[5] = (uint32_t)(group6 % 86);
    group6 /= 86;

    (*output)[4] = (uint32_t)(group6 % 86);
    group6 /= 86;

    (*output)[3] = (uint32_t)(group6 % 86);
    group6 /= 86;

    (*output)[2] = (uint32_t)(group6 % 86);
    group6 /= 86;

    (*output)[1] = (uint32_t)(group6 % 86);
    group6 /= 86;

    (*output)[0] = (uint32_t)(group6 % 86);
    group6 /= 86;
    *output += 7;

    uint64_t group7 = (*(uint64_t *)((*input) + 39)) >> 3;    group7 &= (1ull << 45) - 1;
    (*output)[6] = (uint32_t)(group7 % 86);
    group7 /= 86;

    (*output)[5] = (uint32_t)(group7 % 86);
    group7 /= 86;

    (*output)[4] = (uint32_t)(group7 % 86);
    group7 /= 86;

    (*output)[3] = (uint32_t)(group7 % 86);
    group7 /= 86;

    (*output)[2] = (uint32_t)(group7 % 86);
    group7 /= 86;

    (*output)[1] = (uint32_t)(group7 % 86);
    group7 /= 86;

    (*output)[0] = (uint32_t)(group7 % 86);
    group7 /= 86;
    *output += 7;


    *input += 45;
}

// Unpack 13 bytes into 16 values
void Ultrapack_Decompress87(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 13) - 1;
    (*output)[1] = (uint32_t)(group0 % 87);
    group0 /= 87;

    (*output)[0] = (uint32_t)(group0 % 87);
    group0 /= 87;
    *output += 2;

    uint64_t group1 = (*(uint64_t *)((*input) + 1)) >> 5;    group1 &= (1ull << 13) - 1;
    (*output)[1] = (uint32_t)(group1 % 87);
    group1 /= 87;

    (*output)[0] = (uint32_t)(group1 % 87);
    group1 /= 87;
    *output += 2;

    uint64_t group2 = (*(uint64_t *)((*input) + 3)) >> 2;    group2 &= (1ull << 13) - 1;
    (*output)[1] = (uint32_t)(group2 % 87);
    group2 /= 87;

    (*output)[0] = (uint32_t)(group2 % 87);
    group2 /= 87;
    *output += 2;

    uint64_t group3 = (*(uint64_t *)((*input) + 4)) >> 7;    group3 &= (1ull << 13) - 1;
    (*output)[1] = (uint32_t)(group3 % 87);
    group3 /= 87;

    (*output)[0] = (uint32_t)(group3 % 87);
    group3 /= 87;
    *output += 2;

    uint64_t group4 = (*(uint64_t *)((*input) + 6)) >> 4;    group4 &= (1ull << 13) - 1;
    (*output)[1] = (uint32_t)(group4 % 87);
    group4 /= 87;

    (*output)[0] = (uint32_t)(group4 % 87);
    group4 /= 87;
    *output += 2;

    uint64_t group5 = (*(uint64_t *)((*input) + 8)) >> 1;    group5 &= (1ull << 13) - 1;
    (*output)[1] = (uint32_t)(group5 % 87);
    group5 /= 87;

    (*output)[0] = (uint32_t)(group5 % 87);
    group5 /= 87;
    *output += 2;

    uint64_t group6 = (*(uint64_t *)((*input) + 9)) >> 6;    group6 &= (1ull << 13) - 1;
    (*output)[1] = (uint32_t)(group6 % 87);
    group6 /= 87;

    (*output)[0] = (uint32_t)(group6 % 87);
    group6 /= 87;
    *output += 2;

    uint64_t group7 = (*(uint64_t *)((*input) + 11)) >> 3;    group7 &= (1ull << 13) - 1;
    (*output)[1] = (uint32_t)(group7 % 87);
    group7 /= 87;

    (*output)[0] = (uint32_t)(group7 % 87);
    group7 /= 87;
    *output += 2;


    *input += 13;
}

// Unpack 13 bytes into 16 values
void Ultrapack_Decompress88(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 13) - 1;
    (*output)[1] = (uint32_t)(group0 % 88);
    group0 /= 88;

    (*output)[0] = (uint32_t)(group0 % 88);
    group0 /= 88;
    *output += 2;

    uint64_t group1 = (*(uint64_t *)((*input) + 1)) >> 5;    group1 &= (1ull << 13) - 1;
    (*output)[1] = (uint32_t)(group1 % 88);
    group1 /= 88;

    (*output)[0] = (uint32_t)(group1 % 88);
    group1 /= 88;
    *output += 2;

    uint64_t group2 = (*(uint64_t *)((*input) + 3)) >> 2;    group2 &= (1ull << 13) - 1;
    (*output)[1] = (uint32_t)(group2 % 88);
    group2 /= 88;

    (*output)[0] = (uint32_t)(group2 % 88);
    group2 /= 88;
    *output += 2;

    uint64_t group3 = (*(uint64_t *)((*input) + 4)) >> 7;    group3 &= (1ull << 13) - 1;
    (*output)[1] = (uint32_t)(group3 % 88);
    group3 /= 88;

    (*output)[0] = (uint32_t)(group3 % 88);
    group3 /= 88;
    *output += 2;

    uint64_t group4 = (*(uint64_t *)((*input) + 6)) >> 4;    group4 &= (1ull << 13) - 1;
    (*output)[1] = (uint32_t)(group4 % 88);
    group4 /= 88;

    (*output)[0] = (uint32_t)(group4 % 88);
    group4 /= 88;
    *output += 2;

    uint64_t group5 = (*(uint64_t *)((*input) + 8)) >> 1;    group5 &= (1ull << 13) - 1;
    (*output)[1] = (uint32_t)(group5 % 88);
    group5 /= 88;

    (*output)[0] = (uint32_t)(group5 % 88);
    group5 /= 88;
    *output += 2;

    uint64_t group6 = (*(uint64_t *)((*input) + 9)) >> 6;    group6 &= (1ull << 13) - 1;
    (*output)[1] = (uint32_t)(group6 % 88);
    group6 /= 88;

    (*output)[0] = (uint32_t)(group6 % 88);
    group6 /= 88;
    *output += 2;

    uint64_t group7 = (*(uint64_t *)((*input) + 11)) >> 3;    group7 &= (1ull << 13) - 1;
    (*output)[1] = (uint32_t)(group7 % 88);
    group7 /= 88;

    (*output)[0] = (uint32_t)(group7 % 88);
    group7 /= 88;
    *output += 2;


    *input += 13;
}

// Unpack 13 bytes into 16 values
void Ultrapack_Decompress89(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 13) - 1;
    (*output)[1] = (uint32_t)(group0 % 89);
    group0 /= 89;

    (*output)[0] = (uint32_t)(group0 % 89);
    group0 /= 89;
    *output += 2;

    uint64_t group1 = (*(uint64_t *)((*input) + 1)) >> 5;    group1 &= (1ull << 13) - 1;
    (*output)[1] = (uint32_t)(group1 % 89);
    group1 /= 89;

    (*output)[0] = (uint32_t)(group1 % 89);
    group1 /= 89;
    *output += 2;

    uint64_t group2 = (*(uint64_t *)((*input) + 3)) >> 2;    group2 &= (1ull << 13) - 1;
    (*output)[1] = (uint32_t)(group2 % 89);
    group2 /= 89;

    (*output)[0] = (uint32_t)(group2 % 89);
    group2 /= 89;
    *output += 2;

    uint64_t group3 = (*(uint64_t *)((*input) + 4)) >> 7;    group3 &= (1ull << 13) - 1;
    (*output)[1] = (uint32_t)(group3 % 89);
    group3 /= 89;

    (*output)[0] = (uint32_t)(group3 % 89);
    group3 /= 89;
    *output += 2;

    uint64_t group4 = (*(uint64_t *)((*input) + 6)) >> 4;    group4 &= (1ull << 13) - 1;
    (*output)[1] = (uint32_t)(group4 % 89);
    group4 /= 89;

    (*output)[0] = (uint32_t)(group4 % 89);
    group4 /= 89;
    *output += 2;

    uint64_t group5 = (*(uint64_t *)((*input) + 8)) >> 1;    group5 &= (1ull << 13) - 1;
    (*output)[1] = (uint32_t)(group5 % 89);
    group5 /= 89;

    (*output)[0] = (uint32_t)(group5 % 89);
    group5 /= 89;
    *output += 2;

    uint64_t group6 = (*(uint64_t *)((*input) + 9)) >> 6;    group6 &= (1ull << 13) - 1;
    (*output)[1] = (uint32_t)(group6 % 89);
    group6 /= 89;

    (*output)[0] = (uint32_t)(group6 % 89);
    group6 /= 89;
    *output += 2;

    uint64_t group7 = (*(uint64_t *)((*input) + 11)) >> 3;    group7 &= (1ull << 13) - 1;
    (*output)[1] = (uint32_t)(group7 % 89);
    group7 /= 89;

    (*output)[0] = (uint32_t)(group7 % 89);
    group7 /= 89;
    *output += 2;


    *input += 13;
}

// Unpack 13 bytes into 16 values
void Ultrapack_Decompress90(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 13) - 1;
    (*output)[1] = (uint32_t)(group0 % 90);
    group0 /= 90;

    (*output)[0] = (uint32_t)(group0 % 90);
    group0 /= 90;
    *output += 2;

    uint64_t group1 = (*(uint64_t *)((*input) + 1)) >> 5;    group1 &= (1ull << 13) - 1;
    (*output)[1] = (uint32_t)(group1 % 90);
    group1 /= 90;

    (*output)[0] = (uint32_t)(group1 % 90);
    group1 /= 90;
    *output += 2;

    uint64_t group2 = (*(uint64_t *)((*input) + 3)) >> 2;    group2 &= (1ull << 13) - 1;
    (*output)[1] = (uint32_t)(group2 % 90);
    group2 /= 90;

    (*output)[0] = (uint32_t)(group2 % 90);
    group2 /= 90;
    *output += 2;

    uint64_t group3 = (*(uint64_t *)((*input) + 4)) >> 7;    group3 &= (1ull << 13) - 1;
    (*output)[1] = (uint32_t)(group3 % 90);
    group3 /= 90;

    (*output)[0] = (uint32_t)(group3 % 90);
    group3 /= 90;
    *output += 2;

    uint64_t group4 = (*(uint64_t *)((*input) + 6)) >> 4;    group4 &= (1ull << 13) - 1;
    (*output)[1] = (uint32_t)(group4 % 90);
    group4 /= 90;

    (*output)[0] = (uint32_t)(group4 % 90);
    group4 /= 90;
    *output += 2;

    uint64_t group5 = (*(uint64_t *)((*input) + 8)) >> 1;    group5 &= (1ull << 13) - 1;
    (*output)[1] = (uint32_t)(group5 % 90);
    group5 /= 90;

    (*output)[0] = (uint32_t)(group5 % 90);
    group5 /= 90;
    *output += 2;

    uint64_t group6 = (*(uint64_t *)((*input) + 9)) >> 6;    group6 &= (1ull << 13) - 1;
    (*output)[1] = (uint32_t)(group6 % 90);
    group6 /= 90;

    (*output)[0] = (uint32_t)(group6 % 90);
    group6 /= 90;
    *output += 2;

    uint64_t group7 = (*(uint64_t *)((*input) + 11)) >> 3;    group7 &= (1ull << 13) - 1;
    (*output)[1] = (uint32_t)(group7 % 90);
    group7 /= 90;

    (*output)[0] = (uint32_t)(group7 % 90);
    group7 /= 90;
    *output += 2;


    *input += 13;
}

// Unpack 33 bytes into 40 values
void Ultrapack_Decompress91(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 33) - 1;
    (*output)[4] = (uint32_t)(group0 % 91);
    group0 /= 91;

    (*output)[3] = (uint32_t)(group0 % 91);
    group0 /= 91;

    (*output)[2] = (uint32_t)(group0 % 91);
    group0 /= 91;

    (*output)[1] = (uint32_t)(group0 % 91);
    group0 /= 91;

    (*output)[0] = (uint32_t)(group0 % 91);
    group0 /= 91;
    *output += 5;

    uint64_t group1 = (*(uint64_t *)((*input) + 4)) >> 1;    group1 &= (1ull << 33) - 1;
    (*output)[4] = (uint32_t)(group1 % 91);
    group1 /= 91;

    (*output)[3] = (uint32_t)(group1 % 91);
    group1 /= 91;

    (*output)[2] = (uint32_t)(group1 % 91);
    group1 /= 91;

    (*output)[1] = (uint32_t)(group1 % 91);
    group1 /= 91;

    (*output)[0] = (uint32_t)(group1 % 91);
    group1 /= 91;
    *output += 5;

    uint64_t group2 = (*(uint64_t *)((*input) + 8)) >> 2;    group2 &= (1ull << 33) - 1;
    (*output)[4] = (uint32_t)(group2 % 91);
    group2 /= 91;

    (*output)[3] = (uint32_t)(group2 % 91);
    group2 /= 91;

    (*output)[2] = (uint32_t)(group2 % 91);
    group2 /= 91;

    (*output)[1] = (uint32_t)(group2 % 91);
    group2 /= 91;

    (*output)[0] = (uint32_t)(group2 % 91);
    group2 /= 91;
    *output += 5;

    uint64_t group3 = (*(uint64_t *)((*input) + 12)) >> 3;    group3 &= (1ull << 33) - 1;
    (*output)[4] = (uint32_t)(group3 % 91);
    group3 /= 91;

    (*output)[3] = (uint32_t)(group3 % 91);
    group3 /= 91;

    (*output)[2] = (uint32_t)(group3 % 91);
    group3 /= 91;

    (*output)[1] = (uint32_t)(group3 % 91);
    group3 /= 91;

    (*output)[0] = (uint32_t)(group3 % 91);
    group3 /= 91;
    *output += 5;

    uint64_t group4 = (*(uint64_t *)((*input) + 16)) >> 4;    group4 &= (1ull << 33) - 1;
    (*output)[4] = (uint32_t)(group4 % 91);
    group4 /= 91;

    (*output)[3] = (uint32_t)(group4 % 91);
    group4 /= 91;

    (*output)[2] = (uint32_t)(group4 % 91);
    group4 /= 91;

    (*output)[1] = (uint32_t)(group4 % 91);
    group4 /= 91;

    (*output)[0] = (uint32_t)(group4 % 91);
    group4 /= 91;
    *output += 5;

    uint64_t group5 = (*(uint64_t *)((*input) + 20)) >> 5;    group5 &= (1ull << 33) - 1;
    (*output)[4] = (uint32_t)(group5 % 91);
    group5 /= 91;

    (*output)[3] = (uint32_t)(group5 % 91);
    group5 /= 91;

    (*output)[2] = (uint32_t)(group5 % 91);
    group5 /= 91;

    (*output)[1] = (uint32_t)(group5 % 91);
    group5 /= 91;

    (*output)[0] = (uint32_t)(group5 % 91);
    group5 /= 91;
    *output += 5;

    uint64_t group6 = (*(uint64_t *)((*input) + 24)) >> 6;    group6 &= (1ull << 33) - 1;
    (*output)[4] = (uint32_t)(group6 % 91);
    group6 /= 91;

    (*output)[3] = (uint32_t)(group6 % 91);
    group6 /= 91;

    (*output)[2] = (uint32_t)(group6 % 91);
    group6 /= 91;

    (*output)[1] = (uint32_t)(group6 % 91);
    group6 /= 91;

    (*output)[0] = (uint32_t)(group6 % 91);
    group6 /= 91;
    *output += 5;

    uint64_t group7 = (*(uint64_t *)((*input) + 28)) >> 7;    group7 &= (1ull << 33) - 1;
    (*output)[4] = (uint32_t)(group7 % 91);
    group7 /= 91;

    (*output)[3] = (uint32_t)(group7 % 91);
    group7 /= 91;

    (*output)[2] = (uint32_t)(group7 % 91);
    group7 /= 91;

    (*output)[1] = (uint32_t)(group7 % 91);
    group7 /= 91;

    (*output)[0] = (uint32_t)(group7 % 91);
    group7 /= 91;
    *output += 5;


    *input += 33;
}

// Unpack 33 bytes into 40 values
void Ultrapack_Decompress92(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 33) - 1;
    (*output)[4] = (uint32_t)(group0 % 92);
    group0 /= 92;

    (*output)[3] = (uint32_t)(group0 % 92);
    group0 /= 92;

    (*output)[2] = (uint32_t)(group0 % 92);
    group0 /= 92;

    (*output)[1] = (uint32_t)(group0 % 92);
    group0 /= 92;

    (*output)[0] = (uint32_t)(group0 % 92);
    group0 /= 92;
    *output += 5;

    uint64_t group1 = (*(uint64_t *)((*input) + 4)) >> 1;    group1 &= (1ull << 33) - 1;
    (*output)[4] = (uint32_t)(group1 % 92);
    group1 /= 92;

    (*output)[3] = (uint32_t)(group1 % 92);
    group1 /= 92;

    (*output)[2] = (uint32_t)(group1 % 92);
    group1 /= 92;

    (*output)[1] = (uint32_t)(group1 % 92);
    group1 /= 92;

    (*output)[0] = (uint32_t)(group1 % 92);
    group1 /= 92;
    *output += 5;

    uint64_t group2 = (*(uint64_t *)((*input) + 8)) >> 2;    group2 &= (1ull << 33) - 1;
    (*output)[4] = (uint32_t)(group2 % 92);
    group2 /= 92;

    (*output)[3] = (uint32_t)(group2 % 92);
    group2 /= 92;

    (*output)[2] = (uint32_t)(group2 % 92);
    group2 /= 92;

    (*output)[1] = (uint32_t)(group2 % 92);
    group2 /= 92;

    (*output)[0] = (uint32_t)(group2 % 92);
    group2 /= 92;
    *output += 5;

    uint64_t group3 = (*(uint64_t *)((*input) + 12)) >> 3;    group3 &= (1ull << 33) - 1;
    (*output)[4] = (uint32_t)(group3 % 92);
    group3 /= 92;

    (*output)[3] = (uint32_t)(group3 % 92);
    group3 /= 92;

    (*output)[2] = (uint32_t)(group3 % 92);
    group3 /= 92;

    (*output)[1] = (uint32_t)(group3 % 92);
    group3 /= 92;

    (*output)[0] = (uint32_t)(group3 % 92);
    group3 /= 92;
    *output += 5;

    uint64_t group4 = (*(uint64_t *)((*input) + 16)) >> 4;    group4 &= (1ull << 33) - 1;
    (*output)[4] = (uint32_t)(group4 % 92);
    group4 /= 92;

    (*output)[3] = (uint32_t)(group4 % 92);
    group4 /= 92;

    (*output)[2] = (uint32_t)(group4 % 92);
    group4 /= 92;

    (*output)[1] = (uint32_t)(group4 % 92);
    group4 /= 92;

    (*output)[0] = (uint32_t)(group4 % 92);
    group4 /= 92;
    *output += 5;

    uint64_t group5 = (*(uint64_t *)((*input) + 20)) >> 5;    group5 &= (1ull << 33) - 1;
    (*output)[4] = (uint32_t)(group5 % 92);
    group5 /= 92;

    (*output)[3] = (uint32_t)(group5 % 92);
    group5 /= 92;

    (*output)[2] = (uint32_t)(group5 % 92);
    group5 /= 92;

    (*output)[1] = (uint32_t)(group5 % 92);
    group5 /= 92;

    (*output)[0] = (uint32_t)(group5 % 92);
    group5 /= 92;
    *output += 5;

    uint64_t group6 = (*(uint64_t *)((*input) + 24)) >> 6;    group6 &= (1ull << 33) - 1;
    (*output)[4] = (uint32_t)(group6 % 92);
    group6 /= 92;

    (*output)[3] = (uint32_t)(group6 % 92);
    group6 /= 92;

    (*output)[2] = (uint32_t)(group6 % 92);
    group6 /= 92;

    (*output)[1] = (uint32_t)(group6 % 92);
    group6 /= 92;

    (*output)[0] = (uint32_t)(group6 % 92);
    group6 /= 92;
    *output += 5;

    uint64_t group7 = (*(uint64_t *)((*input) + 28)) >> 7;    group7 &= (1ull << 33) - 1;
    (*output)[4] = (uint32_t)(group7 % 92);
    group7 /= 92;

    (*output)[3] = (uint32_t)(group7 % 92);
    group7 /= 92;

    (*output)[2] = (uint32_t)(group7 % 92);
    group7 /= 92;

    (*output)[1] = (uint32_t)(group7 % 92);
    group7 /= 92;

    (*output)[0] = (uint32_t)(group7 % 92);
    group7 /= 92;
    *output += 5;


    *input += 33;
}

// Unpack 33 bytes into 40 values
void Ultrapack_Decompress93(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 33) - 1;
    (*output)[4] = (uint32_t)(group0 % 93);
    group0 /= 93;

    (*output)[3] = (uint32_t)(group0 % 93);
    group0 /= 93;

    (*output)[2] = (uint32_t)(group0 % 93);
    group0 /= 93;

    (*output)[1] = (uint32_t)(group0 % 93);
    group0 /= 93;

    (*output)[0] = (uint32_t)(group0 % 93);
    group0 /= 93;
    *output += 5;

    uint64_t group1 = (*(uint64_t *)((*input) + 4)) >> 1;    group1 &= (1ull << 33) - 1;
    (*output)[4] = (uint32_t)(group1 % 93);
    group1 /= 93;

    (*output)[3] = (uint32_t)(group1 % 93);
    group1 /= 93;

    (*output)[2] = (uint32_t)(group1 % 93);
    group1 /= 93;

    (*output)[1] = (uint32_t)(group1 % 93);
    group1 /= 93;

    (*output)[0] = (uint32_t)(group1 % 93);
    group1 /= 93;
    *output += 5;

    uint64_t group2 = (*(uint64_t *)((*input) + 8)) >> 2;    group2 &= (1ull << 33) - 1;
    (*output)[4] = (uint32_t)(group2 % 93);
    group2 /= 93;

    (*output)[3] = (uint32_t)(group2 % 93);
    group2 /= 93;

    (*output)[2] = (uint32_t)(group2 % 93);
    group2 /= 93;

    (*output)[1] = (uint32_t)(group2 % 93);
    group2 /= 93;

    (*output)[0] = (uint32_t)(group2 % 93);
    group2 /= 93;
    *output += 5;

    uint64_t group3 = (*(uint64_t *)((*input) + 12)) >> 3;    group3 &= (1ull << 33) - 1;
    (*output)[4] = (uint32_t)(group3 % 93);
    group3 /= 93;

    (*output)[3] = (uint32_t)(group3 % 93);
    group3 /= 93;

    (*output)[2] = (uint32_t)(group3 % 93);
    group3 /= 93;

    (*output)[1] = (uint32_t)(group3 % 93);
    group3 /= 93;

    (*output)[0] = (uint32_t)(group3 % 93);
    group3 /= 93;
    *output += 5;

    uint64_t group4 = (*(uint64_t *)((*input) + 16)) >> 4;    group4 &= (1ull << 33) - 1;
    (*output)[4] = (uint32_t)(group4 % 93);
    group4 /= 93;

    (*output)[3] = (uint32_t)(group4 % 93);
    group4 /= 93;

    (*output)[2] = (uint32_t)(group4 % 93);
    group4 /= 93;

    (*output)[1] = (uint32_t)(group4 % 93);
    group4 /= 93;

    (*output)[0] = (uint32_t)(group4 % 93);
    group4 /= 93;
    *output += 5;

    uint64_t group5 = (*(uint64_t *)((*input) + 20)) >> 5;    group5 &= (1ull << 33) - 1;
    (*output)[4] = (uint32_t)(group5 % 93);
    group5 /= 93;

    (*output)[3] = (uint32_t)(group5 % 93);
    group5 /= 93;

    (*output)[2] = (uint32_t)(group5 % 93);
    group5 /= 93;

    (*output)[1] = (uint32_t)(group5 % 93);
    group5 /= 93;

    (*output)[0] = (uint32_t)(group5 % 93);
    group5 /= 93;
    *output += 5;

    uint64_t group6 = (*(uint64_t *)((*input) + 24)) >> 6;    group6 &= (1ull << 33) - 1;
    (*output)[4] = (uint32_t)(group6 % 93);
    group6 /= 93;

    (*output)[3] = (uint32_t)(group6 % 93);
    group6 /= 93;

    (*output)[2] = (uint32_t)(group6 % 93);
    group6 /= 93;

    (*output)[1] = (uint32_t)(group6 % 93);
    group6 /= 93;

    (*output)[0] = (uint32_t)(group6 % 93);
    group6 /= 93;
    *output += 5;

    uint64_t group7 = (*(uint64_t *)((*input) + 28)) >> 7;    group7 &= (1ull << 33) - 1;
    (*output)[4] = (uint32_t)(group7 % 93);
    group7 /= 93;

    (*output)[3] = (uint32_t)(group7 % 93);
    group7 /= 93;

    (*output)[2] = (uint32_t)(group7 % 93);
    group7 /= 93;

    (*output)[1] = (uint32_t)(group7 % 93);
    group7 /= 93;

    (*output)[0] = (uint32_t)(group7 % 93);
    group7 /= 93;
    *output += 5;


    *input += 33;
}

// Unpack 33 bytes into 40 values
void Ultrapack_Decompress94(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 33) - 1;
    (*output)[4] = (uint32_t)(group0 % 94);
    group0 /= 94;

    (*output)[3] = (uint32_t)(group0 % 94);
    group0 /= 94;

    (*output)[2] = (uint32_t)(group0 % 94);
    group0 /= 94;

    (*output)[1] = (uint32_t)(group0 % 94);
    group0 /= 94;

    (*output)[0] = (uint32_t)(group0 % 94);
    group0 /= 94;
    *output += 5;

    uint64_t group1 = (*(uint64_t *)((*input) + 4)) >> 1;    group1 &= (1ull << 33) - 1;
    (*output)[4] = (uint32_t)(group1 % 94);
    group1 /= 94;

    (*output)[3] = (uint32_t)(group1 % 94);
    group1 /= 94;

    (*output)[2] = (uint32_t)(group1 % 94);
    group1 /= 94;

    (*output)[1] = (uint32_t)(group1 % 94);
    group1 /= 94;

    (*output)[0] = (uint32_t)(group1 % 94);
    group1 /= 94;
    *output += 5;

    uint64_t group2 = (*(uint64_t *)((*input) + 8)) >> 2;    group2 &= (1ull << 33) - 1;
    (*output)[4] = (uint32_t)(group2 % 94);
    group2 /= 94;

    (*output)[3] = (uint32_t)(group2 % 94);
    group2 /= 94;

    (*output)[2] = (uint32_t)(group2 % 94);
    group2 /= 94;

    (*output)[1] = (uint32_t)(group2 % 94);
    group2 /= 94;

    (*output)[0] = (uint32_t)(group2 % 94);
    group2 /= 94;
    *output += 5;

    uint64_t group3 = (*(uint64_t *)((*input) + 12)) >> 3;    group3 &= (1ull << 33) - 1;
    (*output)[4] = (uint32_t)(group3 % 94);
    group3 /= 94;

    (*output)[3] = (uint32_t)(group3 % 94);
    group3 /= 94;

    (*output)[2] = (uint32_t)(group3 % 94);
    group3 /= 94;

    (*output)[1] = (uint32_t)(group3 % 94);
    group3 /= 94;

    (*output)[0] = (uint32_t)(group3 % 94);
    group3 /= 94;
    *output += 5;

    uint64_t group4 = (*(uint64_t *)((*input) + 16)) >> 4;    group4 &= (1ull << 33) - 1;
    (*output)[4] = (uint32_t)(group4 % 94);
    group4 /= 94;

    (*output)[3] = (uint32_t)(group4 % 94);
    group4 /= 94;

    (*output)[2] = (uint32_t)(group4 % 94);
    group4 /= 94;

    (*output)[1] = (uint32_t)(group4 % 94);
    group4 /= 94;

    (*output)[0] = (uint32_t)(group4 % 94);
    group4 /= 94;
    *output += 5;

    uint64_t group5 = (*(uint64_t *)((*input) + 20)) >> 5;    group5 &= (1ull << 33) - 1;
    (*output)[4] = (uint32_t)(group5 % 94);
    group5 /= 94;

    (*output)[3] = (uint32_t)(group5 % 94);
    group5 /= 94;

    (*output)[2] = (uint32_t)(group5 % 94);
    group5 /= 94;

    (*output)[1] = (uint32_t)(group5 % 94);
    group5 /= 94;

    (*output)[0] = (uint32_t)(group5 % 94);
    group5 /= 94;
    *output += 5;

    uint64_t group6 = (*(uint64_t *)((*input) + 24)) >> 6;    group6 &= (1ull << 33) - 1;
    (*output)[4] = (uint32_t)(group6 % 94);
    group6 /= 94;

    (*output)[3] = (uint32_t)(group6 % 94);
    group6 /= 94;

    (*output)[2] = (uint32_t)(group6 % 94);
    group6 /= 94;

    (*output)[1] = (uint32_t)(group6 % 94);
    group6 /= 94;

    (*output)[0] = (uint32_t)(group6 % 94);
    group6 /= 94;
    *output += 5;

    uint64_t group7 = (*(uint64_t *)((*input) + 28)) >> 7;    group7 &= (1ull << 33) - 1;
    (*output)[4] = (uint32_t)(group7 % 94);
    group7 /= 94;

    (*output)[3] = (uint32_t)(group7 % 94);
    group7 /= 94;

    (*output)[2] = (uint32_t)(group7 % 94);
    group7 /= 94;

    (*output)[1] = (uint32_t)(group7 % 94);
    group7 /= 94;

    (*output)[0] = (uint32_t)(group7 % 94);
    group7 /= 94;
    *output += 5;


    *input += 33;
}

// Unpack 33 bytes into 40 values
void Ultrapack_Decompress95(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 33) - 1;
    (*output)[4] = (uint32_t)(group0 % 95);
    group0 /= 95;

    (*output)[3] = (uint32_t)(group0 % 95);
    group0 /= 95;

    (*output)[2] = (uint32_t)(group0 % 95);
    group0 /= 95;

    (*output)[1] = (uint32_t)(group0 % 95);
    group0 /= 95;

    (*output)[0] = (uint32_t)(group0 % 95);
    group0 /= 95;
    *output += 5;

    uint64_t group1 = (*(uint64_t *)((*input) + 4)) >> 1;    group1 &= (1ull << 33) - 1;
    (*output)[4] = (uint32_t)(group1 % 95);
    group1 /= 95;

    (*output)[3] = (uint32_t)(group1 % 95);
    group1 /= 95;

    (*output)[2] = (uint32_t)(group1 % 95);
    group1 /= 95;

    (*output)[1] = (uint32_t)(group1 % 95);
    group1 /= 95;

    (*output)[0] = (uint32_t)(group1 % 95);
    group1 /= 95;
    *output += 5;

    uint64_t group2 = (*(uint64_t *)((*input) + 8)) >> 2;    group2 &= (1ull << 33) - 1;
    (*output)[4] = (uint32_t)(group2 % 95);
    group2 /= 95;

    (*output)[3] = (uint32_t)(group2 % 95);
    group2 /= 95;

    (*output)[2] = (uint32_t)(group2 % 95);
    group2 /= 95;

    (*output)[1] = (uint32_t)(group2 % 95);
    group2 /= 95;

    (*output)[0] = (uint32_t)(group2 % 95);
    group2 /= 95;
    *output += 5;

    uint64_t group3 = (*(uint64_t *)((*input) + 12)) >> 3;    group3 &= (1ull << 33) - 1;
    (*output)[4] = (uint32_t)(group3 % 95);
    group3 /= 95;

    (*output)[3] = (uint32_t)(group3 % 95);
    group3 /= 95;

    (*output)[2] = (uint32_t)(group3 % 95);
    group3 /= 95;

    (*output)[1] = (uint32_t)(group3 % 95);
    group3 /= 95;

    (*output)[0] = (uint32_t)(group3 % 95);
    group3 /= 95;
    *output += 5;

    uint64_t group4 = (*(uint64_t *)((*input) + 16)) >> 4;    group4 &= (1ull << 33) - 1;
    (*output)[4] = (uint32_t)(group4 % 95);
    group4 /= 95;

    (*output)[3] = (uint32_t)(group4 % 95);
    group4 /= 95;

    (*output)[2] = (uint32_t)(group4 % 95);
    group4 /= 95;

    (*output)[1] = (uint32_t)(group4 % 95);
    group4 /= 95;

    (*output)[0] = (uint32_t)(group4 % 95);
    group4 /= 95;
    *output += 5;

    uint64_t group5 = (*(uint64_t *)((*input) + 20)) >> 5;    group5 &= (1ull << 33) - 1;
    (*output)[4] = (uint32_t)(group5 % 95);
    group5 /= 95;

    (*output)[3] = (uint32_t)(group5 % 95);
    group5 /= 95;

    (*output)[2] = (uint32_t)(group5 % 95);
    group5 /= 95;

    (*output)[1] = (uint32_t)(group5 % 95);
    group5 /= 95;

    (*output)[0] = (uint32_t)(group5 % 95);
    group5 /= 95;
    *output += 5;

    uint64_t group6 = (*(uint64_t *)((*input) + 24)) >> 6;    group6 &= (1ull << 33) - 1;
    (*output)[4] = (uint32_t)(group6 % 95);
    group6 /= 95;

    (*output)[3] = (uint32_t)(group6 % 95);
    group6 /= 95;

    (*output)[2] = (uint32_t)(group6 % 95);
    group6 /= 95;

    (*output)[1] = (uint32_t)(group6 % 95);
    group6 /= 95;

    (*output)[0] = (uint32_t)(group6 % 95);
    group6 /= 95;
    *output += 5;

    uint64_t group7 = (*(uint64_t *)((*input) + 28)) >> 7;    group7 &= (1ull << 33) - 1;
    (*output)[4] = (uint32_t)(group7 % 95);
    group7 /= 95;

    (*output)[3] = (uint32_t)(group7 % 95);
    group7 /= 95;

    (*output)[2] = (uint32_t)(group7 % 95);
    group7 /= 95;

    (*output)[1] = (uint32_t)(group7 % 95);
    group7 /= 95;

    (*output)[0] = (uint32_t)(group7 % 95);
    group7 /= 95;
    *output += 5;


    *input += 33;
}

// Unpack 33 bytes into 40 values
void Ultrapack_Decompress96(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 33) - 1;
    (*output)[4] = (uint32_t)(group0 % 96);
    group0 /= 96;

    (*output)[3] = (uint32_t)(group0 % 96);
    group0 /= 96;

    (*output)[2] = (uint32_t)(group0 % 96);
    group0 /= 96;

    (*output)[1] = (uint32_t)(group0 % 96);
    group0 /= 96;

    (*output)[0] = (uint32_t)(group0 % 96);
    group0 /= 96;
    *output += 5;

    uint64_t group1 = (*(uint64_t *)((*input) + 4)) >> 1;    group1 &= (1ull << 33) - 1;
    (*output)[4] = (uint32_t)(group1 % 96);
    group1 /= 96;

    (*output)[3] = (uint32_t)(group1 % 96);
    group1 /= 96;

    (*output)[2] = (uint32_t)(group1 % 96);
    group1 /= 96;

    (*output)[1] = (uint32_t)(group1 % 96);
    group1 /= 96;

    (*output)[0] = (uint32_t)(group1 % 96);
    group1 /= 96;
    *output += 5;

    uint64_t group2 = (*(uint64_t *)((*input) + 8)) >> 2;    group2 &= (1ull << 33) - 1;
    (*output)[4] = (uint32_t)(group2 % 96);
    group2 /= 96;

    (*output)[3] = (uint32_t)(group2 % 96);
    group2 /= 96;

    (*output)[2] = (uint32_t)(group2 % 96);
    group2 /= 96;

    (*output)[1] = (uint32_t)(group2 % 96);
    group2 /= 96;

    (*output)[0] = (uint32_t)(group2 % 96);
    group2 /= 96;
    *output += 5;

    uint64_t group3 = (*(uint64_t *)((*input) + 12)) >> 3;    group3 &= (1ull << 33) - 1;
    (*output)[4] = (uint32_t)(group3 % 96);
    group3 /= 96;

    (*output)[3] = (uint32_t)(group3 % 96);
    group3 /= 96;

    (*output)[2] = (uint32_t)(group3 % 96);
    group3 /= 96;

    (*output)[1] = (uint32_t)(group3 % 96);
    group3 /= 96;

    (*output)[0] = (uint32_t)(group3 % 96);
    group3 /= 96;
    *output += 5;

    uint64_t group4 = (*(uint64_t *)((*input) + 16)) >> 4;    group4 &= (1ull << 33) - 1;
    (*output)[4] = (uint32_t)(group4 % 96);
    group4 /= 96;

    (*output)[3] = (uint32_t)(group4 % 96);
    group4 /= 96;

    (*output)[2] = (uint32_t)(group4 % 96);
    group4 /= 96;

    (*output)[1] = (uint32_t)(group4 % 96);
    group4 /= 96;

    (*output)[0] = (uint32_t)(group4 % 96);
    group4 /= 96;
    *output += 5;

    uint64_t group5 = (*(uint64_t *)((*input) + 20)) >> 5;    group5 &= (1ull << 33) - 1;
    (*output)[4] = (uint32_t)(group5 % 96);
    group5 /= 96;

    (*output)[3] = (uint32_t)(group5 % 96);
    group5 /= 96;

    (*output)[2] = (uint32_t)(group5 % 96);
    group5 /= 96;

    (*output)[1] = (uint32_t)(group5 % 96);
    group5 /= 96;

    (*output)[0] = (uint32_t)(group5 % 96);
    group5 /= 96;
    *output += 5;

    uint64_t group6 = (*(uint64_t *)((*input) + 24)) >> 6;    group6 &= (1ull << 33) - 1;
    (*output)[4] = (uint32_t)(group6 % 96);
    group6 /= 96;

    (*output)[3] = (uint32_t)(group6 % 96);
    group6 /= 96;

    (*output)[2] = (uint32_t)(group6 % 96);
    group6 /= 96;

    (*output)[1] = (uint32_t)(group6 % 96);
    group6 /= 96;

    (*output)[0] = (uint32_t)(group6 % 96);
    group6 /= 96;
    *output += 5;

    uint64_t group7 = (*(uint64_t *)((*input) + 28)) >> 7;    group7 &= (1ull << 33) - 1;
    (*output)[4] = (uint32_t)(group7 % 96);
    group7 /= 96;

    (*output)[3] = (uint32_t)(group7 % 96);
    group7 /= 96;

    (*output)[2] = (uint32_t)(group7 % 96);
    group7 /= 96;

    (*output)[1] = (uint32_t)(group7 % 96);
    group7 /= 96;

    (*output)[0] = (uint32_t)(group7 % 96);
    group7 /= 96;
    *output += 5;


    *input += 33;
}

// Unpack 33 bytes into 40 values
void Ultrapack_Decompress97(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 33) - 1;
    (*output)[4] = (uint32_t)(group0 % 97);
    group0 /= 97;

    (*output)[3] = (uint32_t)(group0 % 97);
    group0 /= 97;

    (*output)[2] = (uint32_t)(group0 % 97);
    group0 /= 97;

    (*output)[1] = (uint32_t)(group0 % 97);
    group0 /= 97;

    (*output)[0] = (uint32_t)(group0 % 97);
    group0 /= 97;
    *output += 5;

    uint64_t group1 = (*(uint64_t *)((*input) + 4)) >> 1;    group1 &= (1ull << 33) - 1;
    (*output)[4] = (uint32_t)(group1 % 97);
    group1 /= 97;

    (*output)[3] = (uint32_t)(group1 % 97);
    group1 /= 97;

    (*output)[2] = (uint32_t)(group1 % 97);
    group1 /= 97;

    (*output)[1] = (uint32_t)(group1 % 97);
    group1 /= 97;

    (*output)[0] = (uint32_t)(group1 % 97);
    group1 /= 97;
    *output += 5;

    uint64_t group2 = (*(uint64_t *)((*input) + 8)) >> 2;    group2 &= (1ull << 33) - 1;
    (*output)[4] = (uint32_t)(group2 % 97);
    group2 /= 97;

    (*output)[3] = (uint32_t)(group2 % 97);
    group2 /= 97;

    (*output)[2] = (uint32_t)(group2 % 97);
    group2 /= 97;

    (*output)[1] = (uint32_t)(group2 % 97);
    group2 /= 97;

    (*output)[0] = (uint32_t)(group2 % 97);
    group2 /= 97;
    *output += 5;

    uint64_t group3 = (*(uint64_t *)((*input) + 12)) >> 3;    group3 &= (1ull << 33) - 1;
    (*output)[4] = (uint32_t)(group3 % 97);
    group3 /= 97;

    (*output)[3] = (uint32_t)(group3 % 97);
    group3 /= 97;

    (*output)[2] = (uint32_t)(group3 % 97);
    group3 /= 97;

    (*output)[1] = (uint32_t)(group3 % 97);
    group3 /= 97;

    (*output)[0] = (uint32_t)(group3 % 97);
    group3 /= 97;
    *output += 5;

    uint64_t group4 = (*(uint64_t *)((*input) + 16)) >> 4;    group4 &= (1ull << 33) - 1;
    (*output)[4] = (uint32_t)(group4 % 97);
    group4 /= 97;

    (*output)[3] = (uint32_t)(group4 % 97);
    group4 /= 97;

    (*output)[2] = (uint32_t)(group4 % 97);
    group4 /= 97;

    (*output)[1] = (uint32_t)(group4 % 97);
    group4 /= 97;

    (*output)[0] = (uint32_t)(group4 % 97);
    group4 /= 97;
    *output += 5;

    uint64_t group5 = (*(uint64_t *)((*input) + 20)) >> 5;    group5 &= (1ull << 33) - 1;
    (*output)[4] = (uint32_t)(group5 % 97);
    group5 /= 97;

    (*output)[3] = (uint32_t)(group5 % 97);
    group5 /= 97;

    (*output)[2] = (uint32_t)(group5 % 97);
    group5 /= 97;

    (*output)[1] = (uint32_t)(group5 % 97);
    group5 /= 97;

    (*output)[0] = (uint32_t)(group5 % 97);
    group5 /= 97;
    *output += 5;

    uint64_t group6 = (*(uint64_t *)((*input) + 24)) >> 6;    group6 &= (1ull << 33) - 1;
    (*output)[4] = (uint32_t)(group6 % 97);
    group6 /= 97;

    (*output)[3] = (uint32_t)(group6 % 97);
    group6 /= 97;

    (*output)[2] = (uint32_t)(group6 % 97);
    group6 /= 97;

    (*output)[1] = (uint32_t)(group6 % 97);
    group6 /= 97;

    (*output)[0] = (uint32_t)(group6 % 97);
    group6 /= 97;
    *output += 5;

    uint64_t group7 = (*(uint64_t *)((*input) + 28)) >> 7;    group7 &= (1ull << 33) - 1;
    (*output)[4] = (uint32_t)(group7 % 97);
    group7 /= 97;

    (*output)[3] = (uint32_t)(group7 % 97);
    group7 /= 97;

    (*output)[2] = (uint32_t)(group7 % 97);
    group7 /= 97;

    (*output)[1] = (uint32_t)(group7 % 97);
    group7 /= 97;

    (*output)[0] = (uint32_t)(group7 % 97);
    group7 /= 97;
    *output += 5;


    *input += 33;
}

// Unpack 5 bytes into 6 values
void Ultrapack_Decompress98(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 20) - 1;
    (*output)[2] = (uint32_t)(group0 % 98);
    group0 /= 98;

    (*output)[1] = (uint32_t)(group0 % 98);
    group0 /= 98;

    (*output)[0] = (uint32_t)(group0 % 98);
    group0 /= 98;
    *output += 3;

    uint64_t group1 = (*(uint64_t *)((*input) + 2)) >> 4;    group1 &= (1ull << 20) - 1;
    (*output)[2] = (uint32_t)(group1 % 98);
    group1 /= 98;

    (*output)[1] = (uint32_t)(group1 % 98);
    group1 /= 98;

    (*output)[0] = (uint32_t)(group1 % 98);
    group1 /= 98;
    *output += 3;


    *input += 5;
}

// Unpack 5 bytes into 6 values
void Ultrapack_Decompress99(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 20) - 1;
    (*output)[2] = (uint32_t)(group0 % 99);
    group0 /= 99;

    (*output)[1] = (uint32_t)(group0 % 99);
    group0 /= 99;

    (*output)[0] = (uint32_t)(group0 % 99);
    group0 /= 99;
    *output += 3;

    uint64_t group1 = (*(uint64_t *)((*input) + 2)) >> 4;    group1 &= (1ull << 20) - 1;
    (*output)[2] = (uint32_t)(group1 % 99);
    group1 /= 99;

    (*output)[1] = (uint32_t)(group1 % 99);
    group1 /= 99;

    (*output)[0] = (uint32_t)(group1 % 99);
    group1 /= 99;
    *output += 3;


    *input += 5;
}

// Unpack 5 bytes into 6 values
void Ultrapack_Decompress100(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 20) - 1;
    (*output)[2] = (uint32_t)(group0 % 100);
    group0 /= 100;

    (*output)[1] = (uint32_t)(group0 % 100);
    group0 /= 100;

    (*output)[0] = (uint32_t)(group0 % 100);
    group0 /= 100;
    *output += 3;

    uint64_t group1 = (*(uint64_t *)((*input) + 2)) >> 4;    group1 &= (1ull << 20) - 1;
    (*output)[2] = (uint32_t)(group1 % 100);
    group1 /= 100;

    (*output)[1] = (uint32_t)(group1 % 100);
    group1 /= 100;

    (*output)[0] = (uint32_t)(group1 % 100);
    group1 /= 100;
    *output += 3;


    *input += 5;
}

// Unpack 5 bytes into 6 values
void Ultrapack_Decompress101(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 20) - 1;
    (*output)[2] = (uint32_t)(group0 % 101);
    group0 /= 101;

    (*output)[1] = (uint32_t)(group0 % 101);
    group0 /= 101;

    (*output)[0] = (uint32_t)(group0 % 101);
    group0 /= 101;
    *output += 3;

    uint64_t group1 = (*(uint64_t *)((*input) + 2)) >> 4;    group1 &= (1ull << 20) - 1;
    (*output)[2] = (uint32_t)(group1 % 101);
    group1 /= 101;

    (*output)[1] = (uint32_t)(group1 % 101);
    group1 /= 101;

    (*output)[0] = (uint32_t)(group1 % 101);
    group1 /= 101;
    *output += 3;


    *input += 5;
}

// Unpack 27 bytes into 32 values
void Ultrapack_Decompress102(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 27) - 1;
    (*output)[3] = (uint32_t)(group0 % 102);
    group0 /= 102;

    (*output)[2] = (uint32_t)(group0 % 102);
    group0 /= 102;

    (*output)[1] = (uint32_t)(group0 % 102);
    group0 /= 102;

    (*output)[0] = (uint32_t)(group0 % 102);
    group0 /= 102;
    *output += 4;

    uint64_t group1 = (*(uint64_t *)((*input) + 3)) >> 3;    group1 &= (1ull << 27) - 1;
    (*output)[3] = (uint32_t)(group1 % 102);
    group1 /= 102;

    (*output)[2] = (uint32_t)(group1 % 102);
    group1 /= 102;

    (*output)[1] = (uint32_t)(group1 % 102);
    group1 /= 102;

    (*output)[0] = (uint32_t)(group1 % 102);
    group1 /= 102;
    *output += 4;

    uint64_t group2 = (*(uint64_t *)((*input) + 6)) >> 6;    group2 &= (1ull << 27) - 1;
    (*output)[3] = (uint32_t)(group2 % 102);
    group2 /= 102;

    (*output)[2] = (uint32_t)(group2 % 102);
    group2 /= 102;

    (*output)[1] = (uint32_t)(group2 % 102);
    group2 /= 102;

    (*output)[0] = (uint32_t)(group2 % 102);
    group2 /= 102;
    *output += 4;

    uint64_t group3 = (*(uint64_t *)((*input) + 10)) >> 1;    group3 &= (1ull << 27) - 1;
    (*output)[3] = (uint32_t)(group3 % 102);
    group3 /= 102;

    (*output)[2] = (uint32_t)(group3 % 102);
    group3 /= 102;

    (*output)[1] = (uint32_t)(group3 % 102);
    group3 /= 102;

    (*output)[0] = (uint32_t)(group3 % 102);
    group3 /= 102;
    *output += 4;

    uint64_t group4 = (*(uint64_t *)((*input) + 13)) >> 4;    group4 &= (1ull << 27) - 1;
    (*output)[3] = (uint32_t)(group4 % 102);
    group4 /= 102;

    (*output)[2] = (uint32_t)(group4 % 102);
    group4 /= 102;

    (*output)[1] = (uint32_t)(group4 % 102);
    group4 /= 102;

    (*output)[0] = (uint32_t)(group4 % 102);
    group4 /= 102;
    *output += 4;

    uint64_t group5 = (*(uint64_t *)((*input) + 16)) >> 7;    group5 &= (1ull << 27) - 1;
    (*output)[3] = (uint32_t)(group5 % 102);
    group5 /= 102;

    (*output)[2] = (uint32_t)(group5 % 102);
    group5 /= 102;

    (*output)[1] = (uint32_t)(group5 % 102);
    group5 /= 102;

    (*output)[0] = (uint32_t)(group5 % 102);
    group5 /= 102;
    *output += 4;

    uint64_t group6 = (*(uint64_t *)((*input) + 20)) >> 2;    group6 &= (1ull << 27) - 1;
    (*output)[3] = (uint32_t)(group6 % 102);
    group6 /= 102;

    (*output)[2] = (uint32_t)(group6 % 102);
    group6 /= 102;

    (*output)[1] = (uint32_t)(group6 % 102);
    group6 /= 102;

    (*output)[0] = (uint32_t)(group6 % 102);
    group6 /= 102;
    *output += 4;

    uint64_t group7 = (*(uint64_t *)((*input) + 23)) >> 5;    group7 &= (1ull << 27) - 1;
    (*output)[3] = (uint32_t)(group7 % 102);
    group7 /= 102;

    (*output)[2] = (uint32_t)(group7 % 102);
    group7 /= 102;

    (*output)[1] = (uint32_t)(group7 % 102);
    group7 /= 102;

    (*output)[0] = (uint32_t)(group7 % 102);
    group7 /= 102;
    *output += 4;


    *input += 27;
}

// Unpack 27 bytes into 32 values
void Ultrapack_Decompress103(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 27) - 1;
    (*output)[3] = (uint32_t)(group0 % 103);
    group0 /= 103;

    (*output)[2] = (uint32_t)(group0 % 103);
    group0 /= 103;

    (*output)[1] = (uint32_t)(group0 % 103);
    group0 /= 103;

    (*output)[0] = (uint32_t)(group0 % 103);
    group0 /= 103;
    *output += 4;

    uint64_t group1 = (*(uint64_t *)((*input) + 3)) >> 3;    group1 &= (1ull << 27) - 1;
    (*output)[3] = (uint32_t)(group1 % 103);
    group1 /= 103;

    (*output)[2] = (uint32_t)(group1 % 103);
    group1 /= 103;

    (*output)[1] = (uint32_t)(group1 % 103);
    group1 /= 103;

    (*output)[0] = (uint32_t)(group1 % 103);
    group1 /= 103;
    *output += 4;

    uint64_t group2 = (*(uint64_t *)((*input) + 6)) >> 6;    group2 &= (1ull << 27) - 1;
    (*output)[3] = (uint32_t)(group2 % 103);
    group2 /= 103;

    (*output)[2] = (uint32_t)(group2 % 103);
    group2 /= 103;

    (*output)[1] = (uint32_t)(group2 % 103);
    group2 /= 103;

    (*output)[0] = (uint32_t)(group2 % 103);
    group2 /= 103;
    *output += 4;

    uint64_t group3 = (*(uint64_t *)((*input) + 10)) >> 1;    group3 &= (1ull << 27) - 1;
    (*output)[3] = (uint32_t)(group3 % 103);
    group3 /= 103;

    (*output)[2] = (uint32_t)(group3 % 103);
    group3 /= 103;

    (*output)[1] = (uint32_t)(group3 % 103);
    group3 /= 103;

    (*output)[0] = (uint32_t)(group3 % 103);
    group3 /= 103;
    *output += 4;

    uint64_t group4 = (*(uint64_t *)((*input) + 13)) >> 4;    group4 &= (1ull << 27) - 1;
    (*output)[3] = (uint32_t)(group4 % 103);
    group4 /= 103;

    (*output)[2] = (uint32_t)(group4 % 103);
    group4 /= 103;

    (*output)[1] = (uint32_t)(group4 % 103);
    group4 /= 103;

    (*output)[0] = (uint32_t)(group4 % 103);
    group4 /= 103;
    *output += 4;

    uint64_t group5 = (*(uint64_t *)((*input) + 16)) >> 7;    group5 &= (1ull << 27) - 1;
    (*output)[3] = (uint32_t)(group5 % 103);
    group5 /= 103;

    (*output)[2] = (uint32_t)(group5 % 103);
    group5 /= 103;

    (*output)[1] = (uint32_t)(group5 % 103);
    group5 /= 103;

    (*output)[0] = (uint32_t)(group5 % 103);
    group5 /= 103;
    *output += 4;

    uint64_t group6 = (*(uint64_t *)((*input) + 20)) >> 2;    group6 &= (1ull << 27) - 1;
    (*output)[3] = (uint32_t)(group6 % 103);
    group6 /= 103;

    (*output)[2] = (uint32_t)(group6 % 103);
    group6 /= 103;

    (*output)[1] = (uint32_t)(group6 % 103);
    group6 /= 103;

    (*output)[0] = (uint32_t)(group6 % 103);
    group6 /= 103;
    *output += 4;

    uint64_t group7 = (*(uint64_t *)((*input) + 23)) >> 5;    group7 &= (1ull << 27) - 1;
    (*output)[3] = (uint32_t)(group7 % 103);
    group7 /= 103;

    (*output)[2] = (uint32_t)(group7 % 103);
    group7 /= 103;

    (*output)[1] = (uint32_t)(group7 % 103);
    group7 /= 103;

    (*output)[0] = (uint32_t)(group7 % 103);
    group7 /= 103;
    *output += 4;


    *input += 27;
}

// Unpack 27 bytes into 32 values
void Ultrapack_Decompress104(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 27) - 1;
    (*output)[3] = (uint32_t)(group0 % 104);
    group0 /= 104;

    (*output)[2] = (uint32_t)(group0 % 104);
    group0 /= 104;

    (*output)[1] = (uint32_t)(group0 % 104);
    group0 /= 104;

    (*output)[0] = (uint32_t)(group0 % 104);
    group0 /= 104;
    *output += 4;

    uint64_t group1 = (*(uint64_t *)((*input) + 3)) >> 3;    group1 &= (1ull << 27) - 1;
    (*output)[3] = (uint32_t)(group1 % 104);
    group1 /= 104;

    (*output)[2] = (uint32_t)(group1 % 104);
    group1 /= 104;

    (*output)[1] = (uint32_t)(group1 % 104);
    group1 /= 104;

    (*output)[0] = (uint32_t)(group1 % 104);
    group1 /= 104;
    *output += 4;

    uint64_t group2 = (*(uint64_t *)((*input) + 6)) >> 6;    group2 &= (1ull << 27) - 1;
    (*output)[3] = (uint32_t)(group2 % 104);
    group2 /= 104;

    (*output)[2] = (uint32_t)(group2 % 104);
    group2 /= 104;

    (*output)[1] = (uint32_t)(group2 % 104);
    group2 /= 104;

    (*output)[0] = (uint32_t)(group2 % 104);
    group2 /= 104;
    *output += 4;

    uint64_t group3 = (*(uint64_t *)((*input) + 10)) >> 1;    group3 &= (1ull << 27) - 1;
    (*output)[3] = (uint32_t)(group3 % 104);
    group3 /= 104;

    (*output)[2] = (uint32_t)(group3 % 104);
    group3 /= 104;

    (*output)[1] = (uint32_t)(group3 % 104);
    group3 /= 104;

    (*output)[0] = (uint32_t)(group3 % 104);
    group3 /= 104;
    *output += 4;

    uint64_t group4 = (*(uint64_t *)((*input) + 13)) >> 4;    group4 &= (1ull << 27) - 1;
    (*output)[3] = (uint32_t)(group4 % 104);
    group4 /= 104;

    (*output)[2] = (uint32_t)(group4 % 104);
    group4 /= 104;

    (*output)[1] = (uint32_t)(group4 % 104);
    group4 /= 104;

    (*output)[0] = (uint32_t)(group4 % 104);
    group4 /= 104;
    *output += 4;

    uint64_t group5 = (*(uint64_t *)((*input) + 16)) >> 7;    group5 &= (1ull << 27) - 1;
    (*output)[3] = (uint32_t)(group5 % 104);
    group5 /= 104;

    (*output)[2] = (uint32_t)(group5 % 104);
    group5 /= 104;

    (*output)[1] = (uint32_t)(group5 % 104);
    group5 /= 104;

    (*output)[0] = (uint32_t)(group5 % 104);
    group5 /= 104;
    *output += 4;

    uint64_t group6 = (*(uint64_t *)((*input) + 20)) >> 2;    group6 &= (1ull << 27) - 1;
    (*output)[3] = (uint32_t)(group6 % 104);
    group6 /= 104;

    (*output)[2] = (uint32_t)(group6 % 104);
    group6 /= 104;

    (*output)[1] = (uint32_t)(group6 % 104);
    group6 /= 104;

    (*output)[0] = (uint32_t)(group6 % 104);
    group6 /= 104;
    *output += 4;

    uint64_t group7 = (*(uint64_t *)((*input) + 23)) >> 5;    group7 &= (1ull << 27) - 1;
    (*output)[3] = (uint32_t)(group7 % 104);
    group7 /= 104;

    (*output)[2] = (uint32_t)(group7 % 104);
    group7 /= 104;

    (*output)[1] = (uint32_t)(group7 % 104);
    group7 /= 104;

    (*output)[0] = (uint32_t)(group7 % 104);
    group7 /= 104;
    *output += 4;


    *input += 27;
}

// Unpack 27 bytes into 32 values
void Ultrapack_Decompress105(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 27) - 1;
    (*output)[3] = (uint32_t)(group0 % 105);
    group0 /= 105;

    (*output)[2] = (uint32_t)(group0 % 105);
    group0 /= 105;

    (*output)[1] = (uint32_t)(group0 % 105);
    group0 /= 105;

    (*output)[0] = (uint32_t)(group0 % 105);
    group0 /= 105;
    *output += 4;

    uint64_t group1 = (*(uint64_t *)((*input) + 3)) >> 3;    group1 &= (1ull << 27) - 1;
    (*output)[3] = (uint32_t)(group1 % 105);
    group1 /= 105;

    (*output)[2] = (uint32_t)(group1 % 105);
    group1 /= 105;

    (*output)[1] = (uint32_t)(group1 % 105);
    group1 /= 105;

    (*output)[0] = (uint32_t)(group1 % 105);
    group1 /= 105;
    *output += 4;

    uint64_t group2 = (*(uint64_t *)((*input) + 6)) >> 6;    group2 &= (1ull << 27) - 1;
    (*output)[3] = (uint32_t)(group2 % 105);
    group2 /= 105;

    (*output)[2] = (uint32_t)(group2 % 105);
    group2 /= 105;

    (*output)[1] = (uint32_t)(group2 % 105);
    group2 /= 105;

    (*output)[0] = (uint32_t)(group2 % 105);
    group2 /= 105;
    *output += 4;

    uint64_t group3 = (*(uint64_t *)((*input) + 10)) >> 1;    group3 &= (1ull << 27) - 1;
    (*output)[3] = (uint32_t)(group3 % 105);
    group3 /= 105;

    (*output)[2] = (uint32_t)(group3 % 105);
    group3 /= 105;

    (*output)[1] = (uint32_t)(group3 % 105);
    group3 /= 105;

    (*output)[0] = (uint32_t)(group3 % 105);
    group3 /= 105;
    *output += 4;

    uint64_t group4 = (*(uint64_t *)((*input) + 13)) >> 4;    group4 &= (1ull << 27) - 1;
    (*output)[3] = (uint32_t)(group4 % 105);
    group4 /= 105;

    (*output)[2] = (uint32_t)(group4 % 105);
    group4 /= 105;

    (*output)[1] = (uint32_t)(group4 % 105);
    group4 /= 105;

    (*output)[0] = (uint32_t)(group4 % 105);
    group4 /= 105;
    *output += 4;

    uint64_t group5 = (*(uint64_t *)((*input) + 16)) >> 7;    group5 &= (1ull << 27) - 1;
    (*output)[3] = (uint32_t)(group5 % 105);
    group5 /= 105;

    (*output)[2] = (uint32_t)(group5 % 105);
    group5 /= 105;

    (*output)[1] = (uint32_t)(group5 % 105);
    group5 /= 105;

    (*output)[0] = (uint32_t)(group5 % 105);
    group5 /= 105;
    *output += 4;

    uint64_t group6 = (*(uint64_t *)((*input) + 20)) >> 2;    group6 &= (1ull << 27) - 1;
    (*output)[3] = (uint32_t)(group6 % 105);
    group6 /= 105;

    (*output)[2] = (uint32_t)(group6 % 105);
    group6 /= 105;

    (*output)[1] = (uint32_t)(group6 % 105);
    group6 /= 105;

    (*output)[0] = (uint32_t)(group6 % 105);
    group6 /= 105;
    *output += 4;

    uint64_t group7 = (*(uint64_t *)((*input) + 23)) >> 5;    group7 &= (1ull << 27) - 1;
    (*output)[3] = (uint32_t)(group7 % 105);
    group7 /= 105;

    (*output)[2] = (uint32_t)(group7 % 105);
    group7 /= 105;

    (*output)[1] = (uint32_t)(group7 % 105);
    group7 /= 105;

    (*output)[0] = (uint32_t)(group7 % 105);
    group7 /= 105;
    *output += 4;


    *input += 27;
}

// Unpack 27 bytes into 32 values
void Ultrapack_Decompress106(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 27) - 1;
    (*output)[3] = (uint32_t)(group0 % 106);
    group0 /= 106;

    (*output)[2] = (uint32_t)(group0 % 106);
    group0 /= 106;

    (*output)[1] = (uint32_t)(group0 % 106);
    group0 /= 106;

    (*output)[0] = (uint32_t)(group0 % 106);
    group0 /= 106;
    *output += 4;

    uint64_t group1 = (*(uint64_t *)((*input) + 3)) >> 3;    group1 &= (1ull << 27) - 1;
    (*output)[3] = (uint32_t)(group1 % 106);
    group1 /= 106;

    (*output)[2] = (uint32_t)(group1 % 106);
    group1 /= 106;

    (*output)[1] = (uint32_t)(group1 % 106);
    group1 /= 106;

    (*output)[0] = (uint32_t)(group1 % 106);
    group1 /= 106;
    *output += 4;

    uint64_t group2 = (*(uint64_t *)((*input) + 6)) >> 6;    group2 &= (1ull << 27) - 1;
    (*output)[3] = (uint32_t)(group2 % 106);
    group2 /= 106;

    (*output)[2] = (uint32_t)(group2 % 106);
    group2 /= 106;

    (*output)[1] = (uint32_t)(group2 % 106);
    group2 /= 106;

    (*output)[0] = (uint32_t)(group2 % 106);
    group2 /= 106;
    *output += 4;

    uint64_t group3 = (*(uint64_t *)((*input) + 10)) >> 1;    group3 &= (1ull << 27) - 1;
    (*output)[3] = (uint32_t)(group3 % 106);
    group3 /= 106;

    (*output)[2] = (uint32_t)(group3 % 106);
    group3 /= 106;

    (*output)[1] = (uint32_t)(group3 % 106);
    group3 /= 106;

    (*output)[0] = (uint32_t)(group3 % 106);
    group3 /= 106;
    *output += 4;

    uint64_t group4 = (*(uint64_t *)((*input) + 13)) >> 4;    group4 &= (1ull << 27) - 1;
    (*output)[3] = (uint32_t)(group4 % 106);
    group4 /= 106;

    (*output)[2] = (uint32_t)(group4 % 106);
    group4 /= 106;

    (*output)[1] = (uint32_t)(group4 % 106);
    group4 /= 106;

    (*output)[0] = (uint32_t)(group4 % 106);
    group4 /= 106;
    *output += 4;

    uint64_t group5 = (*(uint64_t *)((*input) + 16)) >> 7;    group5 &= (1ull << 27) - 1;
    (*output)[3] = (uint32_t)(group5 % 106);
    group5 /= 106;

    (*output)[2] = (uint32_t)(group5 % 106);
    group5 /= 106;

    (*output)[1] = (uint32_t)(group5 % 106);
    group5 /= 106;

    (*output)[0] = (uint32_t)(group5 % 106);
    group5 /= 106;
    *output += 4;

    uint64_t group6 = (*(uint64_t *)((*input) + 20)) >> 2;    group6 &= (1ull << 27) - 1;
    (*output)[3] = (uint32_t)(group6 % 106);
    group6 /= 106;

    (*output)[2] = (uint32_t)(group6 % 106);
    group6 /= 106;

    (*output)[1] = (uint32_t)(group6 % 106);
    group6 /= 106;

    (*output)[0] = (uint32_t)(group6 % 106);
    group6 /= 106;
    *output += 4;

    uint64_t group7 = (*(uint64_t *)((*input) + 23)) >> 5;    group7 &= (1ull << 27) - 1;
    (*output)[3] = (uint32_t)(group7 % 106);
    group7 /= 106;

    (*output)[2] = (uint32_t)(group7 % 106);
    group7 /= 106;

    (*output)[1] = (uint32_t)(group7 % 106);
    group7 /= 106;

    (*output)[0] = (uint32_t)(group7 % 106);
    group7 /= 106;
    *output += 4;


    *input += 27;
}

// Unpack 27 bytes into 32 values
void Ultrapack_Decompress107(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 27) - 1;
    (*output)[3] = (uint32_t)(group0 % 107);
    group0 /= 107;

    (*output)[2] = (uint32_t)(group0 % 107);
    group0 /= 107;

    (*output)[1] = (uint32_t)(group0 % 107);
    group0 /= 107;

    (*output)[0] = (uint32_t)(group0 % 107);
    group0 /= 107;
    *output += 4;

    uint64_t group1 = (*(uint64_t *)((*input) + 3)) >> 3;    group1 &= (1ull << 27) - 1;
    (*output)[3] = (uint32_t)(group1 % 107);
    group1 /= 107;

    (*output)[2] = (uint32_t)(group1 % 107);
    group1 /= 107;

    (*output)[1] = (uint32_t)(group1 % 107);
    group1 /= 107;

    (*output)[0] = (uint32_t)(group1 % 107);
    group1 /= 107;
    *output += 4;

    uint64_t group2 = (*(uint64_t *)((*input) + 6)) >> 6;    group2 &= (1ull << 27) - 1;
    (*output)[3] = (uint32_t)(group2 % 107);
    group2 /= 107;

    (*output)[2] = (uint32_t)(group2 % 107);
    group2 /= 107;

    (*output)[1] = (uint32_t)(group2 % 107);
    group2 /= 107;

    (*output)[0] = (uint32_t)(group2 % 107);
    group2 /= 107;
    *output += 4;

    uint64_t group3 = (*(uint64_t *)((*input) + 10)) >> 1;    group3 &= (1ull << 27) - 1;
    (*output)[3] = (uint32_t)(group3 % 107);
    group3 /= 107;

    (*output)[2] = (uint32_t)(group3 % 107);
    group3 /= 107;

    (*output)[1] = (uint32_t)(group3 % 107);
    group3 /= 107;

    (*output)[0] = (uint32_t)(group3 % 107);
    group3 /= 107;
    *output += 4;

    uint64_t group4 = (*(uint64_t *)((*input) + 13)) >> 4;    group4 &= (1ull << 27) - 1;
    (*output)[3] = (uint32_t)(group4 % 107);
    group4 /= 107;

    (*output)[2] = (uint32_t)(group4 % 107);
    group4 /= 107;

    (*output)[1] = (uint32_t)(group4 % 107);
    group4 /= 107;

    (*output)[0] = (uint32_t)(group4 % 107);
    group4 /= 107;
    *output += 4;

    uint64_t group5 = (*(uint64_t *)((*input) + 16)) >> 7;    group5 &= (1ull << 27) - 1;
    (*output)[3] = (uint32_t)(group5 % 107);
    group5 /= 107;

    (*output)[2] = (uint32_t)(group5 % 107);
    group5 /= 107;

    (*output)[1] = (uint32_t)(group5 % 107);
    group5 /= 107;

    (*output)[0] = (uint32_t)(group5 % 107);
    group5 /= 107;
    *output += 4;

    uint64_t group6 = (*(uint64_t *)((*input) + 20)) >> 2;    group6 &= (1ull << 27) - 1;
    (*output)[3] = (uint32_t)(group6 % 107);
    group6 /= 107;

    (*output)[2] = (uint32_t)(group6 % 107);
    group6 /= 107;

    (*output)[1] = (uint32_t)(group6 % 107);
    group6 /= 107;

    (*output)[0] = (uint32_t)(group6 % 107);
    group6 /= 107;
    *output += 4;

    uint64_t group7 = (*(uint64_t *)((*input) + 23)) >> 5;    group7 &= (1ull << 27) - 1;
    (*output)[3] = (uint32_t)(group7 % 107);
    group7 /= 107;

    (*output)[2] = (uint32_t)(group7 % 107);
    group7 /= 107;

    (*output)[1] = (uint32_t)(group7 % 107);
    group7 /= 107;

    (*output)[0] = (uint32_t)(group7 % 107);
    group7 /= 107;
    *output += 4;


    *input += 27;
}

// Unpack 17 bytes into 20 values
void Ultrapack_Decompress108(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 34) - 1;
    (*output)[4] = (uint32_t)(group0 % 108);
    group0 /= 108;

    (*output)[3] = (uint32_t)(group0 % 108);
    group0 /= 108;

    (*output)[2] = (uint32_t)(group0 % 108);
    group0 /= 108;

    (*output)[1] = (uint32_t)(group0 % 108);
    group0 /= 108;

    (*output)[0] = (uint32_t)(group0 % 108);
    group0 /= 108;
    *output += 5;

    uint64_t group1 = (*(uint64_t *)((*input) + 4)) >> 2;    group1 &= (1ull << 34) - 1;
    (*output)[4] = (uint32_t)(group1 % 108);
    group1 /= 108;

    (*output)[3] = (uint32_t)(group1 % 108);
    group1 /= 108;

    (*output)[2] = (uint32_t)(group1 % 108);
    group1 /= 108;

    (*output)[1] = (uint32_t)(group1 % 108);
    group1 /= 108;

    (*output)[0] = (uint32_t)(group1 % 108);
    group1 /= 108;
    *output += 5;

    uint64_t group2 = (*(uint64_t *)((*input) + 8)) >> 4;    group2 &= (1ull << 34) - 1;
    (*output)[4] = (uint32_t)(group2 % 108);
    group2 /= 108;

    (*output)[3] = (uint32_t)(group2 % 108);
    group2 /= 108;

    (*output)[2] = (uint32_t)(group2 % 108);
    group2 /= 108;

    (*output)[1] = (uint32_t)(group2 % 108);
    group2 /= 108;

    (*output)[0] = (uint32_t)(group2 % 108);
    group2 /= 108;
    *output += 5;

    uint64_t group3 = (*(uint64_t *)((*input) + 12)) >> 6;    group3 &= (1ull << 34) - 1;
    (*output)[4] = (uint32_t)(group3 % 108);
    group3 /= 108;

    (*output)[3] = (uint32_t)(group3 % 108);
    group3 /= 108;

    (*output)[2] = (uint32_t)(group3 % 108);
    group3 /= 108;

    (*output)[1] = (uint32_t)(group3 % 108);
    group3 /= 108;

    (*output)[0] = (uint32_t)(group3 % 108);
    group3 /= 108;
    *output += 5;


    *input += 17;
}

// Unpack 17 bytes into 20 values
void Ultrapack_Decompress109(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 34) - 1;
    (*output)[4] = (uint32_t)(group0 % 109);
    group0 /= 109;

    (*output)[3] = (uint32_t)(group0 % 109);
    group0 /= 109;

    (*output)[2] = (uint32_t)(group0 % 109);
    group0 /= 109;

    (*output)[1] = (uint32_t)(group0 % 109);
    group0 /= 109;

    (*output)[0] = (uint32_t)(group0 % 109);
    group0 /= 109;
    *output += 5;

    uint64_t group1 = (*(uint64_t *)((*input) + 4)) >> 2;    group1 &= (1ull << 34) - 1;
    (*output)[4] = (uint32_t)(group1 % 109);
    group1 /= 109;

    (*output)[3] = (uint32_t)(group1 % 109);
    group1 /= 109;

    (*output)[2] = (uint32_t)(group1 % 109);
    group1 /= 109;

    (*output)[1] = (uint32_t)(group1 % 109);
    group1 /= 109;

    (*output)[0] = (uint32_t)(group1 % 109);
    group1 /= 109;
    *output += 5;

    uint64_t group2 = (*(uint64_t *)((*input) + 8)) >> 4;    group2 &= (1ull << 34) - 1;
    (*output)[4] = (uint32_t)(group2 % 109);
    group2 /= 109;

    (*output)[3] = (uint32_t)(group2 % 109);
    group2 /= 109;

    (*output)[2] = (uint32_t)(group2 % 109);
    group2 /= 109;

    (*output)[1] = (uint32_t)(group2 % 109);
    group2 /= 109;

    (*output)[0] = (uint32_t)(group2 % 109);
    group2 /= 109;
    *output += 5;

    uint64_t group3 = (*(uint64_t *)((*input) + 12)) >> 6;    group3 &= (1ull << 34) - 1;
    (*output)[4] = (uint32_t)(group3 % 109);
    group3 /= 109;

    (*output)[3] = (uint32_t)(group3 % 109);
    group3 /= 109;

    (*output)[2] = (uint32_t)(group3 % 109);
    group3 /= 109;

    (*output)[1] = (uint32_t)(group3 % 109);
    group3 /= 109;

    (*output)[0] = (uint32_t)(group3 % 109);
    group3 /= 109;
    *output += 5;


    *input += 17;
}

// Unpack 17 bytes into 20 values
void Ultrapack_Decompress110(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 34) - 1;
    (*output)[4] = (uint32_t)(group0 % 110);
    group0 /= 110;

    (*output)[3] = (uint32_t)(group0 % 110);
    group0 /= 110;

    (*output)[2] = (uint32_t)(group0 % 110);
    group0 /= 110;

    (*output)[1] = (uint32_t)(group0 % 110);
    group0 /= 110;

    (*output)[0] = (uint32_t)(group0 % 110);
    group0 /= 110;
    *output += 5;

    uint64_t group1 = (*(uint64_t *)((*input) + 4)) >> 2;    group1 &= (1ull << 34) - 1;
    (*output)[4] = (uint32_t)(group1 % 110);
    group1 /= 110;

    (*output)[3] = (uint32_t)(group1 % 110);
    group1 /= 110;

    (*output)[2] = (uint32_t)(group1 % 110);
    group1 /= 110;

    (*output)[1] = (uint32_t)(group1 % 110);
    group1 /= 110;

    (*output)[0] = (uint32_t)(group1 % 110);
    group1 /= 110;
    *output += 5;

    uint64_t group2 = (*(uint64_t *)((*input) + 8)) >> 4;    group2 &= (1ull << 34) - 1;
    (*output)[4] = (uint32_t)(group2 % 110);
    group2 /= 110;

    (*output)[3] = (uint32_t)(group2 % 110);
    group2 /= 110;

    (*output)[2] = (uint32_t)(group2 % 110);
    group2 /= 110;

    (*output)[1] = (uint32_t)(group2 % 110);
    group2 /= 110;

    (*output)[0] = (uint32_t)(group2 % 110);
    group2 /= 110;
    *output += 5;

    uint64_t group3 = (*(uint64_t *)((*input) + 12)) >> 6;    group3 &= (1ull << 34) - 1;
    (*output)[4] = (uint32_t)(group3 % 110);
    group3 /= 110;

    (*output)[3] = (uint32_t)(group3 % 110);
    group3 /= 110;

    (*output)[2] = (uint32_t)(group3 % 110);
    group3 /= 110;

    (*output)[1] = (uint32_t)(group3 % 110);
    group3 /= 110;

    (*output)[0] = (uint32_t)(group3 % 110);
    group3 /= 110;
    *output += 5;


    *input += 17;
}

// Unpack 17 bytes into 20 values
void Ultrapack_Decompress111(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 34) - 1;
    (*output)[4] = (uint32_t)(group0 % 111);
    group0 /= 111;

    (*output)[3] = (uint32_t)(group0 % 111);
    group0 /= 111;

    (*output)[2] = (uint32_t)(group0 % 111);
    group0 /= 111;

    (*output)[1] = (uint32_t)(group0 % 111);
    group0 /= 111;

    (*output)[0] = (uint32_t)(group0 % 111);
    group0 /= 111;
    *output += 5;

    uint64_t group1 = (*(uint64_t *)((*input) + 4)) >> 2;    group1 &= (1ull << 34) - 1;
    (*output)[4] = (uint32_t)(group1 % 111);
    group1 /= 111;

    (*output)[3] = (uint32_t)(group1 % 111);
    group1 /= 111;

    (*output)[2] = (uint32_t)(group1 % 111);
    group1 /= 111;

    (*output)[1] = (uint32_t)(group1 % 111);
    group1 /= 111;

    (*output)[0] = (uint32_t)(group1 % 111);
    group1 /= 111;
    *output += 5;

    uint64_t group2 = (*(uint64_t *)((*input) + 8)) >> 4;    group2 &= (1ull << 34) - 1;
    (*output)[4] = (uint32_t)(group2 % 111);
    group2 /= 111;

    (*output)[3] = (uint32_t)(group2 % 111);
    group2 /= 111;

    (*output)[2] = (uint32_t)(group2 % 111);
    group2 /= 111;

    (*output)[1] = (uint32_t)(group2 % 111);
    group2 /= 111;

    (*output)[0] = (uint32_t)(group2 % 111);
    group2 /= 111;
    *output += 5;

    uint64_t group3 = (*(uint64_t *)((*input) + 12)) >> 6;    group3 &= (1ull << 34) - 1;
    (*output)[4] = (uint32_t)(group3 % 111);
    group3 /= 111;

    (*output)[3] = (uint32_t)(group3 % 111);
    group3 /= 111;

    (*output)[2] = (uint32_t)(group3 % 111);
    group3 /= 111;

    (*output)[1] = (uint32_t)(group3 % 111);
    group3 /= 111;

    (*output)[0] = (uint32_t)(group3 % 111);
    group3 /= 111;
    *output += 5;


    *input += 17;
}

// Unpack 41 bytes into 48 values
void Ultrapack_Decompress112(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 41) - 1;
    (*output)[5] = (uint32_t)(group0 % 112);
    group0 /= 112;

    (*output)[4] = (uint32_t)(group0 % 112);
    group0 /= 112;

    (*output)[3] = (uint32_t)(group0 % 112);
    group0 /= 112;

    (*output)[2] = (uint32_t)(group0 % 112);
    group0 /= 112;

    (*output)[1] = (uint32_t)(group0 % 112);
    group0 /= 112;

    (*output)[0] = (uint32_t)(group0 % 112);
    group0 /= 112;
    *output += 6;

    uint64_t group1 = (*(uint64_t *)((*input) + 5)) >> 1;    group1 &= (1ull << 41) - 1;
    (*output)[5] = (uint32_t)(group1 % 112);
    group1 /= 112;

    (*output)[4] = (uint32_t)(group1 % 112);
    group1 /= 112;

    (*output)[3] = (uint32_t)(group1 % 112);
    group1 /= 112;

    (*output)[2] = (uint32_t)(group1 % 112);
    group1 /= 112;

    (*output)[1] = (uint32_t)(group1 % 112);
    group1 /= 112;

    (*output)[0] = (uint32_t)(group1 % 112);
    group1 /= 112;
    *output += 6;

    uint64_t group2 = (*(uint64_t *)((*input) + 10)) >> 2;    group2 &= (1ull << 41) - 1;
    (*output)[5] = (uint32_t)(group2 % 112);
    group2 /= 112;

    (*output)[4] = (uint32_t)(group2 % 112);
    group2 /= 112;

    (*output)[3] = (uint32_t)(group2 % 112);
    group2 /= 112;

    (*output)[2] = (uint32_t)(group2 % 112);
    group2 /= 112;

    (*output)[1] = (uint32_t)(group2 % 112);
    group2 /= 112;

    (*output)[0] = (uint32_t)(group2 % 112);
    group2 /= 112;
    *output += 6;

    uint64_t group3 = (*(uint64_t *)((*input) + 15)) >> 3;    group3 &= (1ull << 41) - 1;
    (*output)[5] = (uint32_t)(group3 % 112);
    group3 /= 112;

    (*output)[4] = (uint32_t)(group3 % 112);
    group3 /= 112;

    (*output)[3] = (uint32_t)(group3 % 112);
    group3 /= 112;

    (*output)[2] = (uint32_t)(group3 % 112);
    group3 /= 112;

    (*output)[1] = (uint32_t)(group3 % 112);
    group3 /= 112;

    (*output)[0] = (uint32_t)(group3 % 112);
    group3 /= 112;
    *output += 6;

    uint64_t group4 = (*(uint64_t *)((*input) + 20)) >> 4;    group4 &= (1ull << 41) - 1;
    (*output)[5] = (uint32_t)(group4 % 112);
    group4 /= 112;

    (*output)[4] = (uint32_t)(group4 % 112);
    group4 /= 112;

    (*output)[3] = (uint32_t)(group4 % 112);
    group4 /= 112;

    (*output)[2] = (uint32_t)(group4 % 112);
    group4 /= 112;

    (*output)[1] = (uint32_t)(group4 % 112);
    group4 /= 112;

    (*output)[0] = (uint32_t)(group4 % 112);
    group4 /= 112;
    *output += 6;

    uint64_t group5 = (*(uint64_t *)((*input) + 25)) >> 5;    group5 &= (1ull << 41) - 1;
    (*output)[5] = (uint32_t)(group5 % 112);
    group5 /= 112;

    (*output)[4] = (uint32_t)(group5 % 112);
    group5 /= 112;

    (*output)[3] = (uint32_t)(group5 % 112);
    group5 /= 112;

    (*output)[2] = (uint32_t)(group5 % 112);
    group5 /= 112;

    (*output)[1] = (uint32_t)(group5 % 112);
    group5 /= 112;

    (*output)[0] = (uint32_t)(group5 % 112);
    group5 /= 112;
    *output += 6;

    uint64_t group6 = (*(uint64_t *)((*input) + 30)) >> 6;    group6 &= (1ull << 41) - 1;
    (*output)[5] = (uint32_t)(group6 % 112);
    group6 /= 112;

    (*output)[4] = (uint32_t)(group6 % 112);
    group6 /= 112;

    (*output)[3] = (uint32_t)(group6 % 112);
    group6 /= 112;

    (*output)[2] = (uint32_t)(group6 % 112);
    group6 /= 112;

    (*output)[1] = (uint32_t)(group6 % 112);
    group6 /= 112;

    (*output)[0] = (uint32_t)(group6 % 112);
    group6 /= 112;
    *output += 6;

    uint64_t group7 = (*(uint64_t *)((*input) + 35)) >> 7;    group7 &= (1ull << 41) - 1;
    (*output)[5] = (uint32_t)(group7 % 112);
    group7 /= 112;

    (*output)[4] = (uint32_t)(group7 % 112);
    group7 /= 112;

    (*output)[3] = (uint32_t)(group7 % 112);
    group7 /= 112;

    (*output)[2] = (uint32_t)(group7 % 112);
    group7 /= 112;

    (*output)[1] = (uint32_t)(group7 % 112);
    group7 /= 112;

    (*output)[0] = (uint32_t)(group7 % 112);
    group7 /= 112;
    *output += 6;


    *input += 41;
}

// Unpack 41 bytes into 48 values
void Ultrapack_Decompress113(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 41) - 1;
    (*output)[5] = (uint32_t)(group0 % 113);
    group0 /= 113;

    (*output)[4] = (uint32_t)(group0 % 113);
    group0 /= 113;

    (*output)[3] = (uint32_t)(group0 % 113);
    group0 /= 113;

    (*output)[2] = (uint32_t)(group0 % 113);
    group0 /= 113;

    (*output)[1] = (uint32_t)(group0 % 113);
    group0 /= 113;

    (*output)[0] = (uint32_t)(group0 % 113);
    group0 /= 113;
    *output += 6;

    uint64_t group1 = (*(uint64_t *)((*input) + 5)) >> 1;    group1 &= (1ull << 41) - 1;
    (*output)[5] = (uint32_t)(group1 % 113);
    group1 /= 113;

    (*output)[4] = (uint32_t)(group1 % 113);
    group1 /= 113;

    (*output)[3] = (uint32_t)(group1 % 113);
    group1 /= 113;

    (*output)[2] = (uint32_t)(group1 % 113);
    group1 /= 113;

    (*output)[1] = (uint32_t)(group1 % 113);
    group1 /= 113;

    (*output)[0] = (uint32_t)(group1 % 113);
    group1 /= 113;
    *output += 6;

    uint64_t group2 = (*(uint64_t *)((*input) + 10)) >> 2;    group2 &= (1ull << 41) - 1;
    (*output)[5] = (uint32_t)(group2 % 113);
    group2 /= 113;

    (*output)[4] = (uint32_t)(group2 % 113);
    group2 /= 113;

    (*output)[3] = (uint32_t)(group2 % 113);
    group2 /= 113;

    (*output)[2] = (uint32_t)(group2 % 113);
    group2 /= 113;

    (*output)[1] = (uint32_t)(group2 % 113);
    group2 /= 113;

    (*output)[0] = (uint32_t)(group2 % 113);
    group2 /= 113;
    *output += 6;

    uint64_t group3 = (*(uint64_t *)((*input) + 15)) >> 3;    group3 &= (1ull << 41) - 1;
    (*output)[5] = (uint32_t)(group3 % 113);
    group3 /= 113;

    (*output)[4] = (uint32_t)(group3 % 113);
    group3 /= 113;

    (*output)[3] = (uint32_t)(group3 % 113);
    group3 /= 113;

    (*output)[2] = (uint32_t)(group3 % 113);
    group3 /= 113;

    (*output)[1] = (uint32_t)(group3 % 113);
    group3 /= 113;

    (*output)[0] = (uint32_t)(group3 % 113);
    group3 /= 113;
    *output += 6;

    uint64_t group4 = (*(uint64_t *)((*input) + 20)) >> 4;    group4 &= (1ull << 41) - 1;
    (*output)[5] = (uint32_t)(group4 % 113);
    group4 /= 113;

    (*output)[4] = (uint32_t)(group4 % 113);
    group4 /= 113;

    (*output)[3] = (uint32_t)(group4 % 113);
    group4 /= 113;

    (*output)[2] = (uint32_t)(group4 % 113);
    group4 /= 113;

    (*output)[1] = (uint32_t)(group4 % 113);
    group4 /= 113;

    (*output)[0] = (uint32_t)(group4 % 113);
    group4 /= 113;
    *output += 6;

    uint64_t group5 = (*(uint64_t *)((*input) + 25)) >> 5;    group5 &= (1ull << 41) - 1;
    (*output)[5] = (uint32_t)(group5 % 113);
    group5 /= 113;

    (*output)[4] = (uint32_t)(group5 % 113);
    group5 /= 113;

    (*output)[3] = (uint32_t)(group5 % 113);
    group5 /= 113;

    (*output)[2] = (uint32_t)(group5 % 113);
    group5 /= 113;

    (*output)[1] = (uint32_t)(group5 % 113);
    group5 /= 113;

    (*output)[0] = (uint32_t)(group5 % 113);
    group5 /= 113;
    *output += 6;

    uint64_t group6 = (*(uint64_t *)((*input) + 30)) >> 6;    group6 &= (1ull << 41) - 1;
    (*output)[5] = (uint32_t)(group6 % 113);
    group6 /= 113;

    (*output)[4] = (uint32_t)(group6 % 113);
    group6 /= 113;

    (*output)[3] = (uint32_t)(group6 % 113);
    group6 /= 113;

    (*output)[2] = (uint32_t)(group6 % 113);
    group6 /= 113;

    (*output)[1] = (uint32_t)(group6 % 113);
    group6 /= 113;

    (*output)[0] = (uint32_t)(group6 % 113);
    group6 /= 113;
    *output += 6;

    uint64_t group7 = (*(uint64_t *)((*input) + 35)) >> 7;    group7 &= (1ull << 41) - 1;
    (*output)[5] = (uint32_t)(group7 % 113);
    group7 /= 113;

    (*output)[4] = (uint32_t)(group7 % 113);
    group7 /= 113;

    (*output)[3] = (uint32_t)(group7 % 113);
    group7 /= 113;

    (*output)[2] = (uint32_t)(group7 % 113);
    group7 /= 113;

    (*output)[1] = (uint32_t)(group7 % 113);
    group7 /= 113;

    (*output)[0] = (uint32_t)(group7 % 113);
    group7 /= 113;
    *output += 6;


    *input += 41;
}

// Unpack 41 bytes into 48 values
void Ultrapack_Decompress114(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 41) - 1;
    (*output)[5] = (uint32_t)(group0 % 114);
    group0 /= 114;

    (*output)[4] = (uint32_t)(group0 % 114);
    group0 /= 114;

    (*output)[3] = (uint32_t)(group0 % 114);
    group0 /= 114;

    (*output)[2] = (uint32_t)(group0 % 114);
    group0 /= 114;

    (*output)[1] = (uint32_t)(group0 % 114);
    group0 /= 114;

    (*output)[0] = (uint32_t)(group0 % 114);
    group0 /= 114;
    *output += 6;

    uint64_t group1 = (*(uint64_t *)((*input) + 5)) >> 1;    group1 &= (1ull << 41) - 1;
    (*output)[5] = (uint32_t)(group1 % 114);
    group1 /= 114;

    (*output)[4] = (uint32_t)(group1 % 114);
    group1 /= 114;

    (*output)[3] = (uint32_t)(group1 % 114);
    group1 /= 114;

    (*output)[2] = (uint32_t)(group1 % 114);
    group1 /= 114;

    (*output)[1] = (uint32_t)(group1 % 114);
    group1 /= 114;

    (*output)[0] = (uint32_t)(group1 % 114);
    group1 /= 114;
    *output += 6;

    uint64_t group2 = (*(uint64_t *)((*input) + 10)) >> 2;    group2 &= (1ull << 41) - 1;
    (*output)[5] = (uint32_t)(group2 % 114);
    group2 /= 114;

    (*output)[4] = (uint32_t)(group2 % 114);
    group2 /= 114;

    (*output)[3] = (uint32_t)(group2 % 114);
    group2 /= 114;

    (*output)[2] = (uint32_t)(group2 % 114);
    group2 /= 114;

    (*output)[1] = (uint32_t)(group2 % 114);
    group2 /= 114;

    (*output)[0] = (uint32_t)(group2 % 114);
    group2 /= 114;
    *output += 6;

    uint64_t group3 = (*(uint64_t *)((*input) + 15)) >> 3;    group3 &= (1ull << 41) - 1;
    (*output)[5] = (uint32_t)(group3 % 114);
    group3 /= 114;

    (*output)[4] = (uint32_t)(group3 % 114);
    group3 /= 114;

    (*output)[3] = (uint32_t)(group3 % 114);
    group3 /= 114;

    (*output)[2] = (uint32_t)(group3 % 114);
    group3 /= 114;

    (*output)[1] = (uint32_t)(group3 % 114);
    group3 /= 114;

    (*output)[0] = (uint32_t)(group3 % 114);
    group3 /= 114;
    *output += 6;

    uint64_t group4 = (*(uint64_t *)((*input) + 20)) >> 4;    group4 &= (1ull << 41) - 1;
    (*output)[5] = (uint32_t)(group4 % 114);
    group4 /= 114;

    (*output)[4] = (uint32_t)(group4 % 114);
    group4 /= 114;

    (*output)[3] = (uint32_t)(group4 % 114);
    group4 /= 114;

    (*output)[2] = (uint32_t)(group4 % 114);
    group4 /= 114;

    (*output)[1] = (uint32_t)(group4 % 114);
    group4 /= 114;

    (*output)[0] = (uint32_t)(group4 % 114);
    group4 /= 114;
    *output += 6;

    uint64_t group5 = (*(uint64_t *)((*input) + 25)) >> 5;    group5 &= (1ull << 41) - 1;
    (*output)[5] = (uint32_t)(group5 % 114);
    group5 /= 114;

    (*output)[4] = (uint32_t)(group5 % 114);
    group5 /= 114;

    (*output)[3] = (uint32_t)(group5 % 114);
    group5 /= 114;

    (*output)[2] = (uint32_t)(group5 % 114);
    group5 /= 114;

    (*output)[1] = (uint32_t)(group5 % 114);
    group5 /= 114;

    (*output)[0] = (uint32_t)(group5 % 114);
    group5 /= 114;
    *output += 6;

    uint64_t group6 = (*(uint64_t *)((*input) + 30)) >> 6;    group6 &= (1ull << 41) - 1;
    (*output)[5] = (uint32_t)(group6 % 114);
    group6 /= 114;

    (*output)[4] = (uint32_t)(group6 % 114);
    group6 /= 114;

    (*output)[3] = (uint32_t)(group6 % 114);
    group6 /= 114;

    (*output)[2] = (uint32_t)(group6 % 114);
    group6 /= 114;

    (*output)[1] = (uint32_t)(group6 % 114);
    group6 /= 114;

    (*output)[0] = (uint32_t)(group6 % 114);
    group6 /= 114;
    *output += 6;

    uint64_t group7 = (*(uint64_t *)((*input) + 35)) >> 7;    group7 &= (1ull << 41) - 1;
    (*output)[5] = (uint32_t)(group7 % 114);
    group7 /= 114;

    (*output)[4] = (uint32_t)(group7 % 114);
    group7 /= 114;

    (*output)[3] = (uint32_t)(group7 % 114);
    group7 /= 114;

    (*output)[2] = (uint32_t)(group7 % 114);
    group7 /= 114;

    (*output)[1] = (uint32_t)(group7 % 114);
    group7 /= 114;

    (*output)[0] = (uint32_t)(group7 % 114);
    group7 /= 114;
    *output += 6;


    *input += 41;
}

// Unpack 6 bytes into 7 values
void Ultrapack_Decompress115(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 48) - 1;
    (*output)[6] = (uint32_t)(group0 % 115);
    group0 /= 115;

    (*output)[5] = (uint32_t)(group0 % 115);
    group0 /= 115;

    (*output)[4] = (uint32_t)(group0 % 115);
    group0 /= 115;

    (*output)[3] = (uint32_t)(group0 % 115);
    group0 /= 115;

    (*output)[2] = (uint32_t)(group0 % 115);
    group0 /= 115;

    (*output)[1] = (uint32_t)(group0 % 115);
    group0 /= 115;

    (*output)[0] = (uint32_t)(group0 % 115);
    group0 /= 115;
    *output += 7;


    *input += 6;
}

// Unpack 55 bytes into 64 values
void Ultrapack_Decompress116(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 55) - 1;
    (*output)[7] = (uint32_t)(group0 % 116);
    group0 /= 116;

    (*output)[6] = (uint32_t)(group0 % 116);
    group0 /= 116;

    (*output)[5] = (uint32_t)(group0 % 116);
    group0 /= 116;

    (*output)[4] = (uint32_t)(group0 % 116);
    group0 /= 116;

    (*output)[3] = (uint32_t)(group0 % 116);
    group0 /= 116;

    (*output)[2] = (uint32_t)(group0 % 116);
    group0 /= 116;

    (*output)[1] = (uint32_t)(group0 % 116);
    group0 /= 116;

    (*output)[0] = (uint32_t)(group0 % 116);
    group0 /= 116;
    *output += 8;

    uint64_t group1 = (*(uint64_t *)((*input) + 6)) >> 7;    group1 &= (1ull << 55) - 1;
    (*output)[7] = (uint32_t)(group1 % 116);
    group1 /= 116;

    (*output)[6] = (uint32_t)(group1 % 116);
    group1 /= 116;

    (*output)[5] = (uint32_t)(group1 % 116);
    group1 /= 116;

    (*output)[4] = (uint32_t)(group1 % 116);
    group1 /= 116;

    (*output)[3] = (uint32_t)(group1 % 116);
    group1 /= 116;

    (*output)[2] = (uint32_t)(group1 % 116);
    group1 /= 116;

    (*output)[1] = (uint32_t)(group1 % 116);
    group1 /= 116;

    (*output)[0] = (uint32_t)(group1 % 116);
    group1 /= 116;
    *output += 8;

    uint64_t group2 = (*(uint64_t *)((*input) + 13)) >> 6;    group2 &= (1ull << 55) - 1;
    (*output)[7] = (uint32_t)(group2 % 116);
    group2 /= 116;

    (*output)[6] = (uint32_t)(group2 % 116);
    group2 /= 116;

    (*output)[5] = (uint32_t)(group2 % 116);
    group2 /= 116;

    (*output)[4] = (uint32_t)(group2 % 116);
    group2 /= 116;

    (*output)[3] = (uint32_t)(group2 % 116);
    group2 /= 116;

    (*output)[2] = (uint32_t)(group2 % 116);
    group2 /= 116;

    (*output)[1] = (uint32_t)(group2 % 116);
    group2 /= 116;

    (*output)[0] = (uint32_t)(group2 % 116);
    group2 /= 116;
    *output += 8;

    uint64_t group3 = (*(uint64_t *)((*input) + 20)) >> 5;    group3 &= (1ull << 55) - 1;
    (*output)[7] = (uint32_t)(group3 % 116);
    group3 /= 116;

    (*output)[6] = (uint32_t)(group3 % 116);
    group3 /= 116;

    (*output)[5] = (uint32_t)(group3 % 116);
    group3 /= 116;

    (*output)[4] = (uint32_t)(group3 % 116);
    group3 /= 116;

    (*output)[3] = (uint32_t)(group3 % 116);
    group3 /= 116;

    (*output)[2] = (uint32_t)(group3 % 116);
    group3 /= 116;

    (*output)[1] = (uint32_t)(group3 % 116);
    group3 /= 116;

    (*output)[0] = (uint32_t)(group3 % 116);
    group3 /= 116;
    *output += 8;

    uint64_t group4 = (*(uint64_t *)((*input) + 27)) >> 4;    group4 &= (1ull << 55) - 1;
    (*output)[7] = (uint32_t)(group4 % 116);
    group4 /= 116;

    (*output)[6] = (uint32_t)(group4 % 116);
    group4 /= 116;

    (*output)[5] = (uint32_t)(group4 % 116);
    group4 /= 116;

    (*output)[4] = (uint32_t)(group4 % 116);
    group4 /= 116;

    (*output)[3] = (uint32_t)(group4 % 116);
    group4 /= 116;

    (*output)[2] = (uint32_t)(group4 % 116);
    group4 /= 116;

    (*output)[1] = (uint32_t)(group4 % 116);
    group4 /= 116;

    (*output)[0] = (uint32_t)(group4 % 116);
    group4 /= 116;
    *output += 8;

    uint64_t group5 = (*(uint64_t *)((*input) + 34)) >> 3;    group5 &= (1ull << 55) - 1;
    (*output)[7] = (uint32_t)(group5 % 116);
    group5 /= 116;

    (*output)[6] = (uint32_t)(group5 % 116);
    group5 /= 116;

    (*output)[5] = (uint32_t)(group5 % 116);
    group5 /= 116;

    (*output)[4] = (uint32_t)(group5 % 116);
    group5 /= 116;

    (*output)[3] = (uint32_t)(group5 % 116);
    group5 /= 116;

    (*output)[2] = (uint32_t)(group5 % 116);
    group5 /= 116;

    (*output)[1] = (uint32_t)(group5 % 116);
    group5 /= 116;

    (*output)[0] = (uint32_t)(group5 % 116);
    group5 /= 116;
    *output += 8;

    uint64_t group6 = (*(uint64_t *)((*input) + 41)) >> 2;    group6 &= (1ull << 55) - 1;
    (*output)[7] = (uint32_t)(group6 % 116);
    group6 /= 116;

    (*output)[6] = (uint32_t)(group6 % 116);
    group6 /= 116;

    (*output)[5] = (uint32_t)(group6 % 116);
    group6 /= 116;

    (*output)[4] = (uint32_t)(group6 % 116);
    group6 /= 116;

    (*output)[3] = (uint32_t)(group6 % 116);
    group6 /= 116;

    (*output)[2] = (uint32_t)(group6 % 116);
    group6 /= 116;

    (*output)[1] = (uint32_t)(group6 % 116);
    group6 /= 116;

    (*output)[0] = (uint32_t)(group6 % 116);
    group6 /= 116;
    *output += 8;

    uint64_t group7 = (*(uint64_t *)((*input) + 48)) >> 1;    group7 &= (1ull << 55) - 1;
    (*output)[7] = (uint32_t)(group7 % 116);
    group7 /= 116;

    (*output)[6] = (uint32_t)(group7 % 116);
    group7 /= 116;

    (*output)[5] = (uint32_t)(group7 % 116);
    group7 /= 116;

    (*output)[4] = (uint32_t)(group7 % 116);
    group7 /= 116;

    (*output)[3] = (uint32_t)(group7 % 116);
    group7 /= 116;

    (*output)[2] = (uint32_t)(group7 % 116);
    group7 /= 116;

    (*output)[1] = (uint32_t)(group7 % 116);
    group7 /= 116;

    (*output)[0] = (uint32_t)(group7 % 116);
    group7 /= 116;
    *output += 8;


    *input += 55;
}

// Unpack 55 bytes into 64 values
void Ultrapack_Decompress117(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 55) - 1;
    (*output)[7] = (uint32_t)(group0 % 117);
    group0 /= 117;

    (*output)[6] = (uint32_t)(group0 % 117);
    group0 /= 117;

    (*output)[5] = (uint32_t)(group0 % 117);
    group0 /= 117;

    (*output)[4] = (uint32_t)(group0 % 117);
    group0 /= 117;

    (*output)[3] = (uint32_t)(group0 % 117);
    group0 /= 117;

    (*output)[2] = (uint32_t)(group0 % 117);
    group0 /= 117;

    (*output)[1] = (uint32_t)(group0 % 117);
    group0 /= 117;

    (*output)[0] = (uint32_t)(group0 % 117);
    group0 /= 117;
    *output += 8;

    uint64_t group1 = (*(uint64_t *)((*input) + 6)) >> 7;    group1 &= (1ull << 55) - 1;
    (*output)[7] = (uint32_t)(group1 % 117);
    group1 /= 117;

    (*output)[6] = (uint32_t)(group1 % 117);
    group1 /= 117;

    (*output)[5] = (uint32_t)(group1 % 117);
    group1 /= 117;

    (*output)[4] = (uint32_t)(group1 % 117);
    group1 /= 117;

    (*output)[3] = (uint32_t)(group1 % 117);
    group1 /= 117;

    (*output)[2] = (uint32_t)(group1 % 117);
    group1 /= 117;

    (*output)[1] = (uint32_t)(group1 % 117);
    group1 /= 117;

    (*output)[0] = (uint32_t)(group1 % 117);
    group1 /= 117;
    *output += 8;

    uint64_t group2 = (*(uint64_t *)((*input) + 13)) >> 6;    group2 &= (1ull << 55) - 1;
    (*output)[7] = (uint32_t)(group2 % 117);
    group2 /= 117;

    (*output)[6] = (uint32_t)(group2 % 117);
    group2 /= 117;

    (*output)[5] = (uint32_t)(group2 % 117);
    group2 /= 117;

    (*output)[4] = (uint32_t)(group2 % 117);
    group2 /= 117;

    (*output)[3] = (uint32_t)(group2 % 117);
    group2 /= 117;

    (*output)[2] = (uint32_t)(group2 % 117);
    group2 /= 117;

    (*output)[1] = (uint32_t)(group2 % 117);
    group2 /= 117;

    (*output)[0] = (uint32_t)(group2 % 117);
    group2 /= 117;
    *output += 8;

    uint64_t group3 = (*(uint64_t *)((*input) + 20)) >> 5;    group3 &= (1ull << 55) - 1;
    (*output)[7] = (uint32_t)(group3 % 117);
    group3 /= 117;

    (*output)[6] = (uint32_t)(group3 % 117);
    group3 /= 117;

    (*output)[5] = (uint32_t)(group3 % 117);
    group3 /= 117;

    (*output)[4] = (uint32_t)(group3 % 117);
    group3 /= 117;

    (*output)[3] = (uint32_t)(group3 % 117);
    group3 /= 117;

    (*output)[2] = (uint32_t)(group3 % 117);
    group3 /= 117;

    (*output)[1] = (uint32_t)(group3 % 117);
    group3 /= 117;

    (*output)[0] = (uint32_t)(group3 % 117);
    group3 /= 117;
    *output += 8;

    uint64_t group4 = (*(uint64_t *)((*input) + 27)) >> 4;    group4 &= (1ull << 55) - 1;
    (*output)[7] = (uint32_t)(group4 % 117);
    group4 /= 117;

    (*output)[6] = (uint32_t)(group4 % 117);
    group4 /= 117;

    (*output)[5] = (uint32_t)(group4 % 117);
    group4 /= 117;

    (*output)[4] = (uint32_t)(group4 % 117);
    group4 /= 117;

    (*output)[3] = (uint32_t)(group4 % 117);
    group4 /= 117;

    (*output)[2] = (uint32_t)(group4 % 117);
    group4 /= 117;

    (*output)[1] = (uint32_t)(group4 % 117);
    group4 /= 117;

    (*output)[0] = (uint32_t)(group4 % 117);
    group4 /= 117;
    *output += 8;

    uint64_t group5 = (*(uint64_t *)((*input) + 34)) >> 3;    group5 &= (1ull << 55) - 1;
    (*output)[7] = (uint32_t)(group5 % 117);
    group5 /= 117;

    (*output)[6] = (uint32_t)(group5 % 117);
    group5 /= 117;

    (*output)[5] = (uint32_t)(group5 % 117);
    group5 /= 117;

    (*output)[4] = (uint32_t)(group5 % 117);
    group5 /= 117;

    (*output)[3] = (uint32_t)(group5 % 117);
    group5 /= 117;

    (*output)[2] = (uint32_t)(group5 % 117);
    group5 /= 117;

    (*output)[1] = (uint32_t)(group5 % 117);
    group5 /= 117;

    (*output)[0] = (uint32_t)(group5 % 117);
    group5 /= 117;
    *output += 8;

    uint64_t group6 = (*(uint64_t *)((*input) + 41)) >> 2;    group6 &= (1ull << 55) - 1;
    (*output)[7] = (uint32_t)(group6 % 117);
    group6 /= 117;

    (*output)[6] = (uint32_t)(group6 % 117);
    group6 /= 117;

    (*output)[5] = (uint32_t)(group6 % 117);
    group6 /= 117;

    (*output)[4] = (uint32_t)(group6 % 117);
    group6 /= 117;

    (*output)[3] = (uint32_t)(group6 % 117);
    group6 /= 117;

    (*output)[2] = (uint32_t)(group6 % 117);
    group6 /= 117;

    (*output)[1] = (uint32_t)(group6 % 117);
    group6 /= 117;

    (*output)[0] = (uint32_t)(group6 % 117);
    group6 /= 117;
    *output += 8;

    uint64_t group7 = (*(uint64_t *)((*input) + 48)) >> 1;    group7 &= (1ull << 55) - 1;
    (*output)[7] = (uint32_t)(group7 % 117);
    group7 /= 117;

    (*output)[6] = (uint32_t)(group7 % 117);
    group7 /= 117;

    (*output)[5] = (uint32_t)(group7 % 117);
    group7 /= 117;

    (*output)[4] = (uint32_t)(group7 % 117);
    group7 /= 117;

    (*output)[3] = (uint32_t)(group7 % 117);
    group7 /= 117;

    (*output)[2] = (uint32_t)(group7 % 117);
    group7 /= 117;

    (*output)[1] = (uint32_t)(group7 % 117);
    group7 /= 117;

    (*output)[0] = (uint32_t)(group7 % 117);
    group7 /= 117;
    *output += 8;


    *input += 55;
}

// Unpack 7 bytes into 8 values
void Ultrapack_Decompress118(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 7) - 1;
    (*output)[0] = (uint32_t)(group0 % 118);
    group0 /= 118;
    *output += 1;

    uint64_t group1 = (*(uint64_t *)((*input) + 0)) >> 7;    group1 &= (1ull << 7) - 1;
    (*output)[0] = (uint32_t)(group1 % 118);
    group1 /= 118;
    *output += 1;

    uint64_t group2 = (*(uint64_t *)((*input) + 1)) >> 6;    group2 &= (1ull << 7) - 1;
    (*output)[0] = (uint32_t)(group2 % 118);
    group2 /= 118;
    *output += 1;

    uint64_t group3 = (*(uint64_t *)((*input) + 2)) >> 5;    group3 &= (1ull << 7) - 1;
    (*output)[0] = (uint32_t)(group3 % 118);
    group3 /= 118;
    *output += 1;

    uint64_t group4 = (*(uint64_t *)((*input) + 3)) >> 4;    group4 &= (1ull << 7) - 1;
    (*output)[0] = (uint32_t)(group4 % 118);
    group4 /= 118;
    *output += 1;

    uint64_t group5 = (*(uint64_t *)((*input) + 4)) >> 3;    group5 &= (1ull << 7) - 1;
    (*output)[0] = (uint32_t)(group5 % 118);
    group5 /= 118;
    *output += 1;

    uint64_t group6 = (*(uint64_t *)((*input) + 5)) >> 2;    group6 &= (1ull << 7) - 1;
    (*output)[0] = (uint32_t)(group6 % 118);
    group6 /= 118;
    *output += 1;

    uint64_t group7 = (*(uint64_t *)((*input) + 6)) >> 1;    group7 &= (1ull << 7) - 1;
    (*output)[0] = (uint32_t)(group7 % 118);
    group7 /= 118;
    *output += 1;


    *input += 7;
}

// Unpack 7 bytes into 8 values
void Ultrapack_Decompress119(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 7) - 1;
    (*output)[0] = (uint32_t)(group0 % 119);
    group0 /= 119;
    *output += 1;

    uint64_t group1 = (*(uint64_t *)((*input) + 0)) >> 7;    group1 &= (1ull << 7) - 1;
    (*output)[0] = (uint32_t)(group1 % 119);
    group1 /= 119;
    *output += 1;

    uint64_t group2 = (*(uint64_t *)((*input) + 1)) >> 6;    group2 &= (1ull << 7) - 1;
    (*output)[0] = (uint32_t)(group2 % 119);
    group2 /= 119;
    *output += 1;

    uint64_t group3 = (*(uint64_t *)((*input) + 2)) >> 5;    group3 &= (1ull << 7) - 1;
    (*output)[0] = (uint32_t)(group3 % 119);
    group3 /= 119;
    *output += 1;

    uint64_t group4 = (*(uint64_t *)((*input) + 3)) >> 4;    group4 &= (1ull << 7) - 1;
    (*output)[0] = (uint32_t)(group4 % 119);
    group4 /= 119;
    *output += 1;

    uint64_t group5 = (*(uint64_t *)((*input) + 4)) >> 3;    group5 &= (1ull << 7) - 1;
    (*output)[0] = (uint32_t)(group5 % 119);
    group5 /= 119;
    *output += 1;

    uint64_t group6 = (*(uint64_t *)((*input) + 5)) >> 2;    group6 &= (1ull << 7) - 1;
    (*output)[0] = (uint32_t)(group6 % 119);
    group6 /= 119;
    *output += 1;

    uint64_t group7 = (*(uint64_t *)((*input) + 6)) >> 1;    group7 &= (1ull << 7) - 1;
    (*output)[0] = (uint32_t)(group7 % 119);
    group7 /= 119;
    *output += 1;


    *input += 7;
}

// Unpack 7 bytes into 8 values
void Ultrapack_Decompress120(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 7) - 1;
    (*output)[0] = (uint32_t)(group0 % 120);
    group0 /= 120;
    *output += 1;

    uint64_t group1 = (*(uint64_t *)((*input) + 0)) >> 7;    group1 &= (1ull << 7) - 1;
    (*output)[0] = (uint32_t)(group1 % 120);
    group1 /= 120;
    *output += 1;

    uint64_t group2 = (*(uint64_t *)((*input) + 1)) >> 6;    group2 &= (1ull << 7) - 1;
    (*output)[0] = (uint32_t)(group2 % 120);
    group2 /= 120;
    *output += 1;

    uint64_t group3 = (*(uint64_t *)((*input) + 2)) >> 5;    group3 &= (1ull << 7) - 1;
    (*output)[0] = (uint32_t)(group3 % 120);
    group3 /= 120;
    *output += 1;

    uint64_t group4 = (*(uint64_t *)((*input) + 3)) >> 4;    group4 &= (1ull << 7) - 1;
    (*output)[0] = (uint32_t)(group4 % 120);
    group4 /= 120;
    *output += 1;

    uint64_t group5 = (*(uint64_t *)((*input) + 4)) >> 3;    group5 &= (1ull << 7) - 1;
    (*output)[0] = (uint32_t)(group5 % 120);
    group5 /= 120;
    *output += 1;

    uint64_t group6 = (*(uint64_t *)((*input) + 5)) >> 2;    group6 &= (1ull << 7) - 1;
    (*output)[0] = (uint32_t)(group6 % 120);
    group6 /= 120;
    *output += 1;

    uint64_t group7 = (*(uint64_t *)((*input) + 6)) >> 1;    group7 &= (1ull << 7) - 1;
    (*output)[0] = (uint32_t)(group7 % 120);
    group7 /= 120;
    *output += 1;


    *input += 7;
}

// Unpack 7 bytes into 8 values
void Ultrapack_Decompress121(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 7) - 1;
    (*output)[0] = (uint32_t)(group0 % 121);
    group0 /= 121;
    *output += 1;

    uint64_t group1 = (*(uint64_t *)((*input) + 0)) >> 7;    group1 &= (1ull << 7) - 1;
    (*output)[0] = (uint32_t)(group1 % 121);
    group1 /= 121;
    *output += 1;

    uint64_t group2 = (*(uint64_t *)((*input) + 1)) >> 6;    group2 &= (1ull << 7) - 1;
    (*output)[0] = (uint32_t)(group2 % 121);
    group2 /= 121;
    *output += 1;

    uint64_t group3 = (*(uint64_t *)((*input) + 2)) >> 5;    group3 &= (1ull << 7) - 1;
    (*output)[0] = (uint32_t)(group3 % 121);
    group3 /= 121;
    *output += 1;

    uint64_t group4 = (*(uint64_t *)((*input) + 3)) >> 4;    group4 &= (1ull << 7) - 1;
    (*output)[0] = (uint32_t)(group4 % 121);
    group4 /= 121;
    *output += 1;

    uint64_t group5 = (*(uint64_t *)((*input) + 4)) >> 3;    group5 &= (1ull << 7) - 1;
    (*output)[0] = (uint32_t)(group5 % 121);
    group5 /= 121;
    *output += 1;

    uint64_t group6 = (*(uint64_t *)((*input) + 5)) >> 2;    group6 &= (1ull << 7) - 1;
    (*output)[0] = (uint32_t)(group6 % 121);
    group6 /= 121;
    *output += 1;

    uint64_t group7 = (*(uint64_t *)((*input) + 6)) >> 1;    group7 &= (1ull << 7) - 1;
    (*output)[0] = (uint32_t)(group7 % 121);
    group7 /= 121;
    *output += 1;


    *input += 7;
}

// Unpack 7 bytes into 8 values
void Ultrapack_Decompress122(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 7) - 1;
    (*output)[0] = (uint32_t)(group0 % 122);
    group0 /= 122;
    *output += 1;

    uint64_t group1 = (*(uint64_t *)((*input) + 0)) >> 7;    group1 &= (1ull << 7) - 1;
    (*output)[0] = (uint32_t)(group1 % 122);
    group1 /= 122;
    *output += 1;

    uint64_t group2 = (*(uint64_t *)((*input) + 1)) >> 6;    group2 &= (1ull << 7) - 1;
    (*output)[0] = (uint32_t)(group2 % 122);
    group2 /= 122;
    *output += 1;

    uint64_t group3 = (*(uint64_t *)((*input) + 2)) >> 5;    group3 &= (1ull << 7) - 1;
    (*output)[0] = (uint32_t)(group3 % 122);
    group3 /= 122;
    *output += 1;

    uint64_t group4 = (*(uint64_t *)((*input) + 3)) >> 4;    group4 &= (1ull << 7) - 1;
    (*output)[0] = (uint32_t)(group4 % 122);
    group4 /= 122;
    *output += 1;

    uint64_t group5 = (*(uint64_t *)((*input) + 4)) >> 3;    group5 &= (1ull << 7) - 1;
    (*output)[0] = (uint32_t)(group5 % 122);
    group5 /= 122;
    *output += 1;

    uint64_t group6 = (*(uint64_t *)((*input) + 5)) >> 2;    group6 &= (1ull << 7) - 1;
    (*output)[0] = (uint32_t)(group6 % 122);
    group6 /= 122;
    *output += 1;

    uint64_t group7 = (*(uint64_t *)((*input) + 6)) >> 1;    group7 &= (1ull << 7) - 1;
    (*output)[0] = (uint32_t)(group7 % 122);
    group7 /= 122;
    *output += 1;


    *input += 7;
}

// Unpack 7 bytes into 8 values
void Ultrapack_Decompress123(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 7) - 1;
    (*output)[0] = (uint32_t)(group0 % 123);
    group0 /= 123;
    *output += 1;

    uint64_t group1 = (*(uint64_t *)((*input) + 0)) >> 7;    group1 &= (1ull << 7) - 1;
    (*output)[0] = (uint32_t)(group1 % 123);
    group1 /= 123;
    *output += 1;

    uint64_t group2 = (*(uint64_t *)((*input) + 1)) >> 6;    group2 &= (1ull << 7) - 1;
    (*output)[0] = (uint32_t)(group2 % 123);
    group2 /= 123;
    *output += 1;

    uint64_t group3 = (*(uint64_t *)((*input) + 2)) >> 5;    group3 &= (1ull << 7) - 1;
    (*output)[0] = (uint32_t)(group3 % 123);
    group3 /= 123;
    *output += 1;

    uint64_t group4 = (*(uint64_t *)((*input) + 3)) >> 4;    group4 &= (1ull << 7) - 1;
    (*output)[0] = (uint32_t)(group4 % 123);
    group4 /= 123;
    *output += 1;

    uint64_t group5 = (*(uint64_t *)((*input) + 4)) >> 3;    group5 &= (1ull << 7) - 1;
    (*output)[0] = (uint32_t)(group5 % 123);
    group5 /= 123;
    *output += 1;

    uint64_t group6 = (*(uint64_t *)((*input) + 5)) >> 2;    group6 &= (1ull << 7) - 1;
    (*output)[0] = (uint32_t)(group6 % 123);
    group6 /= 123;
    *output += 1;

    uint64_t group7 = (*(uint64_t *)((*input) + 6)) >> 1;    group7 &= (1ull << 7) - 1;
    (*output)[0] = (uint32_t)(group7 % 123);
    group7 /= 123;
    *output += 1;


    *input += 7;
}

// Unpack 7 bytes into 8 values
void Ultrapack_Decompress124(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 7) - 1;
    (*output)[0] = (uint32_t)(group0 % 124);
    group0 /= 124;
    *output += 1;

    uint64_t group1 = (*(uint64_t *)((*input) + 0)) >> 7;    group1 &= (1ull << 7) - 1;
    (*output)[0] = (uint32_t)(group1 % 124);
    group1 /= 124;
    *output += 1;

    uint64_t group2 = (*(uint64_t *)((*input) + 1)) >> 6;    group2 &= (1ull << 7) - 1;
    (*output)[0] = (uint32_t)(group2 % 124);
    group2 /= 124;
    *output += 1;

    uint64_t group3 = (*(uint64_t *)((*input) + 2)) >> 5;    group3 &= (1ull << 7) - 1;
    (*output)[0] = (uint32_t)(group3 % 124);
    group3 /= 124;
    *output += 1;

    uint64_t group4 = (*(uint64_t *)((*input) + 3)) >> 4;    group4 &= (1ull << 7) - 1;
    (*output)[0] = (uint32_t)(group4 % 124);
    group4 /= 124;
    *output += 1;

    uint64_t group5 = (*(uint64_t *)((*input) + 4)) >> 3;    group5 &= (1ull << 7) - 1;
    (*output)[0] = (uint32_t)(group5 % 124);
    group5 /= 124;
    *output += 1;

    uint64_t group6 = (*(uint64_t *)((*input) + 5)) >> 2;    group6 &= (1ull << 7) - 1;
    (*output)[0] = (uint32_t)(group6 % 124);
    group6 /= 124;
    *output += 1;

    uint64_t group7 = (*(uint64_t *)((*input) + 6)) >> 1;    group7 &= (1ull << 7) - 1;
    (*output)[0] = (uint32_t)(group7 % 124);
    group7 /= 124;
    *output += 1;


    *input += 7;
}

// Unpack 7 bytes into 8 values
void Ultrapack_Decompress125(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 7) - 1;
    (*output)[0] = (uint32_t)(group0 % 125);
    group0 /= 125;
    *output += 1;

    uint64_t group1 = (*(uint64_t *)((*input) + 0)) >> 7;    group1 &= (1ull << 7) - 1;
    (*output)[0] = (uint32_t)(group1 % 125);
    group1 /= 125;
    *output += 1;

    uint64_t group2 = (*(uint64_t *)((*input) + 1)) >> 6;    group2 &= (1ull << 7) - 1;
    (*output)[0] = (uint32_t)(group2 % 125);
    group2 /= 125;
    *output += 1;

    uint64_t group3 = (*(uint64_t *)((*input) + 2)) >> 5;    group3 &= (1ull << 7) - 1;
    (*output)[0] = (uint32_t)(group3 % 125);
    group3 /= 125;
    *output += 1;

    uint64_t group4 = (*(uint64_t *)((*input) + 3)) >> 4;    group4 &= (1ull << 7) - 1;
    (*output)[0] = (uint32_t)(group4 % 125);
    group4 /= 125;
    *output += 1;

    uint64_t group5 = (*(uint64_t *)((*input) + 4)) >> 3;    group5 &= (1ull << 7) - 1;
    (*output)[0] = (uint32_t)(group5 % 125);
    group5 /= 125;
    *output += 1;

    uint64_t group6 = (*(uint64_t *)((*input) + 5)) >> 2;    group6 &= (1ull << 7) - 1;
    (*output)[0] = (uint32_t)(group6 % 125);
    group6 /= 125;
    *output += 1;

    uint64_t group7 = (*(uint64_t *)((*input) + 6)) >> 1;    group7 &= (1ull << 7) - 1;
    (*output)[0] = (uint32_t)(group7 % 125);
    group7 /= 125;
    *output += 1;


    *input += 7;
}

// Unpack 7 bytes into 8 values
void Ultrapack_Decompress126(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 7) - 1;
    (*output)[0] = (uint32_t)(group0 % 126);
    group0 /= 126;
    *output += 1;

    uint64_t group1 = (*(uint64_t *)((*input) + 0)) >> 7;    group1 &= (1ull << 7) - 1;
    (*output)[0] = (uint32_t)(group1 % 126);
    group1 /= 126;
    *output += 1;

    uint64_t group2 = (*(uint64_t *)((*input) + 1)) >> 6;    group2 &= (1ull << 7) - 1;
    (*output)[0] = (uint32_t)(group2 % 126);
    group2 /= 126;
    *output += 1;

    uint64_t group3 = (*(uint64_t *)((*input) + 2)) >> 5;    group3 &= (1ull << 7) - 1;
    (*output)[0] = (uint32_t)(group3 % 126);
    group3 /= 126;
    *output += 1;

    uint64_t group4 = (*(uint64_t *)((*input) + 3)) >> 4;    group4 &= (1ull << 7) - 1;
    (*output)[0] = (uint32_t)(group4 % 126);
    group4 /= 126;
    *output += 1;

    uint64_t group5 = (*(uint64_t *)((*input) + 4)) >> 3;    group5 &= (1ull << 7) - 1;
    (*output)[0] = (uint32_t)(group5 % 126);
    group5 /= 126;
    *output += 1;

    uint64_t group6 = (*(uint64_t *)((*input) + 5)) >> 2;    group6 &= (1ull << 7) - 1;
    (*output)[0] = (uint32_t)(group6 % 126);
    group6 /= 126;
    *output += 1;

    uint64_t group7 = (*(uint64_t *)((*input) + 6)) >> 1;    group7 &= (1ull << 7) - 1;
    (*output)[0] = (uint32_t)(group7 % 126);
    group7 /= 126;
    *output += 1;


    *input += 7;
}

// Unpack 7 bytes into 8 values
void Ultrapack_Decompress127(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 7) - 1;
    (*output)[0] = (uint32_t)(group0 % 127);
    group0 /= 127;
    *output += 1;

    uint64_t group1 = (*(uint64_t *)((*input) + 0)) >> 7;    group1 &= (1ull << 7) - 1;
    (*output)[0] = (uint32_t)(group1 % 127);
    group1 /= 127;
    *output += 1;

    uint64_t group2 = (*(uint64_t *)((*input) + 1)) >> 6;    group2 &= (1ull << 7) - 1;
    (*output)[0] = (uint32_t)(group2 % 127);
    group2 /= 127;
    *output += 1;

    uint64_t group3 = (*(uint64_t *)((*input) + 2)) >> 5;    group3 &= (1ull << 7) - 1;
    (*output)[0] = (uint32_t)(group3 % 127);
    group3 /= 127;
    *output += 1;

    uint64_t group4 = (*(uint64_t *)((*input) + 3)) >> 4;    group4 &= (1ull << 7) - 1;
    (*output)[0] = (uint32_t)(group4 % 127);
    group4 /= 127;
    *output += 1;

    uint64_t group5 = (*(uint64_t *)((*input) + 4)) >> 3;    group5 &= (1ull << 7) - 1;
    (*output)[0] = (uint32_t)(group5 % 127);
    group5 /= 127;
    *output += 1;

    uint64_t group6 = (*(uint64_t *)((*input) + 5)) >> 2;    group6 &= (1ull << 7) - 1;
    (*output)[0] = (uint32_t)(group6 % 127);
    group6 /= 127;
    *output += 1;

    uint64_t group7 = (*(uint64_t *)((*input) + 6)) >> 1;    group7 &= (1ull << 7) - 1;
    (*output)[0] = (uint32_t)(group7 % 127);
    group7 /= 127;
    *output += 1;


    *input += 7;
}

// Unpack 7 bytes into 8 values
void Ultrapack_Decompress128(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 7) - 1;
    (*output)[0] = (uint32_t)(group0 % 128);
    group0 /= 128;
    *output += 1;

    uint64_t group1 = (*(uint64_t *)((*input) + 0)) >> 7;    group1 &= (1ull << 7) - 1;
    (*output)[0] = (uint32_t)(group1 % 128);
    group1 /= 128;
    *output += 1;

    uint64_t group2 = (*(uint64_t *)((*input) + 1)) >> 6;    group2 &= (1ull << 7) - 1;
    (*output)[0] = (uint32_t)(group2 % 128);
    group2 /= 128;
    *output += 1;

    uint64_t group3 = (*(uint64_t *)((*input) + 2)) >> 5;    group3 &= (1ull << 7) - 1;
    (*output)[0] = (uint32_t)(group3 % 128);
    group3 /= 128;
    *output += 1;

    uint64_t group4 = (*(uint64_t *)((*input) + 3)) >> 4;    group4 &= (1ull << 7) - 1;
    (*output)[0] = (uint32_t)(group4 % 128);
    group4 /= 128;
    *output += 1;

    uint64_t group5 = (*(uint64_t *)((*input) + 4)) >> 3;    group5 &= (1ull << 7) - 1;
    (*output)[0] = (uint32_t)(group5 % 128);
    group5 /= 128;
    *output += 1;

    uint64_t group6 = (*(uint64_t *)((*input) + 5)) >> 2;    group6 &= (1ull << 7) - 1;
    (*output)[0] = (uint32_t)(group6 % 128);
    group6 /= 128;
    *output += 1;

    uint64_t group7 = (*(uint64_t *)((*input) + 6)) >> 1;    group7 &= (1ull << 7) - 1;
    (*output)[0] = (uint32_t)(group7 % 128);
    group7 /= 128;
    *output += 1;


    *input += 7;
}

// Unpack 43 bytes into 48 values
void Ultrapack_Decompress129(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group0 % 129);
    group0 /= 129;

    (*output)[4] = (uint32_t)(group0 % 129);
    group0 /= 129;

    (*output)[3] = (uint32_t)(group0 % 129);
    group0 /= 129;

    (*output)[2] = (uint32_t)(group0 % 129);
    group0 /= 129;

    (*output)[1] = (uint32_t)(group0 % 129);
    group0 /= 129;

    (*output)[0] = (uint32_t)(group0 % 129);
    group0 /= 129;
    *output += 6;

    uint64_t group1 = (*(uint64_t *)((*input) + 5)) >> 3;    group1 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group1 % 129);
    group1 /= 129;

    (*output)[4] = (uint32_t)(group1 % 129);
    group1 /= 129;

    (*output)[3] = (uint32_t)(group1 % 129);
    group1 /= 129;

    (*output)[2] = (uint32_t)(group1 % 129);
    group1 /= 129;

    (*output)[1] = (uint32_t)(group1 % 129);
    group1 /= 129;

    (*output)[0] = (uint32_t)(group1 % 129);
    group1 /= 129;
    *output += 6;

    uint64_t group2 = (*(uint64_t *)((*input) + 10)) >> 6;    group2 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group2 % 129);
    group2 /= 129;

    (*output)[4] = (uint32_t)(group2 % 129);
    group2 /= 129;

    (*output)[3] = (uint32_t)(group2 % 129);
    group2 /= 129;

    (*output)[2] = (uint32_t)(group2 % 129);
    group2 /= 129;

    (*output)[1] = (uint32_t)(group2 % 129);
    group2 /= 129;

    (*output)[0] = (uint32_t)(group2 % 129);
    group2 /= 129;
    *output += 6;

    uint64_t group3 = (*(uint64_t *)((*input) + 16)) >> 1;    group3 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group3 % 129);
    group3 /= 129;

    (*output)[4] = (uint32_t)(group3 % 129);
    group3 /= 129;

    (*output)[3] = (uint32_t)(group3 % 129);
    group3 /= 129;

    (*output)[2] = (uint32_t)(group3 % 129);
    group3 /= 129;

    (*output)[1] = (uint32_t)(group3 % 129);
    group3 /= 129;

    (*output)[0] = (uint32_t)(group3 % 129);
    group3 /= 129;
    *output += 6;

    uint64_t group4 = (*(uint64_t *)((*input) + 21)) >> 4;    group4 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group4 % 129);
    group4 /= 129;

    (*output)[4] = (uint32_t)(group4 % 129);
    group4 /= 129;

    (*output)[3] = (uint32_t)(group4 % 129);
    group4 /= 129;

    (*output)[2] = (uint32_t)(group4 % 129);
    group4 /= 129;

    (*output)[1] = (uint32_t)(group4 % 129);
    group4 /= 129;

    (*output)[0] = (uint32_t)(group4 % 129);
    group4 /= 129;
    *output += 6;

    uint64_t group5 = (*(uint64_t *)((*input) + 26)) >> 7;    group5 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group5 % 129);
    group5 /= 129;

    (*output)[4] = (uint32_t)(group5 % 129);
    group5 /= 129;

    (*output)[3] = (uint32_t)(group5 % 129);
    group5 /= 129;

    (*output)[2] = (uint32_t)(group5 % 129);
    group5 /= 129;

    (*output)[1] = (uint32_t)(group5 % 129);
    group5 /= 129;

    (*output)[0] = (uint32_t)(group5 % 129);
    group5 /= 129;
    *output += 6;

    uint64_t group6 = (*(uint64_t *)((*input) + 32)) >> 2;    group6 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group6 % 129);
    group6 /= 129;

    (*output)[4] = (uint32_t)(group6 % 129);
    group6 /= 129;

    (*output)[3] = (uint32_t)(group6 % 129);
    group6 /= 129;

    (*output)[2] = (uint32_t)(group6 % 129);
    group6 /= 129;

    (*output)[1] = (uint32_t)(group6 % 129);
    group6 /= 129;

    (*output)[0] = (uint32_t)(group6 % 129);
    group6 /= 129;
    *output += 6;

    uint64_t group7 = (*(uint64_t *)((*input) + 37)) >> 5;    group7 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group7 % 129);
    group7 /= 129;

    (*output)[4] = (uint32_t)(group7 % 129);
    group7 /= 129;

    (*output)[3] = (uint32_t)(group7 % 129);
    group7 /= 129;

    (*output)[2] = (uint32_t)(group7 % 129);
    group7 /= 129;

    (*output)[1] = (uint32_t)(group7 % 129);
    group7 /= 129;

    (*output)[0] = (uint32_t)(group7 % 129);
    group7 /= 129;
    *output += 6;


    *input += 43;
}

// Unpack 43 bytes into 48 values
void Ultrapack_Decompress130(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group0 % 130);
    group0 /= 130;

    (*output)[4] = (uint32_t)(group0 % 130);
    group0 /= 130;

    (*output)[3] = (uint32_t)(group0 % 130);
    group0 /= 130;

    (*output)[2] = (uint32_t)(group0 % 130);
    group0 /= 130;

    (*output)[1] = (uint32_t)(group0 % 130);
    group0 /= 130;

    (*output)[0] = (uint32_t)(group0 % 130);
    group0 /= 130;
    *output += 6;

    uint64_t group1 = (*(uint64_t *)((*input) + 5)) >> 3;    group1 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group1 % 130);
    group1 /= 130;

    (*output)[4] = (uint32_t)(group1 % 130);
    group1 /= 130;

    (*output)[3] = (uint32_t)(group1 % 130);
    group1 /= 130;

    (*output)[2] = (uint32_t)(group1 % 130);
    group1 /= 130;

    (*output)[1] = (uint32_t)(group1 % 130);
    group1 /= 130;

    (*output)[0] = (uint32_t)(group1 % 130);
    group1 /= 130;
    *output += 6;

    uint64_t group2 = (*(uint64_t *)((*input) + 10)) >> 6;    group2 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group2 % 130);
    group2 /= 130;

    (*output)[4] = (uint32_t)(group2 % 130);
    group2 /= 130;

    (*output)[3] = (uint32_t)(group2 % 130);
    group2 /= 130;

    (*output)[2] = (uint32_t)(group2 % 130);
    group2 /= 130;

    (*output)[1] = (uint32_t)(group2 % 130);
    group2 /= 130;

    (*output)[0] = (uint32_t)(group2 % 130);
    group2 /= 130;
    *output += 6;

    uint64_t group3 = (*(uint64_t *)((*input) + 16)) >> 1;    group3 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group3 % 130);
    group3 /= 130;

    (*output)[4] = (uint32_t)(group3 % 130);
    group3 /= 130;

    (*output)[3] = (uint32_t)(group3 % 130);
    group3 /= 130;

    (*output)[2] = (uint32_t)(group3 % 130);
    group3 /= 130;

    (*output)[1] = (uint32_t)(group3 % 130);
    group3 /= 130;

    (*output)[0] = (uint32_t)(group3 % 130);
    group3 /= 130;
    *output += 6;

    uint64_t group4 = (*(uint64_t *)((*input) + 21)) >> 4;    group4 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group4 % 130);
    group4 /= 130;

    (*output)[4] = (uint32_t)(group4 % 130);
    group4 /= 130;

    (*output)[3] = (uint32_t)(group4 % 130);
    group4 /= 130;

    (*output)[2] = (uint32_t)(group4 % 130);
    group4 /= 130;

    (*output)[1] = (uint32_t)(group4 % 130);
    group4 /= 130;

    (*output)[0] = (uint32_t)(group4 % 130);
    group4 /= 130;
    *output += 6;

    uint64_t group5 = (*(uint64_t *)((*input) + 26)) >> 7;    group5 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group5 % 130);
    group5 /= 130;

    (*output)[4] = (uint32_t)(group5 % 130);
    group5 /= 130;

    (*output)[3] = (uint32_t)(group5 % 130);
    group5 /= 130;

    (*output)[2] = (uint32_t)(group5 % 130);
    group5 /= 130;

    (*output)[1] = (uint32_t)(group5 % 130);
    group5 /= 130;

    (*output)[0] = (uint32_t)(group5 % 130);
    group5 /= 130;
    *output += 6;

    uint64_t group6 = (*(uint64_t *)((*input) + 32)) >> 2;    group6 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group6 % 130);
    group6 /= 130;

    (*output)[4] = (uint32_t)(group6 % 130);
    group6 /= 130;

    (*output)[3] = (uint32_t)(group6 % 130);
    group6 /= 130;

    (*output)[2] = (uint32_t)(group6 % 130);
    group6 /= 130;

    (*output)[1] = (uint32_t)(group6 % 130);
    group6 /= 130;

    (*output)[0] = (uint32_t)(group6 % 130);
    group6 /= 130;
    *output += 6;

    uint64_t group7 = (*(uint64_t *)((*input) + 37)) >> 5;    group7 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group7 % 130);
    group7 /= 130;

    (*output)[4] = (uint32_t)(group7 % 130);
    group7 /= 130;

    (*output)[3] = (uint32_t)(group7 % 130);
    group7 /= 130;

    (*output)[2] = (uint32_t)(group7 % 130);
    group7 /= 130;

    (*output)[1] = (uint32_t)(group7 % 130);
    group7 /= 130;

    (*output)[0] = (uint32_t)(group7 % 130);
    group7 /= 130;
    *output += 6;


    *input += 43;
}

// Unpack 43 bytes into 48 values
void Ultrapack_Decompress131(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group0 % 131);
    group0 /= 131;

    (*output)[4] = (uint32_t)(group0 % 131);
    group0 /= 131;

    (*output)[3] = (uint32_t)(group0 % 131);
    group0 /= 131;

    (*output)[2] = (uint32_t)(group0 % 131);
    group0 /= 131;

    (*output)[1] = (uint32_t)(group0 % 131);
    group0 /= 131;

    (*output)[0] = (uint32_t)(group0 % 131);
    group0 /= 131;
    *output += 6;

    uint64_t group1 = (*(uint64_t *)((*input) + 5)) >> 3;    group1 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group1 % 131);
    group1 /= 131;

    (*output)[4] = (uint32_t)(group1 % 131);
    group1 /= 131;

    (*output)[3] = (uint32_t)(group1 % 131);
    group1 /= 131;

    (*output)[2] = (uint32_t)(group1 % 131);
    group1 /= 131;

    (*output)[1] = (uint32_t)(group1 % 131);
    group1 /= 131;

    (*output)[0] = (uint32_t)(group1 % 131);
    group1 /= 131;
    *output += 6;

    uint64_t group2 = (*(uint64_t *)((*input) + 10)) >> 6;    group2 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group2 % 131);
    group2 /= 131;

    (*output)[4] = (uint32_t)(group2 % 131);
    group2 /= 131;

    (*output)[3] = (uint32_t)(group2 % 131);
    group2 /= 131;

    (*output)[2] = (uint32_t)(group2 % 131);
    group2 /= 131;

    (*output)[1] = (uint32_t)(group2 % 131);
    group2 /= 131;

    (*output)[0] = (uint32_t)(group2 % 131);
    group2 /= 131;
    *output += 6;

    uint64_t group3 = (*(uint64_t *)((*input) + 16)) >> 1;    group3 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group3 % 131);
    group3 /= 131;

    (*output)[4] = (uint32_t)(group3 % 131);
    group3 /= 131;

    (*output)[3] = (uint32_t)(group3 % 131);
    group3 /= 131;

    (*output)[2] = (uint32_t)(group3 % 131);
    group3 /= 131;

    (*output)[1] = (uint32_t)(group3 % 131);
    group3 /= 131;

    (*output)[0] = (uint32_t)(group3 % 131);
    group3 /= 131;
    *output += 6;

    uint64_t group4 = (*(uint64_t *)((*input) + 21)) >> 4;    group4 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group4 % 131);
    group4 /= 131;

    (*output)[4] = (uint32_t)(group4 % 131);
    group4 /= 131;

    (*output)[3] = (uint32_t)(group4 % 131);
    group4 /= 131;

    (*output)[2] = (uint32_t)(group4 % 131);
    group4 /= 131;

    (*output)[1] = (uint32_t)(group4 % 131);
    group4 /= 131;

    (*output)[0] = (uint32_t)(group4 % 131);
    group4 /= 131;
    *output += 6;

    uint64_t group5 = (*(uint64_t *)((*input) + 26)) >> 7;    group5 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group5 % 131);
    group5 /= 131;

    (*output)[4] = (uint32_t)(group5 % 131);
    group5 /= 131;

    (*output)[3] = (uint32_t)(group5 % 131);
    group5 /= 131;

    (*output)[2] = (uint32_t)(group5 % 131);
    group5 /= 131;

    (*output)[1] = (uint32_t)(group5 % 131);
    group5 /= 131;

    (*output)[0] = (uint32_t)(group5 % 131);
    group5 /= 131;
    *output += 6;

    uint64_t group6 = (*(uint64_t *)((*input) + 32)) >> 2;    group6 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group6 % 131);
    group6 /= 131;

    (*output)[4] = (uint32_t)(group6 % 131);
    group6 /= 131;

    (*output)[3] = (uint32_t)(group6 % 131);
    group6 /= 131;

    (*output)[2] = (uint32_t)(group6 % 131);
    group6 /= 131;

    (*output)[1] = (uint32_t)(group6 % 131);
    group6 /= 131;

    (*output)[0] = (uint32_t)(group6 % 131);
    group6 /= 131;
    *output += 6;

    uint64_t group7 = (*(uint64_t *)((*input) + 37)) >> 5;    group7 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group7 % 131);
    group7 /= 131;

    (*output)[4] = (uint32_t)(group7 % 131);
    group7 /= 131;

    (*output)[3] = (uint32_t)(group7 % 131);
    group7 /= 131;

    (*output)[2] = (uint32_t)(group7 % 131);
    group7 /= 131;

    (*output)[1] = (uint32_t)(group7 % 131);
    group7 /= 131;

    (*output)[0] = (uint32_t)(group7 % 131);
    group7 /= 131;
    *output += 6;


    *input += 43;
}

// Unpack 43 bytes into 48 values
void Ultrapack_Decompress132(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group0 % 132);
    group0 /= 132;

    (*output)[4] = (uint32_t)(group0 % 132);
    group0 /= 132;

    (*output)[3] = (uint32_t)(group0 % 132);
    group0 /= 132;

    (*output)[2] = (uint32_t)(group0 % 132);
    group0 /= 132;

    (*output)[1] = (uint32_t)(group0 % 132);
    group0 /= 132;

    (*output)[0] = (uint32_t)(group0 % 132);
    group0 /= 132;
    *output += 6;

    uint64_t group1 = (*(uint64_t *)((*input) + 5)) >> 3;    group1 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group1 % 132);
    group1 /= 132;

    (*output)[4] = (uint32_t)(group1 % 132);
    group1 /= 132;

    (*output)[3] = (uint32_t)(group1 % 132);
    group1 /= 132;

    (*output)[2] = (uint32_t)(group1 % 132);
    group1 /= 132;

    (*output)[1] = (uint32_t)(group1 % 132);
    group1 /= 132;

    (*output)[0] = (uint32_t)(group1 % 132);
    group1 /= 132;
    *output += 6;

    uint64_t group2 = (*(uint64_t *)((*input) + 10)) >> 6;    group2 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group2 % 132);
    group2 /= 132;

    (*output)[4] = (uint32_t)(group2 % 132);
    group2 /= 132;

    (*output)[3] = (uint32_t)(group2 % 132);
    group2 /= 132;

    (*output)[2] = (uint32_t)(group2 % 132);
    group2 /= 132;

    (*output)[1] = (uint32_t)(group2 % 132);
    group2 /= 132;

    (*output)[0] = (uint32_t)(group2 % 132);
    group2 /= 132;
    *output += 6;

    uint64_t group3 = (*(uint64_t *)((*input) + 16)) >> 1;    group3 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group3 % 132);
    group3 /= 132;

    (*output)[4] = (uint32_t)(group3 % 132);
    group3 /= 132;

    (*output)[3] = (uint32_t)(group3 % 132);
    group3 /= 132;

    (*output)[2] = (uint32_t)(group3 % 132);
    group3 /= 132;

    (*output)[1] = (uint32_t)(group3 % 132);
    group3 /= 132;

    (*output)[0] = (uint32_t)(group3 % 132);
    group3 /= 132;
    *output += 6;

    uint64_t group4 = (*(uint64_t *)((*input) + 21)) >> 4;    group4 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group4 % 132);
    group4 /= 132;

    (*output)[4] = (uint32_t)(group4 % 132);
    group4 /= 132;

    (*output)[3] = (uint32_t)(group4 % 132);
    group4 /= 132;

    (*output)[2] = (uint32_t)(group4 % 132);
    group4 /= 132;

    (*output)[1] = (uint32_t)(group4 % 132);
    group4 /= 132;

    (*output)[0] = (uint32_t)(group4 % 132);
    group4 /= 132;
    *output += 6;

    uint64_t group5 = (*(uint64_t *)((*input) + 26)) >> 7;    group5 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group5 % 132);
    group5 /= 132;

    (*output)[4] = (uint32_t)(group5 % 132);
    group5 /= 132;

    (*output)[3] = (uint32_t)(group5 % 132);
    group5 /= 132;

    (*output)[2] = (uint32_t)(group5 % 132);
    group5 /= 132;

    (*output)[1] = (uint32_t)(group5 % 132);
    group5 /= 132;

    (*output)[0] = (uint32_t)(group5 % 132);
    group5 /= 132;
    *output += 6;

    uint64_t group6 = (*(uint64_t *)((*input) + 32)) >> 2;    group6 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group6 % 132);
    group6 /= 132;

    (*output)[4] = (uint32_t)(group6 % 132);
    group6 /= 132;

    (*output)[3] = (uint32_t)(group6 % 132);
    group6 /= 132;

    (*output)[2] = (uint32_t)(group6 % 132);
    group6 /= 132;

    (*output)[1] = (uint32_t)(group6 % 132);
    group6 /= 132;

    (*output)[0] = (uint32_t)(group6 % 132);
    group6 /= 132;
    *output += 6;

    uint64_t group7 = (*(uint64_t *)((*input) + 37)) >> 5;    group7 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group7 % 132);
    group7 /= 132;

    (*output)[4] = (uint32_t)(group7 % 132);
    group7 /= 132;

    (*output)[3] = (uint32_t)(group7 % 132);
    group7 /= 132;

    (*output)[2] = (uint32_t)(group7 % 132);
    group7 /= 132;

    (*output)[1] = (uint32_t)(group7 % 132);
    group7 /= 132;

    (*output)[0] = (uint32_t)(group7 % 132);
    group7 /= 132;
    *output += 6;


    *input += 43;
}

// Unpack 43 bytes into 48 values
void Ultrapack_Decompress133(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group0 % 133);
    group0 /= 133;

    (*output)[4] = (uint32_t)(group0 % 133);
    group0 /= 133;

    (*output)[3] = (uint32_t)(group0 % 133);
    group0 /= 133;

    (*output)[2] = (uint32_t)(group0 % 133);
    group0 /= 133;

    (*output)[1] = (uint32_t)(group0 % 133);
    group0 /= 133;

    (*output)[0] = (uint32_t)(group0 % 133);
    group0 /= 133;
    *output += 6;

    uint64_t group1 = (*(uint64_t *)((*input) + 5)) >> 3;    group1 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group1 % 133);
    group1 /= 133;

    (*output)[4] = (uint32_t)(group1 % 133);
    group1 /= 133;

    (*output)[3] = (uint32_t)(group1 % 133);
    group1 /= 133;

    (*output)[2] = (uint32_t)(group1 % 133);
    group1 /= 133;

    (*output)[1] = (uint32_t)(group1 % 133);
    group1 /= 133;

    (*output)[0] = (uint32_t)(group1 % 133);
    group1 /= 133;
    *output += 6;

    uint64_t group2 = (*(uint64_t *)((*input) + 10)) >> 6;    group2 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group2 % 133);
    group2 /= 133;

    (*output)[4] = (uint32_t)(group2 % 133);
    group2 /= 133;

    (*output)[3] = (uint32_t)(group2 % 133);
    group2 /= 133;

    (*output)[2] = (uint32_t)(group2 % 133);
    group2 /= 133;

    (*output)[1] = (uint32_t)(group2 % 133);
    group2 /= 133;

    (*output)[0] = (uint32_t)(group2 % 133);
    group2 /= 133;
    *output += 6;

    uint64_t group3 = (*(uint64_t *)((*input) + 16)) >> 1;    group3 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group3 % 133);
    group3 /= 133;

    (*output)[4] = (uint32_t)(group3 % 133);
    group3 /= 133;

    (*output)[3] = (uint32_t)(group3 % 133);
    group3 /= 133;

    (*output)[2] = (uint32_t)(group3 % 133);
    group3 /= 133;

    (*output)[1] = (uint32_t)(group3 % 133);
    group3 /= 133;

    (*output)[0] = (uint32_t)(group3 % 133);
    group3 /= 133;
    *output += 6;

    uint64_t group4 = (*(uint64_t *)((*input) + 21)) >> 4;    group4 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group4 % 133);
    group4 /= 133;

    (*output)[4] = (uint32_t)(group4 % 133);
    group4 /= 133;

    (*output)[3] = (uint32_t)(group4 % 133);
    group4 /= 133;

    (*output)[2] = (uint32_t)(group4 % 133);
    group4 /= 133;

    (*output)[1] = (uint32_t)(group4 % 133);
    group4 /= 133;

    (*output)[0] = (uint32_t)(group4 % 133);
    group4 /= 133;
    *output += 6;

    uint64_t group5 = (*(uint64_t *)((*input) + 26)) >> 7;    group5 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group5 % 133);
    group5 /= 133;

    (*output)[4] = (uint32_t)(group5 % 133);
    group5 /= 133;

    (*output)[3] = (uint32_t)(group5 % 133);
    group5 /= 133;

    (*output)[2] = (uint32_t)(group5 % 133);
    group5 /= 133;

    (*output)[1] = (uint32_t)(group5 % 133);
    group5 /= 133;

    (*output)[0] = (uint32_t)(group5 % 133);
    group5 /= 133;
    *output += 6;

    uint64_t group6 = (*(uint64_t *)((*input) + 32)) >> 2;    group6 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group6 % 133);
    group6 /= 133;

    (*output)[4] = (uint32_t)(group6 % 133);
    group6 /= 133;

    (*output)[3] = (uint32_t)(group6 % 133);
    group6 /= 133;

    (*output)[2] = (uint32_t)(group6 % 133);
    group6 /= 133;

    (*output)[1] = (uint32_t)(group6 % 133);
    group6 /= 133;

    (*output)[0] = (uint32_t)(group6 % 133);
    group6 /= 133;
    *output += 6;

    uint64_t group7 = (*(uint64_t *)((*input) + 37)) >> 5;    group7 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group7 % 133);
    group7 /= 133;

    (*output)[4] = (uint32_t)(group7 % 133);
    group7 /= 133;

    (*output)[3] = (uint32_t)(group7 % 133);
    group7 /= 133;

    (*output)[2] = (uint32_t)(group7 % 133);
    group7 /= 133;

    (*output)[1] = (uint32_t)(group7 % 133);
    group7 /= 133;

    (*output)[0] = (uint32_t)(group7 % 133);
    group7 /= 133;
    *output += 6;


    *input += 43;
}

// Unpack 43 bytes into 48 values
void Ultrapack_Decompress134(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group0 % 134);
    group0 /= 134;

    (*output)[4] = (uint32_t)(group0 % 134);
    group0 /= 134;

    (*output)[3] = (uint32_t)(group0 % 134);
    group0 /= 134;

    (*output)[2] = (uint32_t)(group0 % 134);
    group0 /= 134;

    (*output)[1] = (uint32_t)(group0 % 134);
    group0 /= 134;

    (*output)[0] = (uint32_t)(group0 % 134);
    group0 /= 134;
    *output += 6;

    uint64_t group1 = (*(uint64_t *)((*input) + 5)) >> 3;    group1 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group1 % 134);
    group1 /= 134;

    (*output)[4] = (uint32_t)(group1 % 134);
    group1 /= 134;

    (*output)[3] = (uint32_t)(group1 % 134);
    group1 /= 134;

    (*output)[2] = (uint32_t)(group1 % 134);
    group1 /= 134;

    (*output)[1] = (uint32_t)(group1 % 134);
    group1 /= 134;

    (*output)[0] = (uint32_t)(group1 % 134);
    group1 /= 134;
    *output += 6;

    uint64_t group2 = (*(uint64_t *)((*input) + 10)) >> 6;    group2 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group2 % 134);
    group2 /= 134;

    (*output)[4] = (uint32_t)(group2 % 134);
    group2 /= 134;

    (*output)[3] = (uint32_t)(group2 % 134);
    group2 /= 134;

    (*output)[2] = (uint32_t)(group2 % 134);
    group2 /= 134;

    (*output)[1] = (uint32_t)(group2 % 134);
    group2 /= 134;

    (*output)[0] = (uint32_t)(group2 % 134);
    group2 /= 134;
    *output += 6;

    uint64_t group3 = (*(uint64_t *)((*input) + 16)) >> 1;    group3 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group3 % 134);
    group3 /= 134;

    (*output)[4] = (uint32_t)(group3 % 134);
    group3 /= 134;

    (*output)[3] = (uint32_t)(group3 % 134);
    group3 /= 134;

    (*output)[2] = (uint32_t)(group3 % 134);
    group3 /= 134;

    (*output)[1] = (uint32_t)(group3 % 134);
    group3 /= 134;

    (*output)[0] = (uint32_t)(group3 % 134);
    group3 /= 134;
    *output += 6;

    uint64_t group4 = (*(uint64_t *)((*input) + 21)) >> 4;    group4 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group4 % 134);
    group4 /= 134;

    (*output)[4] = (uint32_t)(group4 % 134);
    group4 /= 134;

    (*output)[3] = (uint32_t)(group4 % 134);
    group4 /= 134;

    (*output)[2] = (uint32_t)(group4 % 134);
    group4 /= 134;

    (*output)[1] = (uint32_t)(group4 % 134);
    group4 /= 134;

    (*output)[0] = (uint32_t)(group4 % 134);
    group4 /= 134;
    *output += 6;

    uint64_t group5 = (*(uint64_t *)((*input) + 26)) >> 7;    group5 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group5 % 134);
    group5 /= 134;

    (*output)[4] = (uint32_t)(group5 % 134);
    group5 /= 134;

    (*output)[3] = (uint32_t)(group5 % 134);
    group5 /= 134;

    (*output)[2] = (uint32_t)(group5 % 134);
    group5 /= 134;

    (*output)[1] = (uint32_t)(group5 % 134);
    group5 /= 134;

    (*output)[0] = (uint32_t)(group5 % 134);
    group5 /= 134;
    *output += 6;

    uint64_t group6 = (*(uint64_t *)((*input) + 32)) >> 2;    group6 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group6 % 134);
    group6 /= 134;

    (*output)[4] = (uint32_t)(group6 % 134);
    group6 /= 134;

    (*output)[3] = (uint32_t)(group6 % 134);
    group6 /= 134;

    (*output)[2] = (uint32_t)(group6 % 134);
    group6 /= 134;

    (*output)[1] = (uint32_t)(group6 % 134);
    group6 /= 134;

    (*output)[0] = (uint32_t)(group6 % 134);
    group6 /= 134;
    *output += 6;

    uint64_t group7 = (*(uint64_t *)((*input) + 37)) >> 5;    group7 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group7 % 134);
    group7 /= 134;

    (*output)[4] = (uint32_t)(group7 % 134);
    group7 /= 134;

    (*output)[3] = (uint32_t)(group7 % 134);
    group7 /= 134;

    (*output)[2] = (uint32_t)(group7 % 134);
    group7 /= 134;

    (*output)[1] = (uint32_t)(group7 % 134);
    group7 /= 134;

    (*output)[0] = (uint32_t)(group7 % 134);
    group7 /= 134;
    *output += 6;


    *input += 43;
}

// Unpack 43 bytes into 48 values
void Ultrapack_Decompress135(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group0 % 135);
    group0 /= 135;

    (*output)[4] = (uint32_t)(group0 % 135);
    group0 /= 135;

    (*output)[3] = (uint32_t)(group0 % 135);
    group0 /= 135;

    (*output)[2] = (uint32_t)(group0 % 135);
    group0 /= 135;

    (*output)[1] = (uint32_t)(group0 % 135);
    group0 /= 135;

    (*output)[0] = (uint32_t)(group0 % 135);
    group0 /= 135;
    *output += 6;

    uint64_t group1 = (*(uint64_t *)((*input) + 5)) >> 3;    group1 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group1 % 135);
    group1 /= 135;

    (*output)[4] = (uint32_t)(group1 % 135);
    group1 /= 135;

    (*output)[3] = (uint32_t)(group1 % 135);
    group1 /= 135;

    (*output)[2] = (uint32_t)(group1 % 135);
    group1 /= 135;

    (*output)[1] = (uint32_t)(group1 % 135);
    group1 /= 135;

    (*output)[0] = (uint32_t)(group1 % 135);
    group1 /= 135;
    *output += 6;

    uint64_t group2 = (*(uint64_t *)((*input) + 10)) >> 6;    group2 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group2 % 135);
    group2 /= 135;

    (*output)[4] = (uint32_t)(group2 % 135);
    group2 /= 135;

    (*output)[3] = (uint32_t)(group2 % 135);
    group2 /= 135;

    (*output)[2] = (uint32_t)(group2 % 135);
    group2 /= 135;

    (*output)[1] = (uint32_t)(group2 % 135);
    group2 /= 135;

    (*output)[0] = (uint32_t)(group2 % 135);
    group2 /= 135;
    *output += 6;

    uint64_t group3 = (*(uint64_t *)((*input) + 16)) >> 1;    group3 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group3 % 135);
    group3 /= 135;

    (*output)[4] = (uint32_t)(group3 % 135);
    group3 /= 135;

    (*output)[3] = (uint32_t)(group3 % 135);
    group3 /= 135;

    (*output)[2] = (uint32_t)(group3 % 135);
    group3 /= 135;

    (*output)[1] = (uint32_t)(group3 % 135);
    group3 /= 135;

    (*output)[0] = (uint32_t)(group3 % 135);
    group3 /= 135;
    *output += 6;

    uint64_t group4 = (*(uint64_t *)((*input) + 21)) >> 4;    group4 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group4 % 135);
    group4 /= 135;

    (*output)[4] = (uint32_t)(group4 % 135);
    group4 /= 135;

    (*output)[3] = (uint32_t)(group4 % 135);
    group4 /= 135;

    (*output)[2] = (uint32_t)(group4 % 135);
    group4 /= 135;

    (*output)[1] = (uint32_t)(group4 % 135);
    group4 /= 135;

    (*output)[0] = (uint32_t)(group4 % 135);
    group4 /= 135;
    *output += 6;

    uint64_t group5 = (*(uint64_t *)((*input) + 26)) >> 7;    group5 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group5 % 135);
    group5 /= 135;

    (*output)[4] = (uint32_t)(group5 % 135);
    group5 /= 135;

    (*output)[3] = (uint32_t)(group5 % 135);
    group5 /= 135;

    (*output)[2] = (uint32_t)(group5 % 135);
    group5 /= 135;

    (*output)[1] = (uint32_t)(group5 % 135);
    group5 /= 135;

    (*output)[0] = (uint32_t)(group5 % 135);
    group5 /= 135;
    *output += 6;

    uint64_t group6 = (*(uint64_t *)((*input) + 32)) >> 2;    group6 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group6 % 135);
    group6 /= 135;

    (*output)[4] = (uint32_t)(group6 % 135);
    group6 /= 135;

    (*output)[3] = (uint32_t)(group6 % 135);
    group6 /= 135;

    (*output)[2] = (uint32_t)(group6 % 135);
    group6 /= 135;

    (*output)[1] = (uint32_t)(group6 % 135);
    group6 /= 135;

    (*output)[0] = (uint32_t)(group6 % 135);
    group6 /= 135;
    *output += 6;

    uint64_t group7 = (*(uint64_t *)((*input) + 37)) >> 5;    group7 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group7 % 135);
    group7 /= 135;

    (*output)[4] = (uint32_t)(group7 % 135);
    group7 /= 135;

    (*output)[3] = (uint32_t)(group7 % 135);
    group7 /= 135;

    (*output)[2] = (uint32_t)(group7 % 135);
    group7 /= 135;

    (*output)[1] = (uint32_t)(group7 % 135);
    group7 /= 135;

    (*output)[0] = (uint32_t)(group7 % 135);
    group7 /= 135;
    *output += 6;


    *input += 43;
}

// Unpack 43 bytes into 48 values
void Ultrapack_Decompress136(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group0 % 136);
    group0 /= 136;

    (*output)[4] = (uint32_t)(group0 % 136);
    group0 /= 136;

    (*output)[3] = (uint32_t)(group0 % 136);
    group0 /= 136;

    (*output)[2] = (uint32_t)(group0 % 136);
    group0 /= 136;

    (*output)[1] = (uint32_t)(group0 % 136);
    group0 /= 136;

    (*output)[0] = (uint32_t)(group0 % 136);
    group0 /= 136;
    *output += 6;

    uint64_t group1 = (*(uint64_t *)((*input) + 5)) >> 3;    group1 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group1 % 136);
    group1 /= 136;

    (*output)[4] = (uint32_t)(group1 % 136);
    group1 /= 136;

    (*output)[3] = (uint32_t)(group1 % 136);
    group1 /= 136;

    (*output)[2] = (uint32_t)(group1 % 136);
    group1 /= 136;

    (*output)[1] = (uint32_t)(group1 % 136);
    group1 /= 136;

    (*output)[0] = (uint32_t)(group1 % 136);
    group1 /= 136;
    *output += 6;

    uint64_t group2 = (*(uint64_t *)((*input) + 10)) >> 6;    group2 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group2 % 136);
    group2 /= 136;

    (*output)[4] = (uint32_t)(group2 % 136);
    group2 /= 136;

    (*output)[3] = (uint32_t)(group2 % 136);
    group2 /= 136;

    (*output)[2] = (uint32_t)(group2 % 136);
    group2 /= 136;

    (*output)[1] = (uint32_t)(group2 % 136);
    group2 /= 136;

    (*output)[0] = (uint32_t)(group2 % 136);
    group2 /= 136;
    *output += 6;

    uint64_t group3 = (*(uint64_t *)((*input) + 16)) >> 1;    group3 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group3 % 136);
    group3 /= 136;

    (*output)[4] = (uint32_t)(group3 % 136);
    group3 /= 136;

    (*output)[3] = (uint32_t)(group3 % 136);
    group3 /= 136;

    (*output)[2] = (uint32_t)(group3 % 136);
    group3 /= 136;

    (*output)[1] = (uint32_t)(group3 % 136);
    group3 /= 136;

    (*output)[0] = (uint32_t)(group3 % 136);
    group3 /= 136;
    *output += 6;

    uint64_t group4 = (*(uint64_t *)((*input) + 21)) >> 4;    group4 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group4 % 136);
    group4 /= 136;

    (*output)[4] = (uint32_t)(group4 % 136);
    group4 /= 136;

    (*output)[3] = (uint32_t)(group4 % 136);
    group4 /= 136;

    (*output)[2] = (uint32_t)(group4 % 136);
    group4 /= 136;

    (*output)[1] = (uint32_t)(group4 % 136);
    group4 /= 136;

    (*output)[0] = (uint32_t)(group4 % 136);
    group4 /= 136;
    *output += 6;

    uint64_t group5 = (*(uint64_t *)((*input) + 26)) >> 7;    group5 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group5 % 136);
    group5 /= 136;

    (*output)[4] = (uint32_t)(group5 % 136);
    group5 /= 136;

    (*output)[3] = (uint32_t)(group5 % 136);
    group5 /= 136;

    (*output)[2] = (uint32_t)(group5 % 136);
    group5 /= 136;

    (*output)[1] = (uint32_t)(group5 % 136);
    group5 /= 136;

    (*output)[0] = (uint32_t)(group5 % 136);
    group5 /= 136;
    *output += 6;

    uint64_t group6 = (*(uint64_t *)((*input) + 32)) >> 2;    group6 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group6 % 136);
    group6 /= 136;

    (*output)[4] = (uint32_t)(group6 % 136);
    group6 /= 136;

    (*output)[3] = (uint32_t)(group6 % 136);
    group6 /= 136;

    (*output)[2] = (uint32_t)(group6 % 136);
    group6 /= 136;

    (*output)[1] = (uint32_t)(group6 % 136);
    group6 /= 136;

    (*output)[0] = (uint32_t)(group6 % 136);
    group6 /= 136;
    *output += 6;

    uint64_t group7 = (*(uint64_t *)((*input) + 37)) >> 5;    group7 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group7 % 136);
    group7 /= 136;

    (*output)[4] = (uint32_t)(group7 % 136);
    group7 /= 136;

    (*output)[3] = (uint32_t)(group7 % 136);
    group7 /= 136;

    (*output)[2] = (uint32_t)(group7 % 136);
    group7 /= 136;

    (*output)[1] = (uint32_t)(group7 % 136);
    group7 /= 136;

    (*output)[0] = (uint32_t)(group7 % 136);
    group7 /= 136;
    *output += 6;


    *input += 43;
}

// Unpack 43 bytes into 48 values
void Ultrapack_Decompress137(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group0 % 137);
    group0 /= 137;

    (*output)[4] = (uint32_t)(group0 % 137);
    group0 /= 137;

    (*output)[3] = (uint32_t)(group0 % 137);
    group0 /= 137;

    (*output)[2] = (uint32_t)(group0 % 137);
    group0 /= 137;

    (*output)[1] = (uint32_t)(group0 % 137);
    group0 /= 137;

    (*output)[0] = (uint32_t)(group0 % 137);
    group0 /= 137;
    *output += 6;

    uint64_t group1 = (*(uint64_t *)((*input) + 5)) >> 3;    group1 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group1 % 137);
    group1 /= 137;

    (*output)[4] = (uint32_t)(group1 % 137);
    group1 /= 137;

    (*output)[3] = (uint32_t)(group1 % 137);
    group1 /= 137;

    (*output)[2] = (uint32_t)(group1 % 137);
    group1 /= 137;

    (*output)[1] = (uint32_t)(group1 % 137);
    group1 /= 137;

    (*output)[0] = (uint32_t)(group1 % 137);
    group1 /= 137;
    *output += 6;

    uint64_t group2 = (*(uint64_t *)((*input) + 10)) >> 6;    group2 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group2 % 137);
    group2 /= 137;

    (*output)[4] = (uint32_t)(group2 % 137);
    group2 /= 137;

    (*output)[3] = (uint32_t)(group2 % 137);
    group2 /= 137;

    (*output)[2] = (uint32_t)(group2 % 137);
    group2 /= 137;

    (*output)[1] = (uint32_t)(group2 % 137);
    group2 /= 137;

    (*output)[0] = (uint32_t)(group2 % 137);
    group2 /= 137;
    *output += 6;

    uint64_t group3 = (*(uint64_t *)((*input) + 16)) >> 1;    group3 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group3 % 137);
    group3 /= 137;

    (*output)[4] = (uint32_t)(group3 % 137);
    group3 /= 137;

    (*output)[3] = (uint32_t)(group3 % 137);
    group3 /= 137;

    (*output)[2] = (uint32_t)(group3 % 137);
    group3 /= 137;

    (*output)[1] = (uint32_t)(group3 % 137);
    group3 /= 137;

    (*output)[0] = (uint32_t)(group3 % 137);
    group3 /= 137;
    *output += 6;

    uint64_t group4 = (*(uint64_t *)((*input) + 21)) >> 4;    group4 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group4 % 137);
    group4 /= 137;

    (*output)[4] = (uint32_t)(group4 % 137);
    group4 /= 137;

    (*output)[3] = (uint32_t)(group4 % 137);
    group4 /= 137;

    (*output)[2] = (uint32_t)(group4 % 137);
    group4 /= 137;

    (*output)[1] = (uint32_t)(group4 % 137);
    group4 /= 137;

    (*output)[0] = (uint32_t)(group4 % 137);
    group4 /= 137;
    *output += 6;

    uint64_t group5 = (*(uint64_t *)((*input) + 26)) >> 7;    group5 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group5 % 137);
    group5 /= 137;

    (*output)[4] = (uint32_t)(group5 % 137);
    group5 /= 137;

    (*output)[3] = (uint32_t)(group5 % 137);
    group5 /= 137;

    (*output)[2] = (uint32_t)(group5 % 137);
    group5 /= 137;

    (*output)[1] = (uint32_t)(group5 % 137);
    group5 /= 137;

    (*output)[0] = (uint32_t)(group5 % 137);
    group5 /= 137;
    *output += 6;

    uint64_t group6 = (*(uint64_t *)((*input) + 32)) >> 2;    group6 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group6 % 137);
    group6 /= 137;

    (*output)[4] = (uint32_t)(group6 % 137);
    group6 /= 137;

    (*output)[3] = (uint32_t)(group6 % 137);
    group6 /= 137;

    (*output)[2] = (uint32_t)(group6 % 137);
    group6 /= 137;

    (*output)[1] = (uint32_t)(group6 % 137);
    group6 /= 137;

    (*output)[0] = (uint32_t)(group6 % 137);
    group6 /= 137;
    *output += 6;

    uint64_t group7 = (*(uint64_t *)((*input) + 37)) >> 5;    group7 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group7 % 137);
    group7 /= 137;

    (*output)[4] = (uint32_t)(group7 % 137);
    group7 /= 137;

    (*output)[3] = (uint32_t)(group7 % 137);
    group7 /= 137;

    (*output)[2] = (uint32_t)(group7 % 137);
    group7 /= 137;

    (*output)[1] = (uint32_t)(group7 % 137);
    group7 /= 137;

    (*output)[0] = (uint32_t)(group7 % 137);
    group7 /= 137;
    *output += 6;


    *input += 43;
}

// Unpack 43 bytes into 48 values
void Ultrapack_Decompress138(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group0 % 138);
    group0 /= 138;

    (*output)[4] = (uint32_t)(group0 % 138);
    group0 /= 138;

    (*output)[3] = (uint32_t)(group0 % 138);
    group0 /= 138;

    (*output)[2] = (uint32_t)(group0 % 138);
    group0 /= 138;

    (*output)[1] = (uint32_t)(group0 % 138);
    group0 /= 138;

    (*output)[0] = (uint32_t)(group0 % 138);
    group0 /= 138;
    *output += 6;

    uint64_t group1 = (*(uint64_t *)((*input) + 5)) >> 3;    group1 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group1 % 138);
    group1 /= 138;

    (*output)[4] = (uint32_t)(group1 % 138);
    group1 /= 138;

    (*output)[3] = (uint32_t)(group1 % 138);
    group1 /= 138;

    (*output)[2] = (uint32_t)(group1 % 138);
    group1 /= 138;

    (*output)[1] = (uint32_t)(group1 % 138);
    group1 /= 138;

    (*output)[0] = (uint32_t)(group1 % 138);
    group1 /= 138;
    *output += 6;

    uint64_t group2 = (*(uint64_t *)((*input) + 10)) >> 6;    group2 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group2 % 138);
    group2 /= 138;

    (*output)[4] = (uint32_t)(group2 % 138);
    group2 /= 138;

    (*output)[3] = (uint32_t)(group2 % 138);
    group2 /= 138;

    (*output)[2] = (uint32_t)(group2 % 138);
    group2 /= 138;

    (*output)[1] = (uint32_t)(group2 % 138);
    group2 /= 138;

    (*output)[0] = (uint32_t)(group2 % 138);
    group2 /= 138;
    *output += 6;

    uint64_t group3 = (*(uint64_t *)((*input) + 16)) >> 1;    group3 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group3 % 138);
    group3 /= 138;

    (*output)[4] = (uint32_t)(group3 % 138);
    group3 /= 138;

    (*output)[3] = (uint32_t)(group3 % 138);
    group3 /= 138;

    (*output)[2] = (uint32_t)(group3 % 138);
    group3 /= 138;

    (*output)[1] = (uint32_t)(group3 % 138);
    group3 /= 138;

    (*output)[0] = (uint32_t)(group3 % 138);
    group3 /= 138;
    *output += 6;

    uint64_t group4 = (*(uint64_t *)((*input) + 21)) >> 4;    group4 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group4 % 138);
    group4 /= 138;

    (*output)[4] = (uint32_t)(group4 % 138);
    group4 /= 138;

    (*output)[3] = (uint32_t)(group4 % 138);
    group4 /= 138;

    (*output)[2] = (uint32_t)(group4 % 138);
    group4 /= 138;

    (*output)[1] = (uint32_t)(group4 % 138);
    group4 /= 138;

    (*output)[0] = (uint32_t)(group4 % 138);
    group4 /= 138;
    *output += 6;

    uint64_t group5 = (*(uint64_t *)((*input) + 26)) >> 7;    group5 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group5 % 138);
    group5 /= 138;

    (*output)[4] = (uint32_t)(group5 % 138);
    group5 /= 138;

    (*output)[3] = (uint32_t)(group5 % 138);
    group5 /= 138;

    (*output)[2] = (uint32_t)(group5 % 138);
    group5 /= 138;

    (*output)[1] = (uint32_t)(group5 % 138);
    group5 /= 138;

    (*output)[0] = (uint32_t)(group5 % 138);
    group5 /= 138;
    *output += 6;

    uint64_t group6 = (*(uint64_t *)((*input) + 32)) >> 2;    group6 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group6 % 138);
    group6 /= 138;

    (*output)[4] = (uint32_t)(group6 % 138);
    group6 /= 138;

    (*output)[3] = (uint32_t)(group6 % 138);
    group6 /= 138;

    (*output)[2] = (uint32_t)(group6 % 138);
    group6 /= 138;

    (*output)[1] = (uint32_t)(group6 % 138);
    group6 /= 138;

    (*output)[0] = (uint32_t)(group6 % 138);
    group6 /= 138;
    *output += 6;

    uint64_t group7 = (*(uint64_t *)((*input) + 37)) >> 5;    group7 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group7 % 138);
    group7 /= 138;

    (*output)[4] = (uint32_t)(group7 % 138);
    group7 /= 138;

    (*output)[3] = (uint32_t)(group7 % 138);
    group7 /= 138;

    (*output)[2] = (uint32_t)(group7 % 138);
    group7 /= 138;

    (*output)[1] = (uint32_t)(group7 % 138);
    group7 /= 138;

    (*output)[0] = (uint32_t)(group7 % 138);
    group7 /= 138;
    *output += 6;


    *input += 43;
}

// Unpack 43 bytes into 48 values
void Ultrapack_Decompress139(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group0 % 139);
    group0 /= 139;

    (*output)[4] = (uint32_t)(group0 % 139);
    group0 /= 139;

    (*output)[3] = (uint32_t)(group0 % 139);
    group0 /= 139;

    (*output)[2] = (uint32_t)(group0 % 139);
    group0 /= 139;

    (*output)[1] = (uint32_t)(group0 % 139);
    group0 /= 139;

    (*output)[0] = (uint32_t)(group0 % 139);
    group0 /= 139;
    *output += 6;

    uint64_t group1 = (*(uint64_t *)((*input) + 5)) >> 3;    group1 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group1 % 139);
    group1 /= 139;

    (*output)[4] = (uint32_t)(group1 % 139);
    group1 /= 139;

    (*output)[3] = (uint32_t)(group1 % 139);
    group1 /= 139;

    (*output)[2] = (uint32_t)(group1 % 139);
    group1 /= 139;

    (*output)[1] = (uint32_t)(group1 % 139);
    group1 /= 139;

    (*output)[0] = (uint32_t)(group1 % 139);
    group1 /= 139;
    *output += 6;

    uint64_t group2 = (*(uint64_t *)((*input) + 10)) >> 6;    group2 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group2 % 139);
    group2 /= 139;

    (*output)[4] = (uint32_t)(group2 % 139);
    group2 /= 139;

    (*output)[3] = (uint32_t)(group2 % 139);
    group2 /= 139;

    (*output)[2] = (uint32_t)(group2 % 139);
    group2 /= 139;

    (*output)[1] = (uint32_t)(group2 % 139);
    group2 /= 139;

    (*output)[0] = (uint32_t)(group2 % 139);
    group2 /= 139;
    *output += 6;

    uint64_t group3 = (*(uint64_t *)((*input) + 16)) >> 1;    group3 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group3 % 139);
    group3 /= 139;

    (*output)[4] = (uint32_t)(group3 % 139);
    group3 /= 139;

    (*output)[3] = (uint32_t)(group3 % 139);
    group3 /= 139;

    (*output)[2] = (uint32_t)(group3 % 139);
    group3 /= 139;

    (*output)[1] = (uint32_t)(group3 % 139);
    group3 /= 139;

    (*output)[0] = (uint32_t)(group3 % 139);
    group3 /= 139;
    *output += 6;

    uint64_t group4 = (*(uint64_t *)((*input) + 21)) >> 4;    group4 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group4 % 139);
    group4 /= 139;

    (*output)[4] = (uint32_t)(group4 % 139);
    group4 /= 139;

    (*output)[3] = (uint32_t)(group4 % 139);
    group4 /= 139;

    (*output)[2] = (uint32_t)(group4 % 139);
    group4 /= 139;

    (*output)[1] = (uint32_t)(group4 % 139);
    group4 /= 139;

    (*output)[0] = (uint32_t)(group4 % 139);
    group4 /= 139;
    *output += 6;

    uint64_t group5 = (*(uint64_t *)((*input) + 26)) >> 7;    group5 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group5 % 139);
    group5 /= 139;

    (*output)[4] = (uint32_t)(group5 % 139);
    group5 /= 139;

    (*output)[3] = (uint32_t)(group5 % 139);
    group5 /= 139;

    (*output)[2] = (uint32_t)(group5 % 139);
    group5 /= 139;

    (*output)[1] = (uint32_t)(group5 % 139);
    group5 /= 139;

    (*output)[0] = (uint32_t)(group5 % 139);
    group5 /= 139;
    *output += 6;

    uint64_t group6 = (*(uint64_t *)((*input) + 32)) >> 2;    group6 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group6 % 139);
    group6 /= 139;

    (*output)[4] = (uint32_t)(group6 % 139);
    group6 /= 139;

    (*output)[3] = (uint32_t)(group6 % 139);
    group6 /= 139;

    (*output)[2] = (uint32_t)(group6 % 139);
    group6 /= 139;

    (*output)[1] = (uint32_t)(group6 % 139);
    group6 /= 139;

    (*output)[0] = (uint32_t)(group6 % 139);
    group6 /= 139;
    *output += 6;

    uint64_t group7 = (*(uint64_t *)((*input) + 37)) >> 5;    group7 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group7 % 139);
    group7 /= 139;

    (*output)[4] = (uint32_t)(group7 % 139);
    group7 /= 139;

    (*output)[3] = (uint32_t)(group7 % 139);
    group7 /= 139;

    (*output)[2] = (uint32_t)(group7 % 139);
    group7 /= 139;

    (*output)[1] = (uint32_t)(group7 % 139);
    group7 /= 139;

    (*output)[0] = (uint32_t)(group7 % 139);
    group7 /= 139;
    *output += 6;


    *input += 43;
}

// Unpack 43 bytes into 48 values
void Ultrapack_Decompress140(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group0 % 140);
    group0 /= 140;

    (*output)[4] = (uint32_t)(group0 % 140);
    group0 /= 140;

    (*output)[3] = (uint32_t)(group0 % 140);
    group0 /= 140;

    (*output)[2] = (uint32_t)(group0 % 140);
    group0 /= 140;

    (*output)[1] = (uint32_t)(group0 % 140);
    group0 /= 140;

    (*output)[0] = (uint32_t)(group0 % 140);
    group0 /= 140;
    *output += 6;

    uint64_t group1 = (*(uint64_t *)((*input) + 5)) >> 3;    group1 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group1 % 140);
    group1 /= 140;

    (*output)[4] = (uint32_t)(group1 % 140);
    group1 /= 140;

    (*output)[3] = (uint32_t)(group1 % 140);
    group1 /= 140;

    (*output)[2] = (uint32_t)(group1 % 140);
    group1 /= 140;

    (*output)[1] = (uint32_t)(group1 % 140);
    group1 /= 140;

    (*output)[0] = (uint32_t)(group1 % 140);
    group1 /= 140;
    *output += 6;

    uint64_t group2 = (*(uint64_t *)((*input) + 10)) >> 6;    group2 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group2 % 140);
    group2 /= 140;

    (*output)[4] = (uint32_t)(group2 % 140);
    group2 /= 140;

    (*output)[3] = (uint32_t)(group2 % 140);
    group2 /= 140;

    (*output)[2] = (uint32_t)(group2 % 140);
    group2 /= 140;

    (*output)[1] = (uint32_t)(group2 % 140);
    group2 /= 140;

    (*output)[0] = (uint32_t)(group2 % 140);
    group2 /= 140;
    *output += 6;

    uint64_t group3 = (*(uint64_t *)((*input) + 16)) >> 1;    group3 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group3 % 140);
    group3 /= 140;

    (*output)[4] = (uint32_t)(group3 % 140);
    group3 /= 140;

    (*output)[3] = (uint32_t)(group3 % 140);
    group3 /= 140;

    (*output)[2] = (uint32_t)(group3 % 140);
    group3 /= 140;

    (*output)[1] = (uint32_t)(group3 % 140);
    group3 /= 140;

    (*output)[0] = (uint32_t)(group3 % 140);
    group3 /= 140;
    *output += 6;

    uint64_t group4 = (*(uint64_t *)((*input) + 21)) >> 4;    group4 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group4 % 140);
    group4 /= 140;

    (*output)[4] = (uint32_t)(group4 % 140);
    group4 /= 140;

    (*output)[3] = (uint32_t)(group4 % 140);
    group4 /= 140;

    (*output)[2] = (uint32_t)(group4 % 140);
    group4 /= 140;

    (*output)[1] = (uint32_t)(group4 % 140);
    group4 /= 140;

    (*output)[0] = (uint32_t)(group4 % 140);
    group4 /= 140;
    *output += 6;

    uint64_t group5 = (*(uint64_t *)((*input) + 26)) >> 7;    group5 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group5 % 140);
    group5 /= 140;

    (*output)[4] = (uint32_t)(group5 % 140);
    group5 /= 140;

    (*output)[3] = (uint32_t)(group5 % 140);
    group5 /= 140;

    (*output)[2] = (uint32_t)(group5 % 140);
    group5 /= 140;

    (*output)[1] = (uint32_t)(group5 % 140);
    group5 /= 140;

    (*output)[0] = (uint32_t)(group5 % 140);
    group5 /= 140;
    *output += 6;

    uint64_t group6 = (*(uint64_t *)((*input) + 32)) >> 2;    group6 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group6 % 140);
    group6 /= 140;

    (*output)[4] = (uint32_t)(group6 % 140);
    group6 /= 140;

    (*output)[3] = (uint32_t)(group6 % 140);
    group6 /= 140;

    (*output)[2] = (uint32_t)(group6 % 140);
    group6 /= 140;

    (*output)[1] = (uint32_t)(group6 % 140);
    group6 /= 140;

    (*output)[0] = (uint32_t)(group6 % 140);
    group6 /= 140;
    *output += 6;

    uint64_t group7 = (*(uint64_t *)((*input) + 37)) >> 5;    group7 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group7 % 140);
    group7 /= 140;

    (*output)[4] = (uint32_t)(group7 % 140);
    group7 /= 140;

    (*output)[3] = (uint32_t)(group7 % 140);
    group7 /= 140;

    (*output)[2] = (uint32_t)(group7 % 140);
    group7 /= 140;

    (*output)[1] = (uint32_t)(group7 % 140);
    group7 /= 140;

    (*output)[0] = (uint32_t)(group7 % 140);
    group7 /= 140;
    *output += 6;


    *input += 43;
}

// Unpack 43 bytes into 48 values
void Ultrapack_Decompress141(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group0 % 141);
    group0 /= 141;

    (*output)[4] = (uint32_t)(group0 % 141);
    group0 /= 141;

    (*output)[3] = (uint32_t)(group0 % 141);
    group0 /= 141;

    (*output)[2] = (uint32_t)(group0 % 141);
    group0 /= 141;

    (*output)[1] = (uint32_t)(group0 % 141);
    group0 /= 141;

    (*output)[0] = (uint32_t)(group0 % 141);
    group0 /= 141;
    *output += 6;

    uint64_t group1 = (*(uint64_t *)((*input) + 5)) >> 3;    group1 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group1 % 141);
    group1 /= 141;

    (*output)[4] = (uint32_t)(group1 % 141);
    group1 /= 141;

    (*output)[3] = (uint32_t)(group1 % 141);
    group1 /= 141;

    (*output)[2] = (uint32_t)(group1 % 141);
    group1 /= 141;

    (*output)[1] = (uint32_t)(group1 % 141);
    group1 /= 141;

    (*output)[0] = (uint32_t)(group1 % 141);
    group1 /= 141;
    *output += 6;

    uint64_t group2 = (*(uint64_t *)((*input) + 10)) >> 6;    group2 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group2 % 141);
    group2 /= 141;

    (*output)[4] = (uint32_t)(group2 % 141);
    group2 /= 141;

    (*output)[3] = (uint32_t)(group2 % 141);
    group2 /= 141;

    (*output)[2] = (uint32_t)(group2 % 141);
    group2 /= 141;

    (*output)[1] = (uint32_t)(group2 % 141);
    group2 /= 141;

    (*output)[0] = (uint32_t)(group2 % 141);
    group2 /= 141;
    *output += 6;

    uint64_t group3 = (*(uint64_t *)((*input) + 16)) >> 1;    group3 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group3 % 141);
    group3 /= 141;

    (*output)[4] = (uint32_t)(group3 % 141);
    group3 /= 141;

    (*output)[3] = (uint32_t)(group3 % 141);
    group3 /= 141;

    (*output)[2] = (uint32_t)(group3 % 141);
    group3 /= 141;

    (*output)[1] = (uint32_t)(group3 % 141);
    group3 /= 141;

    (*output)[0] = (uint32_t)(group3 % 141);
    group3 /= 141;
    *output += 6;

    uint64_t group4 = (*(uint64_t *)((*input) + 21)) >> 4;    group4 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group4 % 141);
    group4 /= 141;

    (*output)[4] = (uint32_t)(group4 % 141);
    group4 /= 141;

    (*output)[3] = (uint32_t)(group4 % 141);
    group4 /= 141;

    (*output)[2] = (uint32_t)(group4 % 141);
    group4 /= 141;

    (*output)[1] = (uint32_t)(group4 % 141);
    group4 /= 141;

    (*output)[0] = (uint32_t)(group4 % 141);
    group4 /= 141;
    *output += 6;

    uint64_t group5 = (*(uint64_t *)((*input) + 26)) >> 7;    group5 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group5 % 141);
    group5 /= 141;

    (*output)[4] = (uint32_t)(group5 % 141);
    group5 /= 141;

    (*output)[3] = (uint32_t)(group5 % 141);
    group5 /= 141;

    (*output)[2] = (uint32_t)(group5 % 141);
    group5 /= 141;

    (*output)[1] = (uint32_t)(group5 % 141);
    group5 /= 141;

    (*output)[0] = (uint32_t)(group5 % 141);
    group5 /= 141;
    *output += 6;

    uint64_t group6 = (*(uint64_t *)((*input) + 32)) >> 2;    group6 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group6 % 141);
    group6 /= 141;

    (*output)[4] = (uint32_t)(group6 % 141);
    group6 /= 141;

    (*output)[3] = (uint32_t)(group6 % 141);
    group6 /= 141;

    (*output)[2] = (uint32_t)(group6 % 141);
    group6 /= 141;

    (*output)[1] = (uint32_t)(group6 % 141);
    group6 /= 141;

    (*output)[0] = (uint32_t)(group6 % 141);
    group6 /= 141;
    *output += 6;

    uint64_t group7 = (*(uint64_t *)((*input) + 37)) >> 5;    group7 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group7 % 141);
    group7 /= 141;

    (*output)[4] = (uint32_t)(group7 % 141);
    group7 /= 141;

    (*output)[3] = (uint32_t)(group7 % 141);
    group7 /= 141;

    (*output)[2] = (uint32_t)(group7 % 141);
    group7 /= 141;

    (*output)[1] = (uint32_t)(group7 % 141);
    group7 /= 141;

    (*output)[0] = (uint32_t)(group7 % 141);
    group7 /= 141;
    *output += 6;


    *input += 43;
}

// Unpack 43 bytes into 48 values
void Ultrapack_Decompress142(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group0 % 142);
    group0 /= 142;

    (*output)[4] = (uint32_t)(group0 % 142);
    group0 /= 142;

    (*output)[3] = (uint32_t)(group0 % 142);
    group0 /= 142;

    (*output)[2] = (uint32_t)(group0 % 142);
    group0 /= 142;

    (*output)[1] = (uint32_t)(group0 % 142);
    group0 /= 142;

    (*output)[0] = (uint32_t)(group0 % 142);
    group0 /= 142;
    *output += 6;

    uint64_t group1 = (*(uint64_t *)((*input) + 5)) >> 3;    group1 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group1 % 142);
    group1 /= 142;

    (*output)[4] = (uint32_t)(group1 % 142);
    group1 /= 142;

    (*output)[3] = (uint32_t)(group1 % 142);
    group1 /= 142;

    (*output)[2] = (uint32_t)(group1 % 142);
    group1 /= 142;

    (*output)[1] = (uint32_t)(group1 % 142);
    group1 /= 142;

    (*output)[0] = (uint32_t)(group1 % 142);
    group1 /= 142;
    *output += 6;

    uint64_t group2 = (*(uint64_t *)((*input) + 10)) >> 6;    group2 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group2 % 142);
    group2 /= 142;

    (*output)[4] = (uint32_t)(group2 % 142);
    group2 /= 142;

    (*output)[3] = (uint32_t)(group2 % 142);
    group2 /= 142;

    (*output)[2] = (uint32_t)(group2 % 142);
    group2 /= 142;

    (*output)[1] = (uint32_t)(group2 % 142);
    group2 /= 142;

    (*output)[0] = (uint32_t)(group2 % 142);
    group2 /= 142;
    *output += 6;

    uint64_t group3 = (*(uint64_t *)((*input) + 16)) >> 1;    group3 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group3 % 142);
    group3 /= 142;

    (*output)[4] = (uint32_t)(group3 % 142);
    group3 /= 142;

    (*output)[3] = (uint32_t)(group3 % 142);
    group3 /= 142;

    (*output)[2] = (uint32_t)(group3 % 142);
    group3 /= 142;

    (*output)[1] = (uint32_t)(group3 % 142);
    group3 /= 142;

    (*output)[0] = (uint32_t)(group3 % 142);
    group3 /= 142;
    *output += 6;

    uint64_t group4 = (*(uint64_t *)((*input) + 21)) >> 4;    group4 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group4 % 142);
    group4 /= 142;

    (*output)[4] = (uint32_t)(group4 % 142);
    group4 /= 142;

    (*output)[3] = (uint32_t)(group4 % 142);
    group4 /= 142;

    (*output)[2] = (uint32_t)(group4 % 142);
    group4 /= 142;

    (*output)[1] = (uint32_t)(group4 % 142);
    group4 /= 142;

    (*output)[0] = (uint32_t)(group4 % 142);
    group4 /= 142;
    *output += 6;

    uint64_t group5 = (*(uint64_t *)((*input) + 26)) >> 7;    group5 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group5 % 142);
    group5 /= 142;

    (*output)[4] = (uint32_t)(group5 % 142);
    group5 /= 142;

    (*output)[3] = (uint32_t)(group5 % 142);
    group5 /= 142;

    (*output)[2] = (uint32_t)(group5 % 142);
    group5 /= 142;

    (*output)[1] = (uint32_t)(group5 % 142);
    group5 /= 142;

    (*output)[0] = (uint32_t)(group5 % 142);
    group5 /= 142;
    *output += 6;

    uint64_t group6 = (*(uint64_t *)((*input) + 32)) >> 2;    group6 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group6 % 142);
    group6 /= 142;

    (*output)[4] = (uint32_t)(group6 % 142);
    group6 /= 142;

    (*output)[3] = (uint32_t)(group6 % 142);
    group6 /= 142;

    (*output)[2] = (uint32_t)(group6 % 142);
    group6 /= 142;

    (*output)[1] = (uint32_t)(group6 % 142);
    group6 /= 142;

    (*output)[0] = (uint32_t)(group6 % 142);
    group6 /= 142;
    *output += 6;

    uint64_t group7 = (*(uint64_t *)((*input) + 37)) >> 5;    group7 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group7 % 142);
    group7 /= 142;

    (*output)[4] = (uint32_t)(group7 % 142);
    group7 /= 142;

    (*output)[3] = (uint32_t)(group7 % 142);
    group7 /= 142;

    (*output)[2] = (uint32_t)(group7 % 142);
    group7 /= 142;

    (*output)[1] = (uint32_t)(group7 % 142);
    group7 /= 142;

    (*output)[0] = (uint32_t)(group7 % 142);
    group7 /= 142;
    *output += 6;


    *input += 43;
}

// Unpack 43 bytes into 48 values
void Ultrapack_Decompress143(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group0 % 143);
    group0 /= 143;

    (*output)[4] = (uint32_t)(group0 % 143);
    group0 /= 143;

    (*output)[3] = (uint32_t)(group0 % 143);
    group0 /= 143;

    (*output)[2] = (uint32_t)(group0 % 143);
    group0 /= 143;

    (*output)[1] = (uint32_t)(group0 % 143);
    group0 /= 143;

    (*output)[0] = (uint32_t)(group0 % 143);
    group0 /= 143;
    *output += 6;

    uint64_t group1 = (*(uint64_t *)((*input) + 5)) >> 3;    group1 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group1 % 143);
    group1 /= 143;

    (*output)[4] = (uint32_t)(group1 % 143);
    group1 /= 143;

    (*output)[3] = (uint32_t)(group1 % 143);
    group1 /= 143;

    (*output)[2] = (uint32_t)(group1 % 143);
    group1 /= 143;

    (*output)[1] = (uint32_t)(group1 % 143);
    group1 /= 143;

    (*output)[0] = (uint32_t)(group1 % 143);
    group1 /= 143;
    *output += 6;

    uint64_t group2 = (*(uint64_t *)((*input) + 10)) >> 6;    group2 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group2 % 143);
    group2 /= 143;

    (*output)[4] = (uint32_t)(group2 % 143);
    group2 /= 143;

    (*output)[3] = (uint32_t)(group2 % 143);
    group2 /= 143;

    (*output)[2] = (uint32_t)(group2 % 143);
    group2 /= 143;

    (*output)[1] = (uint32_t)(group2 % 143);
    group2 /= 143;

    (*output)[0] = (uint32_t)(group2 % 143);
    group2 /= 143;
    *output += 6;

    uint64_t group3 = (*(uint64_t *)((*input) + 16)) >> 1;    group3 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group3 % 143);
    group3 /= 143;

    (*output)[4] = (uint32_t)(group3 % 143);
    group3 /= 143;

    (*output)[3] = (uint32_t)(group3 % 143);
    group3 /= 143;

    (*output)[2] = (uint32_t)(group3 % 143);
    group3 /= 143;

    (*output)[1] = (uint32_t)(group3 % 143);
    group3 /= 143;

    (*output)[0] = (uint32_t)(group3 % 143);
    group3 /= 143;
    *output += 6;

    uint64_t group4 = (*(uint64_t *)((*input) + 21)) >> 4;    group4 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group4 % 143);
    group4 /= 143;

    (*output)[4] = (uint32_t)(group4 % 143);
    group4 /= 143;

    (*output)[3] = (uint32_t)(group4 % 143);
    group4 /= 143;

    (*output)[2] = (uint32_t)(group4 % 143);
    group4 /= 143;

    (*output)[1] = (uint32_t)(group4 % 143);
    group4 /= 143;

    (*output)[0] = (uint32_t)(group4 % 143);
    group4 /= 143;
    *output += 6;

    uint64_t group5 = (*(uint64_t *)((*input) + 26)) >> 7;    group5 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group5 % 143);
    group5 /= 143;

    (*output)[4] = (uint32_t)(group5 % 143);
    group5 /= 143;

    (*output)[3] = (uint32_t)(group5 % 143);
    group5 /= 143;

    (*output)[2] = (uint32_t)(group5 % 143);
    group5 /= 143;

    (*output)[1] = (uint32_t)(group5 % 143);
    group5 /= 143;

    (*output)[0] = (uint32_t)(group5 % 143);
    group5 /= 143;
    *output += 6;

    uint64_t group6 = (*(uint64_t *)((*input) + 32)) >> 2;    group6 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group6 % 143);
    group6 /= 143;

    (*output)[4] = (uint32_t)(group6 % 143);
    group6 /= 143;

    (*output)[3] = (uint32_t)(group6 % 143);
    group6 /= 143;

    (*output)[2] = (uint32_t)(group6 % 143);
    group6 /= 143;

    (*output)[1] = (uint32_t)(group6 % 143);
    group6 /= 143;

    (*output)[0] = (uint32_t)(group6 % 143);
    group6 /= 143;
    *output += 6;

    uint64_t group7 = (*(uint64_t *)((*input) + 37)) >> 5;    group7 &= (1ull << 43) - 1;
    (*output)[5] = (uint32_t)(group7 % 143);
    group7 /= 143;

    (*output)[4] = (uint32_t)(group7 % 143);
    group7 /= 143;

    (*output)[3] = (uint32_t)(group7 % 143);
    group7 /= 143;

    (*output)[2] = (uint32_t)(group7 % 143);
    group7 /= 143;

    (*output)[1] = (uint32_t)(group7 % 143);
    group7 /= 143;

    (*output)[0] = (uint32_t)(group7 % 143);
    group7 /= 143;
    *output += 6;


    *input += 43;
}

// Unpack 29 bytes into 32 values
void Ultrapack_Decompress144(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 29) - 1;
    (*output)[3] = (uint32_t)(group0 % 144);
    group0 /= 144;

    (*output)[2] = (uint32_t)(group0 % 144);
    group0 /= 144;

    (*output)[1] = (uint32_t)(group0 % 144);
    group0 /= 144;

    (*output)[0] = (uint32_t)(group0 % 144);
    group0 /= 144;
    *output += 4;

    uint64_t group1 = (*(uint64_t *)((*input) + 3)) >> 5;    group1 &= (1ull << 29) - 1;
    (*output)[3] = (uint32_t)(group1 % 144);
    group1 /= 144;

    (*output)[2] = (uint32_t)(group1 % 144);
    group1 /= 144;

    (*output)[1] = (uint32_t)(group1 % 144);
    group1 /= 144;

    (*output)[0] = (uint32_t)(group1 % 144);
    group1 /= 144;
    *output += 4;

    uint64_t group2 = (*(uint64_t *)((*input) + 7)) >> 2;    group2 &= (1ull << 29) - 1;
    (*output)[3] = (uint32_t)(group2 % 144);
    group2 /= 144;

    (*output)[2] = (uint32_t)(group2 % 144);
    group2 /= 144;

    (*output)[1] = (uint32_t)(group2 % 144);
    group2 /= 144;

    (*output)[0] = (uint32_t)(group2 % 144);
    group2 /= 144;
    *output += 4;

    uint64_t group3 = (*(uint64_t *)((*input) + 10)) >> 7;    group3 &= (1ull << 29) - 1;
    (*output)[3] = (uint32_t)(group3 % 144);
    group3 /= 144;

    (*output)[2] = (uint32_t)(group3 % 144);
    group3 /= 144;

    (*output)[1] = (uint32_t)(group3 % 144);
    group3 /= 144;

    (*output)[0] = (uint32_t)(group3 % 144);
    group3 /= 144;
    *output += 4;

    uint64_t group4 = (*(uint64_t *)((*input) + 14)) >> 4;    group4 &= (1ull << 29) - 1;
    (*output)[3] = (uint32_t)(group4 % 144);
    group4 /= 144;

    (*output)[2] = (uint32_t)(group4 % 144);
    group4 /= 144;

    (*output)[1] = (uint32_t)(group4 % 144);
    group4 /= 144;

    (*output)[0] = (uint32_t)(group4 % 144);
    group4 /= 144;
    *output += 4;

    uint64_t group5 = (*(uint64_t *)((*input) + 18)) >> 1;    group5 &= (1ull << 29) - 1;
    (*output)[3] = (uint32_t)(group5 % 144);
    group5 /= 144;

    (*output)[2] = (uint32_t)(group5 % 144);
    group5 /= 144;

    (*output)[1] = (uint32_t)(group5 % 144);
    group5 /= 144;

    (*output)[0] = (uint32_t)(group5 % 144);
    group5 /= 144;
    *output += 4;

    uint64_t group6 = (*(uint64_t *)((*input) + 21)) >> 6;    group6 &= (1ull << 29) - 1;
    (*output)[3] = (uint32_t)(group6 % 144);
    group6 /= 144;

    (*output)[2] = (uint32_t)(group6 % 144);
    group6 /= 144;

    (*output)[1] = (uint32_t)(group6 % 144);
    group6 /= 144;

    (*output)[0] = (uint32_t)(group6 % 144);
    group6 /= 144;
    *output += 4;

    uint64_t group7 = (*(uint64_t *)((*input) + 25)) >> 3;    group7 &= (1ull << 29) - 1;
    (*output)[3] = (uint32_t)(group7 % 144);
    group7 /= 144;

    (*output)[2] = (uint32_t)(group7 % 144);
    group7 /= 144;

    (*output)[1] = (uint32_t)(group7 % 144);
    group7 /= 144;

    (*output)[0] = (uint32_t)(group7 % 144);
    group7 /= 144;
    *output += 4;


    *input += 29;
}

// Unpack 29 bytes into 32 values
void Ultrapack_Decompress145(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 29) - 1;
    (*output)[3] = (uint32_t)(group0 % 145);
    group0 /= 145;

    (*output)[2] = (uint32_t)(group0 % 145);
    group0 /= 145;

    (*output)[1] = (uint32_t)(group0 % 145);
    group0 /= 145;

    (*output)[0] = (uint32_t)(group0 % 145);
    group0 /= 145;
    *output += 4;

    uint64_t group1 = (*(uint64_t *)((*input) + 3)) >> 5;    group1 &= (1ull << 29) - 1;
    (*output)[3] = (uint32_t)(group1 % 145);
    group1 /= 145;

    (*output)[2] = (uint32_t)(group1 % 145);
    group1 /= 145;

    (*output)[1] = (uint32_t)(group1 % 145);
    group1 /= 145;

    (*output)[0] = (uint32_t)(group1 % 145);
    group1 /= 145;
    *output += 4;

    uint64_t group2 = (*(uint64_t *)((*input) + 7)) >> 2;    group2 &= (1ull << 29) - 1;
    (*output)[3] = (uint32_t)(group2 % 145);
    group2 /= 145;

    (*output)[2] = (uint32_t)(group2 % 145);
    group2 /= 145;

    (*output)[1] = (uint32_t)(group2 % 145);
    group2 /= 145;

    (*output)[0] = (uint32_t)(group2 % 145);
    group2 /= 145;
    *output += 4;

    uint64_t group3 = (*(uint64_t *)((*input) + 10)) >> 7;    group3 &= (1ull << 29) - 1;
    (*output)[3] = (uint32_t)(group3 % 145);
    group3 /= 145;

    (*output)[2] = (uint32_t)(group3 % 145);
    group3 /= 145;

    (*output)[1] = (uint32_t)(group3 % 145);
    group3 /= 145;

    (*output)[0] = (uint32_t)(group3 % 145);
    group3 /= 145;
    *output += 4;

    uint64_t group4 = (*(uint64_t *)((*input) + 14)) >> 4;    group4 &= (1ull << 29) - 1;
    (*output)[3] = (uint32_t)(group4 % 145);
    group4 /= 145;

    (*output)[2] = (uint32_t)(group4 % 145);
    group4 /= 145;

    (*output)[1] = (uint32_t)(group4 % 145);
    group4 /= 145;

    (*output)[0] = (uint32_t)(group4 % 145);
    group4 /= 145;
    *output += 4;

    uint64_t group5 = (*(uint64_t *)((*input) + 18)) >> 1;    group5 &= (1ull << 29) - 1;
    (*output)[3] = (uint32_t)(group5 % 145);
    group5 /= 145;

    (*output)[2] = (uint32_t)(group5 % 145);
    group5 /= 145;

    (*output)[1] = (uint32_t)(group5 % 145);
    group5 /= 145;

    (*output)[0] = (uint32_t)(group5 % 145);
    group5 /= 145;
    *output += 4;

    uint64_t group6 = (*(uint64_t *)((*input) + 21)) >> 6;    group6 &= (1ull << 29) - 1;
    (*output)[3] = (uint32_t)(group6 % 145);
    group6 /= 145;

    (*output)[2] = (uint32_t)(group6 % 145);
    group6 /= 145;

    (*output)[1] = (uint32_t)(group6 % 145);
    group6 /= 145;

    (*output)[0] = (uint32_t)(group6 % 145);
    group6 /= 145;
    *output += 4;

    uint64_t group7 = (*(uint64_t *)((*input) + 25)) >> 3;    group7 &= (1ull << 29) - 1;
    (*output)[3] = (uint32_t)(group7 % 145);
    group7 /= 145;

    (*output)[2] = (uint32_t)(group7 % 145);
    group7 /= 145;

    (*output)[1] = (uint32_t)(group7 % 145);
    group7 /= 145;

    (*output)[0] = (uint32_t)(group7 % 145);
    group7 /= 145;
    *output += 4;


    *input += 29;
}

// Unpack 29 bytes into 32 values
void Ultrapack_Decompress146(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 29) - 1;
    (*output)[3] = (uint32_t)(group0 % 146);
    group0 /= 146;

    (*output)[2] = (uint32_t)(group0 % 146);
    group0 /= 146;

    (*output)[1] = (uint32_t)(group0 % 146);
    group0 /= 146;

    (*output)[0] = (uint32_t)(group0 % 146);
    group0 /= 146;
    *output += 4;

    uint64_t group1 = (*(uint64_t *)((*input) + 3)) >> 5;    group1 &= (1ull << 29) - 1;
    (*output)[3] = (uint32_t)(group1 % 146);
    group1 /= 146;

    (*output)[2] = (uint32_t)(group1 % 146);
    group1 /= 146;

    (*output)[1] = (uint32_t)(group1 % 146);
    group1 /= 146;

    (*output)[0] = (uint32_t)(group1 % 146);
    group1 /= 146;
    *output += 4;

    uint64_t group2 = (*(uint64_t *)((*input) + 7)) >> 2;    group2 &= (1ull << 29) - 1;
    (*output)[3] = (uint32_t)(group2 % 146);
    group2 /= 146;

    (*output)[2] = (uint32_t)(group2 % 146);
    group2 /= 146;

    (*output)[1] = (uint32_t)(group2 % 146);
    group2 /= 146;

    (*output)[0] = (uint32_t)(group2 % 146);
    group2 /= 146;
    *output += 4;

    uint64_t group3 = (*(uint64_t *)((*input) + 10)) >> 7;    group3 &= (1ull << 29) - 1;
    (*output)[3] = (uint32_t)(group3 % 146);
    group3 /= 146;

    (*output)[2] = (uint32_t)(group3 % 146);
    group3 /= 146;

    (*output)[1] = (uint32_t)(group3 % 146);
    group3 /= 146;

    (*output)[0] = (uint32_t)(group3 % 146);
    group3 /= 146;
    *output += 4;

    uint64_t group4 = (*(uint64_t *)((*input) + 14)) >> 4;    group4 &= (1ull << 29) - 1;
    (*output)[3] = (uint32_t)(group4 % 146);
    group4 /= 146;

    (*output)[2] = (uint32_t)(group4 % 146);
    group4 /= 146;

    (*output)[1] = (uint32_t)(group4 % 146);
    group4 /= 146;

    (*output)[0] = (uint32_t)(group4 % 146);
    group4 /= 146;
    *output += 4;

    uint64_t group5 = (*(uint64_t *)((*input) + 18)) >> 1;    group5 &= (1ull << 29) - 1;
    (*output)[3] = (uint32_t)(group5 % 146);
    group5 /= 146;

    (*output)[2] = (uint32_t)(group5 % 146);
    group5 /= 146;

    (*output)[1] = (uint32_t)(group5 % 146);
    group5 /= 146;

    (*output)[0] = (uint32_t)(group5 % 146);
    group5 /= 146;
    *output += 4;

    uint64_t group6 = (*(uint64_t *)((*input) + 21)) >> 6;    group6 &= (1ull << 29) - 1;
    (*output)[3] = (uint32_t)(group6 % 146);
    group6 /= 146;

    (*output)[2] = (uint32_t)(group6 % 146);
    group6 /= 146;

    (*output)[1] = (uint32_t)(group6 % 146);
    group6 /= 146;

    (*output)[0] = (uint32_t)(group6 % 146);
    group6 /= 146;
    *output += 4;

    uint64_t group7 = (*(uint64_t *)((*input) + 25)) >> 3;    group7 &= (1ull << 29) - 1;
    (*output)[3] = (uint32_t)(group7 % 146);
    group7 /= 146;

    (*output)[2] = (uint32_t)(group7 % 146);
    group7 /= 146;

    (*output)[1] = (uint32_t)(group7 % 146);
    group7 /= 146;

    (*output)[0] = (uint32_t)(group7 % 146);
    group7 /= 146;
    *output += 4;


    *input += 29;
}

// Unpack 29 bytes into 32 values
void Ultrapack_Decompress147(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 29) - 1;
    (*output)[3] = (uint32_t)(group0 % 147);
    group0 /= 147;

    (*output)[2] = (uint32_t)(group0 % 147);
    group0 /= 147;

    (*output)[1] = (uint32_t)(group0 % 147);
    group0 /= 147;

    (*output)[0] = (uint32_t)(group0 % 147);
    group0 /= 147;
    *output += 4;

    uint64_t group1 = (*(uint64_t *)((*input) + 3)) >> 5;    group1 &= (1ull << 29) - 1;
    (*output)[3] = (uint32_t)(group1 % 147);
    group1 /= 147;

    (*output)[2] = (uint32_t)(group1 % 147);
    group1 /= 147;

    (*output)[1] = (uint32_t)(group1 % 147);
    group1 /= 147;

    (*output)[0] = (uint32_t)(group1 % 147);
    group1 /= 147;
    *output += 4;

    uint64_t group2 = (*(uint64_t *)((*input) + 7)) >> 2;    group2 &= (1ull << 29) - 1;
    (*output)[3] = (uint32_t)(group2 % 147);
    group2 /= 147;

    (*output)[2] = (uint32_t)(group2 % 147);
    group2 /= 147;

    (*output)[1] = (uint32_t)(group2 % 147);
    group2 /= 147;

    (*output)[0] = (uint32_t)(group2 % 147);
    group2 /= 147;
    *output += 4;

    uint64_t group3 = (*(uint64_t *)((*input) + 10)) >> 7;    group3 &= (1ull << 29) - 1;
    (*output)[3] = (uint32_t)(group3 % 147);
    group3 /= 147;

    (*output)[2] = (uint32_t)(group3 % 147);
    group3 /= 147;

    (*output)[1] = (uint32_t)(group3 % 147);
    group3 /= 147;

    (*output)[0] = (uint32_t)(group3 % 147);
    group3 /= 147;
    *output += 4;

    uint64_t group4 = (*(uint64_t *)((*input) + 14)) >> 4;    group4 &= (1ull << 29) - 1;
    (*output)[3] = (uint32_t)(group4 % 147);
    group4 /= 147;

    (*output)[2] = (uint32_t)(group4 % 147);
    group4 /= 147;

    (*output)[1] = (uint32_t)(group4 % 147);
    group4 /= 147;

    (*output)[0] = (uint32_t)(group4 % 147);
    group4 /= 147;
    *output += 4;

    uint64_t group5 = (*(uint64_t *)((*input) + 18)) >> 1;    group5 &= (1ull << 29) - 1;
    (*output)[3] = (uint32_t)(group5 % 147);
    group5 /= 147;

    (*output)[2] = (uint32_t)(group5 % 147);
    group5 /= 147;

    (*output)[1] = (uint32_t)(group5 % 147);
    group5 /= 147;

    (*output)[0] = (uint32_t)(group5 % 147);
    group5 /= 147;
    *output += 4;

    uint64_t group6 = (*(uint64_t *)((*input) + 21)) >> 6;    group6 &= (1ull << 29) - 1;
    (*output)[3] = (uint32_t)(group6 % 147);
    group6 /= 147;

    (*output)[2] = (uint32_t)(group6 % 147);
    group6 /= 147;

    (*output)[1] = (uint32_t)(group6 % 147);
    group6 /= 147;

    (*output)[0] = (uint32_t)(group6 % 147);
    group6 /= 147;
    *output += 4;

    uint64_t group7 = (*(uint64_t *)((*input) + 25)) >> 3;    group7 &= (1ull << 29) - 1;
    (*output)[3] = (uint32_t)(group7 % 147);
    group7 /= 147;

    (*output)[2] = (uint32_t)(group7 % 147);
    group7 /= 147;

    (*output)[1] = (uint32_t)(group7 % 147);
    group7 /= 147;

    (*output)[0] = (uint32_t)(group7 % 147);
    group7 /= 147;
    *output += 4;


    *input += 29;
}

// Unpack 29 bytes into 32 values
void Ultrapack_Decompress148(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 29) - 1;
    (*output)[3] = (uint32_t)(group0 % 148);
    group0 /= 148;

    (*output)[2] = (uint32_t)(group0 % 148);
    group0 /= 148;

    (*output)[1] = (uint32_t)(group0 % 148);
    group0 /= 148;

    (*output)[0] = (uint32_t)(group0 % 148);
    group0 /= 148;
    *output += 4;

    uint64_t group1 = (*(uint64_t *)((*input) + 3)) >> 5;    group1 &= (1ull << 29) - 1;
    (*output)[3] = (uint32_t)(group1 % 148);
    group1 /= 148;

    (*output)[2] = (uint32_t)(group1 % 148);
    group1 /= 148;

    (*output)[1] = (uint32_t)(group1 % 148);
    group1 /= 148;

    (*output)[0] = (uint32_t)(group1 % 148);
    group1 /= 148;
    *output += 4;

    uint64_t group2 = (*(uint64_t *)((*input) + 7)) >> 2;    group2 &= (1ull << 29) - 1;
    (*output)[3] = (uint32_t)(group2 % 148);
    group2 /= 148;

    (*output)[2] = (uint32_t)(group2 % 148);
    group2 /= 148;

    (*output)[1] = (uint32_t)(group2 % 148);
    group2 /= 148;

    (*output)[0] = (uint32_t)(group2 % 148);
    group2 /= 148;
    *output += 4;

    uint64_t group3 = (*(uint64_t *)((*input) + 10)) >> 7;    group3 &= (1ull << 29) - 1;
    (*output)[3] = (uint32_t)(group3 % 148);
    group3 /= 148;

    (*output)[2] = (uint32_t)(group3 % 148);
    group3 /= 148;

    (*output)[1] = (uint32_t)(group3 % 148);
    group3 /= 148;

    (*output)[0] = (uint32_t)(group3 % 148);
    group3 /= 148;
    *output += 4;

    uint64_t group4 = (*(uint64_t *)((*input) + 14)) >> 4;    group4 &= (1ull << 29) - 1;
    (*output)[3] = (uint32_t)(group4 % 148);
    group4 /= 148;

    (*output)[2] = (uint32_t)(group4 % 148);
    group4 /= 148;

    (*output)[1] = (uint32_t)(group4 % 148);
    group4 /= 148;

    (*output)[0] = (uint32_t)(group4 % 148);
    group4 /= 148;
    *output += 4;

    uint64_t group5 = (*(uint64_t *)((*input) + 18)) >> 1;    group5 &= (1ull << 29) - 1;
    (*output)[3] = (uint32_t)(group5 % 148);
    group5 /= 148;

    (*output)[2] = (uint32_t)(group5 % 148);
    group5 /= 148;

    (*output)[1] = (uint32_t)(group5 % 148);
    group5 /= 148;

    (*output)[0] = (uint32_t)(group5 % 148);
    group5 /= 148;
    *output += 4;

    uint64_t group6 = (*(uint64_t *)((*input) + 21)) >> 6;    group6 &= (1ull << 29) - 1;
    (*output)[3] = (uint32_t)(group6 % 148);
    group6 /= 148;

    (*output)[2] = (uint32_t)(group6 % 148);
    group6 /= 148;

    (*output)[1] = (uint32_t)(group6 % 148);
    group6 /= 148;

    (*output)[0] = (uint32_t)(group6 % 148);
    group6 /= 148;
    *output += 4;

    uint64_t group7 = (*(uint64_t *)((*input) + 25)) >> 3;    group7 &= (1ull << 29) - 1;
    (*output)[3] = (uint32_t)(group7 % 148);
    group7 /= 148;

    (*output)[2] = (uint32_t)(group7 % 148);
    group7 /= 148;

    (*output)[1] = (uint32_t)(group7 % 148);
    group7 /= 148;

    (*output)[0] = (uint32_t)(group7 % 148);
    group7 /= 148;
    *output += 4;


    *input += 29;
}

// Unpack 29 bytes into 32 values
void Ultrapack_Decompress149(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 29) - 1;
    (*output)[3] = (uint32_t)(group0 % 149);
    group0 /= 149;

    (*output)[2] = (uint32_t)(group0 % 149);
    group0 /= 149;

    (*output)[1] = (uint32_t)(group0 % 149);
    group0 /= 149;

    (*output)[0] = (uint32_t)(group0 % 149);
    group0 /= 149;
    *output += 4;

    uint64_t group1 = (*(uint64_t *)((*input) + 3)) >> 5;    group1 &= (1ull << 29) - 1;
    (*output)[3] = (uint32_t)(group1 % 149);
    group1 /= 149;

    (*output)[2] = (uint32_t)(group1 % 149);
    group1 /= 149;

    (*output)[1] = (uint32_t)(group1 % 149);
    group1 /= 149;

    (*output)[0] = (uint32_t)(group1 % 149);
    group1 /= 149;
    *output += 4;

    uint64_t group2 = (*(uint64_t *)((*input) + 7)) >> 2;    group2 &= (1ull << 29) - 1;
    (*output)[3] = (uint32_t)(group2 % 149);
    group2 /= 149;

    (*output)[2] = (uint32_t)(group2 % 149);
    group2 /= 149;

    (*output)[1] = (uint32_t)(group2 % 149);
    group2 /= 149;

    (*output)[0] = (uint32_t)(group2 % 149);
    group2 /= 149;
    *output += 4;

    uint64_t group3 = (*(uint64_t *)((*input) + 10)) >> 7;    group3 &= (1ull << 29) - 1;
    (*output)[3] = (uint32_t)(group3 % 149);
    group3 /= 149;

    (*output)[2] = (uint32_t)(group3 % 149);
    group3 /= 149;

    (*output)[1] = (uint32_t)(group3 % 149);
    group3 /= 149;

    (*output)[0] = (uint32_t)(group3 % 149);
    group3 /= 149;
    *output += 4;

    uint64_t group4 = (*(uint64_t *)((*input) + 14)) >> 4;    group4 &= (1ull << 29) - 1;
    (*output)[3] = (uint32_t)(group4 % 149);
    group4 /= 149;

    (*output)[2] = (uint32_t)(group4 % 149);
    group4 /= 149;

    (*output)[1] = (uint32_t)(group4 % 149);
    group4 /= 149;

    (*output)[0] = (uint32_t)(group4 % 149);
    group4 /= 149;
    *output += 4;

    uint64_t group5 = (*(uint64_t *)((*input) + 18)) >> 1;    group5 &= (1ull << 29) - 1;
    (*output)[3] = (uint32_t)(group5 % 149);
    group5 /= 149;

    (*output)[2] = (uint32_t)(group5 % 149);
    group5 /= 149;

    (*output)[1] = (uint32_t)(group5 % 149);
    group5 /= 149;

    (*output)[0] = (uint32_t)(group5 % 149);
    group5 /= 149;
    *output += 4;

    uint64_t group6 = (*(uint64_t *)((*input) + 21)) >> 6;    group6 &= (1ull << 29) - 1;
    (*output)[3] = (uint32_t)(group6 % 149);
    group6 /= 149;

    (*output)[2] = (uint32_t)(group6 % 149);
    group6 /= 149;

    (*output)[1] = (uint32_t)(group6 % 149);
    group6 /= 149;

    (*output)[0] = (uint32_t)(group6 % 149);
    group6 /= 149;
    *output += 4;

    uint64_t group7 = (*(uint64_t *)((*input) + 25)) >> 3;    group7 &= (1ull << 29) - 1;
    (*output)[3] = (uint32_t)(group7 % 149);
    group7 /= 149;

    (*output)[2] = (uint32_t)(group7 % 149);
    group7 /= 149;

    (*output)[1] = (uint32_t)(group7 % 149);
    group7 /= 149;

    (*output)[0] = (uint32_t)(group7 % 149);
    group7 /= 149;
    *output += 4;


    *input += 29;
}

// Unpack 29 bytes into 32 values
void Ultrapack_Decompress150(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 29) - 1;
    (*output)[3] = (uint32_t)(group0 % 150);
    group0 /= 150;

    (*output)[2] = (uint32_t)(group0 % 150);
    group0 /= 150;

    (*output)[1] = (uint32_t)(group0 % 150);
    group0 /= 150;

    (*output)[0] = (uint32_t)(group0 % 150);
    group0 /= 150;
    *output += 4;

    uint64_t group1 = (*(uint64_t *)((*input) + 3)) >> 5;    group1 &= (1ull << 29) - 1;
    (*output)[3] = (uint32_t)(group1 % 150);
    group1 /= 150;

    (*output)[2] = (uint32_t)(group1 % 150);
    group1 /= 150;

    (*output)[1] = (uint32_t)(group1 % 150);
    group1 /= 150;

    (*output)[0] = (uint32_t)(group1 % 150);
    group1 /= 150;
    *output += 4;

    uint64_t group2 = (*(uint64_t *)((*input) + 7)) >> 2;    group2 &= (1ull << 29) - 1;
    (*output)[3] = (uint32_t)(group2 % 150);
    group2 /= 150;

    (*output)[2] = (uint32_t)(group2 % 150);
    group2 /= 150;

    (*output)[1] = (uint32_t)(group2 % 150);
    group2 /= 150;

    (*output)[0] = (uint32_t)(group2 % 150);
    group2 /= 150;
    *output += 4;

    uint64_t group3 = (*(uint64_t *)((*input) + 10)) >> 7;    group3 &= (1ull << 29) - 1;
    (*output)[3] = (uint32_t)(group3 % 150);
    group3 /= 150;

    (*output)[2] = (uint32_t)(group3 % 150);
    group3 /= 150;

    (*output)[1] = (uint32_t)(group3 % 150);
    group3 /= 150;

    (*output)[0] = (uint32_t)(group3 % 150);
    group3 /= 150;
    *output += 4;

    uint64_t group4 = (*(uint64_t *)((*input) + 14)) >> 4;    group4 &= (1ull << 29) - 1;
    (*output)[3] = (uint32_t)(group4 % 150);
    group4 /= 150;

    (*output)[2] = (uint32_t)(group4 % 150);
    group4 /= 150;

    (*output)[1] = (uint32_t)(group4 % 150);
    group4 /= 150;

    (*output)[0] = (uint32_t)(group4 % 150);
    group4 /= 150;
    *output += 4;

    uint64_t group5 = (*(uint64_t *)((*input) + 18)) >> 1;    group5 &= (1ull << 29) - 1;
    (*output)[3] = (uint32_t)(group5 % 150);
    group5 /= 150;

    (*output)[2] = (uint32_t)(group5 % 150);
    group5 /= 150;

    (*output)[1] = (uint32_t)(group5 % 150);
    group5 /= 150;

    (*output)[0] = (uint32_t)(group5 % 150);
    group5 /= 150;
    *output += 4;

    uint64_t group6 = (*(uint64_t *)((*input) + 21)) >> 6;    group6 &= (1ull << 29) - 1;
    (*output)[3] = (uint32_t)(group6 % 150);
    group6 /= 150;

    (*output)[2] = (uint32_t)(group6 % 150);
    group6 /= 150;

    (*output)[1] = (uint32_t)(group6 % 150);
    group6 /= 150;

    (*output)[0] = (uint32_t)(group6 % 150);
    group6 /= 150;
    *output += 4;

    uint64_t group7 = (*(uint64_t *)((*input) + 25)) >> 3;    group7 &= (1ull << 29) - 1;
    (*output)[3] = (uint32_t)(group7 % 150);
    group7 /= 150;

    (*output)[2] = (uint32_t)(group7 % 150);
    group7 /= 150;

    (*output)[1] = (uint32_t)(group7 % 150);
    group7 /= 150;

    (*output)[0] = (uint32_t)(group7 % 150);
    group7 /= 150;
    *output += 4;


    *input += 29;
}

// Unpack 29 bytes into 32 values
void Ultrapack_Decompress151(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 29) - 1;
    (*output)[3] = (uint32_t)(group0 % 151);
    group0 /= 151;

    (*output)[2] = (uint32_t)(group0 % 151);
    group0 /= 151;

    (*output)[1] = (uint32_t)(group0 % 151);
    group0 /= 151;

    (*output)[0] = (uint32_t)(group0 % 151);
    group0 /= 151;
    *output += 4;

    uint64_t group1 = (*(uint64_t *)((*input) + 3)) >> 5;    group1 &= (1ull << 29) - 1;
    (*output)[3] = (uint32_t)(group1 % 151);
    group1 /= 151;

    (*output)[2] = (uint32_t)(group1 % 151);
    group1 /= 151;

    (*output)[1] = (uint32_t)(group1 % 151);
    group1 /= 151;

    (*output)[0] = (uint32_t)(group1 % 151);
    group1 /= 151;
    *output += 4;

    uint64_t group2 = (*(uint64_t *)((*input) + 7)) >> 2;    group2 &= (1ull << 29) - 1;
    (*output)[3] = (uint32_t)(group2 % 151);
    group2 /= 151;

    (*output)[2] = (uint32_t)(group2 % 151);
    group2 /= 151;

    (*output)[1] = (uint32_t)(group2 % 151);
    group2 /= 151;

    (*output)[0] = (uint32_t)(group2 % 151);
    group2 /= 151;
    *output += 4;

    uint64_t group3 = (*(uint64_t *)((*input) + 10)) >> 7;    group3 &= (1ull << 29) - 1;
    (*output)[3] = (uint32_t)(group3 % 151);
    group3 /= 151;

    (*output)[2] = (uint32_t)(group3 % 151);
    group3 /= 151;

    (*output)[1] = (uint32_t)(group3 % 151);
    group3 /= 151;

    (*output)[0] = (uint32_t)(group3 % 151);
    group3 /= 151;
    *output += 4;

    uint64_t group4 = (*(uint64_t *)((*input) + 14)) >> 4;    group4 &= (1ull << 29) - 1;
    (*output)[3] = (uint32_t)(group4 % 151);
    group4 /= 151;

    (*output)[2] = (uint32_t)(group4 % 151);
    group4 /= 151;

    (*output)[1] = (uint32_t)(group4 % 151);
    group4 /= 151;

    (*output)[0] = (uint32_t)(group4 % 151);
    group4 /= 151;
    *output += 4;

    uint64_t group5 = (*(uint64_t *)((*input) + 18)) >> 1;    group5 &= (1ull << 29) - 1;
    (*output)[3] = (uint32_t)(group5 % 151);
    group5 /= 151;

    (*output)[2] = (uint32_t)(group5 % 151);
    group5 /= 151;

    (*output)[1] = (uint32_t)(group5 % 151);
    group5 /= 151;

    (*output)[0] = (uint32_t)(group5 % 151);
    group5 /= 151;
    *output += 4;

    uint64_t group6 = (*(uint64_t *)((*input) + 21)) >> 6;    group6 &= (1ull << 29) - 1;
    (*output)[3] = (uint32_t)(group6 % 151);
    group6 /= 151;

    (*output)[2] = (uint32_t)(group6 % 151);
    group6 /= 151;

    (*output)[1] = (uint32_t)(group6 % 151);
    group6 /= 151;

    (*output)[0] = (uint32_t)(group6 % 151);
    group6 /= 151;
    *output += 4;

    uint64_t group7 = (*(uint64_t *)((*input) + 25)) >> 3;    group7 &= (1ull << 29) - 1;
    (*output)[3] = (uint32_t)(group7 % 151);
    group7 /= 151;

    (*output)[2] = (uint32_t)(group7 % 151);
    group7 /= 151;

    (*output)[1] = (uint32_t)(group7 % 151);
    group7 /= 151;

    (*output)[0] = (uint32_t)(group7 % 151);
    group7 /= 151;
    *output += 4;


    *input += 29;
}

// Unpack 29 bytes into 32 values
void Ultrapack_Decompress152(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 29) - 1;
    (*output)[3] = (uint32_t)(group0 % 152);
    group0 /= 152;

    (*output)[2] = (uint32_t)(group0 % 152);
    group0 /= 152;

    (*output)[1] = (uint32_t)(group0 % 152);
    group0 /= 152;

    (*output)[0] = (uint32_t)(group0 % 152);
    group0 /= 152;
    *output += 4;

    uint64_t group1 = (*(uint64_t *)((*input) + 3)) >> 5;    group1 &= (1ull << 29) - 1;
    (*output)[3] = (uint32_t)(group1 % 152);
    group1 /= 152;

    (*output)[2] = (uint32_t)(group1 % 152);
    group1 /= 152;

    (*output)[1] = (uint32_t)(group1 % 152);
    group1 /= 152;

    (*output)[0] = (uint32_t)(group1 % 152);
    group1 /= 152;
    *output += 4;

    uint64_t group2 = (*(uint64_t *)((*input) + 7)) >> 2;    group2 &= (1ull << 29) - 1;
    (*output)[3] = (uint32_t)(group2 % 152);
    group2 /= 152;

    (*output)[2] = (uint32_t)(group2 % 152);
    group2 /= 152;

    (*output)[1] = (uint32_t)(group2 % 152);
    group2 /= 152;

    (*output)[0] = (uint32_t)(group2 % 152);
    group2 /= 152;
    *output += 4;

    uint64_t group3 = (*(uint64_t *)((*input) + 10)) >> 7;    group3 &= (1ull << 29) - 1;
    (*output)[3] = (uint32_t)(group3 % 152);
    group3 /= 152;

    (*output)[2] = (uint32_t)(group3 % 152);
    group3 /= 152;

    (*output)[1] = (uint32_t)(group3 % 152);
    group3 /= 152;

    (*output)[0] = (uint32_t)(group3 % 152);
    group3 /= 152;
    *output += 4;

    uint64_t group4 = (*(uint64_t *)((*input) + 14)) >> 4;    group4 &= (1ull << 29) - 1;
    (*output)[3] = (uint32_t)(group4 % 152);
    group4 /= 152;

    (*output)[2] = (uint32_t)(group4 % 152);
    group4 /= 152;

    (*output)[1] = (uint32_t)(group4 % 152);
    group4 /= 152;

    (*output)[0] = (uint32_t)(group4 % 152);
    group4 /= 152;
    *output += 4;

    uint64_t group5 = (*(uint64_t *)((*input) + 18)) >> 1;    group5 &= (1ull << 29) - 1;
    (*output)[3] = (uint32_t)(group5 % 152);
    group5 /= 152;

    (*output)[2] = (uint32_t)(group5 % 152);
    group5 /= 152;

    (*output)[1] = (uint32_t)(group5 % 152);
    group5 /= 152;

    (*output)[0] = (uint32_t)(group5 % 152);
    group5 /= 152;
    *output += 4;

    uint64_t group6 = (*(uint64_t *)((*input) + 21)) >> 6;    group6 &= (1ull << 29) - 1;
    (*output)[3] = (uint32_t)(group6 % 152);
    group6 /= 152;

    (*output)[2] = (uint32_t)(group6 % 152);
    group6 /= 152;

    (*output)[1] = (uint32_t)(group6 % 152);
    group6 /= 152;

    (*output)[0] = (uint32_t)(group6 % 152);
    group6 /= 152;
    *output += 4;

    uint64_t group7 = (*(uint64_t *)((*input) + 25)) >> 3;    group7 &= (1ull << 29) - 1;
    (*output)[3] = (uint32_t)(group7 % 152);
    group7 /= 152;

    (*output)[2] = (uint32_t)(group7 % 152);
    group7 /= 152;

    (*output)[1] = (uint32_t)(group7 % 152);
    group7 /= 152;

    (*output)[0] = (uint32_t)(group7 % 152);
    group7 /= 152;
    *output += 4;


    *input += 29;
}

// Unpack 11 bytes into 12 values
void Ultrapack_Decompress153(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 22) - 1;
    (*output)[2] = (uint32_t)(group0 % 153);
    group0 /= 153;

    (*output)[1] = (uint32_t)(group0 % 153);
    group0 /= 153;

    (*output)[0] = (uint32_t)(group0 % 153);
    group0 /= 153;
    *output += 3;

    uint64_t group1 = (*(uint64_t *)((*input) + 2)) >> 6;    group1 &= (1ull << 22) - 1;
    (*output)[2] = (uint32_t)(group1 % 153);
    group1 /= 153;

    (*output)[1] = (uint32_t)(group1 % 153);
    group1 /= 153;

    (*output)[0] = (uint32_t)(group1 % 153);
    group1 /= 153;
    *output += 3;

    uint64_t group2 = (*(uint64_t *)((*input) + 5)) >> 4;    group2 &= (1ull << 22) - 1;
    (*output)[2] = (uint32_t)(group2 % 153);
    group2 /= 153;

    (*output)[1] = (uint32_t)(group2 % 153);
    group2 /= 153;

    (*output)[0] = (uint32_t)(group2 % 153);
    group2 /= 153;
    *output += 3;

    uint64_t group3 = (*(uint64_t *)((*input) + 8)) >> 2;    group3 &= (1ull << 22) - 1;
    (*output)[2] = (uint32_t)(group3 % 153);
    group3 /= 153;

    (*output)[1] = (uint32_t)(group3 % 153);
    group3 /= 153;

    (*output)[0] = (uint32_t)(group3 % 153);
    group3 /= 153;
    *output += 3;


    *input += 11;
}

// Unpack 11 bytes into 12 values
void Ultrapack_Decompress154(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 22) - 1;
    (*output)[2] = (uint32_t)(group0 % 154);
    group0 /= 154;

    (*output)[1] = (uint32_t)(group0 % 154);
    group0 /= 154;

    (*output)[0] = (uint32_t)(group0 % 154);
    group0 /= 154;
    *output += 3;

    uint64_t group1 = (*(uint64_t *)((*input) + 2)) >> 6;    group1 &= (1ull << 22) - 1;
    (*output)[2] = (uint32_t)(group1 % 154);
    group1 /= 154;

    (*output)[1] = (uint32_t)(group1 % 154);
    group1 /= 154;

    (*output)[0] = (uint32_t)(group1 % 154);
    group1 /= 154;
    *output += 3;

    uint64_t group2 = (*(uint64_t *)((*input) + 5)) >> 4;    group2 &= (1ull << 22) - 1;
    (*output)[2] = (uint32_t)(group2 % 154);
    group2 /= 154;

    (*output)[1] = (uint32_t)(group2 % 154);
    group2 /= 154;

    (*output)[0] = (uint32_t)(group2 % 154);
    group2 /= 154;
    *output += 3;

    uint64_t group3 = (*(uint64_t *)((*input) + 8)) >> 2;    group3 &= (1ull << 22) - 1;
    (*output)[2] = (uint32_t)(group3 % 154);
    group3 /= 154;

    (*output)[1] = (uint32_t)(group3 % 154);
    group3 /= 154;

    (*output)[0] = (uint32_t)(group3 % 154);
    group3 /= 154;
    *output += 3;


    *input += 11;
}

// Unpack 11 bytes into 12 values
void Ultrapack_Decompress155(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 22) - 1;
    (*output)[2] = (uint32_t)(group0 % 155);
    group0 /= 155;

    (*output)[1] = (uint32_t)(group0 % 155);
    group0 /= 155;

    (*output)[0] = (uint32_t)(group0 % 155);
    group0 /= 155;
    *output += 3;

    uint64_t group1 = (*(uint64_t *)((*input) + 2)) >> 6;    group1 &= (1ull << 22) - 1;
    (*output)[2] = (uint32_t)(group1 % 155);
    group1 /= 155;

    (*output)[1] = (uint32_t)(group1 % 155);
    group1 /= 155;

    (*output)[0] = (uint32_t)(group1 % 155);
    group1 /= 155;
    *output += 3;

    uint64_t group2 = (*(uint64_t *)((*input) + 5)) >> 4;    group2 &= (1ull << 22) - 1;
    (*output)[2] = (uint32_t)(group2 % 155);
    group2 /= 155;

    (*output)[1] = (uint32_t)(group2 % 155);
    group2 /= 155;

    (*output)[0] = (uint32_t)(group2 % 155);
    group2 /= 155;
    *output += 3;

    uint64_t group3 = (*(uint64_t *)((*input) + 8)) >> 2;    group3 &= (1ull << 22) - 1;
    (*output)[2] = (uint32_t)(group3 % 155);
    group3 /= 155;

    (*output)[1] = (uint32_t)(group3 % 155);
    group3 /= 155;

    (*output)[0] = (uint32_t)(group3 % 155);
    group3 /= 155;
    *output += 3;


    *input += 11;
}

// Unpack 11 bytes into 12 values
void Ultrapack_Decompress156(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 22) - 1;
    (*output)[2] = (uint32_t)(group0 % 156);
    group0 /= 156;

    (*output)[1] = (uint32_t)(group0 % 156);
    group0 /= 156;

    (*output)[0] = (uint32_t)(group0 % 156);
    group0 /= 156;
    *output += 3;

    uint64_t group1 = (*(uint64_t *)((*input) + 2)) >> 6;    group1 &= (1ull << 22) - 1;
    (*output)[2] = (uint32_t)(group1 % 156);
    group1 /= 156;

    (*output)[1] = (uint32_t)(group1 % 156);
    group1 /= 156;

    (*output)[0] = (uint32_t)(group1 % 156);
    group1 /= 156;
    *output += 3;

    uint64_t group2 = (*(uint64_t *)((*input) + 5)) >> 4;    group2 &= (1ull << 22) - 1;
    (*output)[2] = (uint32_t)(group2 % 156);
    group2 /= 156;

    (*output)[1] = (uint32_t)(group2 % 156);
    group2 /= 156;

    (*output)[0] = (uint32_t)(group2 % 156);
    group2 /= 156;
    *output += 3;

    uint64_t group3 = (*(uint64_t *)((*input) + 8)) >> 2;    group3 &= (1ull << 22) - 1;
    (*output)[2] = (uint32_t)(group3 % 156);
    group3 /= 156;

    (*output)[1] = (uint32_t)(group3 % 156);
    group3 /= 156;

    (*output)[0] = (uint32_t)(group3 % 156);
    group3 /= 156;
    *output += 3;


    *input += 11;
}

// Unpack 11 bytes into 12 values
void Ultrapack_Decompress157(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 22) - 1;
    (*output)[2] = (uint32_t)(group0 % 157);
    group0 /= 157;

    (*output)[1] = (uint32_t)(group0 % 157);
    group0 /= 157;

    (*output)[0] = (uint32_t)(group0 % 157);
    group0 /= 157;
    *output += 3;

    uint64_t group1 = (*(uint64_t *)((*input) + 2)) >> 6;    group1 &= (1ull << 22) - 1;
    (*output)[2] = (uint32_t)(group1 % 157);
    group1 /= 157;

    (*output)[1] = (uint32_t)(group1 % 157);
    group1 /= 157;

    (*output)[0] = (uint32_t)(group1 % 157);
    group1 /= 157;
    *output += 3;

    uint64_t group2 = (*(uint64_t *)((*input) + 5)) >> 4;    group2 &= (1ull << 22) - 1;
    (*output)[2] = (uint32_t)(group2 % 157);
    group2 /= 157;

    (*output)[1] = (uint32_t)(group2 % 157);
    group2 /= 157;

    (*output)[0] = (uint32_t)(group2 % 157);
    group2 /= 157;
    *output += 3;

    uint64_t group3 = (*(uint64_t *)((*input) + 8)) >> 2;    group3 &= (1ull << 22) - 1;
    (*output)[2] = (uint32_t)(group3 % 157);
    group3 /= 157;

    (*output)[1] = (uint32_t)(group3 % 157);
    group3 /= 157;

    (*output)[0] = (uint32_t)(group3 % 157);
    group3 /= 157;
    *output += 3;


    *input += 11;
}

// Unpack 11 bytes into 12 values
void Ultrapack_Decompress158(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 22) - 1;
    (*output)[2] = (uint32_t)(group0 % 158);
    group0 /= 158;

    (*output)[1] = (uint32_t)(group0 % 158);
    group0 /= 158;

    (*output)[0] = (uint32_t)(group0 % 158);
    group0 /= 158;
    *output += 3;

    uint64_t group1 = (*(uint64_t *)((*input) + 2)) >> 6;    group1 &= (1ull << 22) - 1;
    (*output)[2] = (uint32_t)(group1 % 158);
    group1 /= 158;

    (*output)[1] = (uint32_t)(group1 % 158);
    group1 /= 158;

    (*output)[0] = (uint32_t)(group1 % 158);
    group1 /= 158;
    *output += 3;

    uint64_t group2 = (*(uint64_t *)((*input) + 5)) >> 4;    group2 &= (1ull << 22) - 1;
    (*output)[2] = (uint32_t)(group2 % 158);
    group2 /= 158;

    (*output)[1] = (uint32_t)(group2 % 158);
    group2 /= 158;

    (*output)[0] = (uint32_t)(group2 % 158);
    group2 /= 158;
    *output += 3;

    uint64_t group3 = (*(uint64_t *)((*input) + 8)) >> 2;    group3 &= (1ull << 22) - 1;
    (*output)[2] = (uint32_t)(group3 % 158);
    group3 /= 158;

    (*output)[1] = (uint32_t)(group3 % 158);
    group3 /= 158;

    (*output)[0] = (uint32_t)(group3 % 158);
    group3 /= 158;
    *output += 3;


    *input += 11;
}

// Unpack 11 bytes into 12 values
void Ultrapack_Decompress159(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 22) - 1;
    (*output)[2] = (uint32_t)(group0 % 159);
    group0 /= 159;

    (*output)[1] = (uint32_t)(group0 % 159);
    group0 /= 159;

    (*output)[0] = (uint32_t)(group0 % 159);
    group0 /= 159;
    *output += 3;

    uint64_t group1 = (*(uint64_t *)((*input) + 2)) >> 6;    group1 &= (1ull << 22) - 1;
    (*output)[2] = (uint32_t)(group1 % 159);
    group1 /= 159;

    (*output)[1] = (uint32_t)(group1 % 159);
    group1 /= 159;

    (*output)[0] = (uint32_t)(group1 % 159);
    group1 /= 159;
    *output += 3;

    uint64_t group2 = (*(uint64_t *)((*input) + 5)) >> 4;    group2 &= (1ull << 22) - 1;
    (*output)[2] = (uint32_t)(group2 % 159);
    group2 /= 159;

    (*output)[1] = (uint32_t)(group2 % 159);
    group2 /= 159;

    (*output)[0] = (uint32_t)(group2 % 159);
    group2 /= 159;
    *output += 3;

    uint64_t group3 = (*(uint64_t *)((*input) + 8)) >> 2;    group3 &= (1ull << 22) - 1;
    (*output)[2] = (uint32_t)(group3 % 159);
    group3 /= 159;

    (*output)[1] = (uint32_t)(group3 % 159);
    group3 /= 159;

    (*output)[0] = (uint32_t)(group3 % 159);
    group3 /= 159;
    *output += 3;


    *input += 11;
}

// Unpack 11 bytes into 12 values
void Ultrapack_Decompress160(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 22) - 1;
    (*output)[2] = (uint32_t)(group0 % 160);
    group0 /= 160;

    (*output)[1] = (uint32_t)(group0 % 160);
    group0 /= 160;

    (*output)[0] = (uint32_t)(group0 % 160);
    group0 /= 160;
    *output += 3;

    uint64_t group1 = (*(uint64_t *)((*input) + 2)) >> 6;    group1 &= (1ull << 22) - 1;
    (*output)[2] = (uint32_t)(group1 % 160);
    group1 /= 160;

    (*output)[1] = (uint32_t)(group1 % 160);
    group1 /= 160;

    (*output)[0] = (uint32_t)(group1 % 160);
    group1 /= 160;
    *output += 3;

    uint64_t group2 = (*(uint64_t *)((*input) + 5)) >> 4;    group2 &= (1ull << 22) - 1;
    (*output)[2] = (uint32_t)(group2 % 160);
    group2 /= 160;

    (*output)[1] = (uint32_t)(group2 % 160);
    group2 /= 160;

    (*output)[0] = (uint32_t)(group2 % 160);
    group2 /= 160;
    *output += 3;

    uint64_t group3 = (*(uint64_t *)((*input) + 8)) >> 2;    group3 &= (1ull << 22) - 1;
    (*output)[2] = (uint32_t)(group3 % 160);
    group3 /= 160;

    (*output)[1] = (uint32_t)(group3 % 160);
    group3 /= 160;

    (*output)[0] = (uint32_t)(group3 % 160);
    group3 /= 160;
    *output += 3;


    *input += 11;
}

// Unpack 11 bytes into 12 values
void Ultrapack_Decompress161(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 22) - 1;
    (*output)[2] = (uint32_t)(group0 % 161);
    group0 /= 161;

    (*output)[1] = (uint32_t)(group0 % 161);
    group0 /= 161;

    (*output)[0] = (uint32_t)(group0 % 161);
    group0 /= 161;
    *output += 3;

    uint64_t group1 = (*(uint64_t *)((*input) + 2)) >> 6;    group1 &= (1ull << 22) - 1;
    (*output)[2] = (uint32_t)(group1 % 161);
    group1 /= 161;

    (*output)[1] = (uint32_t)(group1 % 161);
    group1 /= 161;

    (*output)[0] = (uint32_t)(group1 % 161);
    group1 /= 161;
    *output += 3;

    uint64_t group2 = (*(uint64_t *)((*input) + 5)) >> 4;    group2 &= (1ull << 22) - 1;
    (*output)[2] = (uint32_t)(group2 % 161);
    group2 /= 161;

    (*output)[1] = (uint32_t)(group2 % 161);
    group2 /= 161;

    (*output)[0] = (uint32_t)(group2 % 161);
    group2 /= 161;
    *output += 3;

    uint64_t group3 = (*(uint64_t *)((*input) + 8)) >> 2;    group3 &= (1ull << 22) - 1;
    (*output)[2] = (uint32_t)(group3 % 161);
    group3 /= 161;

    (*output)[1] = (uint32_t)(group3 % 161);
    group3 /= 161;

    (*output)[0] = (uint32_t)(group3 % 161);
    group3 /= 161;
    *output += 3;


    *input += 11;
}

// Unpack 37 bytes into 40 values
void Ultrapack_Decompress162(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 37) - 1;
    (*output)[4] = (uint32_t)(group0 % 162);
    group0 /= 162;

    (*output)[3] = (uint32_t)(group0 % 162);
    group0 /= 162;

    (*output)[2] = (uint32_t)(group0 % 162);
    group0 /= 162;

    (*output)[1] = (uint32_t)(group0 % 162);
    group0 /= 162;

    (*output)[0] = (uint32_t)(group0 % 162);
    group0 /= 162;
    *output += 5;

    uint64_t group1 = (*(uint64_t *)((*input) + 4)) >> 5;    group1 &= (1ull << 37) - 1;
    (*output)[4] = (uint32_t)(group1 % 162);
    group1 /= 162;

    (*output)[3] = (uint32_t)(group1 % 162);
    group1 /= 162;

    (*output)[2] = (uint32_t)(group1 % 162);
    group1 /= 162;

    (*output)[1] = (uint32_t)(group1 % 162);
    group1 /= 162;

    (*output)[0] = (uint32_t)(group1 % 162);
    group1 /= 162;
    *output += 5;

    uint64_t group2 = (*(uint64_t *)((*input) + 9)) >> 2;    group2 &= (1ull << 37) - 1;
    (*output)[4] = (uint32_t)(group2 % 162);
    group2 /= 162;

    (*output)[3] = (uint32_t)(group2 % 162);
    group2 /= 162;

    (*output)[2] = (uint32_t)(group2 % 162);
    group2 /= 162;

    (*output)[1] = (uint32_t)(group2 % 162);
    group2 /= 162;

    (*output)[0] = (uint32_t)(group2 % 162);
    group2 /= 162;
    *output += 5;

    uint64_t group3 = (*(uint64_t *)((*input) + 13)) >> 7;    group3 &= (1ull << 37) - 1;
    (*output)[4] = (uint32_t)(group3 % 162);
    group3 /= 162;

    (*output)[3] = (uint32_t)(group3 % 162);
    group3 /= 162;

    (*output)[2] = (uint32_t)(group3 % 162);
    group3 /= 162;

    (*output)[1] = (uint32_t)(group3 % 162);
    group3 /= 162;

    (*output)[0] = (uint32_t)(group3 % 162);
    group3 /= 162;
    *output += 5;

    uint64_t group4 = (*(uint64_t *)((*input) + 18)) >> 4;    group4 &= (1ull << 37) - 1;
    (*output)[4] = (uint32_t)(group4 % 162);
    group4 /= 162;

    (*output)[3] = (uint32_t)(group4 % 162);
    group4 /= 162;

    (*output)[2] = (uint32_t)(group4 % 162);
    group4 /= 162;

    (*output)[1] = (uint32_t)(group4 % 162);
    group4 /= 162;

    (*output)[0] = (uint32_t)(group4 % 162);
    group4 /= 162;
    *output += 5;

    uint64_t group5 = (*(uint64_t *)((*input) + 23)) >> 1;    group5 &= (1ull << 37) - 1;
    (*output)[4] = (uint32_t)(group5 % 162);
    group5 /= 162;

    (*output)[3] = (uint32_t)(group5 % 162);
    group5 /= 162;

    (*output)[2] = (uint32_t)(group5 % 162);
    group5 /= 162;

    (*output)[1] = (uint32_t)(group5 % 162);
    group5 /= 162;

    (*output)[0] = (uint32_t)(group5 % 162);
    group5 /= 162;
    *output += 5;

    uint64_t group6 = (*(uint64_t *)((*input) + 27)) >> 6;    group6 &= (1ull << 37) - 1;
    (*output)[4] = (uint32_t)(group6 % 162);
    group6 /= 162;

    (*output)[3] = (uint32_t)(group6 % 162);
    group6 /= 162;

    (*output)[2] = (uint32_t)(group6 % 162);
    group6 /= 162;

    (*output)[1] = (uint32_t)(group6 % 162);
    group6 /= 162;

    (*output)[0] = (uint32_t)(group6 % 162);
    group6 /= 162;
    *output += 5;

    uint64_t group7 = (*(uint64_t *)((*input) + 32)) >> 3;    group7 &= (1ull << 37) - 1;
    (*output)[4] = (uint32_t)(group7 % 162);
    group7 /= 162;

    (*output)[3] = (uint32_t)(group7 % 162);
    group7 /= 162;

    (*output)[2] = (uint32_t)(group7 % 162);
    group7 /= 162;

    (*output)[1] = (uint32_t)(group7 % 162);
    group7 /= 162;

    (*output)[0] = (uint32_t)(group7 % 162);
    group7 /= 162;
    *output += 5;


    *input += 37;
}

// Unpack 37 bytes into 40 values
void Ultrapack_Decompress163(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 37) - 1;
    (*output)[4] = (uint32_t)(group0 % 163);
    group0 /= 163;

    (*output)[3] = (uint32_t)(group0 % 163);
    group0 /= 163;

    (*output)[2] = (uint32_t)(group0 % 163);
    group0 /= 163;

    (*output)[1] = (uint32_t)(group0 % 163);
    group0 /= 163;

    (*output)[0] = (uint32_t)(group0 % 163);
    group0 /= 163;
    *output += 5;

    uint64_t group1 = (*(uint64_t *)((*input) + 4)) >> 5;    group1 &= (1ull << 37) - 1;
    (*output)[4] = (uint32_t)(group1 % 163);
    group1 /= 163;

    (*output)[3] = (uint32_t)(group1 % 163);
    group1 /= 163;

    (*output)[2] = (uint32_t)(group1 % 163);
    group1 /= 163;

    (*output)[1] = (uint32_t)(group1 % 163);
    group1 /= 163;

    (*output)[0] = (uint32_t)(group1 % 163);
    group1 /= 163;
    *output += 5;

    uint64_t group2 = (*(uint64_t *)((*input) + 9)) >> 2;    group2 &= (1ull << 37) - 1;
    (*output)[4] = (uint32_t)(group2 % 163);
    group2 /= 163;

    (*output)[3] = (uint32_t)(group2 % 163);
    group2 /= 163;

    (*output)[2] = (uint32_t)(group2 % 163);
    group2 /= 163;

    (*output)[1] = (uint32_t)(group2 % 163);
    group2 /= 163;

    (*output)[0] = (uint32_t)(group2 % 163);
    group2 /= 163;
    *output += 5;

    uint64_t group3 = (*(uint64_t *)((*input) + 13)) >> 7;    group3 &= (1ull << 37) - 1;
    (*output)[4] = (uint32_t)(group3 % 163);
    group3 /= 163;

    (*output)[3] = (uint32_t)(group3 % 163);
    group3 /= 163;

    (*output)[2] = (uint32_t)(group3 % 163);
    group3 /= 163;

    (*output)[1] = (uint32_t)(group3 % 163);
    group3 /= 163;

    (*output)[0] = (uint32_t)(group3 % 163);
    group3 /= 163;
    *output += 5;

    uint64_t group4 = (*(uint64_t *)((*input) + 18)) >> 4;    group4 &= (1ull << 37) - 1;
    (*output)[4] = (uint32_t)(group4 % 163);
    group4 /= 163;

    (*output)[3] = (uint32_t)(group4 % 163);
    group4 /= 163;

    (*output)[2] = (uint32_t)(group4 % 163);
    group4 /= 163;

    (*output)[1] = (uint32_t)(group4 % 163);
    group4 /= 163;

    (*output)[0] = (uint32_t)(group4 % 163);
    group4 /= 163;
    *output += 5;

    uint64_t group5 = (*(uint64_t *)((*input) + 23)) >> 1;    group5 &= (1ull << 37) - 1;
    (*output)[4] = (uint32_t)(group5 % 163);
    group5 /= 163;

    (*output)[3] = (uint32_t)(group5 % 163);
    group5 /= 163;

    (*output)[2] = (uint32_t)(group5 % 163);
    group5 /= 163;

    (*output)[1] = (uint32_t)(group5 % 163);
    group5 /= 163;

    (*output)[0] = (uint32_t)(group5 % 163);
    group5 /= 163;
    *output += 5;

    uint64_t group6 = (*(uint64_t *)((*input) + 27)) >> 6;    group6 &= (1ull << 37) - 1;
    (*output)[4] = (uint32_t)(group6 % 163);
    group6 /= 163;

    (*output)[3] = (uint32_t)(group6 % 163);
    group6 /= 163;

    (*output)[2] = (uint32_t)(group6 % 163);
    group6 /= 163;

    (*output)[1] = (uint32_t)(group6 % 163);
    group6 /= 163;

    (*output)[0] = (uint32_t)(group6 % 163);
    group6 /= 163;
    *output += 5;

    uint64_t group7 = (*(uint64_t *)((*input) + 32)) >> 3;    group7 &= (1ull << 37) - 1;
    (*output)[4] = (uint32_t)(group7 % 163);
    group7 /= 163;

    (*output)[3] = (uint32_t)(group7 % 163);
    group7 /= 163;

    (*output)[2] = (uint32_t)(group7 % 163);
    group7 /= 163;

    (*output)[1] = (uint32_t)(group7 % 163);
    group7 /= 163;

    (*output)[0] = (uint32_t)(group7 % 163);
    group7 /= 163;
    *output += 5;


    *input += 37;
}

// Unpack 37 bytes into 40 values
void Ultrapack_Decompress164(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 37) - 1;
    (*output)[4] = (uint32_t)(group0 % 164);
    group0 /= 164;

    (*output)[3] = (uint32_t)(group0 % 164);
    group0 /= 164;

    (*output)[2] = (uint32_t)(group0 % 164);
    group0 /= 164;

    (*output)[1] = (uint32_t)(group0 % 164);
    group0 /= 164;

    (*output)[0] = (uint32_t)(group0 % 164);
    group0 /= 164;
    *output += 5;

    uint64_t group1 = (*(uint64_t *)((*input) + 4)) >> 5;    group1 &= (1ull << 37) - 1;
    (*output)[4] = (uint32_t)(group1 % 164);
    group1 /= 164;

    (*output)[3] = (uint32_t)(group1 % 164);
    group1 /= 164;

    (*output)[2] = (uint32_t)(group1 % 164);
    group1 /= 164;

    (*output)[1] = (uint32_t)(group1 % 164);
    group1 /= 164;

    (*output)[0] = (uint32_t)(group1 % 164);
    group1 /= 164;
    *output += 5;

    uint64_t group2 = (*(uint64_t *)((*input) + 9)) >> 2;    group2 &= (1ull << 37) - 1;
    (*output)[4] = (uint32_t)(group2 % 164);
    group2 /= 164;

    (*output)[3] = (uint32_t)(group2 % 164);
    group2 /= 164;

    (*output)[2] = (uint32_t)(group2 % 164);
    group2 /= 164;

    (*output)[1] = (uint32_t)(group2 % 164);
    group2 /= 164;

    (*output)[0] = (uint32_t)(group2 % 164);
    group2 /= 164;
    *output += 5;

    uint64_t group3 = (*(uint64_t *)((*input) + 13)) >> 7;    group3 &= (1ull << 37) - 1;
    (*output)[4] = (uint32_t)(group3 % 164);
    group3 /= 164;

    (*output)[3] = (uint32_t)(group3 % 164);
    group3 /= 164;

    (*output)[2] = (uint32_t)(group3 % 164);
    group3 /= 164;

    (*output)[1] = (uint32_t)(group3 % 164);
    group3 /= 164;

    (*output)[0] = (uint32_t)(group3 % 164);
    group3 /= 164;
    *output += 5;

    uint64_t group4 = (*(uint64_t *)((*input) + 18)) >> 4;    group4 &= (1ull << 37) - 1;
    (*output)[4] = (uint32_t)(group4 % 164);
    group4 /= 164;

    (*output)[3] = (uint32_t)(group4 % 164);
    group4 /= 164;

    (*output)[2] = (uint32_t)(group4 % 164);
    group4 /= 164;

    (*output)[1] = (uint32_t)(group4 % 164);
    group4 /= 164;

    (*output)[0] = (uint32_t)(group4 % 164);
    group4 /= 164;
    *output += 5;

    uint64_t group5 = (*(uint64_t *)((*input) + 23)) >> 1;    group5 &= (1ull << 37) - 1;
    (*output)[4] = (uint32_t)(group5 % 164);
    group5 /= 164;

    (*output)[3] = (uint32_t)(group5 % 164);
    group5 /= 164;

    (*output)[2] = (uint32_t)(group5 % 164);
    group5 /= 164;

    (*output)[1] = (uint32_t)(group5 % 164);
    group5 /= 164;

    (*output)[0] = (uint32_t)(group5 % 164);
    group5 /= 164;
    *output += 5;

    uint64_t group6 = (*(uint64_t *)((*input) + 27)) >> 6;    group6 &= (1ull << 37) - 1;
    (*output)[4] = (uint32_t)(group6 % 164);
    group6 /= 164;

    (*output)[3] = (uint32_t)(group6 % 164);
    group6 /= 164;

    (*output)[2] = (uint32_t)(group6 % 164);
    group6 /= 164;

    (*output)[1] = (uint32_t)(group6 % 164);
    group6 /= 164;

    (*output)[0] = (uint32_t)(group6 % 164);
    group6 /= 164;
    *output += 5;

    uint64_t group7 = (*(uint64_t *)((*input) + 32)) >> 3;    group7 &= (1ull << 37) - 1;
    (*output)[4] = (uint32_t)(group7 % 164);
    group7 /= 164;

    (*output)[3] = (uint32_t)(group7 % 164);
    group7 /= 164;

    (*output)[2] = (uint32_t)(group7 % 164);
    group7 /= 164;

    (*output)[1] = (uint32_t)(group7 % 164);
    group7 /= 164;

    (*output)[0] = (uint32_t)(group7 % 164);
    group7 /= 164;
    *output += 5;


    *input += 37;
}

// Unpack 37 bytes into 40 values
void Ultrapack_Decompress165(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 37) - 1;
    (*output)[4] = (uint32_t)(group0 % 165);
    group0 /= 165;

    (*output)[3] = (uint32_t)(group0 % 165);
    group0 /= 165;

    (*output)[2] = (uint32_t)(group0 % 165);
    group0 /= 165;

    (*output)[1] = (uint32_t)(group0 % 165);
    group0 /= 165;

    (*output)[0] = (uint32_t)(group0 % 165);
    group0 /= 165;
    *output += 5;

    uint64_t group1 = (*(uint64_t *)((*input) + 4)) >> 5;    group1 &= (1ull << 37) - 1;
    (*output)[4] = (uint32_t)(group1 % 165);
    group1 /= 165;

    (*output)[3] = (uint32_t)(group1 % 165);
    group1 /= 165;

    (*output)[2] = (uint32_t)(group1 % 165);
    group1 /= 165;

    (*output)[1] = (uint32_t)(group1 % 165);
    group1 /= 165;

    (*output)[0] = (uint32_t)(group1 % 165);
    group1 /= 165;
    *output += 5;

    uint64_t group2 = (*(uint64_t *)((*input) + 9)) >> 2;    group2 &= (1ull << 37) - 1;
    (*output)[4] = (uint32_t)(group2 % 165);
    group2 /= 165;

    (*output)[3] = (uint32_t)(group2 % 165);
    group2 /= 165;

    (*output)[2] = (uint32_t)(group2 % 165);
    group2 /= 165;

    (*output)[1] = (uint32_t)(group2 % 165);
    group2 /= 165;

    (*output)[0] = (uint32_t)(group2 % 165);
    group2 /= 165;
    *output += 5;

    uint64_t group3 = (*(uint64_t *)((*input) + 13)) >> 7;    group3 &= (1ull << 37) - 1;
    (*output)[4] = (uint32_t)(group3 % 165);
    group3 /= 165;

    (*output)[3] = (uint32_t)(group3 % 165);
    group3 /= 165;

    (*output)[2] = (uint32_t)(group3 % 165);
    group3 /= 165;

    (*output)[1] = (uint32_t)(group3 % 165);
    group3 /= 165;

    (*output)[0] = (uint32_t)(group3 % 165);
    group3 /= 165;
    *output += 5;

    uint64_t group4 = (*(uint64_t *)((*input) + 18)) >> 4;    group4 &= (1ull << 37) - 1;
    (*output)[4] = (uint32_t)(group4 % 165);
    group4 /= 165;

    (*output)[3] = (uint32_t)(group4 % 165);
    group4 /= 165;

    (*output)[2] = (uint32_t)(group4 % 165);
    group4 /= 165;

    (*output)[1] = (uint32_t)(group4 % 165);
    group4 /= 165;

    (*output)[0] = (uint32_t)(group4 % 165);
    group4 /= 165;
    *output += 5;

    uint64_t group5 = (*(uint64_t *)((*input) + 23)) >> 1;    group5 &= (1ull << 37) - 1;
    (*output)[4] = (uint32_t)(group5 % 165);
    group5 /= 165;

    (*output)[3] = (uint32_t)(group5 % 165);
    group5 /= 165;

    (*output)[2] = (uint32_t)(group5 % 165);
    group5 /= 165;

    (*output)[1] = (uint32_t)(group5 % 165);
    group5 /= 165;

    (*output)[0] = (uint32_t)(group5 % 165);
    group5 /= 165;
    *output += 5;

    uint64_t group6 = (*(uint64_t *)((*input) + 27)) >> 6;    group6 &= (1ull << 37) - 1;
    (*output)[4] = (uint32_t)(group6 % 165);
    group6 /= 165;

    (*output)[3] = (uint32_t)(group6 % 165);
    group6 /= 165;

    (*output)[2] = (uint32_t)(group6 % 165);
    group6 /= 165;

    (*output)[1] = (uint32_t)(group6 % 165);
    group6 /= 165;

    (*output)[0] = (uint32_t)(group6 % 165);
    group6 /= 165;
    *output += 5;

    uint64_t group7 = (*(uint64_t *)((*input) + 32)) >> 3;    group7 &= (1ull << 37) - 1;
    (*output)[4] = (uint32_t)(group7 % 165);
    group7 /= 165;

    (*output)[3] = (uint32_t)(group7 % 165);
    group7 /= 165;

    (*output)[2] = (uint32_t)(group7 % 165);
    group7 /= 165;

    (*output)[1] = (uint32_t)(group7 % 165);
    group7 /= 165;

    (*output)[0] = (uint32_t)(group7 % 165);
    group7 /= 165;
    *output += 5;


    *input += 37;
}

// Unpack 37 bytes into 40 values
void Ultrapack_Decompress166(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 37) - 1;
    (*output)[4] = (uint32_t)(group0 % 166);
    group0 /= 166;

    (*output)[3] = (uint32_t)(group0 % 166);
    group0 /= 166;

    (*output)[2] = (uint32_t)(group0 % 166);
    group0 /= 166;

    (*output)[1] = (uint32_t)(group0 % 166);
    group0 /= 166;

    (*output)[0] = (uint32_t)(group0 % 166);
    group0 /= 166;
    *output += 5;

    uint64_t group1 = (*(uint64_t *)((*input) + 4)) >> 5;    group1 &= (1ull << 37) - 1;
    (*output)[4] = (uint32_t)(group1 % 166);
    group1 /= 166;

    (*output)[3] = (uint32_t)(group1 % 166);
    group1 /= 166;

    (*output)[2] = (uint32_t)(group1 % 166);
    group1 /= 166;

    (*output)[1] = (uint32_t)(group1 % 166);
    group1 /= 166;

    (*output)[0] = (uint32_t)(group1 % 166);
    group1 /= 166;
    *output += 5;

    uint64_t group2 = (*(uint64_t *)((*input) + 9)) >> 2;    group2 &= (1ull << 37) - 1;
    (*output)[4] = (uint32_t)(group2 % 166);
    group2 /= 166;

    (*output)[3] = (uint32_t)(group2 % 166);
    group2 /= 166;

    (*output)[2] = (uint32_t)(group2 % 166);
    group2 /= 166;

    (*output)[1] = (uint32_t)(group2 % 166);
    group2 /= 166;

    (*output)[0] = (uint32_t)(group2 % 166);
    group2 /= 166;
    *output += 5;

    uint64_t group3 = (*(uint64_t *)((*input) + 13)) >> 7;    group3 &= (1ull << 37) - 1;
    (*output)[4] = (uint32_t)(group3 % 166);
    group3 /= 166;

    (*output)[3] = (uint32_t)(group3 % 166);
    group3 /= 166;

    (*output)[2] = (uint32_t)(group3 % 166);
    group3 /= 166;

    (*output)[1] = (uint32_t)(group3 % 166);
    group3 /= 166;

    (*output)[0] = (uint32_t)(group3 % 166);
    group3 /= 166;
    *output += 5;

    uint64_t group4 = (*(uint64_t *)((*input) + 18)) >> 4;    group4 &= (1ull << 37) - 1;
    (*output)[4] = (uint32_t)(group4 % 166);
    group4 /= 166;

    (*output)[3] = (uint32_t)(group4 % 166);
    group4 /= 166;

    (*output)[2] = (uint32_t)(group4 % 166);
    group4 /= 166;

    (*output)[1] = (uint32_t)(group4 % 166);
    group4 /= 166;

    (*output)[0] = (uint32_t)(group4 % 166);
    group4 /= 166;
    *output += 5;

    uint64_t group5 = (*(uint64_t *)((*input) + 23)) >> 1;    group5 &= (1ull << 37) - 1;
    (*output)[4] = (uint32_t)(group5 % 166);
    group5 /= 166;

    (*output)[3] = (uint32_t)(group5 % 166);
    group5 /= 166;

    (*output)[2] = (uint32_t)(group5 % 166);
    group5 /= 166;

    (*output)[1] = (uint32_t)(group5 % 166);
    group5 /= 166;

    (*output)[0] = (uint32_t)(group5 % 166);
    group5 /= 166;
    *output += 5;

    uint64_t group6 = (*(uint64_t *)((*input) + 27)) >> 6;    group6 &= (1ull << 37) - 1;
    (*output)[4] = (uint32_t)(group6 % 166);
    group6 /= 166;

    (*output)[3] = (uint32_t)(group6 % 166);
    group6 /= 166;

    (*output)[2] = (uint32_t)(group6 % 166);
    group6 /= 166;

    (*output)[1] = (uint32_t)(group6 % 166);
    group6 /= 166;

    (*output)[0] = (uint32_t)(group6 % 166);
    group6 /= 166;
    *output += 5;

    uint64_t group7 = (*(uint64_t *)((*input) + 32)) >> 3;    group7 &= (1ull << 37) - 1;
    (*output)[4] = (uint32_t)(group7 % 166);
    group7 /= 166;

    (*output)[3] = (uint32_t)(group7 % 166);
    group7 /= 166;

    (*output)[2] = (uint32_t)(group7 % 166);
    group7 /= 166;

    (*output)[1] = (uint32_t)(group7 % 166);
    group7 /= 166;

    (*output)[0] = (uint32_t)(group7 % 166);
    group7 /= 166;
    *output += 5;


    *input += 37;
}

// Unpack 37 bytes into 40 values
void Ultrapack_Decompress167(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 37) - 1;
    (*output)[4] = (uint32_t)(group0 % 167);
    group0 /= 167;

    (*output)[3] = (uint32_t)(group0 % 167);
    group0 /= 167;

    (*output)[2] = (uint32_t)(group0 % 167);
    group0 /= 167;

    (*output)[1] = (uint32_t)(group0 % 167);
    group0 /= 167;

    (*output)[0] = (uint32_t)(group0 % 167);
    group0 /= 167;
    *output += 5;

    uint64_t group1 = (*(uint64_t *)((*input) + 4)) >> 5;    group1 &= (1ull << 37) - 1;
    (*output)[4] = (uint32_t)(group1 % 167);
    group1 /= 167;

    (*output)[3] = (uint32_t)(group1 % 167);
    group1 /= 167;

    (*output)[2] = (uint32_t)(group1 % 167);
    group1 /= 167;

    (*output)[1] = (uint32_t)(group1 % 167);
    group1 /= 167;

    (*output)[0] = (uint32_t)(group1 % 167);
    group1 /= 167;
    *output += 5;

    uint64_t group2 = (*(uint64_t *)((*input) + 9)) >> 2;    group2 &= (1ull << 37) - 1;
    (*output)[4] = (uint32_t)(group2 % 167);
    group2 /= 167;

    (*output)[3] = (uint32_t)(group2 % 167);
    group2 /= 167;

    (*output)[2] = (uint32_t)(group2 % 167);
    group2 /= 167;

    (*output)[1] = (uint32_t)(group2 % 167);
    group2 /= 167;

    (*output)[0] = (uint32_t)(group2 % 167);
    group2 /= 167;
    *output += 5;

    uint64_t group3 = (*(uint64_t *)((*input) + 13)) >> 7;    group3 &= (1ull << 37) - 1;
    (*output)[4] = (uint32_t)(group3 % 167);
    group3 /= 167;

    (*output)[3] = (uint32_t)(group3 % 167);
    group3 /= 167;

    (*output)[2] = (uint32_t)(group3 % 167);
    group3 /= 167;

    (*output)[1] = (uint32_t)(group3 % 167);
    group3 /= 167;

    (*output)[0] = (uint32_t)(group3 % 167);
    group3 /= 167;
    *output += 5;

    uint64_t group4 = (*(uint64_t *)((*input) + 18)) >> 4;    group4 &= (1ull << 37) - 1;
    (*output)[4] = (uint32_t)(group4 % 167);
    group4 /= 167;

    (*output)[3] = (uint32_t)(group4 % 167);
    group4 /= 167;

    (*output)[2] = (uint32_t)(group4 % 167);
    group4 /= 167;

    (*output)[1] = (uint32_t)(group4 % 167);
    group4 /= 167;

    (*output)[0] = (uint32_t)(group4 % 167);
    group4 /= 167;
    *output += 5;

    uint64_t group5 = (*(uint64_t *)((*input) + 23)) >> 1;    group5 &= (1ull << 37) - 1;
    (*output)[4] = (uint32_t)(group5 % 167);
    group5 /= 167;

    (*output)[3] = (uint32_t)(group5 % 167);
    group5 /= 167;

    (*output)[2] = (uint32_t)(group5 % 167);
    group5 /= 167;

    (*output)[1] = (uint32_t)(group5 % 167);
    group5 /= 167;

    (*output)[0] = (uint32_t)(group5 % 167);
    group5 /= 167;
    *output += 5;

    uint64_t group6 = (*(uint64_t *)((*input) + 27)) >> 6;    group6 &= (1ull << 37) - 1;
    (*output)[4] = (uint32_t)(group6 % 167);
    group6 /= 167;

    (*output)[3] = (uint32_t)(group6 % 167);
    group6 /= 167;

    (*output)[2] = (uint32_t)(group6 % 167);
    group6 /= 167;

    (*output)[1] = (uint32_t)(group6 % 167);
    group6 /= 167;

    (*output)[0] = (uint32_t)(group6 % 167);
    group6 /= 167;
    *output += 5;

    uint64_t group7 = (*(uint64_t *)((*input) + 32)) >> 3;    group7 &= (1ull << 37) - 1;
    (*output)[4] = (uint32_t)(group7 % 167);
    group7 /= 167;

    (*output)[3] = (uint32_t)(group7 % 167);
    group7 /= 167;

    (*output)[2] = (uint32_t)(group7 % 167);
    group7 /= 167;

    (*output)[1] = (uint32_t)(group7 % 167);
    group7 /= 167;

    (*output)[0] = (uint32_t)(group7 % 167);
    group7 /= 167;
    *output += 5;


    *input += 37;
}

// Unpack 37 bytes into 40 values
void Ultrapack_Decompress168(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 37) - 1;
    (*output)[4] = (uint32_t)(group0 % 168);
    group0 /= 168;

    (*output)[3] = (uint32_t)(group0 % 168);
    group0 /= 168;

    (*output)[2] = (uint32_t)(group0 % 168);
    group0 /= 168;

    (*output)[1] = (uint32_t)(group0 % 168);
    group0 /= 168;

    (*output)[0] = (uint32_t)(group0 % 168);
    group0 /= 168;
    *output += 5;

    uint64_t group1 = (*(uint64_t *)((*input) + 4)) >> 5;    group1 &= (1ull << 37) - 1;
    (*output)[4] = (uint32_t)(group1 % 168);
    group1 /= 168;

    (*output)[3] = (uint32_t)(group1 % 168);
    group1 /= 168;

    (*output)[2] = (uint32_t)(group1 % 168);
    group1 /= 168;

    (*output)[1] = (uint32_t)(group1 % 168);
    group1 /= 168;

    (*output)[0] = (uint32_t)(group1 % 168);
    group1 /= 168;
    *output += 5;

    uint64_t group2 = (*(uint64_t *)((*input) + 9)) >> 2;    group2 &= (1ull << 37) - 1;
    (*output)[4] = (uint32_t)(group2 % 168);
    group2 /= 168;

    (*output)[3] = (uint32_t)(group2 % 168);
    group2 /= 168;

    (*output)[2] = (uint32_t)(group2 % 168);
    group2 /= 168;

    (*output)[1] = (uint32_t)(group2 % 168);
    group2 /= 168;

    (*output)[0] = (uint32_t)(group2 % 168);
    group2 /= 168;
    *output += 5;

    uint64_t group3 = (*(uint64_t *)((*input) + 13)) >> 7;    group3 &= (1ull << 37) - 1;
    (*output)[4] = (uint32_t)(group3 % 168);
    group3 /= 168;

    (*output)[3] = (uint32_t)(group3 % 168);
    group3 /= 168;

    (*output)[2] = (uint32_t)(group3 % 168);
    group3 /= 168;

    (*output)[1] = (uint32_t)(group3 % 168);
    group3 /= 168;

    (*output)[0] = (uint32_t)(group3 % 168);
    group3 /= 168;
    *output += 5;

    uint64_t group4 = (*(uint64_t *)((*input) + 18)) >> 4;    group4 &= (1ull << 37) - 1;
    (*output)[4] = (uint32_t)(group4 % 168);
    group4 /= 168;

    (*output)[3] = (uint32_t)(group4 % 168);
    group4 /= 168;

    (*output)[2] = (uint32_t)(group4 % 168);
    group4 /= 168;

    (*output)[1] = (uint32_t)(group4 % 168);
    group4 /= 168;

    (*output)[0] = (uint32_t)(group4 % 168);
    group4 /= 168;
    *output += 5;

    uint64_t group5 = (*(uint64_t *)((*input) + 23)) >> 1;    group5 &= (1ull << 37) - 1;
    (*output)[4] = (uint32_t)(group5 % 168);
    group5 /= 168;

    (*output)[3] = (uint32_t)(group5 % 168);
    group5 /= 168;

    (*output)[2] = (uint32_t)(group5 % 168);
    group5 /= 168;

    (*output)[1] = (uint32_t)(group5 % 168);
    group5 /= 168;

    (*output)[0] = (uint32_t)(group5 % 168);
    group5 /= 168;
    *output += 5;

    uint64_t group6 = (*(uint64_t *)((*input) + 27)) >> 6;    group6 &= (1ull << 37) - 1;
    (*output)[4] = (uint32_t)(group6 % 168);
    group6 /= 168;

    (*output)[3] = (uint32_t)(group6 % 168);
    group6 /= 168;

    (*output)[2] = (uint32_t)(group6 % 168);
    group6 /= 168;

    (*output)[1] = (uint32_t)(group6 % 168);
    group6 /= 168;

    (*output)[0] = (uint32_t)(group6 % 168);
    group6 /= 168;
    *output += 5;

    uint64_t group7 = (*(uint64_t *)((*input) + 32)) >> 3;    group7 &= (1ull << 37) - 1;
    (*output)[4] = (uint32_t)(group7 % 168);
    group7 /= 168;

    (*output)[3] = (uint32_t)(group7 % 168);
    group7 /= 168;

    (*output)[2] = (uint32_t)(group7 % 168);
    group7 /= 168;

    (*output)[1] = (uint32_t)(group7 % 168);
    group7 /= 168;

    (*output)[0] = (uint32_t)(group7 % 168);
    group7 /= 168;
    *output += 5;


    *input += 37;
}

// Unpack 13 bytes into 14 values
void Ultrapack_Decompress169(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 52) - 1;
    (*output)[6] = (uint32_t)(group0 % 169);
    group0 /= 169;

    (*output)[5] = (uint32_t)(group0 % 169);
    group0 /= 169;

    (*output)[4] = (uint32_t)(group0 % 169);
    group0 /= 169;

    (*output)[3] = (uint32_t)(group0 % 169);
    group0 /= 169;

    (*output)[2] = (uint32_t)(group0 % 169);
    group0 /= 169;

    (*output)[1] = (uint32_t)(group0 % 169);
    group0 /= 169;

    (*output)[0] = (uint32_t)(group0 % 169);
    group0 /= 169;
    *output += 7;

    uint64_t group1 = (*(uint64_t *)((*input) + 6)) >> 4;    group1 &= (1ull << 52) - 1;
    (*output)[6] = (uint32_t)(group1 % 169);
    group1 /= 169;

    (*output)[5] = (uint32_t)(group1 % 169);
    group1 /= 169;

    (*output)[4] = (uint32_t)(group1 % 169);
    group1 /= 169;

    (*output)[3] = (uint32_t)(group1 % 169);
    group1 /= 169;

    (*output)[2] = (uint32_t)(group1 % 169);
    group1 /= 169;

    (*output)[1] = (uint32_t)(group1 % 169);
    group1 /= 169;

    (*output)[0] = (uint32_t)(group1 % 169);
    group1 /= 169;
    *output += 7;


    *input += 13;
}

// Unpack 13 bytes into 14 values
void Ultrapack_Decompress170(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 52) - 1;
    (*output)[6] = (uint32_t)(group0 % 170);
    group0 /= 170;

    (*output)[5] = (uint32_t)(group0 % 170);
    group0 /= 170;

    (*output)[4] = (uint32_t)(group0 % 170);
    group0 /= 170;

    (*output)[3] = (uint32_t)(group0 % 170);
    group0 /= 170;

    (*output)[2] = (uint32_t)(group0 % 170);
    group0 /= 170;

    (*output)[1] = (uint32_t)(group0 % 170);
    group0 /= 170;

    (*output)[0] = (uint32_t)(group0 % 170);
    group0 /= 170;
    *output += 7;

    uint64_t group1 = (*(uint64_t *)((*input) + 6)) >> 4;    group1 &= (1ull << 52) - 1;
    (*output)[6] = (uint32_t)(group1 % 170);
    group1 /= 170;

    (*output)[5] = (uint32_t)(group1 % 170);
    group1 /= 170;

    (*output)[4] = (uint32_t)(group1 % 170);
    group1 /= 170;

    (*output)[3] = (uint32_t)(group1 % 170);
    group1 /= 170;

    (*output)[2] = (uint32_t)(group1 % 170);
    group1 /= 170;

    (*output)[1] = (uint32_t)(group1 % 170);
    group1 /= 170;

    (*output)[0] = (uint32_t)(group1 % 170);
    group1 /= 170;
    *output += 7;


    *input += 13;
}

// Unpack 13 bytes into 14 values
void Ultrapack_Decompress171(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 52) - 1;
    (*output)[6] = (uint32_t)(group0 % 171);
    group0 /= 171;

    (*output)[5] = (uint32_t)(group0 % 171);
    group0 /= 171;

    (*output)[4] = (uint32_t)(group0 % 171);
    group0 /= 171;

    (*output)[3] = (uint32_t)(group0 % 171);
    group0 /= 171;

    (*output)[2] = (uint32_t)(group0 % 171);
    group0 /= 171;

    (*output)[1] = (uint32_t)(group0 % 171);
    group0 /= 171;

    (*output)[0] = (uint32_t)(group0 % 171);
    group0 /= 171;
    *output += 7;

    uint64_t group1 = (*(uint64_t *)((*input) + 6)) >> 4;    group1 &= (1ull << 52) - 1;
    (*output)[6] = (uint32_t)(group1 % 171);
    group1 /= 171;

    (*output)[5] = (uint32_t)(group1 % 171);
    group1 /= 171;

    (*output)[4] = (uint32_t)(group1 % 171);
    group1 /= 171;

    (*output)[3] = (uint32_t)(group1 % 171);
    group1 /= 171;

    (*output)[2] = (uint32_t)(group1 % 171);
    group1 /= 171;

    (*output)[1] = (uint32_t)(group1 % 171);
    group1 /= 171;

    (*output)[0] = (uint32_t)(group1 % 171);
    group1 /= 171;
    *output += 7;


    *input += 13;
}

// Unpack 13 bytes into 14 values
void Ultrapack_Decompress172(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 52) - 1;
    (*output)[6] = (uint32_t)(group0 % 172);
    group0 /= 172;

    (*output)[5] = (uint32_t)(group0 % 172);
    group0 /= 172;

    (*output)[4] = (uint32_t)(group0 % 172);
    group0 /= 172;

    (*output)[3] = (uint32_t)(group0 % 172);
    group0 /= 172;

    (*output)[2] = (uint32_t)(group0 % 172);
    group0 /= 172;

    (*output)[1] = (uint32_t)(group0 % 172);
    group0 /= 172;

    (*output)[0] = (uint32_t)(group0 % 172);
    group0 /= 172;
    *output += 7;

    uint64_t group1 = (*(uint64_t *)((*input) + 6)) >> 4;    group1 &= (1ull << 52) - 1;
    (*output)[6] = (uint32_t)(group1 % 172);
    group1 /= 172;

    (*output)[5] = (uint32_t)(group1 % 172);
    group1 /= 172;

    (*output)[4] = (uint32_t)(group1 % 172);
    group1 /= 172;

    (*output)[3] = (uint32_t)(group1 % 172);
    group1 /= 172;

    (*output)[2] = (uint32_t)(group1 % 172);
    group1 /= 172;

    (*output)[1] = (uint32_t)(group1 % 172);
    group1 /= 172;

    (*output)[0] = (uint32_t)(group1 % 172);
    group1 /= 172;
    *output += 7;


    *input += 13;
}

// Unpack 15 bytes into 16 values
void Ultrapack_Decompress173(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 15) - 1;
    (*output)[1] = (uint32_t)(group0 % 173);
    group0 /= 173;

    (*output)[0] = (uint32_t)(group0 % 173);
    group0 /= 173;
    *output += 2;

    uint64_t group1 = (*(uint64_t *)((*input) + 1)) >> 7;    group1 &= (1ull << 15) - 1;
    (*output)[1] = (uint32_t)(group1 % 173);
    group1 /= 173;

    (*output)[0] = (uint32_t)(group1 % 173);
    group1 /= 173;
    *output += 2;

    uint64_t group2 = (*(uint64_t *)((*input) + 3)) >> 6;    group2 &= (1ull << 15) - 1;
    (*output)[1] = (uint32_t)(group2 % 173);
    group2 /= 173;

    (*output)[0] = (uint32_t)(group2 % 173);
    group2 /= 173;
    *output += 2;

    uint64_t group3 = (*(uint64_t *)((*input) + 5)) >> 5;    group3 &= (1ull << 15) - 1;
    (*output)[1] = (uint32_t)(group3 % 173);
    group3 /= 173;

    (*output)[0] = (uint32_t)(group3 % 173);
    group3 /= 173;
    *output += 2;

    uint64_t group4 = (*(uint64_t *)((*input) + 7)) >> 4;    group4 &= (1ull << 15) - 1;
    (*output)[1] = (uint32_t)(group4 % 173);
    group4 /= 173;

    (*output)[0] = (uint32_t)(group4 % 173);
    group4 /= 173;
    *output += 2;

    uint64_t group5 = (*(uint64_t *)((*input) + 9)) >> 3;    group5 &= (1ull << 15) - 1;
    (*output)[1] = (uint32_t)(group5 % 173);
    group5 /= 173;

    (*output)[0] = (uint32_t)(group5 % 173);
    group5 /= 173;
    *output += 2;

    uint64_t group6 = (*(uint64_t *)((*input) + 11)) >> 2;    group6 &= (1ull << 15) - 1;
    (*output)[1] = (uint32_t)(group6 % 173);
    group6 /= 173;

    (*output)[0] = (uint32_t)(group6 % 173);
    group6 /= 173;
    *output += 2;

    uint64_t group7 = (*(uint64_t *)((*input) + 13)) >> 1;    group7 &= (1ull << 15) - 1;
    (*output)[1] = (uint32_t)(group7 % 173);
    group7 /= 173;

    (*output)[0] = (uint32_t)(group7 % 173);
    group7 /= 173;
    *output += 2;


    *input += 15;
}

// Unpack 15 bytes into 16 values
void Ultrapack_Decompress174(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 15) - 1;
    (*output)[1] = (uint32_t)(group0 % 174);
    group0 /= 174;

    (*output)[0] = (uint32_t)(group0 % 174);
    group0 /= 174;
    *output += 2;

    uint64_t group1 = (*(uint64_t *)((*input) + 1)) >> 7;    group1 &= (1ull << 15) - 1;
    (*output)[1] = (uint32_t)(group1 % 174);
    group1 /= 174;

    (*output)[0] = (uint32_t)(group1 % 174);
    group1 /= 174;
    *output += 2;

    uint64_t group2 = (*(uint64_t *)((*input) + 3)) >> 6;    group2 &= (1ull << 15) - 1;
    (*output)[1] = (uint32_t)(group2 % 174);
    group2 /= 174;

    (*output)[0] = (uint32_t)(group2 % 174);
    group2 /= 174;
    *output += 2;

    uint64_t group3 = (*(uint64_t *)((*input) + 5)) >> 5;    group3 &= (1ull << 15) - 1;
    (*output)[1] = (uint32_t)(group3 % 174);
    group3 /= 174;

    (*output)[0] = (uint32_t)(group3 % 174);
    group3 /= 174;
    *output += 2;

    uint64_t group4 = (*(uint64_t *)((*input) + 7)) >> 4;    group4 &= (1ull << 15) - 1;
    (*output)[1] = (uint32_t)(group4 % 174);
    group4 /= 174;

    (*output)[0] = (uint32_t)(group4 % 174);
    group4 /= 174;
    *output += 2;

    uint64_t group5 = (*(uint64_t *)((*input) + 9)) >> 3;    group5 &= (1ull << 15) - 1;
    (*output)[1] = (uint32_t)(group5 % 174);
    group5 /= 174;

    (*output)[0] = (uint32_t)(group5 % 174);
    group5 /= 174;
    *output += 2;

    uint64_t group6 = (*(uint64_t *)((*input) + 11)) >> 2;    group6 &= (1ull << 15) - 1;
    (*output)[1] = (uint32_t)(group6 % 174);
    group6 /= 174;

    (*output)[0] = (uint32_t)(group6 % 174);
    group6 /= 174;
    *output += 2;

    uint64_t group7 = (*(uint64_t *)((*input) + 13)) >> 1;    group7 &= (1ull << 15) - 1;
    (*output)[1] = (uint32_t)(group7 % 174);
    group7 /= 174;

    (*output)[0] = (uint32_t)(group7 % 174);
    group7 /= 174;
    *output += 2;


    *input += 15;
}

// Unpack 15 bytes into 16 values
void Ultrapack_Decompress175(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 15) - 1;
    (*output)[1] = (uint32_t)(group0 % 175);
    group0 /= 175;

    (*output)[0] = (uint32_t)(group0 % 175);
    group0 /= 175;
    *output += 2;

    uint64_t group1 = (*(uint64_t *)((*input) + 1)) >> 7;    group1 &= (1ull << 15) - 1;
    (*output)[1] = (uint32_t)(group1 % 175);
    group1 /= 175;

    (*output)[0] = (uint32_t)(group1 % 175);
    group1 /= 175;
    *output += 2;

    uint64_t group2 = (*(uint64_t *)((*input) + 3)) >> 6;    group2 &= (1ull << 15) - 1;
    (*output)[1] = (uint32_t)(group2 % 175);
    group2 /= 175;

    (*output)[0] = (uint32_t)(group2 % 175);
    group2 /= 175;
    *output += 2;

    uint64_t group3 = (*(uint64_t *)((*input) + 5)) >> 5;    group3 &= (1ull << 15) - 1;
    (*output)[1] = (uint32_t)(group3 % 175);
    group3 /= 175;

    (*output)[0] = (uint32_t)(group3 % 175);
    group3 /= 175;
    *output += 2;

    uint64_t group4 = (*(uint64_t *)((*input) + 7)) >> 4;    group4 &= (1ull << 15) - 1;
    (*output)[1] = (uint32_t)(group4 % 175);
    group4 /= 175;

    (*output)[0] = (uint32_t)(group4 % 175);
    group4 /= 175;
    *output += 2;

    uint64_t group5 = (*(uint64_t *)((*input) + 9)) >> 3;    group5 &= (1ull << 15) - 1;
    (*output)[1] = (uint32_t)(group5 % 175);
    group5 /= 175;

    (*output)[0] = (uint32_t)(group5 % 175);
    group5 /= 175;
    *output += 2;

    uint64_t group6 = (*(uint64_t *)((*input) + 11)) >> 2;    group6 &= (1ull << 15) - 1;
    (*output)[1] = (uint32_t)(group6 % 175);
    group6 /= 175;

    (*output)[0] = (uint32_t)(group6 % 175);
    group6 /= 175;
    *output += 2;

    uint64_t group7 = (*(uint64_t *)((*input) + 13)) >> 1;    group7 &= (1ull << 15) - 1;
    (*output)[1] = (uint32_t)(group7 % 175);
    group7 /= 175;

    (*output)[0] = (uint32_t)(group7 % 175);
    group7 /= 175;
    *output += 2;


    *input += 15;
}

// Unpack 15 bytes into 16 values
void Ultrapack_Decompress176(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 15) - 1;
    (*output)[1] = (uint32_t)(group0 % 176);
    group0 /= 176;

    (*output)[0] = (uint32_t)(group0 % 176);
    group0 /= 176;
    *output += 2;

    uint64_t group1 = (*(uint64_t *)((*input) + 1)) >> 7;    group1 &= (1ull << 15) - 1;
    (*output)[1] = (uint32_t)(group1 % 176);
    group1 /= 176;

    (*output)[0] = (uint32_t)(group1 % 176);
    group1 /= 176;
    *output += 2;

    uint64_t group2 = (*(uint64_t *)((*input) + 3)) >> 6;    group2 &= (1ull << 15) - 1;
    (*output)[1] = (uint32_t)(group2 % 176);
    group2 /= 176;

    (*output)[0] = (uint32_t)(group2 % 176);
    group2 /= 176;
    *output += 2;

    uint64_t group3 = (*(uint64_t *)((*input) + 5)) >> 5;    group3 &= (1ull << 15) - 1;
    (*output)[1] = (uint32_t)(group3 % 176);
    group3 /= 176;

    (*output)[0] = (uint32_t)(group3 % 176);
    group3 /= 176;
    *output += 2;

    uint64_t group4 = (*(uint64_t *)((*input) + 7)) >> 4;    group4 &= (1ull << 15) - 1;
    (*output)[1] = (uint32_t)(group4 % 176);
    group4 /= 176;

    (*output)[0] = (uint32_t)(group4 % 176);
    group4 /= 176;
    *output += 2;

    uint64_t group5 = (*(uint64_t *)((*input) + 9)) >> 3;    group5 &= (1ull << 15) - 1;
    (*output)[1] = (uint32_t)(group5 % 176);
    group5 /= 176;

    (*output)[0] = (uint32_t)(group5 % 176);
    group5 /= 176;
    *output += 2;

    uint64_t group6 = (*(uint64_t *)((*input) + 11)) >> 2;    group6 &= (1ull << 15) - 1;
    (*output)[1] = (uint32_t)(group6 % 176);
    group6 /= 176;

    (*output)[0] = (uint32_t)(group6 % 176);
    group6 /= 176;
    *output += 2;

    uint64_t group7 = (*(uint64_t *)((*input) + 13)) >> 1;    group7 &= (1ull << 15) - 1;
    (*output)[1] = (uint32_t)(group7 % 176);
    group7 /= 176;

    (*output)[0] = (uint32_t)(group7 % 176);
    group7 /= 176;
    *output += 2;


    *input += 15;
}

// Unpack 15 bytes into 16 values
void Ultrapack_Decompress177(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 15) - 1;
    (*output)[1] = (uint32_t)(group0 % 177);
    group0 /= 177;

    (*output)[0] = (uint32_t)(group0 % 177);
    group0 /= 177;
    *output += 2;

    uint64_t group1 = (*(uint64_t *)((*input) + 1)) >> 7;    group1 &= (1ull << 15) - 1;
    (*output)[1] = (uint32_t)(group1 % 177);
    group1 /= 177;

    (*output)[0] = (uint32_t)(group1 % 177);
    group1 /= 177;
    *output += 2;

    uint64_t group2 = (*(uint64_t *)((*input) + 3)) >> 6;    group2 &= (1ull << 15) - 1;
    (*output)[1] = (uint32_t)(group2 % 177);
    group2 /= 177;

    (*output)[0] = (uint32_t)(group2 % 177);
    group2 /= 177;
    *output += 2;

    uint64_t group3 = (*(uint64_t *)((*input) + 5)) >> 5;    group3 &= (1ull << 15) - 1;
    (*output)[1] = (uint32_t)(group3 % 177);
    group3 /= 177;

    (*output)[0] = (uint32_t)(group3 % 177);
    group3 /= 177;
    *output += 2;

    uint64_t group4 = (*(uint64_t *)((*input) + 7)) >> 4;    group4 &= (1ull << 15) - 1;
    (*output)[1] = (uint32_t)(group4 % 177);
    group4 /= 177;

    (*output)[0] = (uint32_t)(group4 % 177);
    group4 /= 177;
    *output += 2;

    uint64_t group5 = (*(uint64_t *)((*input) + 9)) >> 3;    group5 &= (1ull << 15) - 1;
    (*output)[1] = (uint32_t)(group5 % 177);
    group5 /= 177;

    (*output)[0] = (uint32_t)(group5 % 177);
    group5 /= 177;
    *output += 2;

    uint64_t group6 = (*(uint64_t *)((*input) + 11)) >> 2;    group6 &= (1ull << 15) - 1;
    (*output)[1] = (uint32_t)(group6 % 177);
    group6 /= 177;

    (*output)[0] = (uint32_t)(group6 % 177);
    group6 /= 177;
    *output += 2;

    uint64_t group7 = (*(uint64_t *)((*input) + 13)) >> 1;    group7 &= (1ull << 15) - 1;
    (*output)[1] = (uint32_t)(group7 % 177);
    group7 /= 177;

    (*output)[0] = (uint32_t)(group7 % 177);
    group7 /= 177;
    *output += 2;


    *input += 15;
}

// Unpack 15 bytes into 16 values
void Ultrapack_Decompress178(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 15) - 1;
    (*output)[1] = (uint32_t)(group0 % 178);
    group0 /= 178;

    (*output)[0] = (uint32_t)(group0 % 178);
    group0 /= 178;
    *output += 2;

    uint64_t group1 = (*(uint64_t *)((*input) + 1)) >> 7;    group1 &= (1ull << 15) - 1;
    (*output)[1] = (uint32_t)(group1 % 178);
    group1 /= 178;

    (*output)[0] = (uint32_t)(group1 % 178);
    group1 /= 178;
    *output += 2;

    uint64_t group2 = (*(uint64_t *)((*input) + 3)) >> 6;    group2 &= (1ull << 15) - 1;
    (*output)[1] = (uint32_t)(group2 % 178);
    group2 /= 178;

    (*output)[0] = (uint32_t)(group2 % 178);
    group2 /= 178;
    *output += 2;

    uint64_t group3 = (*(uint64_t *)((*input) + 5)) >> 5;    group3 &= (1ull << 15) - 1;
    (*output)[1] = (uint32_t)(group3 % 178);
    group3 /= 178;

    (*output)[0] = (uint32_t)(group3 % 178);
    group3 /= 178;
    *output += 2;

    uint64_t group4 = (*(uint64_t *)((*input) + 7)) >> 4;    group4 &= (1ull << 15) - 1;
    (*output)[1] = (uint32_t)(group4 % 178);
    group4 /= 178;

    (*output)[0] = (uint32_t)(group4 % 178);
    group4 /= 178;
    *output += 2;

    uint64_t group5 = (*(uint64_t *)((*input) + 9)) >> 3;    group5 &= (1ull << 15) - 1;
    (*output)[1] = (uint32_t)(group5 % 178);
    group5 /= 178;

    (*output)[0] = (uint32_t)(group5 % 178);
    group5 /= 178;
    *output += 2;

    uint64_t group6 = (*(uint64_t *)((*input) + 11)) >> 2;    group6 &= (1ull << 15) - 1;
    (*output)[1] = (uint32_t)(group6 % 178);
    group6 /= 178;

    (*output)[0] = (uint32_t)(group6 % 178);
    group6 /= 178;
    *output += 2;

    uint64_t group7 = (*(uint64_t *)((*input) + 13)) >> 1;    group7 &= (1ull << 15) - 1;
    (*output)[1] = (uint32_t)(group7 % 178);
    group7 /= 178;

    (*output)[0] = (uint32_t)(group7 % 178);
    group7 /= 178;
    *output += 2;


    *input += 15;
}

// Unpack 15 bytes into 16 values
void Ultrapack_Decompress179(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 15) - 1;
    (*output)[1] = (uint32_t)(group0 % 179);
    group0 /= 179;

    (*output)[0] = (uint32_t)(group0 % 179);
    group0 /= 179;
    *output += 2;

    uint64_t group1 = (*(uint64_t *)((*input) + 1)) >> 7;    group1 &= (1ull << 15) - 1;
    (*output)[1] = (uint32_t)(group1 % 179);
    group1 /= 179;

    (*output)[0] = (uint32_t)(group1 % 179);
    group1 /= 179;
    *output += 2;

    uint64_t group2 = (*(uint64_t *)((*input) + 3)) >> 6;    group2 &= (1ull << 15) - 1;
    (*output)[1] = (uint32_t)(group2 % 179);
    group2 /= 179;

    (*output)[0] = (uint32_t)(group2 % 179);
    group2 /= 179;
    *output += 2;

    uint64_t group3 = (*(uint64_t *)((*input) + 5)) >> 5;    group3 &= (1ull << 15) - 1;
    (*output)[1] = (uint32_t)(group3 % 179);
    group3 /= 179;

    (*output)[0] = (uint32_t)(group3 % 179);
    group3 /= 179;
    *output += 2;

    uint64_t group4 = (*(uint64_t *)((*input) + 7)) >> 4;    group4 &= (1ull << 15) - 1;
    (*output)[1] = (uint32_t)(group4 % 179);
    group4 /= 179;

    (*output)[0] = (uint32_t)(group4 % 179);
    group4 /= 179;
    *output += 2;

    uint64_t group5 = (*(uint64_t *)((*input) + 9)) >> 3;    group5 &= (1ull << 15) - 1;
    (*output)[1] = (uint32_t)(group5 % 179);
    group5 /= 179;

    (*output)[0] = (uint32_t)(group5 % 179);
    group5 /= 179;
    *output += 2;

    uint64_t group6 = (*(uint64_t *)((*input) + 11)) >> 2;    group6 &= (1ull << 15) - 1;
    (*output)[1] = (uint32_t)(group6 % 179);
    group6 /= 179;

    (*output)[0] = (uint32_t)(group6 % 179);
    group6 /= 179;
    *output += 2;

    uint64_t group7 = (*(uint64_t *)((*input) + 13)) >> 1;    group7 &= (1ull << 15) - 1;
    (*output)[1] = (uint32_t)(group7 % 179);
    group7 /= 179;

    (*output)[0] = (uint32_t)(group7 % 179);
    group7 /= 179;
    *output += 2;


    *input += 15;
}

// Unpack 15 bytes into 16 values
void Ultrapack_Decompress180(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 15) - 1;
    (*output)[1] = (uint32_t)(group0 % 180);
    group0 /= 180;

    (*output)[0] = (uint32_t)(group0 % 180);
    group0 /= 180;
    *output += 2;

    uint64_t group1 = (*(uint64_t *)((*input) + 1)) >> 7;    group1 &= (1ull << 15) - 1;
    (*output)[1] = (uint32_t)(group1 % 180);
    group1 /= 180;

    (*output)[0] = (uint32_t)(group1 % 180);
    group1 /= 180;
    *output += 2;

    uint64_t group2 = (*(uint64_t *)((*input) + 3)) >> 6;    group2 &= (1ull << 15) - 1;
    (*output)[1] = (uint32_t)(group2 % 180);
    group2 /= 180;

    (*output)[0] = (uint32_t)(group2 % 180);
    group2 /= 180;
    *output += 2;

    uint64_t group3 = (*(uint64_t *)((*input) + 5)) >> 5;    group3 &= (1ull << 15) - 1;
    (*output)[1] = (uint32_t)(group3 % 180);
    group3 /= 180;

    (*output)[0] = (uint32_t)(group3 % 180);
    group3 /= 180;
    *output += 2;

    uint64_t group4 = (*(uint64_t *)((*input) + 7)) >> 4;    group4 &= (1ull << 15) - 1;
    (*output)[1] = (uint32_t)(group4 % 180);
    group4 /= 180;

    (*output)[0] = (uint32_t)(group4 % 180);
    group4 /= 180;
    *output += 2;

    uint64_t group5 = (*(uint64_t *)((*input) + 9)) >> 3;    group5 &= (1ull << 15) - 1;
    (*output)[1] = (uint32_t)(group5 % 180);
    group5 /= 180;

    (*output)[0] = (uint32_t)(group5 % 180);
    group5 /= 180;
    *output += 2;

    uint64_t group6 = (*(uint64_t *)((*input) + 11)) >> 2;    group6 &= (1ull << 15) - 1;
    (*output)[1] = (uint32_t)(group6 % 180);
    group6 /= 180;

    (*output)[0] = (uint32_t)(group6 % 180);
    group6 /= 180;
    *output += 2;

    uint64_t group7 = (*(uint64_t *)((*input) + 13)) >> 1;    group7 &= (1ull << 15) - 1;
    (*output)[1] = (uint32_t)(group7 % 180);
    group7 /= 180;

    (*output)[0] = (uint32_t)(group7 % 180);
    group7 /= 180;
    *output += 2;


    *input += 15;
}

// Unpack 15 bytes into 16 values
void Ultrapack_Decompress181(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 15) - 1;
    (*output)[1] = (uint32_t)(group0 % 181);
    group0 /= 181;

    (*output)[0] = (uint32_t)(group0 % 181);
    group0 /= 181;
    *output += 2;

    uint64_t group1 = (*(uint64_t *)((*input) + 1)) >> 7;    group1 &= (1ull << 15) - 1;
    (*output)[1] = (uint32_t)(group1 % 181);
    group1 /= 181;

    (*output)[0] = (uint32_t)(group1 % 181);
    group1 /= 181;
    *output += 2;

    uint64_t group2 = (*(uint64_t *)((*input) + 3)) >> 6;    group2 &= (1ull << 15) - 1;
    (*output)[1] = (uint32_t)(group2 % 181);
    group2 /= 181;

    (*output)[0] = (uint32_t)(group2 % 181);
    group2 /= 181;
    *output += 2;

    uint64_t group3 = (*(uint64_t *)((*input) + 5)) >> 5;    group3 &= (1ull << 15) - 1;
    (*output)[1] = (uint32_t)(group3 % 181);
    group3 /= 181;

    (*output)[0] = (uint32_t)(group3 % 181);
    group3 /= 181;
    *output += 2;

    uint64_t group4 = (*(uint64_t *)((*input) + 7)) >> 4;    group4 &= (1ull << 15) - 1;
    (*output)[1] = (uint32_t)(group4 % 181);
    group4 /= 181;

    (*output)[0] = (uint32_t)(group4 % 181);
    group4 /= 181;
    *output += 2;

    uint64_t group5 = (*(uint64_t *)((*input) + 9)) >> 3;    group5 &= (1ull << 15) - 1;
    (*output)[1] = (uint32_t)(group5 % 181);
    group5 /= 181;

    (*output)[0] = (uint32_t)(group5 % 181);
    group5 /= 181;
    *output += 2;

    uint64_t group6 = (*(uint64_t *)((*input) + 11)) >> 2;    group6 &= (1ull << 15) - 1;
    (*output)[1] = (uint32_t)(group6 % 181);
    group6 /= 181;

    (*output)[0] = (uint32_t)(group6 % 181);
    group6 /= 181;
    *output += 2;

    uint64_t group7 = (*(uint64_t *)((*input) + 13)) >> 1;    group7 &= (1ull << 15) - 1;
    (*output)[1] = (uint32_t)(group7 % 181);
    group7 /= 181;

    (*output)[0] = (uint32_t)(group7 % 181);
    group7 /= 181;
    *output += 2;


    *input += 15;
}

// Unpack 19 bytes into 20 values
void Ultrapack_Decompress182(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 38) - 1;
    (*output)[4] = (uint32_t)(group0 % 182);
    group0 /= 182;

    (*output)[3] = (uint32_t)(group0 % 182);
    group0 /= 182;

    (*output)[2] = (uint32_t)(group0 % 182);
    group0 /= 182;

    (*output)[1] = (uint32_t)(group0 % 182);
    group0 /= 182;

    (*output)[0] = (uint32_t)(group0 % 182);
    group0 /= 182;
    *output += 5;

    uint64_t group1 = (*(uint64_t *)((*input) + 4)) >> 6;    group1 &= (1ull << 38) - 1;
    (*output)[4] = (uint32_t)(group1 % 182);
    group1 /= 182;

    (*output)[3] = (uint32_t)(group1 % 182);
    group1 /= 182;

    (*output)[2] = (uint32_t)(group1 % 182);
    group1 /= 182;

    (*output)[1] = (uint32_t)(group1 % 182);
    group1 /= 182;

    (*output)[0] = (uint32_t)(group1 % 182);
    group1 /= 182;
    *output += 5;

    uint64_t group2 = (*(uint64_t *)((*input) + 9)) >> 4;    group2 &= (1ull << 38) - 1;
    (*output)[4] = (uint32_t)(group2 % 182);
    group2 /= 182;

    (*output)[3] = (uint32_t)(group2 % 182);
    group2 /= 182;

    (*output)[2] = (uint32_t)(group2 % 182);
    group2 /= 182;

    (*output)[1] = (uint32_t)(group2 % 182);
    group2 /= 182;

    (*output)[0] = (uint32_t)(group2 % 182);
    group2 /= 182;
    *output += 5;

    uint64_t group3 = (*(uint64_t *)((*input) + 14)) >> 2;    group3 &= (1ull << 38) - 1;
    (*output)[4] = (uint32_t)(group3 % 182);
    group3 /= 182;

    (*output)[3] = (uint32_t)(group3 % 182);
    group3 /= 182;

    (*output)[2] = (uint32_t)(group3 % 182);
    group3 /= 182;

    (*output)[1] = (uint32_t)(group3 % 182);
    group3 /= 182;

    (*output)[0] = (uint32_t)(group3 % 182);
    group3 /= 182;
    *output += 5;


    *input += 19;
}

// Unpack 19 bytes into 20 values
void Ultrapack_Decompress183(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 38) - 1;
    (*output)[4] = (uint32_t)(group0 % 183);
    group0 /= 183;

    (*output)[3] = (uint32_t)(group0 % 183);
    group0 /= 183;

    (*output)[2] = (uint32_t)(group0 % 183);
    group0 /= 183;

    (*output)[1] = (uint32_t)(group0 % 183);
    group0 /= 183;

    (*output)[0] = (uint32_t)(group0 % 183);
    group0 /= 183;
    *output += 5;

    uint64_t group1 = (*(uint64_t *)((*input) + 4)) >> 6;    group1 &= (1ull << 38) - 1;
    (*output)[4] = (uint32_t)(group1 % 183);
    group1 /= 183;

    (*output)[3] = (uint32_t)(group1 % 183);
    group1 /= 183;

    (*output)[2] = (uint32_t)(group1 % 183);
    group1 /= 183;

    (*output)[1] = (uint32_t)(group1 % 183);
    group1 /= 183;

    (*output)[0] = (uint32_t)(group1 % 183);
    group1 /= 183;
    *output += 5;

    uint64_t group2 = (*(uint64_t *)((*input) + 9)) >> 4;    group2 &= (1ull << 38) - 1;
    (*output)[4] = (uint32_t)(group2 % 183);
    group2 /= 183;

    (*output)[3] = (uint32_t)(group2 % 183);
    group2 /= 183;

    (*output)[2] = (uint32_t)(group2 % 183);
    group2 /= 183;

    (*output)[1] = (uint32_t)(group2 % 183);
    group2 /= 183;

    (*output)[0] = (uint32_t)(group2 % 183);
    group2 /= 183;
    *output += 5;

    uint64_t group3 = (*(uint64_t *)((*input) + 14)) >> 2;    group3 &= (1ull << 38) - 1;
    (*output)[4] = (uint32_t)(group3 % 183);
    group3 /= 183;

    (*output)[3] = (uint32_t)(group3 % 183);
    group3 /= 183;

    (*output)[2] = (uint32_t)(group3 % 183);
    group3 /= 183;

    (*output)[1] = (uint32_t)(group3 % 183);
    group3 /= 183;

    (*output)[0] = (uint32_t)(group3 % 183);
    group3 /= 183;
    *output += 5;


    *input += 19;
}

// Unpack 19 bytes into 20 values
void Ultrapack_Decompress184(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 38) - 1;
    (*output)[4] = (uint32_t)(group0 % 184);
    group0 /= 184;

    (*output)[3] = (uint32_t)(group0 % 184);
    group0 /= 184;

    (*output)[2] = (uint32_t)(group0 % 184);
    group0 /= 184;

    (*output)[1] = (uint32_t)(group0 % 184);
    group0 /= 184;

    (*output)[0] = (uint32_t)(group0 % 184);
    group0 /= 184;
    *output += 5;

    uint64_t group1 = (*(uint64_t *)((*input) + 4)) >> 6;    group1 &= (1ull << 38) - 1;
    (*output)[4] = (uint32_t)(group1 % 184);
    group1 /= 184;

    (*output)[3] = (uint32_t)(group1 % 184);
    group1 /= 184;

    (*output)[2] = (uint32_t)(group1 % 184);
    group1 /= 184;

    (*output)[1] = (uint32_t)(group1 % 184);
    group1 /= 184;

    (*output)[0] = (uint32_t)(group1 % 184);
    group1 /= 184;
    *output += 5;

    uint64_t group2 = (*(uint64_t *)((*input) + 9)) >> 4;    group2 &= (1ull << 38) - 1;
    (*output)[4] = (uint32_t)(group2 % 184);
    group2 /= 184;

    (*output)[3] = (uint32_t)(group2 % 184);
    group2 /= 184;

    (*output)[2] = (uint32_t)(group2 % 184);
    group2 /= 184;

    (*output)[1] = (uint32_t)(group2 % 184);
    group2 /= 184;

    (*output)[0] = (uint32_t)(group2 % 184);
    group2 /= 184;
    *output += 5;

    uint64_t group3 = (*(uint64_t *)((*input) + 14)) >> 2;    group3 &= (1ull << 38) - 1;
    (*output)[4] = (uint32_t)(group3 % 184);
    group3 /= 184;

    (*output)[3] = (uint32_t)(group3 % 184);
    group3 /= 184;

    (*output)[2] = (uint32_t)(group3 % 184);
    group3 /= 184;

    (*output)[1] = (uint32_t)(group3 % 184);
    group3 /= 184;

    (*output)[0] = (uint32_t)(group3 % 184);
    group3 /= 184;
    *output += 5;


    *input += 19;
}

// Unpack 19 bytes into 20 values
void Ultrapack_Decompress185(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 38) - 1;
    (*output)[4] = (uint32_t)(group0 % 185);
    group0 /= 185;

    (*output)[3] = (uint32_t)(group0 % 185);
    group0 /= 185;

    (*output)[2] = (uint32_t)(group0 % 185);
    group0 /= 185;

    (*output)[1] = (uint32_t)(group0 % 185);
    group0 /= 185;

    (*output)[0] = (uint32_t)(group0 % 185);
    group0 /= 185;
    *output += 5;

    uint64_t group1 = (*(uint64_t *)((*input) + 4)) >> 6;    group1 &= (1ull << 38) - 1;
    (*output)[4] = (uint32_t)(group1 % 185);
    group1 /= 185;

    (*output)[3] = (uint32_t)(group1 % 185);
    group1 /= 185;

    (*output)[2] = (uint32_t)(group1 % 185);
    group1 /= 185;

    (*output)[1] = (uint32_t)(group1 % 185);
    group1 /= 185;

    (*output)[0] = (uint32_t)(group1 % 185);
    group1 /= 185;
    *output += 5;

    uint64_t group2 = (*(uint64_t *)((*input) + 9)) >> 4;    group2 &= (1ull << 38) - 1;
    (*output)[4] = (uint32_t)(group2 % 185);
    group2 /= 185;

    (*output)[3] = (uint32_t)(group2 % 185);
    group2 /= 185;

    (*output)[2] = (uint32_t)(group2 % 185);
    group2 /= 185;

    (*output)[1] = (uint32_t)(group2 % 185);
    group2 /= 185;

    (*output)[0] = (uint32_t)(group2 % 185);
    group2 /= 185;
    *output += 5;

    uint64_t group3 = (*(uint64_t *)((*input) + 14)) >> 2;    group3 &= (1ull << 38) - 1;
    (*output)[4] = (uint32_t)(group3 % 185);
    group3 /= 185;

    (*output)[3] = (uint32_t)(group3 % 185);
    group3 /= 185;

    (*output)[2] = (uint32_t)(group3 % 185);
    group3 /= 185;

    (*output)[1] = (uint32_t)(group3 % 185);
    group3 /= 185;

    (*output)[0] = (uint32_t)(group3 % 185);
    group3 /= 185;
    *output += 5;


    *input += 19;
}

// Unpack 19 bytes into 20 values
void Ultrapack_Decompress186(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 38) - 1;
    (*output)[4] = (uint32_t)(group0 % 186);
    group0 /= 186;

    (*output)[3] = (uint32_t)(group0 % 186);
    group0 /= 186;

    (*output)[2] = (uint32_t)(group0 % 186);
    group0 /= 186;

    (*output)[1] = (uint32_t)(group0 % 186);
    group0 /= 186;

    (*output)[0] = (uint32_t)(group0 % 186);
    group0 /= 186;
    *output += 5;

    uint64_t group1 = (*(uint64_t *)((*input) + 4)) >> 6;    group1 &= (1ull << 38) - 1;
    (*output)[4] = (uint32_t)(group1 % 186);
    group1 /= 186;

    (*output)[3] = (uint32_t)(group1 % 186);
    group1 /= 186;

    (*output)[2] = (uint32_t)(group1 % 186);
    group1 /= 186;

    (*output)[1] = (uint32_t)(group1 % 186);
    group1 /= 186;

    (*output)[0] = (uint32_t)(group1 % 186);
    group1 /= 186;
    *output += 5;

    uint64_t group2 = (*(uint64_t *)((*input) + 9)) >> 4;    group2 &= (1ull << 38) - 1;
    (*output)[4] = (uint32_t)(group2 % 186);
    group2 /= 186;

    (*output)[3] = (uint32_t)(group2 % 186);
    group2 /= 186;

    (*output)[2] = (uint32_t)(group2 % 186);
    group2 /= 186;

    (*output)[1] = (uint32_t)(group2 % 186);
    group2 /= 186;

    (*output)[0] = (uint32_t)(group2 % 186);
    group2 /= 186;
    *output += 5;

    uint64_t group3 = (*(uint64_t *)((*input) + 14)) >> 2;    group3 &= (1ull << 38) - 1;
    (*output)[4] = (uint32_t)(group3 % 186);
    group3 /= 186;

    (*output)[3] = (uint32_t)(group3 % 186);
    group3 /= 186;

    (*output)[2] = (uint32_t)(group3 % 186);
    group3 /= 186;

    (*output)[1] = (uint32_t)(group3 % 186);
    group3 /= 186;

    (*output)[0] = (uint32_t)(group3 % 186);
    group3 /= 186;
    *output += 5;


    *input += 19;
}

// Unpack 19 bytes into 20 values
void Ultrapack_Decompress187(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 38) - 1;
    (*output)[4] = (uint32_t)(group0 % 187);
    group0 /= 187;

    (*output)[3] = (uint32_t)(group0 % 187);
    group0 /= 187;

    (*output)[2] = (uint32_t)(group0 % 187);
    group0 /= 187;

    (*output)[1] = (uint32_t)(group0 % 187);
    group0 /= 187;

    (*output)[0] = (uint32_t)(group0 % 187);
    group0 /= 187;
    *output += 5;

    uint64_t group1 = (*(uint64_t *)((*input) + 4)) >> 6;    group1 &= (1ull << 38) - 1;
    (*output)[4] = (uint32_t)(group1 % 187);
    group1 /= 187;

    (*output)[3] = (uint32_t)(group1 % 187);
    group1 /= 187;

    (*output)[2] = (uint32_t)(group1 % 187);
    group1 /= 187;

    (*output)[1] = (uint32_t)(group1 % 187);
    group1 /= 187;

    (*output)[0] = (uint32_t)(group1 % 187);
    group1 /= 187;
    *output += 5;

    uint64_t group2 = (*(uint64_t *)((*input) + 9)) >> 4;    group2 &= (1ull << 38) - 1;
    (*output)[4] = (uint32_t)(group2 % 187);
    group2 /= 187;

    (*output)[3] = (uint32_t)(group2 % 187);
    group2 /= 187;

    (*output)[2] = (uint32_t)(group2 % 187);
    group2 /= 187;

    (*output)[1] = (uint32_t)(group2 % 187);
    group2 /= 187;

    (*output)[0] = (uint32_t)(group2 % 187);
    group2 /= 187;
    *output += 5;

    uint64_t group3 = (*(uint64_t *)((*input) + 14)) >> 2;    group3 &= (1ull << 38) - 1;
    (*output)[4] = (uint32_t)(group3 % 187);
    group3 /= 187;

    (*output)[3] = (uint32_t)(group3 % 187);
    group3 /= 187;

    (*output)[2] = (uint32_t)(group3 % 187);
    group3 /= 187;

    (*output)[1] = (uint32_t)(group3 % 187);
    group3 /= 187;

    (*output)[0] = (uint32_t)(group3 % 187);
    group3 /= 187;
    *output += 5;


    *input += 19;
}

// Unpack 19 bytes into 20 values
void Ultrapack_Decompress188(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 38) - 1;
    (*output)[4] = (uint32_t)(group0 % 188);
    group0 /= 188;

    (*output)[3] = (uint32_t)(group0 % 188);
    group0 /= 188;

    (*output)[2] = (uint32_t)(group0 % 188);
    group0 /= 188;

    (*output)[1] = (uint32_t)(group0 % 188);
    group0 /= 188;

    (*output)[0] = (uint32_t)(group0 % 188);
    group0 /= 188;
    *output += 5;

    uint64_t group1 = (*(uint64_t *)((*input) + 4)) >> 6;    group1 &= (1ull << 38) - 1;
    (*output)[4] = (uint32_t)(group1 % 188);
    group1 /= 188;

    (*output)[3] = (uint32_t)(group1 % 188);
    group1 /= 188;

    (*output)[2] = (uint32_t)(group1 % 188);
    group1 /= 188;

    (*output)[1] = (uint32_t)(group1 % 188);
    group1 /= 188;

    (*output)[0] = (uint32_t)(group1 % 188);
    group1 /= 188;
    *output += 5;

    uint64_t group2 = (*(uint64_t *)((*input) + 9)) >> 4;    group2 &= (1ull << 38) - 1;
    (*output)[4] = (uint32_t)(group2 % 188);
    group2 /= 188;

    (*output)[3] = (uint32_t)(group2 % 188);
    group2 /= 188;

    (*output)[2] = (uint32_t)(group2 % 188);
    group2 /= 188;

    (*output)[1] = (uint32_t)(group2 % 188);
    group2 /= 188;

    (*output)[0] = (uint32_t)(group2 % 188);
    group2 /= 188;
    *output += 5;

    uint64_t group3 = (*(uint64_t *)((*input) + 14)) >> 2;    group3 &= (1ull << 38) - 1;
    (*output)[4] = (uint32_t)(group3 % 188);
    group3 /= 188;

    (*output)[3] = (uint32_t)(group3 % 188);
    group3 /= 188;

    (*output)[2] = (uint32_t)(group3 % 188);
    group3 /= 188;

    (*output)[1] = (uint32_t)(group3 % 188);
    group3 /= 188;

    (*output)[0] = (uint32_t)(group3 % 188);
    group3 /= 188;
    *output += 5;


    *input += 19;
}

// Unpack 19 bytes into 20 values
void Ultrapack_Decompress189(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 38) - 1;
    (*output)[4] = (uint32_t)(group0 % 189);
    group0 /= 189;

    (*output)[3] = (uint32_t)(group0 % 189);
    group0 /= 189;

    (*output)[2] = (uint32_t)(group0 % 189);
    group0 /= 189;

    (*output)[1] = (uint32_t)(group0 % 189);
    group0 /= 189;

    (*output)[0] = (uint32_t)(group0 % 189);
    group0 /= 189;
    *output += 5;

    uint64_t group1 = (*(uint64_t *)((*input) + 4)) >> 6;    group1 &= (1ull << 38) - 1;
    (*output)[4] = (uint32_t)(group1 % 189);
    group1 /= 189;

    (*output)[3] = (uint32_t)(group1 % 189);
    group1 /= 189;

    (*output)[2] = (uint32_t)(group1 % 189);
    group1 /= 189;

    (*output)[1] = (uint32_t)(group1 % 189);
    group1 /= 189;

    (*output)[0] = (uint32_t)(group1 % 189);
    group1 /= 189;
    *output += 5;

    uint64_t group2 = (*(uint64_t *)((*input) + 9)) >> 4;    group2 &= (1ull << 38) - 1;
    (*output)[4] = (uint32_t)(group2 % 189);
    group2 /= 189;

    (*output)[3] = (uint32_t)(group2 % 189);
    group2 /= 189;

    (*output)[2] = (uint32_t)(group2 % 189);
    group2 /= 189;

    (*output)[1] = (uint32_t)(group2 % 189);
    group2 /= 189;

    (*output)[0] = (uint32_t)(group2 % 189);
    group2 /= 189;
    *output += 5;

    uint64_t group3 = (*(uint64_t *)((*input) + 14)) >> 2;    group3 &= (1ull << 38) - 1;
    (*output)[4] = (uint32_t)(group3 % 189);
    group3 /= 189;

    (*output)[3] = (uint32_t)(group3 % 189);
    group3 /= 189;

    (*output)[2] = (uint32_t)(group3 % 189);
    group3 /= 189;

    (*output)[1] = (uint32_t)(group3 % 189);
    group3 /= 189;

    (*output)[0] = (uint32_t)(group3 % 189);
    group3 /= 189;
    *output += 5;


    *input += 19;
}

// Unpack 19 bytes into 20 values
void Ultrapack_Decompress190(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 38) - 1;
    (*output)[4] = (uint32_t)(group0 % 190);
    group0 /= 190;

    (*output)[3] = (uint32_t)(group0 % 190);
    group0 /= 190;

    (*output)[2] = (uint32_t)(group0 % 190);
    group0 /= 190;

    (*output)[1] = (uint32_t)(group0 % 190);
    group0 /= 190;

    (*output)[0] = (uint32_t)(group0 % 190);
    group0 /= 190;
    *output += 5;

    uint64_t group1 = (*(uint64_t *)((*input) + 4)) >> 6;    group1 &= (1ull << 38) - 1;
    (*output)[4] = (uint32_t)(group1 % 190);
    group1 /= 190;

    (*output)[3] = (uint32_t)(group1 % 190);
    group1 /= 190;

    (*output)[2] = (uint32_t)(group1 % 190);
    group1 /= 190;

    (*output)[1] = (uint32_t)(group1 % 190);
    group1 /= 190;

    (*output)[0] = (uint32_t)(group1 % 190);
    group1 /= 190;
    *output += 5;

    uint64_t group2 = (*(uint64_t *)((*input) + 9)) >> 4;    group2 &= (1ull << 38) - 1;
    (*output)[4] = (uint32_t)(group2 % 190);
    group2 /= 190;

    (*output)[3] = (uint32_t)(group2 % 190);
    group2 /= 190;

    (*output)[2] = (uint32_t)(group2 % 190);
    group2 /= 190;

    (*output)[1] = (uint32_t)(group2 % 190);
    group2 /= 190;

    (*output)[0] = (uint32_t)(group2 % 190);
    group2 /= 190;
    *output += 5;

    uint64_t group3 = (*(uint64_t *)((*input) + 14)) >> 2;    group3 &= (1ull << 38) - 1;
    (*output)[4] = (uint32_t)(group3 % 190);
    group3 /= 190;

    (*output)[3] = (uint32_t)(group3 % 190);
    group3 /= 190;

    (*output)[2] = (uint32_t)(group3 % 190);
    group3 /= 190;

    (*output)[1] = (uint32_t)(group3 % 190);
    group3 /= 190;

    (*output)[0] = (uint32_t)(group3 % 190);
    group3 /= 190;
    *output += 5;


    *input += 19;
}

// Unpack 19 bytes into 20 values
void Ultrapack_Decompress191(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 38) - 1;
    (*output)[4] = (uint32_t)(group0 % 191);
    group0 /= 191;

    (*output)[3] = (uint32_t)(group0 % 191);
    group0 /= 191;

    (*output)[2] = (uint32_t)(group0 % 191);
    group0 /= 191;

    (*output)[1] = (uint32_t)(group0 % 191);
    group0 /= 191;

    (*output)[0] = (uint32_t)(group0 % 191);
    group0 /= 191;
    *output += 5;

    uint64_t group1 = (*(uint64_t *)((*input) + 4)) >> 6;    group1 &= (1ull << 38) - 1;
    (*output)[4] = (uint32_t)(group1 % 191);
    group1 /= 191;

    (*output)[3] = (uint32_t)(group1 % 191);
    group1 /= 191;

    (*output)[2] = (uint32_t)(group1 % 191);
    group1 /= 191;

    (*output)[1] = (uint32_t)(group1 % 191);
    group1 /= 191;

    (*output)[0] = (uint32_t)(group1 % 191);
    group1 /= 191;
    *output += 5;

    uint64_t group2 = (*(uint64_t *)((*input) + 9)) >> 4;    group2 &= (1ull << 38) - 1;
    (*output)[4] = (uint32_t)(group2 % 191);
    group2 /= 191;

    (*output)[3] = (uint32_t)(group2 % 191);
    group2 /= 191;

    (*output)[2] = (uint32_t)(group2 % 191);
    group2 /= 191;

    (*output)[1] = (uint32_t)(group2 % 191);
    group2 /= 191;

    (*output)[0] = (uint32_t)(group2 % 191);
    group2 /= 191;
    *output += 5;

    uint64_t group3 = (*(uint64_t *)((*input) + 14)) >> 2;    group3 &= (1ull << 38) - 1;
    (*output)[4] = (uint32_t)(group3 % 191);
    group3 /= 191;

    (*output)[3] = (uint32_t)(group3 % 191);
    group3 /= 191;

    (*output)[2] = (uint32_t)(group3 % 191);
    group3 /= 191;

    (*output)[1] = (uint32_t)(group3 % 191);
    group3 /= 191;

    (*output)[0] = (uint32_t)(group3 % 191);
    group3 /= 191;
    *output += 5;


    *input += 19;
}

// Unpack 19 bytes into 20 values
void Ultrapack_Decompress192(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 38) - 1;
    (*output)[4] = (uint32_t)(group0 % 192);
    group0 /= 192;

    (*output)[3] = (uint32_t)(group0 % 192);
    group0 /= 192;

    (*output)[2] = (uint32_t)(group0 % 192);
    group0 /= 192;

    (*output)[1] = (uint32_t)(group0 % 192);
    group0 /= 192;

    (*output)[0] = (uint32_t)(group0 % 192);
    group0 /= 192;
    *output += 5;

    uint64_t group1 = (*(uint64_t *)((*input) + 4)) >> 6;    group1 &= (1ull << 38) - 1;
    (*output)[4] = (uint32_t)(group1 % 192);
    group1 /= 192;

    (*output)[3] = (uint32_t)(group1 % 192);
    group1 /= 192;

    (*output)[2] = (uint32_t)(group1 % 192);
    group1 /= 192;

    (*output)[1] = (uint32_t)(group1 % 192);
    group1 /= 192;

    (*output)[0] = (uint32_t)(group1 % 192);
    group1 /= 192;
    *output += 5;

    uint64_t group2 = (*(uint64_t *)((*input) + 9)) >> 4;    group2 &= (1ull << 38) - 1;
    (*output)[4] = (uint32_t)(group2 % 192);
    group2 /= 192;

    (*output)[3] = (uint32_t)(group2 % 192);
    group2 /= 192;

    (*output)[2] = (uint32_t)(group2 % 192);
    group2 /= 192;

    (*output)[1] = (uint32_t)(group2 % 192);
    group2 /= 192;

    (*output)[0] = (uint32_t)(group2 % 192);
    group2 /= 192;
    *output += 5;

    uint64_t group3 = (*(uint64_t *)((*input) + 14)) >> 2;    group3 &= (1ull << 38) - 1;
    (*output)[4] = (uint32_t)(group3 % 192);
    group3 /= 192;

    (*output)[3] = (uint32_t)(group3 % 192);
    group3 /= 192;

    (*output)[2] = (uint32_t)(group3 % 192);
    group3 /= 192;

    (*output)[1] = (uint32_t)(group3 % 192);
    group3 /= 192;

    (*output)[0] = (uint32_t)(group3 % 192);
    group3 /= 192;
    *output += 5;


    *input += 19;
}

// Unpack 19 bytes into 20 values
void Ultrapack_Decompress193(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 38) - 1;
    (*output)[4] = (uint32_t)(group0 % 193);
    group0 /= 193;

    (*output)[3] = (uint32_t)(group0 % 193);
    group0 /= 193;

    (*output)[2] = (uint32_t)(group0 % 193);
    group0 /= 193;

    (*output)[1] = (uint32_t)(group0 % 193);
    group0 /= 193;

    (*output)[0] = (uint32_t)(group0 % 193);
    group0 /= 193;
    *output += 5;

    uint64_t group1 = (*(uint64_t *)((*input) + 4)) >> 6;    group1 &= (1ull << 38) - 1;
    (*output)[4] = (uint32_t)(group1 % 193);
    group1 /= 193;

    (*output)[3] = (uint32_t)(group1 % 193);
    group1 /= 193;

    (*output)[2] = (uint32_t)(group1 % 193);
    group1 /= 193;

    (*output)[1] = (uint32_t)(group1 % 193);
    group1 /= 193;

    (*output)[0] = (uint32_t)(group1 % 193);
    group1 /= 193;
    *output += 5;

    uint64_t group2 = (*(uint64_t *)((*input) + 9)) >> 4;    group2 &= (1ull << 38) - 1;
    (*output)[4] = (uint32_t)(group2 % 193);
    group2 /= 193;

    (*output)[3] = (uint32_t)(group2 % 193);
    group2 /= 193;

    (*output)[2] = (uint32_t)(group2 % 193);
    group2 /= 193;

    (*output)[1] = (uint32_t)(group2 % 193);
    group2 /= 193;

    (*output)[0] = (uint32_t)(group2 % 193);
    group2 /= 193;
    *output += 5;

    uint64_t group3 = (*(uint64_t *)((*input) + 14)) >> 2;    group3 &= (1ull << 38) - 1;
    (*output)[4] = (uint32_t)(group3 % 193);
    group3 /= 193;

    (*output)[3] = (uint32_t)(group3 % 193);
    group3 /= 193;

    (*output)[2] = (uint32_t)(group3 % 193);
    group3 /= 193;

    (*output)[1] = (uint32_t)(group3 % 193);
    group3 /= 193;

    (*output)[0] = (uint32_t)(group3 % 193);
    group3 /= 193;
    *output += 5;


    *input += 19;
}

// Unpack 19 bytes into 20 values
void Ultrapack_Decompress194(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 38) - 1;
    (*output)[4] = (uint32_t)(group0 % 194);
    group0 /= 194;

    (*output)[3] = (uint32_t)(group0 % 194);
    group0 /= 194;

    (*output)[2] = (uint32_t)(group0 % 194);
    group0 /= 194;

    (*output)[1] = (uint32_t)(group0 % 194);
    group0 /= 194;

    (*output)[0] = (uint32_t)(group0 % 194);
    group0 /= 194;
    *output += 5;

    uint64_t group1 = (*(uint64_t *)((*input) + 4)) >> 6;    group1 &= (1ull << 38) - 1;
    (*output)[4] = (uint32_t)(group1 % 194);
    group1 /= 194;

    (*output)[3] = (uint32_t)(group1 % 194);
    group1 /= 194;

    (*output)[2] = (uint32_t)(group1 % 194);
    group1 /= 194;

    (*output)[1] = (uint32_t)(group1 % 194);
    group1 /= 194;

    (*output)[0] = (uint32_t)(group1 % 194);
    group1 /= 194;
    *output += 5;

    uint64_t group2 = (*(uint64_t *)((*input) + 9)) >> 4;    group2 &= (1ull << 38) - 1;
    (*output)[4] = (uint32_t)(group2 % 194);
    group2 /= 194;

    (*output)[3] = (uint32_t)(group2 % 194);
    group2 /= 194;

    (*output)[2] = (uint32_t)(group2 % 194);
    group2 /= 194;

    (*output)[1] = (uint32_t)(group2 % 194);
    group2 /= 194;

    (*output)[0] = (uint32_t)(group2 % 194);
    group2 /= 194;
    *output += 5;

    uint64_t group3 = (*(uint64_t *)((*input) + 14)) >> 2;    group3 &= (1ull << 38) - 1;
    (*output)[4] = (uint32_t)(group3 % 194);
    group3 /= 194;

    (*output)[3] = (uint32_t)(group3 % 194);
    group3 /= 194;

    (*output)[2] = (uint32_t)(group3 % 194);
    group3 /= 194;

    (*output)[1] = (uint32_t)(group3 % 194);
    group3 /= 194;

    (*output)[0] = (uint32_t)(group3 % 194);
    group3 /= 194;
    *output += 5;


    *input += 19;
}

// Unpack 23 bytes into 24 values
void Ultrapack_Decompress195(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 23) - 1;
    (*output)[2] = (uint32_t)(group0 % 195);
    group0 /= 195;

    (*output)[1] = (uint32_t)(group0 % 195);
    group0 /= 195;

    (*output)[0] = (uint32_t)(group0 % 195);
    group0 /= 195;
    *output += 3;

    uint64_t group1 = (*(uint64_t *)((*input) + 2)) >> 7;    group1 &= (1ull << 23) - 1;
    (*output)[2] = (uint32_t)(group1 % 195);
    group1 /= 195;

    (*output)[1] = (uint32_t)(group1 % 195);
    group1 /= 195;

    (*output)[0] = (uint32_t)(group1 % 195);
    group1 /= 195;
    *output += 3;

    uint64_t group2 = (*(uint64_t *)((*input) + 5)) >> 6;    group2 &= (1ull << 23) - 1;
    (*output)[2] = (uint32_t)(group2 % 195);
    group2 /= 195;

    (*output)[1] = (uint32_t)(group2 % 195);
    group2 /= 195;

    (*output)[0] = (uint32_t)(group2 % 195);
    group2 /= 195;
    *output += 3;

    uint64_t group3 = (*(uint64_t *)((*input) + 8)) >> 5;    group3 &= (1ull << 23) - 1;
    (*output)[2] = (uint32_t)(group3 % 195);
    group3 /= 195;

    (*output)[1] = (uint32_t)(group3 % 195);
    group3 /= 195;

    (*output)[0] = (uint32_t)(group3 % 195);
    group3 /= 195;
    *output += 3;

    uint64_t group4 = (*(uint64_t *)((*input) + 11)) >> 4;    group4 &= (1ull << 23) - 1;
    (*output)[2] = (uint32_t)(group4 % 195);
    group4 /= 195;

    (*output)[1] = (uint32_t)(group4 % 195);
    group4 /= 195;

    (*output)[0] = (uint32_t)(group4 % 195);
    group4 /= 195;
    *output += 3;

    uint64_t group5 = (*(uint64_t *)((*input) + 14)) >> 3;    group5 &= (1ull << 23) - 1;
    (*output)[2] = (uint32_t)(group5 % 195);
    group5 /= 195;

    (*output)[1] = (uint32_t)(group5 % 195);
    group5 /= 195;

    (*output)[0] = (uint32_t)(group5 % 195);
    group5 /= 195;
    *output += 3;

    uint64_t group6 = (*(uint64_t *)((*input) + 17)) >> 2;    group6 &= (1ull << 23) - 1;
    (*output)[2] = (uint32_t)(group6 % 195);
    group6 /= 195;

    (*output)[1] = (uint32_t)(group6 % 195);
    group6 /= 195;

    (*output)[0] = (uint32_t)(group6 % 195);
    group6 /= 195;
    *output += 3;

    uint64_t group7 = (*(uint64_t *)((*input) + 20)) >> 1;    group7 &= (1ull << 23) - 1;
    (*output)[2] = (uint32_t)(group7 % 195);
    group7 /= 195;

    (*output)[1] = (uint32_t)(group7 % 195);
    group7 /= 195;

    (*output)[0] = (uint32_t)(group7 % 195);
    group7 /= 195;
    *output += 3;


    *input += 23;
}

// Unpack 23 bytes into 24 values
void Ultrapack_Decompress196(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 23) - 1;
    (*output)[2] = (uint32_t)(group0 % 196);
    group0 /= 196;

    (*output)[1] = (uint32_t)(group0 % 196);
    group0 /= 196;

    (*output)[0] = (uint32_t)(group0 % 196);
    group0 /= 196;
    *output += 3;

    uint64_t group1 = (*(uint64_t *)((*input) + 2)) >> 7;    group1 &= (1ull << 23) - 1;
    (*output)[2] = (uint32_t)(group1 % 196);
    group1 /= 196;

    (*output)[1] = (uint32_t)(group1 % 196);
    group1 /= 196;

    (*output)[0] = (uint32_t)(group1 % 196);
    group1 /= 196;
    *output += 3;

    uint64_t group2 = (*(uint64_t *)((*input) + 5)) >> 6;    group2 &= (1ull << 23) - 1;
    (*output)[2] = (uint32_t)(group2 % 196);
    group2 /= 196;

    (*output)[1] = (uint32_t)(group2 % 196);
    group2 /= 196;

    (*output)[0] = (uint32_t)(group2 % 196);
    group2 /= 196;
    *output += 3;

    uint64_t group3 = (*(uint64_t *)((*input) + 8)) >> 5;    group3 &= (1ull << 23) - 1;
    (*output)[2] = (uint32_t)(group3 % 196);
    group3 /= 196;

    (*output)[1] = (uint32_t)(group3 % 196);
    group3 /= 196;

    (*output)[0] = (uint32_t)(group3 % 196);
    group3 /= 196;
    *output += 3;

    uint64_t group4 = (*(uint64_t *)((*input) + 11)) >> 4;    group4 &= (1ull << 23) - 1;
    (*output)[2] = (uint32_t)(group4 % 196);
    group4 /= 196;

    (*output)[1] = (uint32_t)(group4 % 196);
    group4 /= 196;

    (*output)[0] = (uint32_t)(group4 % 196);
    group4 /= 196;
    *output += 3;

    uint64_t group5 = (*(uint64_t *)((*input) + 14)) >> 3;    group5 &= (1ull << 23) - 1;
    (*output)[2] = (uint32_t)(group5 % 196);
    group5 /= 196;

    (*output)[1] = (uint32_t)(group5 % 196);
    group5 /= 196;

    (*output)[0] = (uint32_t)(group5 % 196);
    group5 /= 196;
    *output += 3;

    uint64_t group6 = (*(uint64_t *)((*input) + 17)) >> 2;    group6 &= (1ull << 23) - 1;
    (*output)[2] = (uint32_t)(group6 % 196);
    group6 /= 196;

    (*output)[1] = (uint32_t)(group6 % 196);
    group6 /= 196;

    (*output)[0] = (uint32_t)(group6 % 196);
    group6 /= 196;
    *output += 3;

    uint64_t group7 = (*(uint64_t *)((*input) + 20)) >> 1;    group7 &= (1ull << 23) - 1;
    (*output)[2] = (uint32_t)(group7 % 196);
    group7 /= 196;

    (*output)[1] = (uint32_t)(group7 % 196);
    group7 /= 196;

    (*output)[0] = (uint32_t)(group7 % 196);
    group7 /= 196;
    *output += 3;


    *input += 23;
}

// Unpack 23 bytes into 24 values
void Ultrapack_Decompress197(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 23) - 1;
    (*output)[2] = (uint32_t)(group0 % 197);
    group0 /= 197;

    (*output)[1] = (uint32_t)(group0 % 197);
    group0 /= 197;

    (*output)[0] = (uint32_t)(group0 % 197);
    group0 /= 197;
    *output += 3;

    uint64_t group1 = (*(uint64_t *)((*input) + 2)) >> 7;    group1 &= (1ull << 23) - 1;
    (*output)[2] = (uint32_t)(group1 % 197);
    group1 /= 197;

    (*output)[1] = (uint32_t)(group1 % 197);
    group1 /= 197;

    (*output)[0] = (uint32_t)(group1 % 197);
    group1 /= 197;
    *output += 3;

    uint64_t group2 = (*(uint64_t *)((*input) + 5)) >> 6;    group2 &= (1ull << 23) - 1;
    (*output)[2] = (uint32_t)(group2 % 197);
    group2 /= 197;

    (*output)[1] = (uint32_t)(group2 % 197);
    group2 /= 197;

    (*output)[0] = (uint32_t)(group2 % 197);
    group2 /= 197;
    *output += 3;

    uint64_t group3 = (*(uint64_t *)((*input) + 8)) >> 5;    group3 &= (1ull << 23) - 1;
    (*output)[2] = (uint32_t)(group3 % 197);
    group3 /= 197;

    (*output)[1] = (uint32_t)(group3 % 197);
    group3 /= 197;

    (*output)[0] = (uint32_t)(group3 % 197);
    group3 /= 197;
    *output += 3;

    uint64_t group4 = (*(uint64_t *)((*input) + 11)) >> 4;    group4 &= (1ull << 23) - 1;
    (*output)[2] = (uint32_t)(group4 % 197);
    group4 /= 197;

    (*output)[1] = (uint32_t)(group4 % 197);
    group4 /= 197;

    (*output)[0] = (uint32_t)(group4 % 197);
    group4 /= 197;
    *output += 3;

    uint64_t group5 = (*(uint64_t *)((*input) + 14)) >> 3;    group5 &= (1ull << 23) - 1;
    (*output)[2] = (uint32_t)(group5 % 197);
    group5 /= 197;

    (*output)[1] = (uint32_t)(group5 % 197);
    group5 /= 197;

    (*output)[0] = (uint32_t)(group5 % 197);
    group5 /= 197;
    *output += 3;

    uint64_t group6 = (*(uint64_t *)((*input) + 17)) >> 2;    group6 &= (1ull << 23) - 1;
    (*output)[2] = (uint32_t)(group6 % 197);
    group6 /= 197;

    (*output)[1] = (uint32_t)(group6 % 197);
    group6 /= 197;

    (*output)[0] = (uint32_t)(group6 % 197);
    group6 /= 197;
    *output += 3;

    uint64_t group7 = (*(uint64_t *)((*input) + 20)) >> 1;    group7 &= (1ull << 23) - 1;
    (*output)[2] = (uint32_t)(group7 % 197);
    group7 /= 197;

    (*output)[1] = (uint32_t)(group7 % 197);
    group7 /= 197;

    (*output)[0] = (uint32_t)(group7 % 197);
    group7 /= 197;
    *output += 3;


    *input += 23;
}

// Unpack 23 bytes into 24 values
void Ultrapack_Decompress198(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 23) - 1;
    (*output)[2] = (uint32_t)(group0 % 198);
    group0 /= 198;

    (*output)[1] = (uint32_t)(group0 % 198);
    group0 /= 198;

    (*output)[0] = (uint32_t)(group0 % 198);
    group0 /= 198;
    *output += 3;

    uint64_t group1 = (*(uint64_t *)((*input) + 2)) >> 7;    group1 &= (1ull << 23) - 1;
    (*output)[2] = (uint32_t)(group1 % 198);
    group1 /= 198;

    (*output)[1] = (uint32_t)(group1 % 198);
    group1 /= 198;

    (*output)[0] = (uint32_t)(group1 % 198);
    group1 /= 198;
    *output += 3;

    uint64_t group2 = (*(uint64_t *)((*input) + 5)) >> 6;    group2 &= (1ull << 23) - 1;
    (*output)[2] = (uint32_t)(group2 % 198);
    group2 /= 198;

    (*output)[1] = (uint32_t)(group2 % 198);
    group2 /= 198;

    (*output)[0] = (uint32_t)(group2 % 198);
    group2 /= 198;
    *output += 3;

    uint64_t group3 = (*(uint64_t *)((*input) + 8)) >> 5;    group3 &= (1ull << 23) - 1;
    (*output)[2] = (uint32_t)(group3 % 198);
    group3 /= 198;

    (*output)[1] = (uint32_t)(group3 % 198);
    group3 /= 198;

    (*output)[0] = (uint32_t)(group3 % 198);
    group3 /= 198;
    *output += 3;

    uint64_t group4 = (*(uint64_t *)((*input) + 11)) >> 4;    group4 &= (1ull << 23) - 1;
    (*output)[2] = (uint32_t)(group4 % 198);
    group4 /= 198;

    (*output)[1] = (uint32_t)(group4 % 198);
    group4 /= 198;

    (*output)[0] = (uint32_t)(group4 % 198);
    group4 /= 198;
    *output += 3;

    uint64_t group5 = (*(uint64_t *)((*input) + 14)) >> 3;    group5 &= (1ull << 23) - 1;
    (*output)[2] = (uint32_t)(group5 % 198);
    group5 /= 198;

    (*output)[1] = (uint32_t)(group5 % 198);
    group5 /= 198;

    (*output)[0] = (uint32_t)(group5 % 198);
    group5 /= 198;
    *output += 3;

    uint64_t group6 = (*(uint64_t *)((*input) + 17)) >> 2;    group6 &= (1ull << 23) - 1;
    (*output)[2] = (uint32_t)(group6 % 198);
    group6 /= 198;

    (*output)[1] = (uint32_t)(group6 % 198);
    group6 /= 198;

    (*output)[0] = (uint32_t)(group6 % 198);
    group6 /= 198;
    *output += 3;

    uint64_t group7 = (*(uint64_t *)((*input) + 20)) >> 1;    group7 &= (1ull << 23) - 1;
    (*output)[2] = (uint32_t)(group7 % 198);
    group7 /= 198;

    (*output)[1] = (uint32_t)(group7 % 198);
    group7 /= 198;

    (*output)[0] = (uint32_t)(group7 % 198);
    group7 /= 198;
    *output += 3;


    *input += 23;
}

// Unpack 23 bytes into 24 values
void Ultrapack_Decompress199(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 23) - 1;
    (*output)[2] = (uint32_t)(group0 % 199);
    group0 /= 199;

    (*output)[1] = (uint32_t)(group0 % 199);
    group0 /= 199;

    (*output)[0] = (uint32_t)(group0 % 199);
    group0 /= 199;
    *output += 3;

    uint64_t group1 = (*(uint64_t *)((*input) + 2)) >> 7;    group1 &= (1ull << 23) - 1;
    (*output)[2] = (uint32_t)(group1 % 199);
    group1 /= 199;

    (*output)[1] = (uint32_t)(group1 % 199);
    group1 /= 199;

    (*output)[0] = (uint32_t)(group1 % 199);
    group1 /= 199;
    *output += 3;

    uint64_t group2 = (*(uint64_t *)((*input) + 5)) >> 6;    group2 &= (1ull << 23) - 1;
    (*output)[2] = (uint32_t)(group2 % 199);
    group2 /= 199;

    (*output)[1] = (uint32_t)(group2 % 199);
    group2 /= 199;

    (*output)[0] = (uint32_t)(group2 % 199);
    group2 /= 199;
    *output += 3;

    uint64_t group3 = (*(uint64_t *)((*input) + 8)) >> 5;    group3 &= (1ull << 23) - 1;
    (*output)[2] = (uint32_t)(group3 % 199);
    group3 /= 199;

    (*output)[1] = (uint32_t)(group3 % 199);
    group3 /= 199;

    (*output)[0] = (uint32_t)(group3 % 199);
    group3 /= 199;
    *output += 3;

    uint64_t group4 = (*(uint64_t *)((*input) + 11)) >> 4;    group4 &= (1ull << 23) - 1;
    (*output)[2] = (uint32_t)(group4 % 199);
    group4 /= 199;

    (*output)[1] = (uint32_t)(group4 % 199);
    group4 /= 199;

    (*output)[0] = (uint32_t)(group4 % 199);
    group4 /= 199;
    *output += 3;

    uint64_t group5 = (*(uint64_t *)((*input) + 14)) >> 3;    group5 &= (1ull << 23) - 1;
    (*output)[2] = (uint32_t)(group5 % 199);
    group5 /= 199;

    (*output)[1] = (uint32_t)(group5 % 199);
    group5 /= 199;

    (*output)[0] = (uint32_t)(group5 % 199);
    group5 /= 199;
    *output += 3;

    uint64_t group6 = (*(uint64_t *)((*input) + 17)) >> 2;    group6 &= (1ull << 23) - 1;
    (*output)[2] = (uint32_t)(group6 % 199);
    group6 /= 199;

    (*output)[1] = (uint32_t)(group6 % 199);
    group6 /= 199;

    (*output)[0] = (uint32_t)(group6 % 199);
    group6 /= 199;
    *output += 3;

    uint64_t group7 = (*(uint64_t *)((*input) + 20)) >> 1;    group7 &= (1ull << 23) - 1;
    (*output)[2] = (uint32_t)(group7 % 199);
    group7 /= 199;

    (*output)[1] = (uint32_t)(group7 % 199);
    group7 /= 199;

    (*output)[0] = (uint32_t)(group7 % 199);
    group7 /= 199;
    *output += 3;


    *input += 23;
}

// Unpack 23 bytes into 24 values
void Ultrapack_Decompress200(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 23) - 1;
    (*output)[2] = (uint32_t)(group0 % 200);
    group0 /= 200;

    (*output)[1] = (uint32_t)(group0 % 200);
    group0 /= 200;

    (*output)[0] = (uint32_t)(group0 % 200);
    group0 /= 200;
    *output += 3;

    uint64_t group1 = (*(uint64_t *)((*input) + 2)) >> 7;    group1 &= (1ull << 23) - 1;
    (*output)[2] = (uint32_t)(group1 % 200);
    group1 /= 200;

    (*output)[1] = (uint32_t)(group1 % 200);
    group1 /= 200;

    (*output)[0] = (uint32_t)(group1 % 200);
    group1 /= 200;
    *output += 3;

    uint64_t group2 = (*(uint64_t *)((*input) + 5)) >> 6;    group2 &= (1ull << 23) - 1;
    (*output)[2] = (uint32_t)(group2 % 200);
    group2 /= 200;

    (*output)[1] = (uint32_t)(group2 % 200);
    group2 /= 200;

    (*output)[0] = (uint32_t)(group2 % 200);
    group2 /= 200;
    *output += 3;

    uint64_t group3 = (*(uint64_t *)((*input) + 8)) >> 5;    group3 &= (1ull << 23) - 1;
    (*output)[2] = (uint32_t)(group3 % 200);
    group3 /= 200;

    (*output)[1] = (uint32_t)(group3 % 200);
    group3 /= 200;

    (*output)[0] = (uint32_t)(group3 % 200);
    group3 /= 200;
    *output += 3;

    uint64_t group4 = (*(uint64_t *)((*input) + 11)) >> 4;    group4 &= (1ull << 23) - 1;
    (*output)[2] = (uint32_t)(group4 % 200);
    group4 /= 200;

    (*output)[1] = (uint32_t)(group4 % 200);
    group4 /= 200;

    (*output)[0] = (uint32_t)(group4 % 200);
    group4 /= 200;
    *output += 3;

    uint64_t group5 = (*(uint64_t *)((*input) + 14)) >> 3;    group5 &= (1ull << 23) - 1;
    (*output)[2] = (uint32_t)(group5 % 200);
    group5 /= 200;

    (*output)[1] = (uint32_t)(group5 % 200);
    group5 /= 200;

    (*output)[0] = (uint32_t)(group5 % 200);
    group5 /= 200;
    *output += 3;

    uint64_t group6 = (*(uint64_t *)((*input) + 17)) >> 2;    group6 &= (1ull << 23) - 1;
    (*output)[2] = (uint32_t)(group6 % 200);
    group6 /= 200;

    (*output)[1] = (uint32_t)(group6 % 200);
    group6 /= 200;

    (*output)[0] = (uint32_t)(group6 % 200);
    group6 /= 200;
    *output += 3;

    uint64_t group7 = (*(uint64_t *)((*input) + 20)) >> 1;    group7 &= (1ull << 23) - 1;
    (*output)[2] = (uint32_t)(group7 % 200);
    group7 /= 200;

    (*output)[1] = (uint32_t)(group7 % 200);
    group7 /= 200;

    (*output)[0] = (uint32_t)(group7 % 200);
    group7 /= 200;
    *output += 3;


    *input += 23;
}

// Unpack 23 bytes into 24 values
void Ultrapack_Decompress201(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 23) - 1;
    (*output)[2] = (uint32_t)(group0 % 201);
    group0 /= 201;

    (*output)[1] = (uint32_t)(group0 % 201);
    group0 /= 201;

    (*output)[0] = (uint32_t)(group0 % 201);
    group0 /= 201;
    *output += 3;

    uint64_t group1 = (*(uint64_t *)((*input) + 2)) >> 7;    group1 &= (1ull << 23) - 1;
    (*output)[2] = (uint32_t)(group1 % 201);
    group1 /= 201;

    (*output)[1] = (uint32_t)(group1 % 201);
    group1 /= 201;

    (*output)[0] = (uint32_t)(group1 % 201);
    group1 /= 201;
    *output += 3;

    uint64_t group2 = (*(uint64_t *)((*input) + 5)) >> 6;    group2 &= (1ull << 23) - 1;
    (*output)[2] = (uint32_t)(group2 % 201);
    group2 /= 201;

    (*output)[1] = (uint32_t)(group2 % 201);
    group2 /= 201;

    (*output)[0] = (uint32_t)(group2 % 201);
    group2 /= 201;
    *output += 3;

    uint64_t group3 = (*(uint64_t *)((*input) + 8)) >> 5;    group3 &= (1ull << 23) - 1;
    (*output)[2] = (uint32_t)(group3 % 201);
    group3 /= 201;

    (*output)[1] = (uint32_t)(group3 % 201);
    group3 /= 201;

    (*output)[0] = (uint32_t)(group3 % 201);
    group3 /= 201;
    *output += 3;

    uint64_t group4 = (*(uint64_t *)((*input) + 11)) >> 4;    group4 &= (1ull << 23) - 1;
    (*output)[2] = (uint32_t)(group4 % 201);
    group4 /= 201;

    (*output)[1] = (uint32_t)(group4 % 201);
    group4 /= 201;

    (*output)[0] = (uint32_t)(group4 % 201);
    group4 /= 201;
    *output += 3;

    uint64_t group5 = (*(uint64_t *)((*input) + 14)) >> 3;    group5 &= (1ull << 23) - 1;
    (*output)[2] = (uint32_t)(group5 % 201);
    group5 /= 201;

    (*output)[1] = (uint32_t)(group5 % 201);
    group5 /= 201;

    (*output)[0] = (uint32_t)(group5 % 201);
    group5 /= 201;
    *output += 3;

    uint64_t group6 = (*(uint64_t *)((*input) + 17)) >> 2;    group6 &= (1ull << 23) - 1;
    (*output)[2] = (uint32_t)(group6 % 201);
    group6 /= 201;

    (*output)[1] = (uint32_t)(group6 % 201);
    group6 /= 201;

    (*output)[0] = (uint32_t)(group6 % 201);
    group6 /= 201;
    *output += 3;

    uint64_t group7 = (*(uint64_t *)((*input) + 20)) >> 1;    group7 &= (1ull << 23) - 1;
    (*output)[2] = (uint32_t)(group7 % 201);
    group7 /= 201;

    (*output)[1] = (uint32_t)(group7 % 201);
    group7 /= 201;

    (*output)[0] = (uint32_t)(group7 % 201);
    group7 /= 201;
    *output += 3;


    *input += 23;
}

// Unpack 23 bytes into 24 values
void Ultrapack_Decompress202(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 23) - 1;
    (*output)[2] = (uint32_t)(group0 % 202);
    group0 /= 202;

    (*output)[1] = (uint32_t)(group0 % 202);
    group0 /= 202;

    (*output)[0] = (uint32_t)(group0 % 202);
    group0 /= 202;
    *output += 3;

    uint64_t group1 = (*(uint64_t *)((*input) + 2)) >> 7;    group1 &= (1ull << 23) - 1;
    (*output)[2] = (uint32_t)(group1 % 202);
    group1 /= 202;

    (*output)[1] = (uint32_t)(group1 % 202);
    group1 /= 202;

    (*output)[0] = (uint32_t)(group1 % 202);
    group1 /= 202;
    *output += 3;

    uint64_t group2 = (*(uint64_t *)((*input) + 5)) >> 6;    group2 &= (1ull << 23) - 1;
    (*output)[2] = (uint32_t)(group2 % 202);
    group2 /= 202;

    (*output)[1] = (uint32_t)(group2 % 202);
    group2 /= 202;

    (*output)[0] = (uint32_t)(group2 % 202);
    group2 /= 202;
    *output += 3;

    uint64_t group3 = (*(uint64_t *)((*input) + 8)) >> 5;    group3 &= (1ull << 23) - 1;
    (*output)[2] = (uint32_t)(group3 % 202);
    group3 /= 202;

    (*output)[1] = (uint32_t)(group3 % 202);
    group3 /= 202;

    (*output)[0] = (uint32_t)(group3 % 202);
    group3 /= 202;
    *output += 3;

    uint64_t group4 = (*(uint64_t *)((*input) + 11)) >> 4;    group4 &= (1ull << 23) - 1;
    (*output)[2] = (uint32_t)(group4 % 202);
    group4 /= 202;

    (*output)[1] = (uint32_t)(group4 % 202);
    group4 /= 202;

    (*output)[0] = (uint32_t)(group4 % 202);
    group4 /= 202;
    *output += 3;

    uint64_t group5 = (*(uint64_t *)((*input) + 14)) >> 3;    group5 &= (1ull << 23) - 1;
    (*output)[2] = (uint32_t)(group5 % 202);
    group5 /= 202;

    (*output)[1] = (uint32_t)(group5 % 202);
    group5 /= 202;

    (*output)[0] = (uint32_t)(group5 % 202);
    group5 /= 202;
    *output += 3;

    uint64_t group6 = (*(uint64_t *)((*input) + 17)) >> 2;    group6 &= (1ull << 23) - 1;
    (*output)[2] = (uint32_t)(group6 % 202);
    group6 /= 202;

    (*output)[1] = (uint32_t)(group6 % 202);
    group6 /= 202;

    (*output)[0] = (uint32_t)(group6 % 202);
    group6 /= 202;
    *output += 3;

    uint64_t group7 = (*(uint64_t *)((*input) + 20)) >> 1;    group7 &= (1ull << 23) - 1;
    (*output)[2] = (uint32_t)(group7 % 202);
    group7 /= 202;

    (*output)[1] = (uint32_t)(group7 % 202);
    group7 /= 202;

    (*output)[0] = (uint32_t)(group7 % 202);
    group7 /= 202;
    *output += 3;


    *input += 23;
}

// Unpack 23 bytes into 24 values
void Ultrapack_Decompress203(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 23) - 1;
    (*output)[2] = (uint32_t)(group0 % 203);
    group0 /= 203;

    (*output)[1] = (uint32_t)(group0 % 203);
    group0 /= 203;

    (*output)[0] = (uint32_t)(group0 % 203);
    group0 /= 203;
    *output += 3;

    uint64_t group1 = (*(uint64_t *)((*input) + 2)) >> 7;    group1 &= (1ull << 23) - 1;
    (*output)[2] = (uint32_t)(group1 % 203);
    group1 /= 203;

    (*output)[1] = (uint32_t)(group1 % 203);
    group1 /= 203;

    (*output)[0] = (uint32_t)(group1 % 203);
    group1 /= 203;
    *output += 3;

    uint64_t group2 = (*(uint64_t *)((*input) + 5)) >> 6;    group2 &= (1ull << 23) - 1;
    (*output)[2] = (uint32_t)(group2 % 203);
    group2 /= 203;

    (*output)[1] = (uint32_t)(group2 % 203);
    group2 /= 203;

    (*output)[0] = (uint32_t)(group2 % 203);
    group2 /= 203;
    *output += 3;

    uint64_t group3 = (*(uint64_t *)((*input) + 8)) >> 5;    group3 &= (1ull << 23) - 1;
    (*output)[2] = (uint32_t)(group3 % 203);
    group3 /= 203;

    (*output)[1] = (uint32_t)(group3 % 203);
    group3 /= 203;

    (*output)[0] = (uint32_t)(group3 % 203);
    group3 /= 203;
    *output += 3;

    uint64_t group4 = (*(uint64_t *)((*input) + 11)) >> 4;    group4 &= (1ull << 23) - 1;
    (*output)[2] = (uint32_t)(group4 % 203);
    group4 /= 203;

    (*output)[1] = (uint32_t)(group4 % 203);
    group4 /= 203;

    (*output)[0] = (uint32_t)(group4 % 203);
    group4 /= 203;
    *output += 3;

    uint64_t group5 = (*(uint64_t *)((*input) + 14)) >> 3;    group5 &= (1ull << 23) - 1;
    (*output)[2] = (uint32_t)(group5 % 203);
    group5 /= 203;

    (*output)[1] = (uint32_t)(group5 % 203);
    group5 /= 203;

    (*output)[0] = (uint32_t)(group5 % 203);
    group5 /= 203;
    *output += 3;

    uint64_t group6 = (*(uint64_t *)((*input) + 17)) >> 2;    group6 &= (1ull << 23) - 1;
    (*output)[2] = (uint32_t)(group6 % 203);
    group6 /= 203;

    (*output)[1] = (uint32_t)(group6 % 203);
    group6 /= 203;

    (*output)[0] = (uint32_t)(group6 % 203);
    group6 /= 203;
    *output += 3;

    uint64_t group7 = (*(uint64_t *)((*input) + 20)) >> 1;    group7 &= (1ull << 23) - 1;
    (*output)[2] = (uint32_t)(group7 % 203);
    group7 /= 203;

    (*output)[1] = (uint32_t)(group7 % 203);
    group7 /= 203;

    (*output)[0] = (uint32_t)(group7 % 203);
    group7 /= 203;
    *output += 3;


    *input += 23;
}

// Unpack 31 bytes into 32 values
void Ultrapack_Decompress204(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 31) - 1;
    (*output)[3] = (uint32_t)(group0 % 204);
    group0 /= 204;

    (*output)[2] = (uint32_t)(group0 % 204);
    group0 /= 204;

    (*output)[1] = (uint32_t)(group0 % 204);
    group0 /= 204;

    (*output)[0] = (uint32_t)(group0 % 204);
    group0 /= 204;
    *output += 4;

    uint64_t group1 = (*(uint64_t *)((*input) + 3)) >> 7;    group1 &= (1ull << 31) - 1;
    (*output)[3] = (uint32_t)(group1 % 204);
    group1 /= 204;

    (*output)[2] = (uint32_t)(group1 % 204);
    group1 /= 204;

    (*output)[1] = (uint32_t)(group1 % 204);
    group1 /= 204;

    (*output)[0] = (uint32_t)(group1 % 204);
    group1 /= 204;
    *output += 4;

    uint64_t group2 = (*(uint64_t *)((*input) + 7)) >> 6;    group2 &= (1ull << 31) - 1;
    (*output)[3] = (uint32_t)(group2 % 204);
    group2 /= 204;

    (*output)[2] = (uint32_t)(group2 % 204);
    group2 /= 204;

    (*output)[1] = (uint32_t)(group2 % 204);
    group2 /= 204;

    (*output)[0] = (uint32_t)(group2 % 204);
    group2 /= 204;
    *output += 4;

    uint64_t group3 = (*(uint64_t *)((*input) + 11)) >> 5;    group3 &= (1ull << 31) - 1;
    (*output)[3] = (uint32_t)(group3 % 204);
    group3 /= 204;

    (*output)[2] = (uint32_t)(group3 % 204);
    group3 /= 204;

    (*output)[1] = (uint32_t)(group3 % 204);
    group3 /= 204;

    (*output)[0] = (uint32_t)(group3 % 204);
    group3 /= 204;
    *output += 4;

    uint64_t group4 = (*(uint64_t *)((*input) + 15)) >> 4;    group4 &= (1ull << 31) - 1;
    (*output)[3] = (uint32_t)(group4 % 204);
    group4 /= 204;

    (*output)[2] = (uint32_t)(group4 % 204);
    group4 /= 204;

    (*output)[1] = (uint32_t)(group4 % 204);
    group4 /= 204;

    (*output)[0] = (uint32_t)(group4 % 204);
    group4 /= 204;
    *output += 4;

    uint64_t group5 = (*(uint64_t *)((*input) + 19)) >> 3;    group5 &= (1ull << 31) - 1;
    (*output)[3] = (uint32_t)(group5 % 204);
    group5 /= 204;

    (*output)[2] = (uint32_t)(group5 % 204);
    group5 /= 204;

    (*output)[1] = (uint32_t)(group5 % 204);
    group5 /= 204;

    (*output)[0] = (uint32_t)(group5 % 204);
    group5 /= 204;
    *output += 4;

    uint64_t group6 = (*(uint64_t *)((*input) + 23)) >> 2;    group6 &= (1ull << 31) - 1;
    (*output)[3] = (uint32_t)(group6 % 204);
    group6 /= 204;

    (*output)[2] = (uint32_t)(group6 % 204);
    group6 /= 204;

    (*output)[1] = (uint32_t)(group6 % 204);
    group6 /= 204;

    (*output)[0] = (uint32_t)(group6 % 204);
    group6 /= 204;
    *output += 4;

    uint64_t group7 = (*(uint64_t *)((*input) + 27)) >> 1;    group7 &= (1ull << 31) - 1;
    (*output)[3] = (uint32_t)(group7 % 204);
    group7 /= 204;

    (*output)[2] = (uint32_t)(group7 % 204);
    group7 /= 204;

    (*output)[1] = (uint32_t)(group7 % 204);
    group7 /= 204;

    (*output)[0] = (uint32_t)(group7 % 204);
    group7 /= 204;
    *output += 4;


    *input += 31;
}

// Unpack 31 bytes into 32 values
void Ultrapack_Decompress205(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 31) - 1;
    (*output)[3] = (uint32_t)(group0 % 205);
    group0 /= 205;

    (*output)[2] = (uint32_t)(group0 % 205);
    group0 /= 205;

    (*output)[1] = (uint32_t)(group0 % 205);
    group0 /= 205;

    (*output)[0] = (uint32_t)(group0 % 205);
    group0 /= 205;
    *output += 4;

    uint64_t group1 = (*(uint64_t *)((*input) + 3)) >> 7;    group1 &= (1ull << 31) - 1;
    (*output)[3] = (uint32_t)(group1 % 205);
    group1 /= 205;

    (*output)[2] = (uint32_t)(group1 % 205);
    group1 /= 205;

    (*output)[1] = (uint32_t)(group1 % 205);
    group1 /= 205;

    (*output)[0] = (uint32_t)(group1 % 205);
    group1 /= 205;
    *output += 4;

    uint64_t group2 = (*(uint64_t *)((*input) + 7)) >> 6;    group2 &= (1ull << 31) - 1;
    (*output)[3] = (uint32_t)(group2 % 205);
    group2 /= 205;

    (*output)[2] = (uint32_t)(group2 % 205);
    group2 /= 205;

    (*output)[1] = (uint32_t)(group2 % 205);
    group2 /= 205;

    (*output)[0] = (uint32_t)(group2 % 205);
    group2 /= 205;
    *output += 4;

    uint64_t group3 = (*(uint64_t *)((*input) + 11)) >> 5;    group3 &= (1ull << 31) - 1;
    (*output)[3] = (uint32_t)(group3 % 205);
    group3 /= 205;

    (*output)[2] = (uint32_t)(group3 % 205);
    group3 /= 205;

    (*output)[1] = (uint32_t)(group3 % 205);
    group3 /= 205;

    (*output)[0] = (uint32_t)(group3 % 205);
    group3 /= 205;
    *output += 4;

    uint64_t group4 = (*(uint64_t *)((*input) + 15)) >> 4;    group4 &= (1ull << 31) - 1;
    (*output)[3] = (uint32_t)(group4 % 205);
    group4 /= 205;

    (*output)[2] = (uint32_t)(group4 % 205);
    group4 /= 205;

    (*output)[1] = (uint32_t)(group4 % 205);
    group4 /= 205;

    (*output)[0] = (uint32_t)(group4 % 205);
    group4 /= 205;
    *output += 4;

    uint64_t group5 = (*(uint64_t *)((*input) + 19)) >> 3;    group5 &= (1ull << 31) - 1;
    (*output)[3] = (uint32_t)(group5 % 205);
    group5 /= 205;

    (*output)[2] = (uint32_t)(group5 % 205);
    group5 /= 205;

    (*output)[1] = (uint32_t)(group5 % 205);
    group5 /= 205;

    (*output)[0] = (uint32_t)(group5 % 205);
    group5 /= 205;
    *output += 4;

    uint64_t group6 = (*(uint64_t *)((*input) + 23)) >> 2;    group6 &= (1ull << 31) - 1;
    (*output)[3] = (uint32_t)(group6 % 205);
    group6 /= 205;

    (*output)[2] = (uint32_t)(group6 % 205);
    group6 /= 205;

    (*output)[1] = (uint32_t)(group6 % 205);
    group6 /= 205;

    (*output)[0] = (uint32_t)(group6 % 205);
    group6 /= 205;
    *output += 4;

    uint64_t group7 = (*(uint64_t *)((*input) + 27)) >> 1;    group7 &= (1ull << 31) - 1;
    (*output)[3] = (uint32_t)(group7 % 205);
    group7 /= 205;

    (*output)[2] = (uint32_t)(group7 % 205);
    group7 /= 205;

    (*output)[1] = (uint32_t)(group7 % 205);
    group7 /= 205;

    (*output)[0] = (uint32_t)(group7 % 205);
    group7 /= 205;
    *output += 4;


    *input += 31;
}

// Unpack 31 bytes into 32 values
void Ultrapack_Decompress206(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 31) - 1;
    (*output)[3] = (uint32_t)(group0 % 206);
    group0 /= 206;

    (*output)[2] = (uint32_t)(group0 % 206);
    group0 /= 206;

    (*output)[1] = (uint32_t)(group0 % 206);
    group0 /= 206;

    (*output)[0] = (uint32_t)(group0 % 206);
    group0 /= 206;
    *output += 4;

    uint64_t group1 = (*(uint64_t *)((*input) + 3)) >> 7;    group1 &= (1ull << 31) - 1;
    (*output)[3] = (uint32_t)(group1 % 206);
    group1 /= 206;

    (*output)[2] = (uint32_t)(group1 % 206);
    group1 /= 206;

    (*output)[1] = (uint32_t)(group1 % 206);
    group1 /= 206;

    (*output)[0] = (uint32_t)(group1 % 206);
    group1 /= 206;
    *output += 4;

    uint64_t group2 = (*(uint64_t *)((*input) + 7)) >> 6;    group2 &= (1ull << 31) - 1;
    (*output)[3] = (uint32_t)(group2 % 206);
    group2 /= 206;

    (*output)[2] = (uint32_t)(group2 % 206);
    group2 /= 206;

    (*output)[1] = (uint32_t)(group2 % 206);
    group2 /= 206;

    (*output)[0] = (uint32_t)(group2 % 206);
    group2 /= 206;
    *output += 4;

    uint64_t group3 = (*(uint64_t *)((*input) + 11)) >> 5;    group3 &= (1ull << 31) - 1;
    (*output)[3] = (uint32_t)(group3 % 206);
    group3 /= 206;

    (*output)[2] = (uint32_t)(group3 % 206);
    group3 /= 206;

    (*output)[1] = (uint32_t)(group3 % 206);
    group3 /= 206;

    (*output)[0] = (uint32_t)(group3 % 206);
    group3 /= 206;
    *output += 4;

    uint64_t group4 = (*(uint64_t *)((*input) + 15)) >> 4;    group4 &= (1ull << 31) - 1;
    (*output)[3] = (uint32_t)(group4 % 206);
    group4 /= 206;

    (*output)[2] = (uint32_t)(group4 % 206);
    group4 /= 206;

    (*output)[1] = (uint32_t)(group4 % 206);
    group4 /= 206;

    (*output)[0] = (uint32_t)(group4 % 206);
    group4 /= 206;
    *output += 4;

    uint64_t group5 = (*(uint64_t *)((*input) + 19)) >> 3;    group5 &= (1ull << 31) - 1;
    (*output)[3] = (uint32_t)(group5 % 206);
    group5 /= 206;

    (*output)[2] = (uint32_t)(group5 % 206);
    group5 /= 206;

    (*output)[1] = (uint32_t)(group5 % 206);
    group5 /= 206;

    (*output)[0] = (uint32_t)(group5 % 206);
    group5 /= 206;
    *output += 4;

    uint64_t group6 = (*(uint64_t *)((*input) + 23)) >> 2;    group6 &= (1ull << 31) - 1;
    (*output)[3] = (uint32_t)(group6 % 206);
    group6 /= 206;

    (*output)[2] = (uint32_t)(group6 % 206);
    group6 /= 206;

    (*output)[1] = (uint32_t)(group6 % 206);
    group6 /= 206;

    (*output)[0] = (uint32_t)(group6 % 206);
    group6 /= 206;
    *output += 4;

    uint64_t group7 = (*(uint64_t *)((*input) + 27)) >> 1;    group7 &= (1ull << 31) - 1;
    (*output)[3] = (uint32_t)(group7 % 206);
    group7 /= 206;

    (*output)[2] = (uint32_t)(group7 % 206);
    group7 /= 206;

    (*output)[1] = (uint32_t)(group7 % 206);
    group7 /= 206;

    (*output)[0] = (uint32_t)(group7 % 206);
    group7 /= 206;
    *output += 4;


    *input += 31;
}

// Unpack 31 bytes into 32 values
void Ultrapack_Decompress207(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 31) - 1;
    (*output)[3] = (uint32_t)(group0 % 207);
    group0 /= 207;

    (*output)[2] = (uint32_t)(group0 % 207);
    group0 /= 207;

    (*output)[1] = (uint32_t)(group0 % 207);
    group0 /= 207;

    (*output)[0] = (uint32_t)(group0 % 207);
    group0 /= 207;
    *output += 4;

    uint64_t group1 = (*(uint64_t *)((*input) + 3)) >> 7;    group1 &= (1ull << 31) - 1;
    (*output)[3] = (uint32_t)(group1 % 207);
    group1 /= 207;

    (*output)[2] = (uint32_t)(group1 % 207);
    group1 /= 207;

    (*output)[1] = (uint32_t)(group1 % 207);
    group1 /= 207;

    (*output)[0] = (uint32_t)(group1 % 207);
    group1 /= 207;
    *output += 4;

    uint64_t group2 = (*(uint64_t *)((*input) + 7)) >> 6;    group2 &= (1ull << 31) - 1;
    (*output)[3] = (uint32_t)(group2 % 207);
    group2 /= 207;

    (*output)[2] = (uint32_t)(group2 % 207);
    group2 /= 207;

    (*output)[1] = (uint32_t)(group2 % 207);
    group2 /= 207;

    (*output)[0] = (uint32_t)(group2 % 207);
    group2 /= 207;
    *output += 4;

    uint64_t group3 = (*(uint64_t *)((*input) + 11)) >> 5;    group3 &= (1ull << 31) - 1;
    (*output)[3] = (uint32_t)(group3 % 207);
    group3 /= 207;

    (*output)[2] = (uint32_t)(group3 % 207);
    group3 /= 207;

    (*output)[1] = (uint32_t)(group3 % 207);
    group3 /= 207;

    (*output)[0] = (uint32_t)(group3 % 207);
    group3 /= 207;
    *output += 4;

    uint64_t group4 = (*(uint64_t *)((*input) + 15)) >> 4;    group4 &= (1ull << 31) - 1;
    (*output)[3] = (uint32_t)(group4 % 207);
    group4 /= 207;

    (*output)[2] = (uint32_t)(group4 % 207);
    group4 /= 207;

    (*output)[1] = (uint32_t)(group4 % 207);
    group4 /= 207;

    (*output)[0] = (uint32_t)(group4 % 207);
    group4 /= 207;
    *output += 4;

    uint64_t group5 = (*(uint64_t *)((*input) + 19)) >> 3;    group5 &= (1ull << 31) - 1;
    (*output)[3] = (uint32_t)(group5 % 207);
    group5 /= 207;

    (*output)[2] = (uint32_t)(group5 % 207);
    group5 /= 207;

    (*output)[1] = (uint32_t)(group5 % 207);
    group5 /= 207;

    (*output)[0] = (uint32_t)(group5 % 207);
    group5 /= 207;
    *output += 4;

    uint64_t group6 = (*(uint64_t *)((*input) + 23)) >> 2;    group6 &= (1ull << 31) - 1;
    (*output)[3] = (uint32_t)(group6 % 207);
    group6 /= 207;

    (*output)[2] = (uint32_t)(group6 % 207);
    group6 /= 207;

    (*output)[1] = (uint32_t)(group6 % 207);
    group6 /= 207;

    (*output)[0] = (uint32_t)(group6 % 207);
    group6 /= 207;
    *output += 4;

    uint64_t group7 = (*(uint64_t *)((*input) + 27)) >> 1;    group7 &= (1ull << 31) - 1;
    (*output)[3] = (uint32_t)(group7 % 207);
    group7 /= 207;

    (*output)[2] = (uint32_t)(group7 % 207);
    group7 /= 207;

    (*output)[1] = (uint32_t)(group7 % 207);
    group7 /= 207;

    (*output)[0] = (uint32_t)(group7 % 207);
    group7 /= 207;
    *output += 4;


    *input += 31;
}

// Unpack 31 bytes into 32 values
void Ultrapack_Decompress208(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 31) - 1;
    (*output)[3] = (uint32_t)(group0 % 208);
    group0 /= 208;

    (*output)[2] = (uint32_t)(group0 % 208);
    group0 /= 208;

    (*output)[1] = (uint32_t)(group0 % 208);
    group0 /= 208;

    (*output)[0] = (uint32_t)(group0 % 208);
    group0 /= 208;
    *output += 4;

    uint64_t group1 = (*(uint64_t *)((*input) + 3)) >> 7;    group1 &= (1ull << 31) - 1;
    (*output)[3] = (uint32_t)(group1 % 208);
    group1 /= 208;

    (*output)[2] = (uint32_t)(group1 % 208);
    group1 /= 208;

    (*output)[1] = (uint32_t)(group1 % 208);
    group1 /= 208;

    (*output)[0] = (uint32_t)(group1 % 208);
    group1 /= 208;
    *output += 4;

    uint64_t group2 = (*(uint64_t *)((*input) + 7)) >> 6;    group2 &= (1ull << 31) - 1;
    (*output)[3] = (uint32_t)(group2 % 208);
    group2 /= 208;

    (*output)[2] = (uint32_t)(group2 % 208);
    group2 /= 208;

    (*output)[1] = (uint32_t)(group2 % 208);
    group2 /= 208;

    (*output)[0] = (uint32_t)(group2 % 208);
    group2 /= 208;
    *output += 4;

    uint64_t group3 = (*(uint64_t *)((*input) + 11)) >> 5;    group3 &= (1ull << 31) - 1;
    (*output)[3] = (uint32_t)(group3 % 208);
    group3 /= 208;

    (*output)[2] = (uint32_t)(group3 % 208);
    group3 /= 208;

    (*output)[1] = (uint32_t)(group3 % 208);
    group3 /= 208;

    (*output)[0] = (uint32_t)(group3 % 208);
    group3 /= 208;
    *output += 4;

    uint64_t group4 = (*(uint64_t *)((*input) + 15)) >> 4;    group4 &= (1ull << 31) - 1;
    (*output)[3] = (uint32_t)(group4 % 208);
    group4 /= 208;

    (*output)[2] = (uint32_t)(group4 % 208);
    group4 /= 208;

    (*output)[1] = (uint32_t)(group4 % 208);
    group4 /= 208;

    (*output)[0] = (uint32_t)(group4 % 208);
    group4 /= 208;
    *output += 4;

    uint64_t group5 = (*(uint64_t *)((*input) + 19)) >> 3;    group5 &= (1ull << 31) - 1;
    (*output)[3] = (uint32_t)(group5 % 208);
    group5 /= 208;

    (*output)[2] = (uint32_t)(group5 % 208);
    group5 /= 208;

    (*output)[1] = (uint32_t)(group5 % 208);
    group5 /= 208;

    (*output)[0] = (uint32_t)(group5 % 208);
    group5 /= 208;
    *output += 4;

    uint64_t group6 = (*(uint64_t *)((*input) + 23)) >> 2;    group6 &= (1ull << 31) - 1;
    (*output)[3] = (uint32_t)(group6 % 208);
    group6 /= 208;

    (*output)[2] = (uint32_t)(group6 % 208);
    group6 /= 208;

    (*output)[1] = (uint32_t)(group6 % 208);
    group6 /= 208;

    (*output)[0] = (uint32_t)(group6 % 208);
    group6 /= 208;
    *output += 4;

    uint64_t group7 = (*(uint64_t *)((*input) + 27)) >> 1;    group7 &= (1ull << 31) - 1;
    (*output)[3] = (uint32_t)(group7 % 208);
    group7 /= 208;

    (*output)[2] = (uint32_t)(group7 % 208);
    group7 /= 208;

    (*output)[1] = (uint32_t)(group7 % 208);
    group7 /= 208;

    (*output)[0] = (uint32_t)(group7 % 208);
    group7 /= 208;
    *output += 4;


    *input += 31;
}

// Unpack 31 bytes into 32 values
void Ultrapack_Decompress209(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 31) - 1;
    (*output)[3] = (uint32_t)(group0 % 209);
    group0 /= 209;

    (*output)[2] = (uint32_t)(group0 % 209);
    group0 /= 209;

    (*output)[1] = (uint32_t)(group0 % 209);
    group0 /= 209;

    (*output)[0] = (uint32_t)(group0 % 209);
    group0 /= 209;
    *output += 4;

    uint64_t group1 = (*(uint64_t *)((*input) + 3)) >> 7;    group1 &= (1ull << 31) - 1;
    (*output)[3] = (uint32_t)(group1 % 209);
    group1 /= 209;

    (*output)[2] = (uint32_t)(group1 % 209);
    group1 /= 209;

    (*output)[1] = (uint32_t)(group1 % 209);
    group1 /= 209;

    (*output)[0] = (uint32_t)(group1 % 209);
    group1 /= 209;
    *output += 4;

    uint64_t group2 = (*(uint64_t *)((*input) + 7)) >> 6;    group2 &= (1ull << 31) - 1;
    (*output)[3] = (uint32_t)(group2 % 209);
    group2 /= 209;

    (*output)[2] = (uint32_t)(group2 % 209);
    group2 /= 209;

    (*output)[1] = (uint32_t)(group2 % 209);
    group2 /= 209;

    (*output)[0] = (uint32_t)(group2 % 209);
    group2 /= 209;
    *output += 4;

    uint64_t group3 = (*(uint64_t *)((*input) + 11)) >> 5;    group3 &= (1ull << 31) - 1;
    (*output)[3] = (uint32_t)(group3 % 209);
    group3 /= 209;

    (*output)[2] = (uint32_t)(group3 % 209);
    group3 /= 209;

    (*output)[1] = (uint32_t)(group3 % 209);
    group3 /= 209;

    (*output)[0] = (uint32_t)(group3 % 209);
    group3 /= 209;
    *output += 4;

    uint64_t group4 = (*(uint64_t *)((*input) + 15)) >> 4;    group4 &= (1ull << 31) - 1;
    (*output)[3] = (uint32_t)(group4 % 209);
    group4 /= 209;

    (*output)[2] = (uint32_t)(group4 % 209);
    group4 /= 209;

    (*output)[1] = (uint32_t)(group4 % 209);
    group4 /= 209;

    (*output)[0] = (uint32_t)(group4 % 209);
    group4 /= 209;
    *output += 4;

    uint64_t group5 = (*(uint64_t *)((*input) + 19)) >> 3;    group5 &= (1ull << 31) - 1;
    (*output)[3] = (uint32_t)(group5 % 209);
    group5 /= 209;

    (*output)[2] = (uint32_t)(group5 % 209);
    group5 /= 209;

    (*output)[1] = (uint32_t)(group5 % 209);
    group5 /= 209;

    (*output)[0] = (uint32_t)(group5 % 209);
    group5 /= 209;
    *output += 4;

    uint64_t group6 = (*(uint64_t *)((*input) + 23)) >> 2;    group6 &= (1ull << 31) - 1;
    (*output)[3] = (uint32_t)(group6 % 209);
    group6 /= 209;

    (*output)[2] = (uint32_t)(group6 % 209);
    group6 /= 209;

    (*output)[1] = (uint32_t)(group6 % 209);
    group6 /= 209;

    (*output)[0] = (uint32_t)(group6 % 209);
    group6 /= 209;
    *output += 4;

    uint64_t group7 = (*(uint64_t *)((*input) + 27)) >> 1;    group7 &= (1ull << 31) - 1;
    (*output)[3] = (uint32_t)(group7 % 209);
    group7 /= 209;

    (*output)[2] = (uint32_t)(group7 % 209);
    group7 /= 209;

    (*output)[1] = (uint32_t)(group7 % 209);
    group7 /= 209;

    (*output)[0] = (uint32_t)(group7 % 209);
    group7 /= 209;
    *output += 4;


    *input += 31;
}

// Unpack 31 bytes into 32 values
void Ultrapack_Decompress210(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 31) - 1;
    (*output)[3] = (uint32_t)(group0 % 210);
    group0 /= 210;

    (*output)[2] = (uint32_t)(group0 % 210);
    group0 /= 210;

    (*output)[1] = (uint32_t)(group0 % 210);
    group0 /= 210;

    (*output)[0] = (uint32_t)(group0 % 210);
    group0 /= 210;
    *output += 4;

    uint64_t group1 = (*(uint64_t *)((*input) + 3)) >> 7;    group1 &= (1ull << 31) - 1;
    (*output)[3] = (uint32_t)(group1 % 210);
    group1 /= 210;

    (*output)[2] = (uint32_t)(group1 % 210);
    group1 /= 210;

    (*output)[1] = (uint32_t)(group1 % 210);
    group1 /= 210;

    (*output)[0] = (uint32_t)(group1 % 210);
    group1 /= 210;
    *output += 4;

    uint64_t group2 = (*(uint64_t *)((*input) + 7)) >> 6;    group2 &= (1ull << 31) - 1;
    (*output)[3] = (uint32_t)(group2 % 210);
    group2 /= 210;

    (*output)[2] = (uint32_t)(group2 % 210);
    group2 /= 210;

    (*output)[1] = (uint32_t)(group2 % 210);
    group2 /= 210;

    (*output)[0] = (uint32_t)(group2 % 210);
    group2 /= 210;
    *output += 4;

    uint64_t group3 = (*(uint64_t *)((*input) + 11)) >> 5;    group3 &= (1ull << 31) - 1;
    (*output)[3] = (uint32_t)(group3 % 210);
    group3 /= 210;

    (*output)[2] = (uint32_t)(group3 % 210);
    group3 /= 210;

    (*output)[1] = (uint32_t)(group3 % 210);
    group3 /= 210;

    (*output)[0] = (uint32_t)(group3 % 210);
    group3 /= 210;
    *output += 4;

    uint64_t group4 = (*(uint64_t *)((*input) + 15)) >> 4;    group4 &= (1ull << 31) - 1;
    (*output)[3] = (uint32_t)(group4 % 210);
    group4 /= 210;

    (*output)[2] = (uint32_t)(group4 % 210);
    group4 /= 210;

    (*output)[1] = (uint32_t)(group4 % 210);
    group4 /= 210;

    (*output)[0] = (uint32_t)(group4 % 210);
    group4 /= 210;
    *output += 4;

    uint64_t group5 = (*(uint64_t *)((*input) + 19)) >> 3;    group5 &= (1ull << 31) - 1;
    (*output)[3] = (uint32_t)(group5 % 210);
    group5 /= 210;

    (*output)[2] = (uint32_t)(group5 % 210);
    group5 /= 210;

    (*output)[1] = (uint32_t)(group5 % 210);
    group5 /= 210;

    (*output)[0] = (uint32_t)(group5 % 210);
    group5 /= 210;
    *output += 4;

    uint64_t group6 = (*(uint64_t *)((*input) + 23)) >> 2;    group6 &= (1ull << 31) - 1;
    (*output)[3] = (uint32_t)(group6 % 210);
    group6 /= 210;

    (*output)[2] = (uint32_t)(group6 % 210);
    group6 /= 210;

    (*output)[1] = (uint32_t)(group6 % 210);
    group6 /= 210;

    (*output)[0] = (uint32_t)(group6 % 210);
    group6 /= 210;
    *output += 4;

    uint64_t group7 = (*(uint64_t *)((*input) + 27)) >> 1;    group7 &= (1ull << 31) - 1;
    (*output)[3] = (uint32_t)(group7 % 210);
    group7 /= 210;

    (*output)[2] = (uint32_t)(group7 % 210);
    group7 /= 210;

    (*output)[1] = (uint32_t)(group7 % 210);
    group7 /= 210;

    (*output)[0] = (uint32_t)(group7 % 210);
    group7 /= 210;
    *output += 4;


    *input += 31;
}

// Unpack 31 bytes into 32 values
void Ultrapack_Decompress211(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 31) - 1;
    (*output)[3] = (uint32_t)(group0 % 211);
    group0 /= 211;

    (*output)[2] = (uint32_t)(group0 % 211);
    group0 /= 211;

    (*output)[1] = (uint32_t)(group0 % 211);
    group0 /= 211;

    (*output)[0] = (uint32_t)(group0 % 211);
    group0 /= 211;
    *output += 4;

    uint64_t group1 = (*(uint64_t *)((*input) + 3)) >> 7;    group1 &= (1ull << 31) - 1;
    (*output)[3] = (uint32_t)(group1 % 211);
    group1 /= 211;

    (*output)[2] = (uint32_t)(group1 % 211);
    group1 /= 211;

    (*output)[1] = (uint32_t)(group1 % 211);
    group1 /= 211;

    (*output)[0] = (uint32_t)(group1 % 211);
    group1 /= 211;
    *output += 4;

    uint64_t group2 = (*(uint64_t *)((*input) + 7)) >> 6;    group2 &= (1ull << 31) - 1;
    (*output)[3] = (uint32_t)(group2 % 211);
    group2 /= 211;

    (*output)[2] = (uint32_t)(group2 % 211);
    group2 /= 211;

    (*output)[1] = (uint32_t)(group2 % 211);
    group2 /= 211;

    (*output)[0] = (uint32_t)(group2 % 211);
    group2 /= 211;
    *output += 4;

    uint64_t group3 = (*(uint64_t *)((*input) + 11)) >> 5;    group3 &= (1ull << 31) - 1;
    (*output)[3] = (uint32_t)(group3 % 211);
    group3 /= 211;

    (*output)[2] = (uint32_t)(group3 % 211);
    group3 /= 211;

    (*output)[1] = (uint32_t)(group3 % 211);
    group3 /= 211;

    (*output)[0] = (uint32_t)(group3 % 211);
    group3 /= 211;
    *output += 4;

    uint64_t group4 = (*(uint64_t *)((*input) + 15)) >> 4;    group4 &= (1ull << 31) - 1;
    (*output)[3] = (uint32_t)(group4 % 211);
    group4 /= 211;

    (*output)[2] = (uint32_t)(group4 % 211);
    group4 /= 211;

    (*output)[1] = (uint32_t)(group4 % 211);
    group4 /= 211;

    (*output)[0] = (uint32_t)(group4 % 211);
    group4 /= 211;
    *output += 4;

    uint64_t group5 = (*(uint64_t *)((*input) + 19)) >> 3;    group5 &= (1ull << 31) - 1;
    (*output)[3] = (uint32_t)(group5 % 211);
    group5 /= 211;

    (*output)[2] = (uint32_t)(group5 % 211);
    group5 /= 211;

    (*output)[1] = (uint32_t)(group5 % 211);
    group5 /= 211;

    (*output)[0] = (uint32_t)(group5 % 211);
    group5 /= 211;
    *output += 4;

    uint64_t group6 = (*(uint64_t *)((*input) + 23)) >> 2;    group6 &= (1ull << 31) - 1;
    (*output)[3] = (uint32_t)(group6 % 211);
    group6 /= 211;

    (*output)[2] = (uint32_t)(group6 % 211);
    group6 /= 211;

    (*output)[1] = (uint32_t)(group6 % 211);
    group6 /= 211;

    (*output)[0] = (uint32_t)(group6 % 211);
    group6 /= 211;
    *output += 4;

    uint64_t group7 = (*(uint64_t *)((*input) + 27)) >> 1;    group7 &= (1ull << 31) - 1;
    (*output)[3] = (uint32_t)(group7 % 211);
    group7 /= 211;

    (*output)[2] = (uint32_t)(group7 % 211);
    group7 /= 211;

    (*output)[1] = (uint32_t)(group7 % 211);
    group7 /= 211;

    (*output)[0] = (uint32_t)(group7 % 211);
    group7 /= 211;
    *output += 4;


    *input += 31;
}

// Unpack 31 bytes into 32 values
void Ultrapack_Decompress212(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 31) - 1;
    (*output)[3] = (uint32_t)(group0 % 212);
    group0 /= 212;

    (*output)[2] = (uint32_t)(group0 % 212);
    group0 /= 212;

    (*output)[1] = (uint32_t)(group0 % 212);
    group0 /= 212;

    (*output)[0] = (uint32_t)(group0 % 212);
    group0 /= 212;
    *output += 4;

    uint64_t group1 = (*(uint64_t *)((*input) + 3)) >> 7;    group1 &= (1ull << 31) - 1;
    (*output)[3] = (uint32_t)(group1 % 212);
    group1 /= 212;

    (*output)[2] = (uint32_t)(group1 % 212);
    group1 /= 212;

    (*output)[1] = (uint32_t)(group1 % 212);
    group1 /= 212;

    (*output)[0] = (uint32_t)(group1 % 212);
    group1 /= 212;
    *output += 4;

    uint64_t group2 = (*(uint64_t *)((*input) + 7)) >> 6;    group2 &= (1ull << 31) - 1;
    (*output)[3] = (uint32_t)(group2 % 212);
    group2 /= 212;

    (*output)[2] = (uint32_t)(group2 % 212);
    group2 /= 212;

    (*output)[1] = (uint32_t)(group2 % 212);
    group2 /= 212;

    (*output)[0] = (uint32_t)(group2 % 212);
    group2 /= 212;
    *output += 4;

    uint64_t group3 = (*(uint64_t *)((*input) + 11)) >> 5;    group3 &= (1ull << 31) - 1;
    (*output)[3] = (uint32_t)(group3 % 212);
    group3 /= 212;

    (*output)[2] = (uint32_t)(group3 % 212);
    group3 /= 212;

    (*output)[1] = (uint32_t)(group3 % 212);
    group3 /= 212;

    (*output)[0] = (uint32_t)(group3 % 212);
    group3 /= 212;
    *output += 4;

    uint64_t group4 = (*(uint64_t *)((*input) + 15)) >> 4;    group4 &= (1ull << 31) - 1;
    (*output)[3] = (uint32_t)(group4 % 212);
    group4 /= 212;

    (*output)[2] = (uint32_t)(group4 % 212);
    group4 /= 212;

    (*output)[1] = (uint32_t)(group4 % 212);
    group4 /= 212;

    (*output)[0] = (uint32_t)(group4 % 212);
    group4 /= 212;
    *output += 4;

    uint64_t group5 = (*(uint64_t *)((*input) + 19)) >> 3;    group5 &= (1ull << 31) - 1;
    (*output)[3] = (uint32_t)(group5 % 212);
    group5 /= 212;

    (*output)[2] = (uint32_t)(group5 % 212);
    group5 /= 212;

    (*output)[1] = (uint32_t)(group5 % 212);
    group5 /= 212;

    (*output)[0] = (uint32_t)(group5 % 212);
    group5 /= 212;
    *output += 4;

    uint64_t group6 = (*(uint64_t *)((*input) + 23)) >> 2;    group6 &= (1ull << 31) - 1;
    (*output)[3] = (uint32_t)(group6 % 212);
    group6 /= 212;

    (*output)[2] = (uint32_t)(group6 % 212);
    group6 /= 212;

    (*output)[1] = (uint32_t)(group6 % 212);
    group6 /= 212;

    (*output)[0] = (uint32_t)(group6 % 212);
    group6 /= 212;
    *output += 4;

    uint64_t group7 = (*(uint64_t *)((*input) + 27)) >> 1;    group7 &= (1ull << 31) - 1;
    (*output)[3] = (uint32_t)(group7 % 212);
    group7 /= 212;

    (*output)[2] = (uint32_t)(group7 % 212);
    group7 /= 212;

    (*output)[1] = (uint32_t)(group7 % 212);
    group7 /= 212;

    (*output)[0] = (uint32_t)(group7 % 212);
    group7 /= 212;
    *output += 4;


    *input += 31;
}

// Unpack 31 bytes into 32 values
void Ultrapack_Decompress213(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 31) - 1;
    (*output)[3] = (uint32_t)(group0 % 213);
    group0 /= 213;

    (*output)[2] = (uint32_t)(group0 % 213);
    group0 /= 213;

    (*output)[1] = (uint32_t)(group0 % 213);
    group0 /= 213;

    (*output)[0] = (uint32_t)(group0 % 213);
    group0 /= 213;
    *output += 4;

    uint64_t group1 = (*(uint64_t *)((*input) + 3)) >> 7;    group1 &= (1ull << 31) - 1;
    (*output)[3] = (uint32_t)(group1 % 213);
    group1 /= 213;

    (*output)[2] = (uint32_t)(group1 % 213);
    group1 /= 213;

    (*output)[1] = (uint32_t)(group1 % 213);
    group1 /= 213;

    (*output)[0] = (uint32_t)(group1 % 213);
    group1 /= 213;
    *output += 4;

    uint64_t group2 = (*(uint64_t *)((*input) + 7)) >> 6;    group2 &= (1ull << 31) - 1;
    (*output)[3] = (uint32_t)(group2 % 213);
    group2 /= 213;

    (*output)[2] = (uint32_t)(group2 % 213);
    group2 /= 213;

    (*output)[1] = (uint32_t)(group2 % 213);
    group2 /= 213;

    (*output)[0] = (uint32_t)(group2 % 213);
    group2 /= 213;
    *output += 4;

    uint64_t group3 = (*(uint64_t *)((*input) + 11)) >> 5;    group3 &= (1ull << 31) - 1;
    (*output)[3] = (uint32_t)(group3 % 213);
    group3 /= 213;

    (*output)[2] = (uint32_t)(group3 % 213);
    group3 /= 213;

    (*output)[1] = (uint32_t)(group3 % 213);
    group3 /= 213;

    (*output)[0] = (uint32_t)(group3 % 213);
    group3 /= 213;
    *output += 4;

    uint64_t group4 = (*(uint64_t *)((*input) + 15)) >> 4;    group4 &= (1ull << 31) - 1;
    (*output)[3] = (uint32_t)(group4 % 213);
    group4 /= 213;

    (*output)[2] = (uint32_t)(group4 % 213);
    group4 /= 213;

    (*output)[1] = (uint32_t)(group4 % 213);
    group4 /= 213;

    (*output)[0] = (uint32_t)(group4 % 213);
    group4 /= 213;
    *output += 4;

    uint64_t group5 = (*(uint64_t *)((*input) + 19)) >> 3;    group5 &= (1ull << 31) - 1;
    (*output)[3] = (uint32_t)(group5 % 213);
    group5 /= 213;

    (*output)[2] = (uint32_t)(group5 % 213);
    group5 /= 213;

    (*output)[1] = (uint32_t)(group5 % 213);
    group5 /= 213;

    (*output)[0] = (uint32_t)(group5 % 213);
    group5 /= 213;
    *output += 4;

    uint64_t group6 = (*(uint64_t *)((*input) + 23)) >> 2;    group6 &= (1ull << 31) - 1;
    (*output)[3] = (uint32_t)(group6 % 213);
    group6 /= 213;

    (*output)[2] = (uint32_t)(group6 % 213);
    group6 /= 213;

    (*output)[1] = (uint32_t)(group6 % 213);
    group6 /= 213;

    (*output)[0] = (uint32_t)(group6 % 213);
    group6 /= 213;
    *output += 4;

    uint64_t group7 = (*(uint64_t *)((*input) + 27)) >> 1;    group7 &= (1ull << 31) - 1;
    (*output)[3] = (uint32_t)(group7 % 213);
    group7 /= 213;

    (*output)[2] = (uint32_t)(group7 % 213);
    group7 /= 213;

    (*output)[1] = (uint32_t)(group7 % 213);
    group7 /= 213;

    (*output)[0] = (uint32_t)(group7 % 213);
    group7 /= 213;
    *output += 4;


    *input += 31;
}

// Unpack 31 bytes into 32 values
void Ultrapack_Decompress214(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 31) - 1;
    (*output)[3] = (uint32_t)(group0 % 214);
    group0 /= 214;

    (*output)[2] = (uint32_t)(group0 % 214);
    group0 /= 214;

    (*output)[1] = (uint32_t)(group0 % 214);
    group0 /= 214;

    (*output)[0] = (uint32_t)(group0 % 214);
    group0 /= 214;
    *output += 4;

    uint64_t group1 = (*(uint64_t *)((*input) + 3)) >> 7;    group1 &= (1ull << 31) - 1;
    (*output)[3] = (uint32_t)(group1 % 214);
    group1 /= 214;

    (*output)[2] = (uint32_t)(group1 % 214);
    group1 /= 214;

    (*output)[1] = (uint32_t)(group1 % 214);
    group1 /= 214;

    (*output)[0] = (uint32_t)(group1 % 214);
    group1 /= 214;
    *output += 4;

    uint64_t group2 = (*(uint64_t *)((*input) + 7)) >> 6;    group2 &= (1ull << 31) - 1;
    (*output)[3] = (uint32_t)(group2 % 214);
    group2 /= 214;

    (*output)[2] = (uint32_t)(group2 % 214);
    group2 /= 214;

    (*output)[1] = (uint32_t)(group2 % 214);
    group2 /= 214;

    (*output)[0] = (uint32_t)(group2 % 214);
    group2 /= 214;
    *output += 4;

    uint64_t group3 = (*(uint64_t *)((*input) + 11)) >> 5;    group3 &= (1ull << 31) - 1;
    (*output)[3] = (uint32_t)(group3 % 214);
    group3 /= 214;

    (*output)[2] = (uint32_t)(group3 % 214);
    group3 /= 214;

    (*output)[1] = (uint32_t)(group3 % 214);
    group3 /= 214;

    (*output)[0] = (uint32_t)(group3 % 214);
    group3 /= 214;
    *output += 4;

    uint64_t group4 = (*(uint64_t *)((*input) + 15)) >> 4;    group4 &= (1ull << 31) - 1;
    (*output)[3] = (uint32_t)(group4 % 214);
    group4 /= 214;

    (*output)[2] = (uint32_t)(group4 % 214);
    group4 /= 214;

    (*output)[1] = (uint32_t)(group4 % 214);
    group4 /= 214;

    (*output)[0] = (uint32_t)(group4 % 214);
    group4 /= 214;
    *output += 4;

    uint64_t group5 = (*(uint64_t *)((*input) + 19)) >> 3;    group5 &= (1ull << 31) - 1;
    (*output)[3] = (uint32_t)(group5 % 214);
    group5 /= 214;

    (*output)[2] = (uint32_t)(group5 % 214);
    group5 /= 214;

    (*output)[1] = (uint32_t)(group5 % 214);
    group5 /= 214;

    (*output)[0] = (uint32_t)(group5 % 214);
    group5 /= 214;
    *output += 4;

    uint64_t group6 = (*(uint64_t *)((*input) + 23)) >> 2;    group6 &= (1ull << 31) - 1;
    (*output)[3] = (uint32_t)(group6 % 214);
    group6 /= 214;

    (*output)[2] = (uint32_t)(group6 % 214);
    group6 /= 214;

    (*output)[1] = (uint32_t)(group6 % 214);
    group6 /= 214;

    (*output)[0] = (uint32_t)(group6 % 214);
    group6 /= 214;
    *output += 4;

    uint64_t group7 = (*(uint64_t *)((*input) + 27)) >> 1;    group7 &= (1ull << 31) - 1;
    (*output)[3] = (uint32_t)(group7 % 214);
    group7 /= 214;

    (*output)[2] = (uint32_t)(group7 % 214);
    group7 /= 214;

    (*output)[1] = (uint32_t)(group7 % 214);
    group7 /= 214;

    (*output)[0] = (uint32_t)(group7 % 214);
    group7 /= 214;
    *output += 4;


    *input += 31;
}

// Unpack 31 bytes into 32 values
void Ultrapack_Decompress215(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 31) - 1;
    (*output)[3] = (uint32_t)(group0 % 215);
    group0 /= 215;

    (*output)[2] = (uint32_t)(group0 % 215);
    group0 /= 215;

    (*output)[1] = (uint32_t)(group0 % 215);
    group0 /= 215;

    (*output)[0] = (uint32_t)(group0 % 215);
    group0 /= 215;
    *output += 4;

    uint64_t group1 = (*(uint64_t *)((*input) + 3)) >> 7;    group1 &= (1ull << 31) - 1;
    (*output)[3] = (uint32_t)(group1 % 215);
    group1 /= 215;

    (*output)[2] = (uint32_t)(group1 % 215);
    group1 /= 215;

    (*output)[1] = (uint32_t)(group1 % 215);
    group1 /= 215;

    (*output)[0] = (uint32_t)(group1 % 215);
    group1 /= 215;
    *output += 4;

    uint64_t group2 = (*(uint64_t *)((*input) + 7)) >> 6;    group2 &= (1ull << 31) - 1;
    (*output)[3] = (uint32_t)(group2 % 215);
    group2 /= 215;

    (*output)[2] = (uint32_t)(group2 % 215);
    group2 /= 215;

    (*output)[1] = (uint32_t)(group2 % 215);
    group2 /= 215;

    (*output)[0] = (uint32_t)(group2 % 215);
    group2 /= 215;
    *output += 4;

    uint64_t group3 = (*(uint64_t *)((*input) + 11)) >> 5;    group3 &= (1ull << 31) - 1;
    (*output)[3] = (uint32_t)(group3 % 215);
    group3 /= 215;

    (*output)[2] = (uint32_t)(group3 % 215);
    group3 /= 215;

    (*output)[1] = (uint32_t)(group3 % 215);
    group3 /= 215;

    (*output)[0] = (uint32_t)(group3 % 215);
    group3 /= 215;
    *output += 4;

    uint64_t group4 = (*(uint64_t *)((*input) + 15)) >> 4;    group4 &= (1ull << 31) - 1;
    (*output)[3] = (uint32_t)(group4 % 215);
    group4 /= 215;

    (*output)[2] = (uint32_t)(group4 % 215);
    group4 /= 215;

    (*output)[1] = (uint32_t)(group4 % 215);
    group4 /= 215;

    (*output)[0] = (uint32_t)(group4 % 215);
    group4 /= 215;
    *output += 4;

    uint64_t group5 = (*(uint64_t *)((*input) + 19)) >> 3;    group5 &= (1ull << 31) - 1;
    (*output)[3] = (uint32_t)(group5 % 215);
    group5 /= 215;

    (*output)[2] = (uint32_t)(group5 % 215);
    group5 /= 215;

    (*output)[1] = (uint32_t)(group5 % 215);
    group5 /= 215;

    (*output)[0] = (uint32_t)(group5 % 215);
    group5 /= 215;
    *output += 4;

    uint64_t group6 = (*(uint64_t *)((*input) + 23)) >> 2;    group6 &= (1ull << 31) - 1;
    (*output)[3] = (uint32_t)(group6 % 215);
    group6 /= 215;

    (*output)[2] = (uint32_t)(group6 % 215);
    group6 /= 215;

    (*output)[1] = (uint32_t)(group6 % 215);
    group6 /= 215;

    (*output)[0] = (uint32_t)(group6 % 215);
    group6 /= 215;
    *output += 4;

    uint64_t group7 = (*(uint64_t *)((*input) + 27)) >> 1;    group7 &= (1ull << 31) - 1;
    (*output)[3] = (uint32_t)(group7 % 215);
    group7 /= 215;

    (*output)[2] = (uint32_t)(group7 % 215);
    group7 /= 215;

    (*output)[1] = (uint32_t)(group7 % 215);
    group7 /= 215;

    (*output)[0] = (uint32_t)(group7 % 215);
    group7 /= 215;
    *output += 4;


    *input += 31;
}

// Unpack 39 bytes into 40 values
void Ultrapack_Decompress216(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 39) - 1;
    (*output)[4] = (uint32_t)(group0 % 216);
    group0 /= 216;

    (*output)[3] = (uint32_t)(group0 % 216);
    group0 /= 216;

    (*output)[2] = (uint32_t)(group0 % 216);
    group0 /= 216;

    (*output)[1] = (uint32_t)(group0 % 216);
    group0 /= 216;

    (*output)[0] = (uint32_t)(group0 % 216);
    group0 /= 216;
    *output += 5;

    uint64_t group1 = (*(uint64_t *)((*input) + 4)) >> 7;    group1 &= (1ull << 39) - 1;
    (*output)[4] = (uint32_t)(group1 % 216);
    group1 /= 216;

    (*output)[3] = (uint32_t)(group1 % 216);
    group1 /= 216;

    (*output)[2] = (uint32_t)(group1 % 216);
    group1 /= 216;

    (*output)[1] = (uint32_t)(group1 % 216);
    group1 /= 216;

    (*output)[0] = (uint32_t)(group1 % 216);
    group1 /= 216;
    *output += 5;

    uint64_t group2 = (*(uint64_t *)((*input) + 9)) >> 6;    group2 &= (1ull << 39) - 1;
    (*output)[4] = (uint32_t)(group2 % 216);
    group2 /= 216;

    (*output)[3] = (uint32_t)(group2 % 216);
    group2 /= 216;

    (*output)[2] = (uint32_t)(group2 % 216);
    group2 /= 216;

    (*output)[1] = (uint32_t)(group2 % 216);
    group2 /= 216;

    (*output)[0] = (uint32_t)(group2 % 216);
    group2 /= 216;
    *output += 5;

    uint64_t group3 = (*(uint64_t *)((*input) + 14)) >> 5;    group3 &= (1ull << 39) - 1;
    (*output)[4] = (uint32_t)(group3 % 216);
    group3 /= 216;

    (*output)[3] = (uint32_t)(group3 % 216);
    group3 /= 216;

    (*output)[2] = (uint32_t)(group3 % 216);
    group3 /= 216;

    (*output)[1] = (uint32_t)(group3 % 216);
    group3 /= 216;

    (*output)[0] = (uint32_t)(group3 % 216);
    group3 /= 216;
    *output += 5;

    uint64_t group4 = (*(uint64_t *)((*input) + 19)) >> 4;    group4 &= (1ull << 39) - 1;
    (*output)[4] = (uint32_t)(group4 % 216);
    group4 /= 216;

    (*output)[3] = (uint32_t)(group4 % 216);
    group4 /= 216;

    (*output)[2] = (uint32_t)(group4 % 216);
    group4 /= 216;

    (*output)[1] = (uint32_t)(group4 % 216);
    group4 /= 216;

    (*output)[0] = (uint32_t)(group4 % 216);
    group4 /= 216;
    *output += 5;

    uint64_t group5 = (*(uint64_t *)((*input) + 24)) >> 3;    group5 &= (1ull << 39) - 1;
    (*output)[4] = (uint32_t)(group5 % 216);
    group5 /= 216;

    (*output)[3] = (uint32_t)(group5 % 216);
    group5 /= 216;

    (*output)[2] = (uint32_t)(group5 % 216);
    group5 /= 216;

    (*output)[1] = (uint32_t)(group5 % 216);
    group5 /= 216;

    (*output)[0] = (uint32_t)(group5 % 216);
    group5 /= 216;
    *output += 5;

    uint64_t group6 = (*(uint64_t *)((*input) + 29)) >> 2;    group6 &= (1ull << 39) - 1;
    (*output)[4] = (uint32_t)(group6 % 216);
    group6 /= 216;

    (*output)[3] = (uint32_t)(group6 % 216);
    group6 /= 216;

    (*output)[2] = (uint32_t)(group6 % 216);
    group6 /= 216;

    (*output)[1] = (uint32_t)(group6 % 216);
    group6 /= 216;

    (*output)[0] = (uint32_t)(group6 % 216);
    group6 /= 216;
    *output += 5;

    uint64_t group7 = (*(uint64_t *)((*input) + 34)) >> 1;    group7 &= (1ull << 39) - 1;
    (*output)[4] = (uint32_t)(group7 % 216);
    group7 /= 216;

    (*output)[3] = (uint32_t)(group7 % 216);
    group7 /= 216;

    (*output)[2] = (uint32_t)(group7 % 216);
    group7 /= 216;

    (*output)[1] = (uint32_t)(group7 % 216);
    group7 /= 216;

    (*output)[0] = (uint32_t)(group7 % 216);
    group7 /= 216;
    *output += 5;


    *input += 39;
}

// Unpack 39 bytes into 40 values
void Ultrapack_Decompress217(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 39) - 1;
    (*output)[4] = (uint32_t)(group0 % 217);
    group0 /= 217;

    (*output)[3] = (uint32_t)(group0 % 217);
    group0 /= 217;

    (*output)[2] = (uint32_t)(group0 % 217);
    group0 /= 217;

    (*output)[1] = (uint32_t)(group0 % 217);
    group0 /= 217;

    (*output)[0] = (uint32_t)(group0 % 217);
    group0 /= 217;
    *output += 5;

    uint64_t group1 = (*(uint64_t *)((*input) + 4)) >> 7;    group1 &= (1ull << 39) - 1;
    (*output)[4] = (uint32_t)(group1 % 217);
    group1 /= 217;

    (*output)[3] = (uint32_t)(group1 % 217);
    group1 /= 217;

    (*output)[2] = (uint32_t)(group1 % 217);
    group1 /= 217;

    (*output)[1] = (uint32_t)(group1 % 217);
    group1 /= 217;

    (*output)[0] = (uint32_t)(group1 % 217);
    group1 /= 217;
    *output += 5;

    uint64_t group2 = (*(uint64_t *)((*input) + 9)) >> 6;    group2 &= (1ull << 39) - 1;
    (*output)[4] = (uint32_t)(group2 % 217);
    group2 /= 217;

    (*output)[3] = (uint32_t)(group2 % 217);
    group2 /= 217;

    (*output)[2] = (uint32_t)(group2 % 217);
    group2 /= 217;

    (*output)[1] = (uint32_t)(group2 % 217);
    group2 /= 217;

    (*output)[0] = (uint32_t)(group2 % 217);
    group2 /= 217;
    *output += 5;

    uint64_t group3 = (*(uint64_t *)((*input) + 14)) >> 5;    group3 &= (1ull << 39) - 1;
    (*output)[4] = (uint32_t)(group3 % 217);
    group3 /= 217;

    (*output)[3] = (uint32_t)(group3 % 217);
    group3 /= 217;

    (*output)[2] = (uint32_t)(group3 % 217);
    group3 /= 217;

    (*output)[1] = (uint32_t)(group3 % 217);
    group3 /= 217;

    (*output)[0] = (uint32_t)(group3 % 217);
    group3 /= 217;
    *output += 5;

    uint64_t group4 = (*(uint64_t *)((*input) + 19)) >> 4;    group4 &= (1ull << 39) - 1;
    (*output)[4] = (uint32_t)(group4 % 217);
    group4 /= 217;

    (*output)[3] = (uint32_t)(group4 % 217);
    group4 /= 217;

    (*output)[2] = (uint32_t)(group4 % 217);
    group4 /= 217;

    (*output)[1] = (uint32_t)(group4 % 217);
    group4 /= 217;

    (*output)[0] = (uint32_t)(group4 % 217);
    group4 /= 217;
    *output += 5;

    uint64_t group5 = (*(uint64_t *)((*input) + 24)) >> 3;    group5 &= (1ull << 39) - 1;
    (*output)[4] = (uint32_t)(group5 % 217);
    group5 /= 217;

    (*output)[3] = (uint32_t)(group5 % 217);
    group5 /= 217;

    (*output)[2] = (uint32_t)(group5 % 217);
    group5 /= 217;

    (*output)[1] = (uint32_t)(group5 % 217);
    group5 /= 217;

    (*output)[0] = (uint32_t)(group5 % 217);
    group5 /= 217;
    *output += 5;

    uint64_t group6 = (*(uint64_t *)((*input) + 29)) >> 2;    group6 &= (1ull << 39) - 1;
    (*output)[4] = (uint32_t)(group6 % 217);
    group6 /= 217;

    (*output)[3] = (uint32_t)(group6 % 217);
    group6 /= 217;

    (*output)[2] = (uint32_t)(group6 % 217);
    group6 /= 217;

    (*output)[1] = (uint32_t)(group6 % 217);
    group6 /= 217;

    (*output)[0] = (uint32_t)(group6 % 217);
    group6 /= 217;
    *output += 5;

    uint64_t group7 = (*(uint64_t *)((*input) + 34)) >> 1;    group7 &= (1ull << 39) - 1;
    (*output)[4] = (uint32_t)(group7 % 217);
    group7 /= 217;

    (*output)[3] = (uint32_t)(group7 % 217);
    group7 /= 217;

    (*output)[2] = (uint32_t)(group7 % 217);
    group7 /= 217;

    (*output)[1] = (uint32_t)(group7 % 217);
    group7 /= 217;

    (*output)[0] = (uint32_t)(group7 % 217);
    group7 /= 217;
    *output += 5;


    *input += 39;
}

// Unpack 39 bytes into 40 values
void Ultrapack_Decompress218(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 39) - 1;
    (*output)[4] = (uint32_t)(group0 % 218);
    group0 /= 218;

    (*output)[3] = (uint32_t)(group0 % 218);
    group0 /= 218;

    (*output)[2] = (uint32_t)(group0 % 218);
    group0 /= 218;

    (*output)[1] = (uint32_t)(group0 % 218);
    group0 /= 218;

    (*output)[0] = (uint32_t)(group0 % 218);
    group0 /= 218;
    *output += 5;

    uint64_t group1 = (*(uint64_t *)((*input) + 4)) >> 7;    group1 &= (1ull << 39) - 1;
    (*output)[4] = (uint32_t)(group1 % 218);
    group1 /= 218;

    (*output)[3] = (uint32_t)(group1 % 218);
    group1 /= 218;

    (*output)[2] = (uint32_t)(group1 % 218);
    group1 /= 218;

    (*output)[1] = (uint32_t)(group1 % 218);
    group1 /= 218;

    (*output)[0] = (uint32_t)(group1 % 218);
    group1 /= 218;
    *output += 5;

    uint64_t group2 = (*(uint64_t *)((*input) + 9)) >> 6;    group2 &= (1ull << 39) - 1;
    (*output)[4] = (uint32_t)(group2 % 218);
    group2 /= 218;

    (*output)[3] = (uint32_t)(group2 % 218);
    group2 /= 218;

    (*output)[2] = (uint32_t)(group2 % 218);
    group2 /= 218;

    (*output)[1] = (uint32_t)(group2 % 218);
    group2 /= 218;

    (*output)[0] = (uint32_t)(group2 % 218);
    group2 /= 218;
    *output += 5;

    uint64_t group3 = (*(uint64_t *)((*input) + 14)) >> 5;    group3 &= (1ull << 39) - 1;
    (*output)[4] = (uint32_t)(group3 % 218);
    group3 /= 218;

    (*output)[3] = (uint32_t)(group3 % 218);
    group3 /= 218;

    (*output)[2] = (uint32_t)(group3 % 218);
    group3 /= 218;

    (*output)[1] = (uint32_t)(group3 % 218);
    group3 /= 218;

    (*output)[0] = (uint32_t)(group3 % 218);
    group3 /= 218;
    *output += 5;

    uint64_t group4 = (*(uint64_t *)((*input) + 19)) >> 4;    group4 &= (1ull << 39) - 1;
    (*output)[4] = (uint32_t)(group4 % 218);
    group4 /= 218;

    (*output)[3] = (uint32_t)(group4 % 218);
    group4 /= 218;

    (*output)[2] = (uint32_t)(group4 % 218);
    group4 /= 218;

    (*output)[1] = (uint32_t)(group4 % 218);
    group4 /= 218;

    (*output)[0] = (uint32_t)(group4 % 218);
    group4 /= 218;
    *output += 5;

    uint64_t group5 = (*(uint64_t *)((*input) + 24)) >> 3;    group5 &= (1ull << 39) - 1;
    (*output)[4] = (uint32_t)(group5 % 218);
    group5 /= 218;

    (*output)[3] = (uint32_t)(group5 % 218);
    group5 /= 218;

    (*output)[2] = (uint32_t)(group5 % 218);
    group5 /= 218;

    (*output)[1] = (uint32_t)(group5 % 218);
    group5 /= 218;

    (*output)[0] = (uint32_t)(group5 % 218);
    group5 /= 218;
    *output += 5;

    uint64_t group6 = (*(uint64_t *)((*input) + 29)) >> 2;    group6 &= (1ull << 39) - 1;
    (*output)[4] = (uint32_t)(group6 % 218);
    group6 /= 218;

    (*output)[3] = (uint32_t)(group6 % 218);
    group6 /= 218;

    (*output)[2] = (uint32_t)(group6 % 218);
    group6 /= 218;

    (*output)[1] = (uint32_t)(group6 % 218);
    group6 /= 218;

    (*output)[0] = (uint32_t)(group6 % 218);
    group6 /= 218;
    *output += 5;

    uint64_t group7 = (*(uint64_t *)((*input) + 34)) >> 1;    group7 &= (1ull << 39) - 1;
    (*output)[4] = (uint32_t)(group7 % 218);
    group7 /= 218;

    (*output)[3] = (uint32_t)(group7 % 218);
    group7 /= 218;

    (*output)[2] = (uint32_t)(group7 % 218);
    group7 /= 218;

    (*output)[1] = (uint32_t)(group7 % 218);
    group7 /= 218;

    (*output)[0] = (uint32_t)(group7 % 218);
    group7 /= 218;
    *output += 5;


    *input += 39;
}

// Unpack 39 bytes into 40 values
void Ultrapack_Decompress219(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 39) - 1;
    (*output)[4] = (uint32_t)(group0 % 219);
    group0 /= 219;

    (*output)[3] = (uint32_t)(group0 % 219);
    group0 /= 219;

    (*output)[2] = (uint32_t)(group0 % 219);
    group0 /= 219;

    (*output)[1] = (uint32_t)(group0 % 219);
    group0 /= 219;

    (*output)[0] = (uint32_t)(group0 % 219);
    group0 /= 219;
    *output += 5;

    uint64_t group1 = (*(uint64_t *)((*input) + 4)) >> 7;    group1 &= (1ull << 39) - 1;
    (*output)[4] = (uint32_t)(group1 % 219);
    group1 /= 219;

    (*output)[3] = (uint32_t)(group1 % 219);
    group1 /= 219;

    (*output)[2] = (uint32_t)(group1 % 219);
    group1 /= 219;

    (*output)[1] = (uint32_t)(group1 % 219);
    group1 /= 219;

    (*output)[0] = (uint32_t)(group1 % 219);
    group1 /= 219;
    *output += 5;

    uint64_t group2 = (*(uint64_t *)((*input) + 9)) >> 6;    group2 &= (1ull << 39) - 1;
    (*output)[4] = (uint32_t)(group2 % 219);
    group2 /= 219;

    (*output)[3] = (uint32_t)(group2 % 219);
    group2 /= 219;

    (*output)[2] = (uint32_t)(group2 % 219);
    group2 /= 219;

    (*output)[1] = (uint32_t)(group2 % 219);
    group2 /= 219;

    (*output)[0] = (uint32_t)(group2 % 219);
    group2 /= 219;
    *output += 5;

    uint64_t group3 = (*(uint64_t *)((*input) + 14)) >> 5;    group3 &= (1ull << 39) - 1;
    (*output)[4] = (uint32_t)(group3 % 219);
    group3 /= 219;

    (*output)[3] = (uint32_t)(group3 % 219);
    group3 /= 219;

    (*output)[2] = (uint32_t)(group3 % 219);
    group3 /= 219;

    (*output)[1] = (uint32_t)(group3 % 219);
    group3 /= 219;

    (*output)[0] = (uint32_t)(group3 % 219);
    group3 /= 219;
    *output += 5;

    uint64_t group4 = (*(uint64_t *)((*input) + 19)) >> 4;    group4 &= (1ull << 39) - 1;
    (*output)[4] = (uint32_t)(group4 % 219);
    group4 /= 219;

    (*output)[3] = (uint32_t)(group4 % 219);
    group4 /= 219;

    (*output)[2] = (uint32_t)(group4 % 219);
    group4 /= 219;

    (*output)[1] = (uint32_t)(group4 % 219);
    group4 /= 219;

    (*output)[0] = (uint32_t)(group4 % 219);
    group4 /= 219;
    *output += 5;

    uint64_t group5 = (*(uint64_t *)((*input) + 24)) >> 3;    group5 &= (1ull << 39) - 1;
    (*output)[4] = (uint32_t)(group5 % 219);
    group5 /= 219;

    (*output)[3] = (uint32_t)(group5 % 219);
    group5 /= 219;

    (*output)[2] = (uint32_t)(group5 % 219);
    group5 /= 219;

    (*output)[1] = (uint32_t)(group5 % 219);
    group5 /= 219;

    (*output)[0] = (uint32_t)(group5 % 219);
    group5 /= 219;
    *output += 5;

    uint64_t group6 = (*(uint64_t *)((*input) + 29)) >> 2;    group6 &= (1ull << 39) - 1;
    (*output)[4] = (uint32_t)(group6 % 219);
    group6 /= 219;

    (*output)[3] = (uint32_t)(group6 % 219);
    group6 /= 219;

    (*output)[2] = (uint32_t)(group6 % 219);
    group6 /= 219;

    (*output)[1] = (uint32_t)(group6 % 219);
    group6 /= 219;

    (*output)[0] = (uint32_t)(group6 % 219);
    group6 /= 219;
    *output += 5;

    uint64_t group7 = (*(uint64_t *)((*input) + 34)) >> 1;    group7 &= (1ull << 39) - 1;
    (*output)[4] = (uint32_t)(group7 % 219);
    group7 /= 219;

    (*output)[3] = (uint32_t)(group7 % 219);
    group7 /= 219;

    (*output)[2] = (uint32_t)(group7 % 219);
    group7 /= 219;

    (*output)[1] = (uint32_t)(group7 % 219);
    group7 /= 219;

    (*output)[0] = (uint32_t)(group7 % 219);
    group7 /= 219;
    *output += 5;


    *input += 39;
}

// Unpack 39 bytes into 40 values
void Ultrapack_Decompress220(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 39) - 1;
    (*output)[4] = (uint32_t)(group0 % 220);
    group0 /= 220;

    (*output)[3] = (uint32_t)(group0 % 220);
    group0 /= 220;

    (*output)[2] = (uint32_t)(group0 % 220);
    group0 /= 220;

    (*output)[1] = (uint32_t)(group0 % 220);
    group0 /= 220;

    (*output)[0] = (uint32_t)(group0 % 220);
    group0 /= 220;
    *output += 5;

    uint64_t group1 = (*(uint64_t *)((*input) + 4)) >> 7;    group1 &= (1ull << 39) - 1;
    (*output)[4] = (uint32_t)(group1 % 220);
    group1 /= 220;

    (*output)[3] = (uint32_t)(group1 % 220);
    group1 /= 220;

    (*output)[2] = (uint32_t)(group1 % 220);
    group1 /= 220;

    (*output)[1] = (uint32_t)(group1 % 220);
    group1 /= 220;

    (*output)[0] = (uint32_t)(group1 % 220);
    group1 /= 220;
    *output += 5;

    uint64_t group2 = (*(uint64_t *)((*input) + 9)) >> 6;    group2 &= (1ull << 39) - 1;
    (*output)[4] = (uint32_t)(group2 % 220);
    group2 /= 220;

    (*output)[3] = (uint32_t)(group2 % 220);
    group2 /= 220;

    (*output)[2] = (uint32_t)(group2 % 220);
    group2 /= 220;

    (*output)[1] = (uint32_t)(group2 % 220);
    group2 /= 220;

    (*output)[0] = (uint32_t)(group2 % 220);
    group2 /= 220;
    *output += 5;

    uint64_t group3 = (*(uint64_t *)((*input) + 14)) >> 5;    group3 &= (1ull << 39) - 1;
    (*output)[4] = (uint32_t)(group3 % 220);
    group3 /= 220;

    (*output)[3] = (uint32_t)(group3 % 220);
    group3 /= 220;

    (*output)[2] = (uint32_t)(group3 % 220);
    group3 /= 220;

    (*output)[1] = (uint32_t)(group3 % 220);
    group3 /= 220;

    (*output)[0] = (uint32_t)(group3 % 220);
    group3 /= 220;
    *output += 5;

    uint64_t group4 = (*(uint64_t *)((*input) + 19)) >> 4;    group4 &= (1ull << 39) - 1;
    (*output)[4] = (uint32_t)(group4 % 220);
    group4 /= 220;

    (*output)[3] = (uint32_t)(group4 % 220);
    group4 /= 220;

    (*output)[2] = (uint32_t)(group4 % 220);
    group4 /= 220;

    (*output)[1] = (uint32_t)(group4 % 220);
    group4 /= 220;

    (*output)[0] = (uint32_t)(group4 % 220);
    group4 /= 220;
    *output += 5;

    uint64_t group5 = (*(uint64_t *)((*input) + 24)) >> 3;    group5 &= (1ull << 39) - 1;
    (*output)[4] = (uint32_t)(group5 % 220);
    group5 /= 220;

    (*output)[3] = (uint32_t)(group5 % 220);
    group5 /= 220;

    (*output)[2] = (uint32_t)(group5 % 220);
    group5 /= 220;

    (*output)[1] = (uint32_t)(group5 % 220);
    group5 /= 220;

    (*output)[0] = (uint32_t)(group5 % 220);
    group5 /= 220;
    *output += 5;

    uint64_t group6 = (*(uint64_t *)((*input) + 29)) >> 2;    group6 &= (1ull << 39) - 1;
    (*output)[4] = (uint32_t)(group6 % 220);
    group6 /= 220;

    (*output)[3] = (uint32_t)(group6 % 220);
    group6 /= 220;

    (*output)[2] = (uint32_t)(group6 % 220);
    group6 /= 220;

    (*output)[1] = (uint32_t)(group6 % 220);
    group6 /= 220;

    (*output)[0] = (uint32_t)(group6 % 220);
    group6 /= 220;
    *output += 5;

    uint64_t group7 = (*(uint64_t *)((*input) + 34)) >> 1;    group7 &= (1ull << 39) - 1;
    (*output)[4] = (uint32_t)(group7 % 220);
    group7 /= 220;

    (*output)[3] = (uint32_t)(group7 % 220);
    group7 /= 220;

    (*output)[2] = (uint32_t)(group7 % 220);
    group7 /= 220;

    (*output)[1] = (uint32_t)(group7 % 220);
    group7 /= 220;

    (*output)[0] = (uint32_t)(group7 % 220);
    group7 /= 220;
    *output += 5;


    *input += 39;
}

// Unpack 39 bytes into 40 values
void Ultrapack_Decompress221(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 39) - 1;
    (*output)[4] = (uint32_t)(group0 % 221);
    group0 /= 221;

    (*output)[3] = (uint32_t)(group0 % 221);
    group0 /= 221;

    (*output)[2] = (uint32_t)(group0 % 221);
    group0 /= 221;

    (*output)[1] = (uint32_t)(group0 % 221);
    group0 /= 221;

    (*output)[0] = (uint32_t)(group0 % 221);
    group0 /= 221;
    *output += 5;

    uint64_t group1 = (*(uint64_t *)((*input) + 4)) >> 7;    group1 &= (1ull << 39) - 1;
    (*output)[4] = (uint32_t)(group1 % 221);
    group1 /= 221;

    (*output)[3] = (uint32_t)(group1 % 221);
    group1 /= 221;

    (*output)[2] = (uint32_t)(group1 % 221);
    group1 /= 221;

    (*output)[1] = (uint32_t)(group1 % 221);
    group1 /= 221;

    (*output)[0] = (uint32_t)(group1 % 221);
    group1 /= 221;
    *output += 5;

    uint64_t group2 = (*(uint64_t *)((*input) + 9)) >> 6;    group2 &= (1ull << 39) - 1;
    (*output)[4] = (uint32_t)(group2 % 221);
    group2 /= 221;

    (*output)[3] = (uint32_t)(group2 % 221);
    group2 /= 221;

    (*output)[2] = (uint32_t)(group2 % 221);
    group2 /= 221;

    (*output)[1] = (uint32_t)(group2 % 221);
    group2 /= 221;

    (*output)[0] = (uint32_t)(group2 % 221);
    group2 /= 221;
    *output += 5;

    uint64_t group3 = (*(uint64_t *)((*input) + 14)) >> 5;    group3 &= (1ull << 39) - 1;
    (*output)[4] = (uint32_t)(group3 % 221);
    group3 /= 221;

    (*output)[3] = (uint32_t)(group3 % 221);
    group3 /= 221;

    (*output)[2] = (uint32_t)(group3 % 221);
    group3 /= 221;

    (*output)[1] = (uint32_t)(group3 % 221);
    group3 /= 221;

    (*output)[0] = (uint32_t)(group3 % 221);
    group3 /= 221;
    *output += 5;

    uint64_t group4 = (*(uint64_t *)((*input) + 19)) >> 4;    group4 &= (1ull << 39) - 1;
    (*output)[4] = (uint32_t)(group4 % 221);
    group4 /= 221;

    (*output)[3] = (uint32_t)(group4 % 221);
    group4 /= 221;

    (*output)[2] = (uint32_t)(group4 % 221);
    group4 /= 221;

    (*output)[1] = (uint32_t)(group4 % 221);
    group4 /= 221;

    (*output)[0] = (uint32_t)(group4 % 221);
    group4 /= 221;
    *output += 5;

    uint64_t group5 = (*(uint64_t *)((*input) + 24)) >> 3;    group5 &= (1ull << 39) - 1;
    (*output)[4] = (uint32_t)(group5 % 221);
    group5 /= 221;

    (*output)[3] = (uint32_t)(group5 % 221);
    group5 /= 221;

    (*output)[2] = (uint32_t)(group5 % 221);
    group5 /= 221;

    (*output)[1] = (uint32_t)(group5 % 221);
    group5 /= 221;

    (*output)[0] = (uint32_t)(group5 % 221);
    group5 /= 221;
    *output += 5;

    uint64_t group6 = (*(uint64_t *)((*input) + 29)) >> 2;    group6 &= (1ull << 39) - 1;
    (*output)[4] = (uint32_t)(group6 % 221);
    group6 /= 221;

    (*output)[3] = (uint32_t)(group6 % 221);
    group6 /= 221;

    (*output)[2] = (uint32_t)(group6 % 221);
    group6 /= 221;

    (*output)[1] = (uint32_t)(group6 % 221);
    group6 /= 221;

    (*output)[0] = (uint32_t)(group6 % 221);
    group6 /= 221;
    *output += 5;

    uint64_t group7 = (*(uint64_t *)((*input) + 34)) >> 1;    group7 &= (1ull << 39) - 1;
    (*output)[4] = (uint32_t)(group7 % 221);
    group7 /= 221;

    (*output)[3] = (uint32_t)(group7 % 221);
    group7 /= 221;

    (*output)[2] = (uint32_t)(group7 % 221);
    group7 /= 221;

    (*output)[1] = (uint32_t)(group7 % 221);
    group7 /= 221;

    (*output)[0] = (uint32_t)(group7 % 221);
    group7 /= 221;
    *output += 5;


    *input += 39;
}

// Unpack 39 bytes into 40 values
void Ultrapack_Decompress222(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 39) - 1;
    (*output)[4] = (uint32_t)(group0 % 222);
    group0 /= 222;

    (*output)[3] = (uint32_t)(group0 % 222);
    group0 /= 222;

    (*output)[2] = (uint32_t)(group0 % 222);
    group0 /= 222;

    (*output)[1] = (uint32_t)(group0 % 222);
    group0 /= 222;

    (*output)[0] = (uint32_t)(group0 % 222);
    group0 /= 222;
    *output += 5;

    uint64_t group1 = (*(uint64_t *)((*input) + 4)) >> 7;    group1 &= (1ull << 39) - 1;
    (*output)[4] = (uint32_t)(group1 % 222);
    group1 /= 222;

    (*output)[3] = (uint32_t)(group1 % 222);
    group1 /= 222;

    (*output)[2] = (uint32_t)(group1 % 222);
    group1 /= 222;

    (*output)[1] = (uint32_t)(group1 % 222);
    group1 /= 222;

    (*output)[0] = (uint32_t)(group1 % 222);
    group1 /= 222;
    *output += 5;

    uint64_t group2 = (*(uint64_t *)((*input) + 9)) >> 6;    group2 &= (1ull << 39) - 1;
    (*output)[4] = (uint32_t)(group2 % 222);
    group2 /= 222;

    (*output)[3] = (uint32_t)(group2 % 222);
    group2 /= 222;

    (*output)[2] = (uint32_t)(group2 % 222);
    group2 /= 222;

    (*output)[1] = (uint32_t)(group2 % 222);
    group2 /= 222;

    (*output)[0] = (uint32_t)(group2 % 222);
    group2 /= 222;
    *output += 5;

    uint64_t group3 = (*(uint64_t *)((*input) + 14)) >> 5;    group3 &= (1ull << 39) - 1;
    (*output)[4] = (uint32_t)(group3 % 222);
    group3 /= 222;

    (*output)[3] = (uint32_t)(group3 % 222);
    group3 /= 222;

    (*output)[2] = (uint32_t)(group3 % 222);
    group3 /= 222;

    (*output)[1] = (uint32_t)(group3 % 222);
    group3 /= 222;

    (*output)[0] = (uint32_t)(group3 % 222);
    group3 /= 222;
    *output += 5;

    uint64_t group4 = (*(uint64_t *)((*input) + 19)) >> 4;    group4 &= (1ull << 39) - 1;
    (*output)[4] = (uint32_t)(group4 % 222);
    group4 /= 222;

    (*output)[3] = (uint32_t)(group4 % 222);
    group4 /= 222;

    (*output)[2] = (uint32_t)(group4 % 222);
    group4 /= 222;

    (*output)[1] = (uint32_t)(group4 % 222);
    group4 /= 222;

    (*output)[0] = (uint32_t)(group4 % 222);
    group4 /= 222;
    *output += 5;

    uint64_t group5 = (*(uint64_t *)((*input) + 24)) >> 3;    group5 &= (1ull << 39) - 1;
    (*output)[4] = (uint32_t)(group5 % 222);
    group5 /= 222;

    (*output)[3] = (uint32_t)(group5 % 222);
    group5 /= 222;

    (*output)[2] = (uint32_t)(group5 % 222);
    group5 /= 222;

    (*output)[1] = (uint32_t)(group5 % 222);
    group5 /= 222;

    (*output)[0] = (uint32_t)(group5 % 222);
    group5 /= 222;
    *output += 5;

    uint64_t group6 = (*(uint64_t *)((*input) + 29)) >> 2;    group6 &= (1ull << 39) - 1;
    (*output)[4] = (uint32_t)(group6 % 222);
    group6 /= 222;

    (*output)[3] = (uint32_t)(group6 % 222);
    group6 /= 222;

    (*output)[2] = (uint32_t)(group6 % 222);
    group6 /= 222;

    (*output)[1] = (uint32_t)(group6 % 222);
    group6 /= 222;

    (*output)[0] = (uint32_t)(group6 % 222);
    group6 /= 222;
    *output += 5;

    uint64_t group7 = (*(uint64_t *)((*input) + 34)) >> 1;    group7 &= (1ull << 39) - 1;
    (*output)[4] = (uint32_t)(group7 % 222);
    group7 /= 222;

    (*output)[3] = (uint32_t)(group7 % 222);
    group7 /= 222;

    (*output)[2] = (uint32_t)(group7 % 222);
    group7 /= 222;

    (*output)[1] = (uint32_t)(group7 % 222);
    group7 /= 222;

    (*output)[0] = (uint32_t)(group7 % 222);
    group7 /= 222;
    *output += 5;


    *input += 39;
}

// Unpack 47 bytes into 48 values
void Ultrapack_Decompress223(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 47) - 1;
    (*output)[5] = (uint32_t)(group0 % 223);
    group0 /= 223;

    (*output)[4] = (uint32_t)(group0 % 223);
    group0 /= 223;

    (*output)[3] = (uint32_t)(group0 % 223);
    group0 /= 223;

    (*output)[2] = (uint32_t)(group0 % 223);
    group0 /= 223;

    (*output)[1] = (uint32_t)(group0 % 223);
    group0 /= 223;

    (*output)[0] = (uint32_t)(group0 % 223);
    group0 /= 223;
    *output += 6;

    uint64_t group1 = (*(uint64_t *)((*input) + 5)) >> 7;    group1 &= (1ull << 47) - 1;
    (*output)[5] = (uint32_t)(group1 % 223);
    group1 /= 223;

    (*output)[4] = (uint32_t)(group1 % 223);
    group1 /= 223;

    (*output)[3] = (uint32_t)(group1 % 223);
    group1 /= 223;

    (*output)[2] = (uint32_t)(group1 % 223);
    group1 /= 223;

    (*output)[1] = (uint32_t)(group1 % 223);
    group1 /= 223;

    (*output)[0] = (uint32_t)(group1 % 223);
    group1 /= 223;
    *output += 6;

    uint64_t group2 = (*(uint64_t *)((*input) + 11)) >> 6;    group2 &= (1ull << 47) - 1;
    (*output)[5] = (uint32_t)(group2 % 223);
    group2 /= 223;

    (*output)[4] = (uint32_t)(group2 % 223);
    group2 /= 223;

    (*output)[3] = (uint32_t)(group2 % 223);
    group2 /= 223;

    (*output)[2] = (uint32_t)(group2 % 223);
    group2 /= 223;

    (*output)[1] = (uint32_t)(group2 % 223);
    group2 /= 223;

    (*output)[0] = (uint32_t)(group2 % 223);
    group2 /= 223;
    *output += 6;

    uint64_t group3 = (*(uint64_t *)((*input) + 17)) >> 5;    group3 &= (1ull << 47) - 1;
    (*output)[5] = (uint32_t)(group3 % 223);
    group3 /= 223;

    (*output)[4] = (uint32_t)(group3 % 223);
    group3 /= 223;

    (*output)[3] = (uint32_t)(group3 % 223);
    group3 /= 223;

    (*output)[2] = (uint32_t)(group3 % 223);
    group3 /= 223;

    (*output)[1] = (uint32_t)(group3 % 223);
    group3 /= 223;

    (*output)[0] = (uint32_t)(group3 % 223);
    group3 /= 223;
    *output += 6;

    uint64_t group4 = (*(uint64_t *)((*input) + 23)) >> 4;    group4 &= (1ull << 47) - 1;
    (*output)[5] = (uint32_t)(group4 % 223);
    group4 /= 223;

    (*output)[4] = (uint32_t)(group4 % 223);
    group4 /= 223;

    (*output)[3] = (uint32_t)(group4 % 223);
    group4 /= 223;

    (*output)[2] = (uint32_t)(group4 % 223);
    group4 /= 223;

    (*output)[1] = (uint32_t)(group4 % 223);
    group4 /= 223;

    (*output)[0] = (uint32_t)(group4 % 223);
    group4 /= 223;
    *output += 6;

    uint64_t group5 = (*(uint64_t *)((*input) + 29)) >> 3;    group5 &= (1ull << 47) - 1;
    (*output)[5] = (uint32_t)(group5 % 223);
    group5 /= 223;

    (*output)[4] = (uint32_t)(group5 % 223);
    group5 /= 223;

    (*output)[3] = (uint32_t)(group5 % 223);
    group5 /= 223;

    (*output)[2] = (uint32_t)(group5 % 223);
    group5 /= 223;

    (*output)[1] = (uint32_t)(group5 % 223);
    group5 /= 223;

    (*output)[0] = (uint32_t)(group5 % 223);
    group5 /= 223;
    *output += 6;

    uint64_t group6 = (*(uint64_t *)((*input) + 35)) >> 2;    group6 &= (1ull << 47) - 1;
    (*output)[5] = (uint32_t)(group6 % 223);
    group6 /= 223;

    (*output)[4] = (uint32_t)(group6 % 223);
    group6 /= 223;

    (*output)[3] = (uint32_t)(group6 % 223);
    group6 /= 223;

    (*output)[2] = (uint32_t)(group6 % 223);
    group6 /= 223;

    (*output)[1] = (uint32_t)(group6 % 223);
    group6 /= 223;

    (*output)[0] = (uint32_t)(group6 % 223);
    group6 /= 223;
    *output += 6;

    uint64_t group7 = (*(uint64_t *)((*input) + 41)) >> 1;    group7 &= (1ull << 47) - 1;
    (*output)[5] = (uint32_t)(group7 % 223);
    group7 /= 223;

    (*output)[4] = (uint32_t)(group7 % 223);
    group7 /= 223;

    (*output)[3] = (uint32_t)(group7 % 223);
    group7 /= 223;

    (*output)[2] = (uint32_t)(group7 % 223);
    group7 /= 223;

    (*output)[1] = (uint32_t)(group7 % 223);
    group7 /= 223;

    (*output)[0] = (uint32_t)(group7 % 223);
    group7 /= 223;
    *output += 6;


    *input += 47;
}

// Unpack 47 bytes into 48 values
void Ultrapack_Decompress224(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 47) - 1;
    (*output)[5] = (uint32_t)(group0 % 224);
    group0 /= 224;

    (*output)[4] = (uint32_t)(group0 % 224);
    group0 /= 224;

    (*output)[3] = (uint32_t)(group0 % 224);
    group0 /= 224;

    (*output)[2] = (uint32_t)(group0 % 224);
    group0 /= 224;

    (*output)[1] = (uint32_t)(group0 % 224);
    group0 /= 224;

    (*output)[0] = (uint32_t)(group0 % 224);
    group0 /= 224;
    *output += 6;

    uint64_t group1 = (*(uint64_t *)((*input) + 5)) >> 7;    group1 &= (1ull << 47) - 1;
    (*output)[5] = (uint32_t)(group1 % 224);
    group1 /= 224;

    (*output)[4] = (uint32_t)(group1 % 224);
    group1 /= 224;

    (*output)[3] = (uint32_t)(group1 % 224);
    group1 /= 224;

    (*output)[2] = (uint32_t)(group1 % 224);
    group1 /= 224;

    (*output)[1] = (uint32_t)(group1 % 224);
    group1 /= 224;

    (*output)[0] = (uint32_t)(group1 % 224);
    group1 /= 224;
    *output += 6;

    uint64_t group2 = (*(uint64_t *)((*input) + 11)) >> 6;    group2 &= (1ull << 47) - 1;
    (*output)[5] = (uint32_t)(group2 % 224);
    group2 /= 224;

    (*output)[4] = (uint32_t)(group2 % 224);
    group2 /= 224;

    (*output)[3] = (uint32_t)(group2 % 224);
    group2 /= 224;

    (*output)[2] = (uint32_t)(group2 % 224);
    group2 /= 224;

    (*output)[1] = (uint32_t)(group2 % 224);
    group2 /= 224;

    (*output)[0] = (uint32_t)(group2 % 224);
    group2 /= 224;
    *output += 6;

    uint64_t group3 = (*(uint64_t *)((*input) + 17)) >> 5;    group3 &= (1ull << 47) - 1;
    (*output)[5] = (uint32_t)(group3 % 224);
    group3 /= 224;

    (*output)[4] = (uint32_t)(group3 % 224);
    group3 /= 224;

    (*output)[3] = (uint32_t)(group3 % 224);
    group3 /= 224;

    (*output)[2] = (uint32_t)(group3 % 224);
    group3 /= 224;

    (*output)[1] = (uint32_t)(group3 % 224);
    group3 /= 224;

    (*output)[0] = (uint32_t)(group3 % 224);
    group3 /= 224;
    *output += 6;

    uint64_t group4 = (*(uint64_t *)((*input) + 23)) >> 4;    group4 &= (1ull << 47) - 1;
    (*output)[5] = (uint32_t)(group4 % 224);
    group4 /= 224;

    (*output)[4] = (uint32_t)(group4 % 224);
    group4 /= 224;

    (*output)[3] = (uint32_t)(group4 % 224);
    group4 /= 224;

    (*output)[2] = (uint32_t)(group4 % 224);
    group4 /= 224;

    (*output)[1] = (uint32_t)(group4 % 224);
    group4 /= 224;

    (*output)[0] = (uint32_t)(group4 % 224);
    group4 /= 224;
    *output += 6;

    uint64_t group5 = (*(uint64_t *)((*input) + 29)) >> 3;    group5 &= (1ull << 47) - 1;
    (*output)[5] = (uint32_t)(group5 % 224);
    group5 /= 224;

    (*output)[4] = (uint32_t)(group5 % 224);
    group5 /= 224;

    (*output)[3] = (uint32_t)(group5 % 224);
    group5 /= 224;

    (*output)[2] = (uint32_t)(group5 % 224);
    group5 /= 224;

    (*output)[1] = (uint32_t)(group5 % 224);
    group5 /= 224;

    (*output)[0] = (uint32_t)(group5 % 224);
    group5 /= 224;
    *output += 6;

    uint64_t group6 = (*(uint64_t *)((*input) + 35)) >> 2;    group6 &= (1ull << 47) - 1;
    (*output)[5] = (uint32_t)(group6 % 224);
    group6 /= 224;

    (*output)[4] = (uint32_t)(group6 % 224);
    group6 /= 224;

    (*output)[3] = (uint32_t)(group6 % 224);
    group6 /= 224;

    (*output)[2] = (uint32_t)(group6 % 224);
    group6 /= 224;

    (*output)[1] = (uint32_t)(group6 % 224);
    group6 /= 224;

    (*output)[0] = (uint32_t)(group6 % 224);
    group6 /= 224;
    *output += 6;

    uint64_t group7 = (*(uint64_t *)((*input) + 41)) >> 1;    group7 &= (1ull << 47) - 1;
    (*output)[5] = (uint32_t)(group7 % 224);
    group7 /= 224;

    (*output)[4] = (uint32_t)(group7 % 224);
    group7 /= 224;

    (*output)[3] = (uint32_t)(group7 % 224);
    group7 /= 224;

    (*output)[2] = (uint32_t)(group7 % 224);
    group7 /= 224;

    (*output)[1] = (uint32_t)(group7 % 224);
    group7 /= 224;

    (*output)[0] = (uint32_t)(group7 % 224);
    group7 /= 224;
    *output += 6;


    *input += 47;
}

// Unpack 47 bytes into 48 values
void Ultrapack_Decompress225(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 47) - 1;
    (*output)[5] = (uint32_t)(group0 % 225);
    group0 /= 225;

    (*output)[4] = (uint32_t)(group0 % 225);
    group0 /= 225;

    (*output)[3] = (uint32_t)(group0 % 225);
    group0 /= 225;

    (*output)[2] = (uint32_t)(group0 % 225);
    group0 /= 225;

    (*output)[1] = (uint32_t)(group0 % 225);
    group0 /= 225;

    (*output)[0] = (uint32_t)(group0 % 225);
    group0 /= 225;
    *output += 6;

    uint64_t group1 = (*(uint64_t *)((*input) + 5)) >> 7;    group1 &= (1ull << 47) - 1;
    (*output)[5] = (uint32_t)(group1 % 225);
    group1 /= 225;

    (*output)[4] = (uint32_t)(group1 % 225);
    group1 /= 225;

    (*output)[3] = (uint32_t)(group1 % 225);
    group1 /= 225;

    (*output)[2] = (uint32_t)(group1 % 225);
    group1 /= 225;

    (*output)[1] = (uint32_t)(group1 % 225);
    group1 /= 225;

    (*output)[0] = (uint32_t)(group1 % 225);
    group1 /= 225;
    *output += 6;

    uint64_t group2 = (*(uint64_t *)((*input) + 11)) >> 6;    group2 &= (1ull << 47) - 1;
    (*output)[5] = (uint32_t)(group2 % 225);
    group2 /= 225;

    (*output)[4] = (uint32_t)(group2 % 225);
    group2 /= 225;

    (*output)[3] = (uint32_t)(group2 % 225);
    group2 /= 225;

    (*output)[2] = (uint32_t)(group2 % 225);
    group2 /= 225;

    (*output)[1] = (uint32_t)(group2 % 225);
    group2 /= 225;

    (*output)[0] = (uint32_t)(group2 % 225);
    group2 /= 225;
    *output += 6;

    uint64_t group3 = (*(uint64_t *)((*input) + 17)) >> 5;    group3 &= (1ull << 47) - 1;
    (*output)[5] = (uint32_t)(group3 % 225);
    group3 /= 225;

    (*output)[4] = (uint32_t)(group3 % 225);
    group3 /= 225;

    (*output)[3] = (uint32_t)(group3 % 225);
    group3 /= 225;

    (*output)[2] = (uint32_t)(group3 % 225);
    group3 /= 225;

    (*output)[1] = (uint32_t)(group3 % 225);
    group3 /= 225;

    (*output)[0] = (uint32_t)(group3 % 225);
    group3 /= 225;
    *output += 6;

    uint64_t group4 = (*(uint64_t *)((*input) + 23)) >> 4;    group4 &= (1ull << 47) - 1;
    (*output)[5] = (uint32_t)(group4 % 225);
    group4 /= 225;

    (*output)[4] = (uint32_t)(group4 % 225);
    group4 /= 225;

    (*output)[3] = (uint32_t)(group4 % 225);
    group4 /= 225;

    (*output)[2] = (uint32_t)(group4 % 225);
    group4 /= 225;

    (*output)[1] = (uint32_t)(group4 % 225);
    group4 /= 225;

    (*output)[0] = (uint32_t)(group4 % 225);
    group4 /= 225;
    *output += 6;

    uint64_t group5 = (*(uint64_t *)((*input) + 29)) >> 3;    group5 &= (1ull << 47) - 1;
    (*output)[5] = (uint32_t)(group5 % 225);
    group5 /= 225;

    (*output)[4] = (uint32_t)(group5 % 225);
    group5 /= 225;

    (*output)[3] = (uint32_t)(group5 % 225);
    group5 /= 225;

    (*output)[2] = (uint32_t)(group5 % 225);
    group5 /= 225;

    (*output)[1] = (uint32_t)(group5 % 225);
    group5 /= 225;

    (*output)[0] = (uint32_t)(group5 % 225);
    group5 /= 225;
    *output += 6;

    uint64_t group6 = (*(uint64_t *)((*input) + 35)) >> 2;    group6 &= (1ull << 47) - 1;
    (*output)[5] = (uint32_t)(group6 % 225);
    group6 /= 225;

    (*output)[4] = (uint32_t)(group6 % 225);
    group6 /= 225;

    (*output)[3] = (uint32_t)(group6 % 225);
    group6 /= 225;

    (*output)[2] = (uint32_t)(group6 % 225);
    group6 /= 225;

    (*output)[1] = (uint32_t)(group6 % 225);
    group6 /= 225;

    (*output)[0] = (uint32_t)(group6 % 225);
    group6 /= 225;
    *output += 6;

    uint64_t group7 = (*(uint64_t *)((*input) + 41)) >> 1;    group7 &= (1ull << 47) - 1;
    (*output)[5] = (uint32_t)(group7 % 225);
    group7 /= 225;

    (*output)[4] = (uint32_t)(group7 % 225);
    group7 /= 225;

    (*output)[3] = (uint32_t)(group7 % 225);
    group7 /= 225;

    (*output)[2] = (uint32_t)(group7 % 225);
    group7 /= 225;

    (*output)[1] = (uint32_t)(group7 % 225);
    group7 /= 225;

    (*output)[0] = (uint32_t)(group7 % 225);
    group7 /= 225;
    *output += 6;


    *input += 47;
}

// Unpack 47 bytes into 48 values
void Ultrapack_Decompress226(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 47) - 1;
    (*output)[5] = (uint32_t)(group0 % 226);
    group0 /= 226;

    (*output)[4] = (uint32_t)(group0 % 226);
    group0 /= 226;

    (*output)[3] = (uint32_t)(group0 % 226);
    group0 /= 226;

    (*output)[2] = (uint32_t)(group0 % 226);
    group0 /= 226;

    (*output)[1] = (uint32_t)(group0 % 226);
    group0 /= 226;

    (*output)[0] = (uint32_t)(group0 % 226);
    group0 /= 226;
    *output += 6;

    uint64_t group1 = (*(uint64_t *)((*input) + 5)) >> 7;    group1 &= (1ull << 47) - 1;
    (*output)[5] = (uint32_t)(group1 % 226);
    group1 /= 226;

    (*output)[4] = (uint32_t)(group1 % 226);
    group1 /= 226;

    (*output)[3] = (uint32_t)(group1 % 226);
    group1 /= 226;

    (*output)[2] = (uint32_t)(group1 % 226);
    group1 /= 226;

    (*output)[1] = (uint32_t)(group1 % 226);
    group1 /= 226;

    (*output)[0] = (uint32_t)(group1 % 226);
    group1 /= 226;
    *output += 6;

    uint64_t group2 = (*(uint64_t *)((*input) + 11)) >> 6;    group2 &= (1ull << 47) - 1;
    (*output)[5] = (uint32_t)(group2 % 226);
    group2 /= 226;

    (*output)[4] = (uint32_t)(group2 % 226);
    group2 /= 226;

    (*output)[3] = (uint32_t)(group2 % 226);
    group2 /= 226;

    (*output)[2] = (uint32_t)(group2 % 226);
    group2 /= 226;

    (*output)[1] = (uint32_t)(group2 % 226);
    group2 /= 226;

    (*output)[0] = (uint32_t)(group2 % 226);
    group2 /= 226;
    *output += 6;

    uint64_t group3 = (*(uint64_t *)((*input) + 17)) >> 5;    group3 &= (1ull << 47) - 1;
    (*output)[5] = (uint32_t)(group3 % 226);
    group3 /= 226;

    (*output)[4] = (uint32_t)(group3 % 226);
    group3 /= 226;

    (*output)[3] = (uint32_t)(group3 % 226);
    group3 /= 226;

    (*output)[2] = (uint32_t)(group3 % 226);
    group3 /= 226;

    (*output)[1] = (uint32_t)(group3 % 226);
    group3 /= 226;

    (*output)[0] = (uint32_t)(group3 % 226);
    group3 /= 226;
    *output += 6;

    uint64_t group4 = (*(uint64_t *)((*input) + 23)) >> 4;    group4 &= (1ull << 47) - 1;
    (*output)[5] = (uint32_t)(group4 % 226);
    group4 /= 226;

    (*output)[4] = (uint32_t)(group4 % 226);
    group4 /= 226;

    (*output)[3] = (uint32_t)(group4 % 226);
    group4 /= 226;

    (*output)[2] = (uint32_t)(group4 % 226);
    group4 /= 226;

    (*output)[1] = (uint32_t)(group4 % 226);
    group4 /= 226;

    (*output)[0] = (uint32_t)(group4 % 226);
    group4 /= 226;
    *output += 6;

    uint64_t group5 = (*(uint64_t *)((*input) + 29)) >> 3;    group5 &= (1ull << 47) - 1;
    (*output)[5] = (uint32_t)(group5 % 226);
    group5 /= 226;

    (*output)[4] = (uint32_t)(group5 % 226);
    group5 /= 226;

    (*output)[3] = (uint32_t)(group5 % 226);
    group5 /= 226;

    (*output)[2] = (uint32_t)(group5 % 226);
    group5 /= 226;

    (*output)[1] = (uint32_t)(group5 % 226);
    group5 /= 226;

    (*output)[0] = (uint32_t)(group5 % 226);
    group5 /= 226;
    *output += 6;

    uint64_t group6 = (*(uint64_t *)((*input) + 35)) >> 2;    group6 &= (1ull << 47) - 1;
    (*output)[5] = (uint32_t)(group6 % 226);
    group6 /= 226;

    (*output)[4] = (uint32_t)(group6 % 226);
    group6 /= 226;

    (*output)[3] = (uint32_t)(group6 % 226);
    group6 /= 226;

    (*output)[2] = (uint32_t)(group6 % 226);
    group6 /= 226;

    (*output)[1] = (uint32_t)(group6 % 226);
    group6 /= 226;

    (*output)[0] = (uint32_t)(group6 % 226);
    group6 /= 226;
    *output += 6;

    uint64_t group7 = (*(uint64_t *)((*input) + 41)) >> 1;    group7 &= (1ull << 47) - 1;
    (*output)[5] = (uint32_t)(group7 % 226);
    group7 /= 226;

    (*output)[4] = (uint32_t)(group7 % 226);
    group7 /= 226;

    (*output)[3] = (uint32_t)(group7 % 226);
    group7 /= 226;

    (*output)[2] = (uint32_t)(group7 % 226);
    group7 /= 226;

    (*output)[1] = (uint32_t)(group7 % 226);
    group7 /= 226;

    (*output)[0] = (uint32_t)(group7 % 226);
    group7 /= 226;
    *output += 6;


    *input += 47;
}

// Unpack 47 bytes into 48 values
void Ultrapack_Decompress227(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 47) - 1;
    (*output)[5] = (uint32_t)(group0 % 227);
    group0 /= 227;

    (*output)[4] = (uint32_t)(group0 % 227);
    group0 /= 227;

    (*output)[3] = (uint32_t)(group0 % 227);
    group0 /= 227;

    (*output)[2] = (uint32_t)(group0 % 227);
    group0 /= 227;

    (*output)[1] = (uint32_t)(group0 % 227);
    group0 /= 227;

    (*output)[0] = (uint32_t)(group0 % 227);
    group0 /= 227;
    *output += 6;

    uint64_t group1 = (*(uint64_t *)((*input) + 5)) >> 7;    group1 &= (1ull << 47) - 1;
    (*output)[5] = (uint32_t)(group1 % 227);
    group1 /= 227;

    (*output)[4] = (uint32_t)(group1 % 227);
    group1 /= 227;

    (*output)[3] = (uint32_t)(group1 % 227);
    group1 /= 227;

    (*output)[2] = (uint32_t)(group1 % 227);
    group1 /= 227;

    (*output)[1] = (uint32_t)(group1 % 227);
    group1 /= 227;

    (*output)[0] = (uint32_t)(group1 % 227);
    group1 /= 227;
    *output += 6;

    uint64_t group2 = (*(uint64_t *)((*input) + 11)) >> 6;    group2 &= (1ull << 47) - 1;
    (*output)[5] = (uint32_t)(group2 % 227);
    group2 /= 227;

    (*output)[4] = (uint32_t)(group2 % 227);
    group2 /= 227;

    (*output)[3] = (uint32_t)(group2 % 227);
    group2 /= 227;

    (*output)[2] = (uint32_t)(group2 % 227);
    group2 /= 227;

    (*output)[1] = (uint32_t)(group2 % 227);
    group2 /= 227;

    (*output)[0] = (uint32_t)(group2 % 227);
    group2 /= 227;
    *output += 6;

    uint64_t group3 = (*(uint64_t *)((*input) + 17)) >> 5;    group3 &= (1ull << 47) - 1;
    (*output)[5] = (uint32_t)(group3 % 227);
    group3 /= 227;

    (*output)[4] = (uint32_t)(group3 % 227);
    group3 /= 227;

    (*output)[3] = (uint32_t)(group3 % 227);
    group3 /= 227;

    (*output)[2] = (uint32_t)(group3 % 227);
    group3 /= 227;

    (*output)[1] = (uint32_t)(group3 % 227);
    group3 /= 227;

    (*output)[0] = (uint32_t)(group3 % 227);
    group3 /= 227;
    *output += 6;

    uint64_t group4 = (*(uint64_t *)((*input) + 23)) >> 4;    group4 &= (1ull << 47) - 1;
    (*output)[5] = (uint32_t)(group4 % 227);
    group4 /= 227;

    (*output)[4] = (uint32_t)(group4 % 227);
    group4 /= 227;

    (*output)[3] = (uint32_t)(group4 % 227);
    group4 /= 227;

    (*output)[2] = (uint32_t)(group4 % 227);
    group4 /= 227;

    (*output)[1] = (uint32_t)(group4 % 227);
    group4 /= 227;

    (*output)[0] = (uint32_t)(group4 % 227);
    group4 /= 227;
    *output += 6;

    uint64_t group5 = (*(uint64_t *)((*input) + 29)) >> 3;    group5 &= (1ull << 47) - 1;
    (*output)[5] = (uint32_t)(group5 % 227);
    group5 /= 227;

    (*output)[4] = (uint32_t)(group5 % 227);
    group5 /= 227;

    (*output)[3] = (uint32_t)(group5 % 227);
    group5 /= 227;

    (*output)[2] = (uint32_t)(group5 % 227);
    group5 /= 227;

    (*output)[1] = (uint32_t)(group5 % 227);
    group5 /= 227;

    (*output)[0] = (uint32_t)(group5 % 227);
    group5 /= 227;
    *output += 6;

    uint64_t group6 = (*(uint64_t *)((*input) + 35)) >> 2;    group6 &= (1ull << 47) - 1;
    (*output)[5] = (uint32_t)(group6 % 227);
    group6 /= 227;

    (*output)[4] = (uint32_t)(group6 % 227);
    group6 /= 227;

    (*output)[3] = (uint32_t)(group6 % 227);
    group6 /= 227;

    (*output)[2] = (uint32_t)(group6 % 227);
    group6 /= 227;

    (*output)[1] = (uint32_t)(group6 % 227);
    group6 /= 227;

    (*output)[0] = (uint32_t)(group6 % 227);
    group6 /= 227;
    *output += 6;

    uint64_t group7 = (*(uint64_t *)((*input) + 41)) >> 1;    group7 &= (1ull << 47) - 1;
    (*output)[5] = (uint32_t)(group7 % 227);
    group7 /= 227;

    (*output)[4] = (uint32_t)(group7 % 227);
    group7 /= 227;

    (*output)[3] = (uint32_t)(group7 % 227);
    group7 /= 227;

    (*output)[2] = (uint32_t)(group7 % 227);
    group7 /= 227;

    (*output)[1] = (uint32_t)(group7 % 227);
    group7 /= 227;

    (*output)[0] = (uint32_t)(group7 % 227);
    group7 /= 227;
    *output += 6;


    *input += 47;
}

// Unpack 47 bytes into 48 values
void Ultrapack_Decompress228(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 47) - 1;
    (*output)[5] = (uint32_t)(group0 % 228);
    group0 /= 228;

    (*output)[4] = (uint32_t)(group0 % 228);
    group0 /= 228;

    (*output)[3] = (uint32_t)(group0 % 228);
    group0 /= 228;

    (*output)[2] = (uint32_t)(group0 % 228);
    group0 /= 228;

    (*output)[1] = (uint32_t)(group0 % 228);
    group0 /= 228;

    (*output)[0] = (uint32_t)(group0 % 228);
    group0 /= 228;
    *output += 6;

    uint64_t group1 = (*(uint64_t *)((*input) + 5)) >> 7;    group1 &= (1ull << 47) - 1;
    (*output)[5] = (uint32_t)(group1 % 228);
    group1 /= 228;

    (*output)[4] = (uint32_t)(group1 % 228);
    group1 /= 228;

    (*output)[3] = (uint32_t)(group1 % 228);
    group1 /= 228;

    (*output)[2] = (uint32_t)(group1 % 228);
    group1 /= 228;

    (*output)[1] = (uint32_t)(group1 % 228);
    group1 /= 228;

    (*output)[0] = (uint32_t)(group1 % 228);
    group1 /= 228;
    *output += 6;

    uint64_t group2 = (*(uint64_t *)((*input) + 11)) >> 6;    group2 &= (1ull << 47) - 1;
    (*output)[5] = (uint32_t)(group2 % 228);
    group2 /= 228;

    (*output)[4] = (uint32_t)(group2 % 228);
    group2 /= 228;

    (*output)[3] = (uint32_t)(group2 % 228);
    group2 /= 228;

    (*output)[2] = (uint32_t)(group2 % 228);
    group2 /= 228;

    (*output)[1] = (uint32_t)(group2 % 228);
    group2 /= 228;

    (*output)[0] = (uint32_t)(group2 % 228);
    group2 /= 228;
    *output += 6;

    uint64_t group3 = (*(uint64_t *)((*input) + 17)) >> 5;    group3 &= (1ull << 47) - 1;
    (*output)[5] = (uint32_t)(group3 % 228);
    group3 /= 228;

    (*output)[4] = (uint32_t)(group3 % 228);
    group3 /= 228;

    (*output)[3] = (uint32_t)(group3 % 228);
    group3 /= 228;

    (*output)[2] = (uint32_t)(group3 % 228);
    group3 /= 228;

    (*output)[1] = (uint32_t)(group3 % 228);
    group3 /= 228;

    (*output)[0] = (uint32_t)(group3 % 228);
    group3 /= 228;
    *output += 6;

    uint64_t group4 = (*(uint64_t *)((*input) + 23)) >> 4;    group4 &= (1ull << 47) - 1;
    (*output)[5] = (uint32_t)(group4 % 228);
    group4 /= 228;

    (*output)[4] = (uint32_t)(group4 % 228);
    group4 /= 228;

    (*output)[3] = (uint32_t)(group4 % 228);
    group4 /= 228;

    (*output)[2] = (uint32_t)(group4 % 228);
    group4 /= 228;

    (*output)[1] = (uint32_t)(group4 % 228);
    group4 /= 228;

    (*output)[0] = (uint32_t)(group4 % 228);
    group4 /= 228;
    *output += 6;

    uint64_t group5 = (*(uint64_t *)((*input) + 29)) >> 3;    group5 &= (1ull << 47) - 1;
    (*output)[5] = (uint32_t)(group5 % 228);
    group5 /= 228;

    (*output)[4] = (uint32_t)(group5 % 228);
    group5 /= 228;

    (*output)[3] = (uint32_t)(group5 % 228);
    group5 /= 228;

    (*output)[2] = (uint32_t)(group5 % 228);
    group5 /= 228;

    (*output)[1] = (uint32_t)(group5 % 228);
    group5 /= 228;

    (*output)[0] = (uint32_t)(group5 % 228);
    group5 /= 228;
    *output += 6;

    uint64_t group6 = (*(uint64_t *)((*input) + 35)) >> 2;    group6 &= (1ull << 47) - 1;
    (*output)[5] = (uint32_t)(group6 % 228);
    group6 /= 228;

    (*output)[4] = (uint32_t)(group6 % 228);
    group6 /= 228;

    (*output)[3] = (uint32_t)(group6 % 228);
    group6 /= 228;

    (*output)[2] = (uint32_t)(group6 % 228);
    group6 /= 228;

    (*output)[1] = (uint32_t)(group6 % 228);
    group6 /= 228;

    (*output)[0] = (uint32_t)(group6 % 228);
    group6 /= 228;
    *output += 6;

    uint64_t group7 = (*(uint64_t *)((*input) + 41)) >> 1;    group7 &= (1ull << 47) - 1;
    (*output)[5] = (uint32_t)(group7 % 228);
    group7 /= 228;

    (*output)[4] = (uint32_t)(group7 % 228);
    group7 /= 228;

    (*output)[3] = (uint32_t)(group7 % 228);
    group7 /= 228;

    (*output)[2] = (uint32_t)(group7 % 228);
    group7 /= 228;

    (*output)[1] = (uint32_t)(group7 % 228);
    group7 /= 228;

    (*output)[0] = (uint32_t)(group7 % 228);
    group7 /= 228;
    *output += 6;


    *input += 47;
}

// Unpack 55 bytes into 56 values
void Ultrapack_Decompress229(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 55) - 1;
    (*output)[6] = (uint32_t)(group0 % 229);
    group0 /= 229;

    (*output)[5] = (uint32_t)(group0 % 229);
    group0 /= 229;

    (*output)[4] = (uint32_t)(group0 % 229);
    group0 /= 229;

    (*output)[3] = (uint32_t)(group0 % 229);
    group0 /= 229;

    (*output)[2] = (uint32_t)(group0 % 229);
    group0 /= 229;

    (*output)[1] = (uint32_t)(group0 % 229);
    group0 /= 229;

    (*output)[0] = (uint32_t)(group0 % 229);
    group0 /= 229;
    *output += 7;

    uint64_t group1 = (*(uint64_t *)((*input) + 6)) >> 7;    group1 &= (1ull << 55) - 1;
    (*output)[6] = (uint32_t)(group1 % 229);
    group1 /= 229;

    (*output)[5] = (uint32_t)(group1 % 229);
    group1 /= 229;

    (*output)[4] = (uint32_t)(group1 % 229);
    group1 /= 229;

    (*output)[3] = (uint32_t)(group1 % 229);
    group1 /= 229;

    (*output)[2] = (uint32_t)(group1 % 229);
    group1 /= 229;

    (*output)[1] = (uint32_t)(group1 % 229);
    group1 /= 229;

    (*output)[0] = (uint32_t)(group1 % 229);
    group1 /= 229;
    *output += 7;

    uint64_t group2 = (*(uint64_t *)((*input) + 13)) >> 6;    group2 &= (1ull << 55) - 1;
    (*output)[6] = (uint32_t)(group2 % 229);
    group2 /= 229;

    (*output)[5] = (uint32_t)(group2 % 229);
    group2 /= 229;

    (*output)[4] = (uint32_t)(group2 % 229);
    group2 /= 229;

    (*output)[3] = (uint32_t)(group2 % 229);
    group2 /= 229;

    (*output)[2] = (uint32_t)(group2 % 229);
    group2 /= 229;

    (*output)[1] = (uint32_t)(group2 % 229);
    group2 /= 229;

    (*output)[0] = (uint32_t)(group2 % 229);
    group2 /= 229;
    *output += 7;

    uint64_t group3 = (*(uint64_t *)((*input) + 20)) >> 5;    group3 &= (1ull << 55) - 1;
    (*output)[6] = (uint32_t)(group3 % 229);
    group3 /= 229;

    (*output)[5] = (uint32_t)(group3 % 229);
    group3 /= 229;

    (*output)[4] = (uint32_t)(group3 % 229);
    group3 /= 229;

    (*output)[3] = (uint32_t)(group3 % 229);
    group3 /= 229;

    (*output)[2] = (uint32_t)(group3 % 229);
    group3 /= 229;

    (*output)[1] = (uint32_t)(group3 % 229);
    group3 /= 229;

    (*output)[0] = (uint32_t)(group3 % 229);
    group3 /= 229;
    *output += 7;

    uint64_t group4 = (*(uint64_t *)((*input) + 27)) >> 4;    group4 &= (1ull << 55) - 1;
    (*output)[6] = (uint32_t)(group4 % 229);
    group4 /= 229;

    (*output)[5] = (uint32_t)(group4 % 229);
    group4 /= 229;

    (*output)[4] = (uint32_t)(group4 % 229);
    group4 /= 229;

    (*output)[3] = (uint32_t)(group4 % 229);
    group4 /= 229;

    (*output)[2] = (uint32_t)(group4 % 229);
    group4 /= 229;

    (*output)[1] = (uint32_t)(group4 % 229);
    group4 /= 229;

    (*output)[0] = (uint32_t)(group4 % 229);
    group4 /= 229;
    *output += 7;

    uint64_t group5 = (*(uint64_t *)((*input) + 34)) >> 3;    group5 &= (1ull << 55) - 1;
    (*output)[6] = (uint32_t)(group5 % 229);
    group5 /= 229;

    (*output)[5] = (uint32_t)(group5 % 229);
    group5 /= 229;

    (*output)[4] = (uint32_t)(group5 % 229);
    group5 /= 229;

    (*output)[3] = (uint32_t)(group5 % 229);
    group5 /= 229;

    (*output)[2] = (uint32_t)(group5 % 229);
    group5 /= 229;

    (*output)[1] = (uint32_t)(group5 % 229);
    group5 /= 229;

    (*output)[0] = (uint32_t)(group5 % 229);
    group5 /= 229;
    *output += 7;

    uint64_t group6 = (*(uint64_t *)((*input) + 41)) >> 2;    group6 &= (1ull << 55) - 1;
    (*output)[6] = (uint32_t)(group6 % 229);
    group6 /= 229;

    (*output)[5] = (uint32_t)(group6 % 229);
    group6 /= 229;

    (*output)[4] = (uint32_t)(group6 % 229);
    group6 /= 229;

    (*output)[3] = (uint32_t)(group6 % 229);
    group6 /= 229;

    (*output)[2] = (uint32_t)(group6 % 229);
    group6 /= 229;

    (*output)[1] = (uint32_t)(group6 % 229);
    group6 /= 229;

    (*output)[0] = (uint32_t)(group6 % 229);
    group6 /= 229;
    *output += 7;

    uint64_t group7 = (*(uint64_t *)((*input) + 48)) >> 1;    group7 &= (1ull << 55) - 1;
    (*output)[6] = (uint32_t)(group7 % 229);
    group7 /= 229;

    (*output)[5] = (uint32_t)(group7 % 229);
    group7 /= 229;

    (*output)[4] = (uint32_t)(group7 % 229);
    group7 /= 229;

    (*output)[3] = (uint32_t)(group7 % 229);
    group7 /= 229;

    (*output)[2] = (uint32_t)(group7 % 229);
    group7 /= 229;

    (*output)[1] = (uint32_t)(group7 % 229);
    group7 /= 229;

    (*output)[0] = (uint32_t)(group7 % 229);
    group7 /= 229;
    *output += 7;


    *input += 55;
}

// Unpack 55 bytes into 56 values
void Ultrapack_Decompress230(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 55) - 1;
    (*output)[6] = (uint32_t)(group0 % 230);
    group0 /= 230;

    (*output)[5] = (uint32_t)(group0 % 230);
    group0 /= 230;

    (*output)[4] = (uint32_t)(group0 % 230);
    group0 /= 230;

    (*output)[3] = (uint32_t)(group0 % 230);
    group0 /= 230;

    (*output)[2] = (uint32_t)(group0 % 230);
    group0 /= 230;

    (*output)[1] = (uint32_t)(group0 % 230);
    group0 /= 230;

    (*output)[0] = (uint32_t)(group0 % 230);
    group0 /= 230;
    *output += 7;

    uint64_t group1 = (*(uint64_t *)((*input) + 6)) >> 7;    group1 &= (1ull << 55) - 1;
    (*output)[6] = (uint32_t)(group1 % 230);
    group1 /= 230;

    (*output)[5] = (uint32_t)(group1 % 230);
    group1 /= 230;

    (*output)[4] = (uint32_t)(group1 % 230);
    group1 /= 230;

    (*output)[3] = (uint32_t)(group1 % 230);
    group1 /= 230;

    (*output)[2] = (uint32_t)(group1 % 230);
    group1 /= 230;

    (*output)[1] = (uint32_t)(group1 % 230);
    group1 /= 230;

    (*output)[0] = (uint32_t)(group1 % 230);
    group1 /= 230;
    *output += 7;

    uint64_t group2 = (*(uint64_t *)((*input) + 13)) >> 6;    group2 &= (1ull << 55) - 1;
    (*output)[6] = (uint32_t)(group2 % 230);
    group2 /= 230;

    (*output)[5] = (uint32_t)(group2 % 230);
    group2 /= 230;

    (*output)[4] = (uint32_t)(group2 % 230);
    group2 /= 230;

    (*output)[3] = (uint32_t)(group2 % 230);
    group2 /= 230;

    (*output)[2] = (uint32_t)(group2 % 230);
    group2 /= 230;

    (*output)[1] = (uint32_t)(group2 % 230);
    group2 /= 230;

    (*output)[0] = (uint32_t)(group2 % 230);
    group2 /= 230;
    *output += 7;

    uint64_t group3 = (*(uint64_t *)((*input) + 20)) >> 5;    group3 &= (1ull << 55) - 1;
    (*output)[6] = (uint32_t)(group3 % 230);
    group3 /= 230;

    (*output)[5] = (uint32_t)(group3 % 230);
    group3 /= 230;

    (*output)[4] = (uint32_t)(group3 % 230);
    group3 /= 230;

    (*output)[3] = (uint32_t)(group3 % 230);
    group3 /= 230;

    (*output)[2] = (uint32_t)(group3 % 230);
    group3 /= 230;

    (*output)[1] = (uint32_t)(group3 % 230);
    group3 /= 230;

    (*output)[0] = (uint32_t)(group3 % 230);
    group3 /= 230;
    *output += 7;

    uint64_t group4 = (*(uint64_t *)((*input) + 27)) >> 4;    group4 &= (1ull << 55) - 1;
    (*output)[6] = (uint32_t)(group4 % 230);
    group4 /= 230;

    (*output)[5] = (uint32_t)(group4 % 230);
    group4 /= 230;

    (*output)[4] = (uint32_t)(group4 % 230);
    group4 /= 230;

    (*output)[3] = (uint32_t)(group4 % 230);
    group4 /= 230;

    (*output)[2] = (uint32_t)(group4 % 230);
    group4 /= 230;

    (*output)[1] = (uint32_t)(group4 % 230);
    group4 /= 230;

    (*output)[0] = (uint32_t)(group4 % 230);
    group4 /= 230;
    *output += 7;

    uint64_t group5 = (*(uint64_t *)((*input) + 34)) >> 3;    group5 &= (1ull << 55) - 1;
    (*output)[6] = (uint32_t)(group5 % 230);
    group5 /= 230;

    (*output)[5] = (uint32_t)(group5 % 230);
    group5 /= 230;

    (*output)[4] = (uint32_t)(group5 % 230);
    group5 /= 230;

    (*output)[3] = (uint32_t)(group5 % 230);
    group5 /= 230;

    (*output)[2] = (uint32_t)(group5 % 230);
    group5 /= 230;

    (*output)[1] = (uint32_t)(group5 % 230);
    group5 /= 230;

    (*output)[0] = (uint32_t)(group5 % 230);
    group5 /= 230;
    *output += 7;

    uint64_t group6 = (*(uint64_t *)((*input) + 41)) >> 2;    group6 &= (1ull << 55) - 1;
    (*output)[6] = (uint32_t)(group6 % 230);
    group6 /= 230;

    (*output)[5] = (uint32_t)(group6 % 230);
    group6 /= 230;

    (*output)[4] = (uint32_t)(group6 % 230);
    group6 /= 230;

    (*output)[3] = (uint32_t)(group6 % 230);
    group6 /= 230;

    (*output)[2] = (uint32_t)(group6 % 230);
    group6 /= 230;

    (*output)[1] = (uint32_t)(group6 % 230);
    group6 /= 230;

    (*output)[0] = (uint32_t)(group6 % 230);
    group6 /= 230;
    *output += 7;

    uint64_t group7 = (*(uint64_t *)((*input) + 48)) >> 1;    group7 &= (1ull << 55) - 1;
    (*output)[6] = (uint32_t)(group7 % 230);
    group7 /= 230;

    (*output)[5] = (uint32_t)(group7 % 230);
    group7 /= 230;

    (*output)[4] = (uint32_t)(group7 % 230);
    group7 /= 230;

    (*output)[3] = (uint32_t)(group7 % 230);
    group7 /= 230;

    (*output)[2] = (uint32_t)(group7 % 230);
    group7 /= 230;

    (*output)[1] = (uint32_t)(group7 % 230);
    group7 /= 230;

    (*output)[0] = (uint32_t)(group7 % 230);
    group7 /= 230;
    *output += 7;


    *input += 55;
}

// Unpack 55 bytes into 56 values
void Ultrapack_Decompress231(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 55) - 1;
    (*output)[6] = (uint32_t)(group0 % 231);
    group0 /= 231;

    (*output)[5] = (uint32_t)(group0 % 231);
    group0 /= 231;

    (*output)[4] = (uint32_t)(group0 % 231);
    group0 /= 231;

    (*output)[3] = (uint32_t)(group0 % 231);
    group0 /= 231;

    (*output)[2] = (uint32_t)(group0 % 231);
    group0 /= 231;

    (*output)[1] = (uint32_t)(group0 % 231);
    group0 /= 231;

    (*output)[0] = (uint32_t)(group0 % 231);
    group0 /= 231;
    *output += 7;

    uint64_t group1 = (*(uint64_t *)((*input) + 6)) >> 7;    group1 &= (1ull << 55) - 1;
    (*output)[6] = (uint32_t)(group1 % 231);
    group1 /= 231;

    (*output)[5] = (uint32_t)(group1 % 231);
    group1 /= 231;

    (*output)[4] = (uint32_t)(group1 % 231);
    group1 /= 231;

    (*output)[3] = (uint32_t)(group1 % 231);
    group1 /= 231;

    (*output)[2] = (uint32_t)(group1 % 231);
    group1 /= 231;

    (*output)[1] = (uint32_t)(group1 % 231);
    group1 /= 231;

    (*output)[0] = (uint32_t)(group1 % 231);
    group1 /= 231;
    *output += 7;

    uint64_t group2 = (*(uint64_t *)((*input) + 13)) >> 6;    group2 &= (1ull << 55) - 1;
    (*output)[6] = (uint32_t)(group2 % 231);
    group2 /= 231;

    (*output)[5] = (uint32_t)(group2 % 231);
    group2 /= 231;

    (*output)[4] = (uint32_t)(group2 % 231);
    group2 /= 231;

    (*output)[3] = (uint32_t)(group2 % 231);
    group2 /= 231;

    (*output)[2] = (uint32_t)(group2 % 231);
    group2 /= 231;

    (*output)[1] = (uint32_t)(group2 % 231);
    group2 /= 231;

    (*output)[0] = (uint32_t)(group2 % 231);
    group2 /= 231;
    *output += 7;

    uint64_t group3 = (*(uint64_t *)((*input) + 20)) >> 5;    group3 &= (1ull << 55) - 1;
    (*output)[6] = (uint32_t)(group3 % 231);
    group3 /= 231;

    (*output)[5] = (uint32_t)(group3 % 231);
    group3 /= 231;

    (*output)[4] = (uint32_t)(group3 % 231);
    group3 /= 231;

    (*output)[3] = (uint32_t)(group3 % 231);
    group3 /= 231;

    (*output)[2] = (uint32_t)(group3 % 231);
    group3 /= 231;

    (*output)[1] = (uint32_t)(group3 % 231);
    group3 /= 231;

    (*output)[0] = (uint32_t)(group3 % 231);
    group3 /= 231;
    *output += 7;

    uint64_t group4 = (*(uint64_t *)((*input) + 27)) >> 4;    group4 &= (1ull << 55) - 1;
    (*output)[6] = (uint32_t)(group4 % 231);
    group4 /= 231;

    (*output)[5] = (uint32_t)(group4 % 231);
    group4 /= 231;

    (*output)[4] = (uint32_t)(group4 % 231);
    group4 /= 231;

    (*output)[3] = (uint32_t)(group4 % 231);
    group4 /= 231;

    (*output)[2] = (uint32_t)(group4 % 231);
    group4 /= 231;

    (*output)[1] = (uint32_t)(group4 % 231);
    group4 /= 231;

    (*output)[0] = (uint32_t)(group4 % 231);
    group4 /= 231;
    *output += 7;

    uint64_t group5 = (*(uint64_t *)((*input) + 34)) >> 3;    group5 &= (1ull << 55) - 1;
    (*output)[6] = (uint32_t)(group5 % 231);
    group5 /= 231;

    (*output)[5] = (uint32_t)(group5 % 231);
    group5 /= 231;

    (*output)[4] = (uint32_t)(group5 % 231);
    group5 /= 231;

    (*output)[3] = (uint32_t)(group5 % 231);
    group5 /= 231;

    (*output)[2] = (uint32_t)(group5 % 231);
    group5 /= 231;

    (*output)[1] = (uint32_t)(group5 % 231);
    group5 /= 231;

    (*output)[0] = (uint32_t)(group5 % 231);
    group5 /= 231;
    *output += 7;

    uint64_t group6 = (*(uint64_t *)((*input) + 41)) >> 2;    group6 &= (1ull << 55) - 1;
    (*output)[6] = (uint32_t)(group6 % 231);
    group6 /= 231;

    (*output)[5] = (uint32_t)(group6 % 231);
    group6 /= 231;

    (*output)[4] = (uint32_t)(group6 % 231);
    group6 /= 231;

    (*output)[3] = (uint32_t)(group6 % 231);
    group6 /= 231;

    (*output)[2] = (uint32_t)(group6 % 231);
    group6 /= 231;

    (*output)[1] = (uint32_t)(group6 % 231);
    group6 /= 231;

    (*output)[0] = (uint32_t)(group6 % 231);
    group6 /= 231;
    *output += 7;

    uint64_t group7 = (*(uint64_t *)((*input) + 48)) >> 1;    group7 &= (1ull << 55) - 1;
    (*output)[6] = (uint32_t)(group7 % 231);
    group7 /= 231;

    (*output)[5] = (uint32_t)(group7 % 231);
    group7 /= 231;

    (*output)[4] = (uint32_t)(group7 % 231);
    group7 /= 231;

    (*output)[3] = (uint32_t)(group7 % 231);
    group7 /= 231;

    (*output)[2] = (uint32_t)(group7 % 231);
    group7 /= 231;

    (*output)[1] = (uint32_t)(group7 % 231);
    group7 /= 231;

    (*output)[0] = (uint32_t)(group7 % 231);
    group7 /= 231;
    *output += 7;


    *input += 55;
}

// Unpack 1 bytes into 1 values
void Ultrapack_Decompress232(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 8) - 1;
    (*output)[0] = (uint32_t)(group0 % 232);
    group0 /= 232;
    *output += 1;


    *input += 1;
}

// Unpack 1 bytes into 1 values
void Ultrapack_Decompress233(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 8) - 1;
    (*output)[0] = (uint32_t)(group0 % 233);
    group0 /= 233;
    *output += 1;


    *input += 1;
}

// Unpack 1 bytes into 1 values
void Ultrapack_Decompress234(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 8) - 1;
    (*output)[0] = (uint32_t)(group0 % 234);
    group0 /= 234;
    *output += 1;


    *input += 1;
}

// Unpack 1 bytes into 1 values
void Ultrapack_Decompress235(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 8) - 1;
    (*output)[0] = (uint32_t)(group0 % 235);
    group0 /= 235;
    *output += 1;


    *input += 1;
}

// Unpack 1 bytes into 1 values
void Ultrapack_Decompress236(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 8) - 1;
    (*output)[0] = (uint32_t)(group0 % 236);
    group0 /= 236;
    *output += 1;


    *input += 1;
}

// Unpack 1 bytes into 1 values
void Ultrapack_Decompress237(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 8) - 1;
    (*output)[0] = (uint32_t)(group0 % 237);
    group0 /= 237;
    *output += 1;


    *input += 1;
}

// Unpack 1 bytes into 1 values
void Ultrapack_Decompress238(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 8) - 1;
    (*output)[0] = (uint32_t)(group0 % 238);
    group0 /= 238;
    *output += 1;


    *input += 1;
}

// Unpack 1 bytes into 1 values
void Ultrapack_Decompress239(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 8) - 1;
    (*output)[0] = (uint32_t)(group0 % 239);
    group0 /= 239;
    *output += 1;


    *input += 1;
}

// Unpack 1 bytes into 1 values
void Ultrapack_Decompress240(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 8) - 1;
    (*output)[0] = (uint32_t)(group0 % 240);
    group0 /= 240;
    *output += 1;


    *input += 1;
}

// Unpack 1 bytes into 1 values
void Ultrapack_Decompress241(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 8) - 1;
    (*output)[0] = (uint32_t)(group0 % 241);
    group0 /= 241;
    *output += 1;


    *input += 1;
}

// Unpack 1 bytes into 1 values
void Ultrapack_Decompress242(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 8) - 1;
    (*output)[0] = (uint32_t)(group0 % 242);
    group0 /= 242;
    *output += 1;


    *input += 1;
}

// Unpack 1 bytes into 1 values
void Ultrapack_Decompress243(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 8) - 1;
    (*output)[0] = (uint32_t)(group0 % 243);
    group0 /= 243;
    *output += 1;


    *input += 1;
}

// Unpack 1 bytes into 1 values
void Ultrapack_Decompress244(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 8) - 1;
    (*output)[0] = (uint32_t)(group0 % 244);
    group0 /= 244;
    *output += 1;


    *input += 1;
}

// Unpack 1 bytes into 1 values
void Ultrapack_Decompress245(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 8) - 1;
    (*output)[0] = (uint32_t)(group0 % 245);
    group0 /= 245;
    *output += 1;


    *input += 1;
}

// Unpack 1 bytes into 1 values
void Ultrapack_Decompress246(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 8) - 1;
    (*output)[0] = (uint32_t)(group0 % 246);
    group0 /= 246;
    *output += 1;


    *input += 1;
}

// Unpack 1 bytes into 1 values
void Ultrapack_Decompress247(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 8) - 1;
    (*output)[0] = (uint32_t)(group0 % 247);
    group0 /= 247;
    *output += 1;


    *input += 1;
}

// Unpack 1 bytes into 1 values
void Ultrapack_Decompress248(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 8) - 1;
    (*output)[0] = (uint32_t)(group0 % 248);
    group0 /= 248;
    *output += 1;


    *input += 1;
}

// Unpack 1 bytes into 1 values
void Ultrapack_Decompress249(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 8) - 1;
    (*output)[0] = (uint32_t)(group0 % 249);
    group0 /= 249;
    *output += 1;


    *input += 1;
}

// Unpack 1 bytes into 1 values
void Ultrapack_Decompress250(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 8) - 1;
    (*output)[0] = (uint32_t)(group0 % 250);
    group0 /= 250;
    *output += 1;


    *input += 1;
}

// Unpack 1 bytes into 1 values
void Ultrapack_Decompress251(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 8) - 1;
    (*output)[0] = (uint32_t)(group0 % 251);
    group0 /= 251;
    *output += 1;


    *input += 1;
}

// Unpack 1 bytes into 1 values
void Ultrapack_Decompress252(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 8) - 1;
    (*output)[0] = (uint32_t)(group0 % 252);
    group0 /= 252;
    *output += 1;


    *input += 1;
}

// Unpack 1 bytes into 1 values
void Ultrapack_Decompress253(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 8) - 1;
    (*output)[0] = (uint32_t)(group0 % 253);
    group0 /= 253;
    *output += 1;


    *input += 1;
}

// Unpack 1 bytes into 1 values
void Ultrapack_Decompress254(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 8) - 1;
    (*output)[0] = (uint32_t)(group0 % 254);
    group0 /= 254;
    *output += 1;


    *input += 1;
}

// Unpack 1 bytes into 1 values
void Ultrapack_Decompress255(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 8) - 1;
    (*output)[0] = (uint32_t)(group0 % 255);
    group0 /= 255;
    *output += 1;


    *input += 1;
}

// Unpack 1 bytes into 1 values
void Ultrapack_Decompress256(const uint8_t **input, uint32_t **output)
{
    uint64_t group0 = (*(uint64_t *)((*input) + 0)) >> 0;    group0 &= (1ull << 8) - 1;
    (*output)[0] = (uint32_t)(group0 % 256);
    group0 /= 256;
    *output += 1;


    *input += 1;
}


typedef void (*DecompressFn)(const uint8_t **, uint32_t **);
DecompressFn UltrapackDecompress[] =
{
    0,
    0,
    Ultrapack_Decompress2,
    Ultrapack_Decompress3,
    Ultrapack_Decompress4,
    Ultrapack_Decompress5,
    Ultrapack_Decompress6,
    Ultrapack_Decompress7,
    Ultrapack_Decompress8,
    Ultrapack_Decompress9,
    Ultrapack_Decompress10,
    Ultrapack_Decompress11,
    Ultrapack_Decompress12,
    Ultrapack_Decompress13,
    Ultrapack_Decompress14,
    Ultrapack_Decompress15,
    Ultrapack_Decompress16,
    Ultrapack_Decompress17,
    Ultrapack_Decompress18,
    Ultrapack_Decompress19,
    Ultrapack_Decompress20,
    Ultrapack_Decompress21,
    Ultrapack_Decompress22,
    Ultrapack_Decompress23,
    Ultrapack_Decompress24,
    Ultrapack_Decompress25,
    Ultrapack_Decompress26,
    Ultrapack_Decompress27,
    Ultrapack_Decompress28,
    Ultrapack_Decompress29,
    Ultrapack_Decompress30,
    Ultrapack_Decompress31,
    Ultrapack_Decompress32,
    Ultrapack_Decompress33,
    Ultrapack_Decompress34,
    Ultrapack_Decompress35,
    Ultrapack_Decompress36,
    Ultrapack_Decompress37,
    Ultrapack_Decompress38,
    Ultrapack_Decompress39,
    Ultrapack_Decompress40,
    Ultrapack_Decompress41,
    Ultrapack_Decompress42,
    Ultrapack_Decompress43,
    Ultrapack_Decompress44,
    Ultrapack_Decompress45,
    Ultrapack_Decompress46,
    Ultrapack_Decompress47,
    Ultrapack_Decompress48,
    Ultrapack_Decompress49,
    Ultrapack_Decompress50,
    Ultrapack_Decompress51,
    Ultrapack_Decompress52,
    Ultrapack_Decompress53,
    Ultrapack_Decompress54,
    Ultrapack_Decompress55,
    Ultrapack_Decompress56,
    Ultrapack_Decompress57,
    Ultrapack_Decompress58,
    Ultrapack_Decompress59,
    Ultrapack_Decompress60,
    Ultrapack_Decompress61,
    Ultrapack_Decompress62,
    Ultrapack_Decompress63,
    Ultrapack_Decompress64,
    Ultrapack_Decompress65,
    Ultrapack_Decompress66,
    Ultrapack_Decompress67,
    Ultrapack_Decompress68,
    Ultrapack_Decompress69,
    Ultrapack_Decompress70,
    Ultrapack_Decompress71,
    Ultrapack_Decompress72,
    Ultrapack_Decompress73,
    Ultrapack_Decompress74,
    Ultrapack_Decompress75,
    Ultrapack_Decompress76,
    Ultrapack_Decompress77,
    Ultrapack_Decompress78,
    Ultrapack_Decompress79,
    Ultrapack_Decompress80,
    Ultrapack_Decompress81,
    Ultrapack_Decompress82,
    Ultrapack_Decompress83,
    Ultrapack_Decompress84,
    Ultrapack_Decompress85,
    Ultrapack_Decompress86,
    Ultrapack_Decompress87,
    Ultrapack_Decompress88,
    Ultrapack_Decompress89,
    Ultrapack_Decompress90,
    Ultrapack_Decompress91,
    Ultrapack_Decompress92,
    Ultrapack_Decompress93,
    Ultrapack_Decompress94,
    Ultrapack_Decompress95,
    Ultrapack_Decompress96,
    Ultrapack_Decompress97,
    Ultrapack_Decompress98,
    Ultrapack_Decompress99,
    Ultrapack_Decompress100,
    Ultrapack_Decompress101,
    Ultrapack_Decompress102,
    Ultrapack_Decompress103,
    Ultrapack_Decompress104,
    Ultrapack_Decompress105,
    Ultrapack_Decompress106,
    Ultrapack_Decompress107,
    Ultrapack_Decompress108,
    Ultrapack_Decompress109,
    Ultrapack_Decompress110,
    Ultrapack_Decompress111,
    Ultrapack_Decompress112,
    Ultrapack_Decompress113,
    Ultrapack_Decompress114,
    Ultrapack_Decompress115,
    Ultrapack_Decompress116,
    Ultrapack_Decompress117,
    Ultrapack_Decompress118,
    Ultrapack_Decompress119,
    Ultrapack_Decompress120,
    Ultrapack_Decompress121,
    Ultrapack_Decompress122,
    Ultrapack_Decompress123,
    Ultrapack_Decompress124,
    Ultrapack_Decompress125,
    Ultrapack_Decompress126,
    Ultrapack_Decompress127,
    Ultrapack_Decompress128,
    Ultrapack_Decompress129,
    Ultrapack_Decompress130,
    Ultrapack_Decompress131,
    Ultrapack_Decompress132,
    Ultrapack_Decompress133,
    Ultrapack_Decompress134,
    Ultrapack_Decompress135,
    Ultrapack_Decompress136,
    Ultrapack_Decompress137,
    Ultrapack_Decompress138,
    Ultrapack_Decompress139,
    Ultrapack_Decompress140,
    Ultrapack_Decompress141,
    Ultrapack_Decompress142,
    Ultrapack_Decompress143,
    Ultrapack_Decompress144,
    Ultrapack_Decompress145,
    Ultrapack_Decompress146,
    Ultrapack_Decompress147,
    Ultrapack_Decompress148,
    Ultrapack_Decompress149,
    Ultrapack_Decompress150,
    Ultrapack_Decompress151,
    Ultrapack_Decompress152,
    Ultrapack_Decompress153,
    Ultrapack_Decompress154,
    Ultrapack_Decompress155,
    Ultrapack_Decompress156,
    Ultrapack_Decompress157,
    Ultrapack_Decompress158,
    Ultrapack_Decompress159,
    Ultrapack_Decompress160,
    Ultrapack_Decompress161,
    Ultrapack_Decompress162,
    Ultrapack_Decompress163,
    Ultrapack_Decompress164,
    Ultrapack_Decompress165,
    Ultrapack_Decompress166,
    Ultrapack_Decompress167,
    Ultrapack_Decompress168,
    Ultrapack_Decompress169,
    Ultrapack_Decompress170,
    Ultrapack_Decompress171,
    Ultrapack_Decompress172,
    Ultrapack_Decompress173,
    Ultrapack_Decompress174,
    Ultrapack_Decompress175,
    Ultrapack_Decompress176,
    Ultrapack_Decompress177,
    Ultrapack_Decompress178,
    Ultrapack_Decompress179,
    Ultrapack_Decompress180,
    Ultrapack_Decompress181,
    Ultrapack_Decompress182,
    Ultrapack_Decompress183,
    Ultrapack_Decompress184,
    Ultrapack_Decompress185,
    Ultrapack_Decompress186,
    Ultrapack_Decompress187,
    Ultrapack_Decompress188,
    Ultrapack_Decompress189,
    Ultrapack_Decompress190,
    Ultrapack_Decompress191,
    Ultrapack_Decompress192,
    Ultrapack_Decompress193,
    Ultrapack_Decompress194,
    Ultrapack_Decompress195,
    Ultrapack_Decompress196,
    Ultrapack_Decompress197,
    Ultrapack_Decompress198,
    Ultrapack_Decompress199,
    Ultrapack_Decompress200,
    Ultrapack_Decompress201,
    Ultrapack_Decompress202,
    Ultrapack_Decompress203,
    Ultrapack_Decompress204,
    Ultrapack_Decompress205,
    Ultrapack_Decompress206,
    Ultrapack_Decompress207,
    Ultrapack_Decompress208,
    Ultrapack_Decompress209,
    Ultrapack_Decompress210,
    Ultrapack_Decompress211,
    Ultrapack_Decompress212,
    Ultrapack_Decompress213,
    Ultrapack_Decompress214,
    Ultrapack_Decompress215,
    Ultrapack_Decompress216,
    Ultrapack_Decompress217,
    Ultrapack_Decompress218,
    Ultrapack_Decompress219,
    Ultrapack_Decompress220,
    Ultrapack_Decompress221,
    Ultrapack_Decompress222,
    Ultrapack_Decompress223,
    Ultrapack_Decompress224,
    Ultrapack_Decompress225,
    Ultrapack_Decompress226,
    Ultrapack_Decompress227,
    Ultrapack_Decompress228,
    Ultrapack_Decompress229,
    Ultrapack_Decompress230,
    Ultrapack_Decompress231,
    Ultrapack_Decompress232,
    Ultrapack_Decompress233,
    Ultrapack_Decompress234,
    Ultrapack_Decompress235,
    Ultrapack_Decompress236,
    Ultrapack_Decompress237,
    Ultrapack_Decompress238,
    Ultrapack_Decompress239,
    Ultrapack_Decompress240,
    Ultrapack_Decompress241,
    Ultrapack_Decompress242,
    Ultrapack_Decompress243,
    Ultrapack_Decompress244,
    Ultrapack_Decompress245,
    Ultrapack_Decompress246,
    Ultrapack_Decompress247,
    Ultrapack_Decompress248,
    Ultrapack_Decompress249,
    Ultrapack_Decompress250,
    Ultrapack_Decompress251,
    Ultrapack_Decompress252,
    Ultrapack_Decompress253,
    Ultrapack_Decompress254,
    Ultrapack_Decompress255,
    Ultrapack_Decompress256,
};
